/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 23:52:36 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import module.Message;
import module.MessageFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MessageFactory_ESTest extends MessageFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      System.setCurrentTimeMillis(0L);
      Message message0 = MessageFactory.createWarningMessage("> ", objectArray0);
      assertEquals("*", message0.getRecipient());
      assertEquals("WARNING", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-1675L));
      Object[] objectArray0 = new Object[7];
      Message message0 = MessageFactory.createWarningMessage("~t:~+rP}w&(_`", objectArray0);
      assertEquals("*", message0.getRecipient());
      assertEquals("WARNING", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("~t:~+rP}w&(_`", "~t:~+rP}w&(_`", (Object) "~t:~+rP}w&(_`");
      Object[] objectArray0 = new Object[7];
      Message message1 = new Message("ID: ", message0);
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject(message1);
      Message message2 = MessageFactory.createWarningMessage("~t:~+rP}w&(_`", objectArray0);
      assertEquals("*", message2.getRecipient());
      assertEquals("WARNING", message2.getHeader());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("Drawing ", "X=%:$E", (Object) "Drawing ");
      assertEquals("X=%:$E", message0.getRecipient());
      assertEquals("Drawing ", message0.getHeader());
      
      Object[] objectArray0 = new Object[7];
      Message message1 = MessageFactory.createWarningMessage("> ", objectArray0);
      assertEquals("*", message1.getRecipient());
      assertEquals("WARNING", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MessageFactory.createMessage("Drawing ", "X=%:$E", (Object) "Drawing ");
      System.setCurrentTimeMillis(0L);
      Message message0 = MessageFactory.createUnloadMessage("DROPPED");
      assertEquals("KERNEL", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MessageFactory.createMessage("~t:~+rP}w&(_`", "~t:~+rP}w&(_`", (Object) "~t:~+rP}w&(_`");
      System.setCurrentTimeMillis((-1675L));
      Message message0 = MessageFactory.createUnloadMessage("nf");
      assertEquals("*", message0.getRecipient());
      assertEquals("KERNEL", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createUnloadMessage("gangup");
      assertEquals("*", message1.getRecipient());
      assertEquals("KERNEL", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      Message message0 = MessageFactory.createMessage("WARNING", "", (Object) "");
      assertEquals("", message0.getRecipient());
      assertEquals("WARNING", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("~t:~+rP}w&(_`", "~t:~+rP}w&(_`", (Object) "~t:~+rP}w&(_`");
      System.setCurrentTimeMillis((-1675L));
      Message message1 = MessageFactory.createMessage("ID: ", "nf", (Object) message0);
      assertEquals("nf", message1.getRecipient());
      assertEquals("ID: ", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message("gui.PlayerTree", "gui.PlayerTree", messageFactory0);
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createMessage("gui.PlayerTree", "gui.PlayerTree", (Object) message0.UNDEFINED);
      assertEquals(3000L, message1.getTTL());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Message message0 = MessageFactory.createWarningMessage("WARNING", objectArray0);
      assertEquals("WARNING", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      
      Object object0 = new Object();
      System.setCurrentTimeMillis(0);
      Message message1 = MessageFactory.createMessage("WARNING", object0);
      assertEquals("WARNING", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("~t:~+rP}w&(_`", "~t:~+rP}w&(_`", (Object) "~t:~+rP}w&(_`");
      System.setCurrentTimeMillis((-1675L));
      Message message1 = MessageFactory.createMessage("ID: ", (Object) message0);
      assertEquals("ID: ", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MessageFactory.getInstance();
      Message message0 = MessageFactory.createMessage((String) null, (Object) null);
      assertEquals("*", message0.getRecipient());
      assertEquals("", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = messageFactory0.createMessage();
      assertEquals("", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Message message0 = MessageFactory.createWarningMessage("C{o0QN$7@tRZ", (Object[]) null);
      assertEquals("*", message0.getRecipient());
      assertEquals("WARNING", message0.getHeader());
      
      System.setCurrentTimeMillis((-1454L));
      MessageFactory messageFactory0 = MessageFactory.instance;
      Message message1 = messageFactory0.createMessage();
      assertEquals("*", message1.getRecipient());
      assertEquals("", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = messageFactory0.createMessage();
      assertEquals("", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Message message0 = MessageFactory.createMessage(",ptate=", "", (Object) null);
      assertEquals("", message0.getRecipient());
      assertEquals(",ptate=", message0.getHeader());
      
      System.setCurrentTimeMillis(0L);
      Message message1 = MessageFactory.createErrorMessage("hCNNzTCRvEATE_FILE", (Object[]) null);
      assertEquals("ERROR", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MessageFactory.createMessage("~t:~+rP}w&(_`", "~t:~+rP}w&(_`", (Object) "~t:~+rP}w&(_`");
      System.setCurrentTimeMillis((-1675L));
      Object[] objectArray0 = new Object[7];
      Message message0 = MessageFactory.createErrorMessage("ID: ", objectArray0);
      assertEquals("*", message0.getRecipient());
      assertEquals("ERROR", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MessageFactory.getInstance();
      Message message0 = MessageFactory.createErrorMessage("OP5ihdb' \"d", (Object[]) null);
      assertEquals("ERROR", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      Message message0 = MessageFactory.createConnectionDroppedMessage(0, ">'nW_");
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-1675L));
      Message message0 = MessageFactory.createConnectionDroppedMessage(0, "~t:~+rP}w&(_`");
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("~t:~+rP}w&(_`", "~t:~+rP}w&(_`", (Object) "~t:~+rP}w&(_`");
      Message message1 = new Message("ID: ", message0);
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject(message1);
      Message message2 = MessageFactory.createConnectionDroppedMessage(1, "ID: ");
      assertEquals("*", message2.getRecipient());
      assertEquals("DROPPED", message2.getHeader());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        MessageFactory.createWarningMessage(" , ", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        MessageFactory.createUnloadMessage("xF9CJ7PB~nj`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        MessageFactory.createMessage((String) null, "n/se!I!\"", (Object) "n/se!I!\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFactory.createMessage("", (Object) "");
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        messageFactory0.createMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        MessageFactory.createConnectionDroppedMessage((-851), " , ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFactory.createUnloadMessage("nf");
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFactory.createErrorMessage("hCNNzTCRvEATE_FILE", (Object[]) null);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
