/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:26:01 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HTClause_ESTest extends HTClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      int[] intArray0 = new int[7];
      intArray0[1] = 5000;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(7, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 5000, 0, 0, 0, 0, 0}, intArray0);
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(7, learntHTClause0.size());
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 5000, 0, 0, 0, 0, 0}, intArray0);
      
      DotSearchTracing<MixedDataStructureDanielWLConciseBinary> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWLConciseBinary>("6uig^:~e:");
      assertNotNull(dotSearchTracing0);
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4954, 0);
      assertNotNull(vecInt0);
      assertEquals(4954, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(4954, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      
      VecInt vecInt1 = new VecInt(90, (-1515));
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.isEmpty());
      assertEquals(90, vecInt1.size());
      assertEquals((-1515), vecInt1.last());
      
      int int0 = learntHTClause0.getAssertionLevel(vecInt1, (-1515));
      assertEquals((-1), int0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(4954, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertFalse(vecInt1.isEmpty());
      assertEquals(90, vecInt1.size());
      assertEquals((-1515), vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2408, (-768));
      assertNotNull(vecInt0);
      assertEquals((-768), vecInt0.last());
      assertEquals(2408, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      IVecInt iVecInt0 = vecInt0.push(1502);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(2409, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1502, vecInt0.last());
      assertEquals(2409, iVecInt0.size());
      assertEquals(1502, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(iVecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(2409, learntHTClause0.size());
      
      VecInt vecInt1 = new VecInt(2408, 6);
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(2408, vecInt1.size());
      assertEquals(6, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      int int0 = learntHTClause0.getAssertionLevel(vecInt1, (-768));
      assertEquals((-1), int0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(2409, learntHTClause0.size());
      assertEquals(2408, vecInt1.size());
      assertEquals(6, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 2804;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2804, 0}, intArray0);
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(4, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2804, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        learntHTClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 569;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      int int0 = lits0.getFromPool(3798);
      assertEquals(7596, int0);
      assertEquals(1, lits0.realnVars());
      assertEquals(3798, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, lits0.realnVars());
      assertEquals(3798, lits0.nVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(4, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
      
      boolean boolean0 = learntHTClause0.isSatisfied();
      assertFalse(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, lits0.realnVars());
      assertEquals(3798, lits0.nVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(4, learntHTClause0.size());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      assertNotNull(vecInt0);
      assertEquals(5000, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt1 = new VecInt(0, (-714));
      assertNotNull(vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      assertNotNull(originalHTClause0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalHTClause0.simplify());
      assertEquals(5000, originalHTClause0.size());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertFalse(originalHTClause0.learnt());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.locked());
      assertFalse(originalHTClause0.isSatisfied());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      
      originalHTClause0.calcReasonOnTheFly(1328, vecInt1, vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalHTClause0.simplify());
      assertEquals(5000, originalHTClause0.size());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertFalse(originalHTClause0.learnt());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.locked());
      assertFalse(originalHTClause0.isSatisfied());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 9;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 9, 0, 0}, intArray0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
      assertNotNull(originalHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(originalHTClause0.locked());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.learnt());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(originalHTClause0.isSatisfied());
      assertEquals(4, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalHTClause0.simplify());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 9, 0, 0}, intArray0);
      
      originalHTClause0.hashCode();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertFalse(originalHTClause0.locked());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.learnt());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(originalHTClause0.isSatisfied());
      assertEquals(4, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalHTClause0.simplify());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 9, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
      assertNotNull(originalHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(4, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.learnt());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray0);
      
      originalHTClause0.hashCode();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(4, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.learnt());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.last());
      assertEquals(5000, vecInt0.size());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      learntHTClause0.tail = 496;
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      int[] intArray0 = learntHTClause0.getLits();
      assertNotNull(intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(5000, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1165;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(9, vecInt0.size());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1165, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(9, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {1165, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt(90, (-1515));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(90, vecInt0.size());
      assertEquals((-1515), vecInt0.last());
      
      vecInt0.ensure(1165);
      assertFalse(vecInt0.isEmpty());
      assertEquals(90, vecInt0.size());
      assertEquals((-1515), vecInt0.last());
      
      vecInt0.unsafePush(1165);
      assertEquals(1165, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(91, vecInt0.size());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(21);
      assertNotNull(fixedLengthLearning0);
      assertEquals(21, fixedLengthLearning0.getMaxLength());
      
      PureOrder pureOrder0 = new PureOrder(168);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(168, pureOrder0.getPeriod());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(21, fixedLengthLearning0.getMaxLength());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(168, pureOrder0.getPeriod());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(91, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraint(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertEquals(5000, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      learntHTClause0.rescaleBy(1690.58595914148);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        learntHTClause0.get((-1185));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1186
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt(90, (-1515));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1515), vecInt0.last());
      assertEquals(90, vecInt0.size());
      
      vecInt0.ensure(1165);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1515), vecInt0.last());
      assertEquals(90, vecInt0.size());
      
      vecInt0.unsafePush(1165);
      assertFalse(vecInt0.isEmpty());
      assertEquals(91, vecInt0.size());
      assertEquals(1165, vecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(91, learntHTClause0.size());
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-188);
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(8, vecInt0.size());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-188), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(8, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-188), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        learntHTClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -94
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(5000, learntHTClause0.size());
      
      // Undeclared exception!
      try { 
        learntHTClause0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(5000, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      IVecInt iVecInt0 = vecInt0.push(4993);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(5001, vecInt0.size());
      assertEquals(4993, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(5001, iVecInt0.size());
      assertEquals(4993, iVecInt0.last());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(iVecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5001, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-2126));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2126), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2126), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      
      // Undeclared exception!
      try { 
        learntHTClause0.propagate(solver0, (-2126));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt(90, (-1515));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(90, vecInt0.size());
      assertEquals((-1515), vecInt0.last());
      
      vecInt0.ensure(1165);
      assertFalse(vecInt0.isEmpty());
      assertEquals(90, vecInt0.size());
      assertEquals((-1515), vecInt0.last());
      
      vecInt0.unsafePush(1165);
      assertEquals(1165, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(91, vecInt0.size());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
      assertNotNull(originalHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(91, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(originalHTClause0.learnt());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        originalHTClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 569;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      assertNotNull(originalHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(4, originalHTClause0.size());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.learnt());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      // Undeclared exception!
      try { 
        originalHTClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 2804;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2804, 0}, intArray0);
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.locked());
      assertEquals(4, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 2804, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        learntHTClause0.calcReason(2804, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 569;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      int int0 = lits0.getFromPool(3798);
      assertEquals(7596, int0);
      assertEquals(1, lits0.realnVars());
      assertEquals(3798, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, lits0.realnVars());
      assertEquals(3798, lits0.nVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(4, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.locked());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
      
      learntHTClause0.calcReason(2804, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, lits0.realnVars());
      assertEquals(3798, lits0.nVars());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(4, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.locked());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt(514, 514);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(514, vecInt0.last());
      assertEquals(514, vecInt0.size());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(514, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      int int0 = learntHTClause0.size();
      assertEquals(514, int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(514, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(5000, vecInt0.size());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(5000, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      
      double double0 = learntHTClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.locked());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.isSatisfied());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(5000, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.last());
      assertEquals(5000, vecInt0.size());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      int int0 = learntHTClause0.get(3080);
      assertEquals(5000, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      assertNotNull(vecInt0);
      assertEquals(5000, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(5000, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      DotSearchTracing<MixedDataStructureDanielWLConciseBinary> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWLConciseBinary>("6uig^:~e:");
      assertNotNull(dotSearchTracing0);
      
      dotSearchTracing0.learn(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(5000, learntHTClause0.size());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.simplify());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      
      // Undeclared exception!
      learntHTClause0.toString((VarMapper) dotSearchTracing0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      assertNotNull(vecInt0);
      assertEquals(5000, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.locked());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 569;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(4, learntHTClause0.size());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {569, 0, 0, 0}, intArray0);
      
      DotSearchTracing<MixedDataStructureDanielWLConciseBinary> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWLConciseBinary>(" /u*HC5-P+");
      assertNotNull(dotSearchTracing0);
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertEquals(5000, vecInt0.size());
      assertEquals(5000, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(5000, learntHTClause0.size());
      
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt(90, 90);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(90, vecInt0.last());
      assertEquals(90, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(90, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.learnt());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        learntHTClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4998, (-2008));
      assertNotNull(vecInt0);
      assertEquals(4998, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2008), vecInt0.last());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      assertNotNull(originalHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, originalHTClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(originalHTClause0.learnt());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertTrue(originalHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(originalHTClause0.canBePropagatedMultipleTimes());
      assertEquals(4998, originalHTClause0.size());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-5703.2131776898));
      assertNotNull(activeLearning0);
      assertEquals((-5703.2131776898), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals((-5703.2131776898), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        originalHTClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2007
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertEquals(5000, vecInt0.size());
      assertEquals(5000, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(5000, learntHTClause0.size());
      
      // Undeclared exception!
      try { 
        learntHTClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4967, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4967, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertFalse(learntHTClause0.locked());
      assertEquals(4967, learntHTClause0.size());
      assertFalse(learntHTClause0.isSatisfied());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.simplify());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        learntHTClause0.getAssertionLevel((IVecInt) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.last());
      assertEquals(5000, vecInt0.size());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        learntHTClause0.calcReason((-3997), vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.size());
      assertEquals(5000, vecInt0.last());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertEquals(5000, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.size());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertEquals(5000, learntHTClause0.size());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertEquals(5000, vecInt0.size());
      assertEquals(5000, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      assertNotNull(learntHTClause0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(learntHTClause0.learnt());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(5000, learntHTClause0.size());
      
      // Undeclared exception!
      try { 
        learntHTClause0.get(5000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4999
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5000, vecInt0.size());
      assertEquals(5000, vecInt0.last());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      assertNotNull(learntHTClause0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(learntHTClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, learntHTClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(learntHTClause0.learnt());
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      // Undeclared exception!
      try { 
        noLearningNoHeuristics0.claBumpActivity(learntHTClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.AbstractLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      DotSearchTracing<MixedDataStructureDanielWLConciseBinary> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureDanielWLConciseBinary>("");
      learntHTClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5000, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      IVecInt iVecInt0 = vecInt0.push(0);
      int int0 = learntHTClause0.getAssertionLevel(iVecInt0, 4980);
      assertEquals(0, int0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5000, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2408, (-768));
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.hashCode();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(2408, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(5000, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 10);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.equals(vecInt0);
      assertFalse(boolean0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5000, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5000, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      int int0 = learntHTClause0.get(0);
      assertEquals(5000, learntHTClause0.size());
      assertEquals(0, int0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.toString();
      // Undeclared exception!
      learntHTClause0.toString();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 10);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.locked();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(5000, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4954, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.simplify();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(4954, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.calcReasonOnTheFly(0, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.getVocabulary();
      assertEquals(5000, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      int int0 = learntHTClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5000, learntHTClause0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 10);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5000, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      Constr constr0 = learntHTClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(5000, constr0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      boolean boolean0 = learntHTClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(5000, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      EMARestarts eMARestarts0 = new EMARestarts();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, eMARestarts0);
      learntHTClause0.assertConstraint(solver0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5000, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5000, 5000);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, iLits0);
      learntHTClause0.rescaleBy(0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(5000, learntHTClause0.size());
  }
}
