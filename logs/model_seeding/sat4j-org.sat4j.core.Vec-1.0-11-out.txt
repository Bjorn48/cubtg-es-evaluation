* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.core.Vec
* Starting Client-0
* Connecting to master process on port 21779
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.core.Vec
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1334
* Using seed 1550511867795
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 418 / 1334
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.7298850574712644
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6631578947368421
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.610981308411215
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.868421052631579
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6631578947368421
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 298
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.867816091954023
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7894736842105263
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8563084112149533
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5263157894736842
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9210526315789473
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7368421052631579
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 397
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8735632183908046
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8105263157894737
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8633177570093458
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5263157894736842
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9210526315789473
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7473684210526316
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 496
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9137931034482759
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8421052631578947
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8855140186915887
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5526315789473685
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7789473684210526
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 556
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9310344827586207
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8631578947368421
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8983644859813084
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5789473684210527
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9310344827586207
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8631578947368421
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8983644859813084
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5789473684210527
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8
* Search finished after 124s and 4 generations, 6421 statements, best individual has fitness: 149.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9310344827586207
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8631578947368421
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8983644859813084
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5789473684210527
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8
* Minimizing test suite
[MASTER] 18:47:56.411 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 174
* Number of covered goals: 162
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 95
* Number of covered goals: 82
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 25
* Number of covered goals: 25
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 856
* Number of covered goals: 777
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 38
* Number of covered goals: 22
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 38
* Number of covered goals: 38
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 97%
* Total number of goals: 38
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 95
* Number of covered goals: 76
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9310344827586207
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8631578947368421
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8983644859813084
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5789473684210527
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8
* Generated 97 tests with total length 1696
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 18:48:42.880 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7172166666666666% of time used, but only 5/97 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9310344827586207
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8631578947368421
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8983644859813084
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5789473684210527
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.9473684210526315
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8
* Compiling and checking tests
[MASTER] 18:49:36.500 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.Vec;
[MASTER] 18:49:36.503 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 354;
Integer integer0 = new Integer(354);
assertTrue(integer0.equals((Object)int0));
assertEquals(354, (int)integer0);
assertNotNull(integer0);

int int1 = integer0.intValue();
assertTrue(integer0.equals((Object)int0));
assertTrue(int1 == int0);
assertEquals(354, int1);

Vec<Integer> vec0 = new Vec<Integer>(0, (Integer) 354);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertNotNull(vec0);

vec0.insertFirstWithShifting(integer0);
assertTrue(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertFalse(vec0.isEmpty());
assertEquals(1, vec0.size());

Vec<Object> vec1 = new Vec<Object>();
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());
assertNotNull(vec1);

Integer integer1 = new Integer(354);
assertTrue(integer1.equals((Object)int1));
assertTrue(integer1.equals((Object)integer0));
assertTrue(integer1.equals((Object)int0));
assertEquals(354, (int)integer1);
assertNotNull(integer1);

vec0.insertFirst(integer0);
assertTrue(integer0.equals((Object)integer1));
assertTrue(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertFalse(vec0.isEmpty());
assertEquals(2, vec0.size());

Vec<Comparable<Object>> vec2 = new Vec<Comparable<Object>>(354);
assertTrue(vec2.isEmpty());
assertEquals(0, vec2.size());
assertNotNull(vec2);

String string0 = vec2.toString();
assertEquals("", string0);
assertTrue(vec2.isEmpty());
assertEquals(0, vec2.size());
assertNotNull(string0);

Integer[] integerArray0 = new Integer[4];
integerArray0[0] = integer0;
integerArray0[1] = integer0;
integerArray0[2] = integer0;
integerArray0[3] = integer0;
vec0.copyTo(integerArray0);
assertEquals(4, integerArray0.length);
assertFalse(vec0.isEmpty());
assertEquals(2, vec0.size());

Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(3062, vec1);
assertEquals(3062, vec3.size());
assertFalse(vec3.isEmpty());
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());
assertNotNull(vec3);

vec3.shrinkTo(0);
assertEquals(0, vec3.size());
assertTrue(vec3.isEmpty());
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());

Vec<Object>[] vecArray0 = vec3.toArray();
assertEquals(3062, vecArray0.length);
assertEquals(0, vec3.size());
assertTrue(vec3.isEmpty());
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());
assertNotNull(vecArray0);

Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>();
assertEquals(0, vec4.size());
assertTrue(vec4.isEmpty());
assertNotNull(vec4);

int int2 = 1522;
Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
vec2.growTo(1522, comparable0);
assertFalse(vec2.isEmpty());
assertEquals(1522, vec2.size());

boolean boolean0 = vec4.isEmpty();
assertTrue(boolean0);
assertEquals(0, vec4.size());
assertTrue(vec4.isEmpty());

Iterator<Object> iterator0 = vec1.iterator();
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());
assertNotNull(iterator0);

Vec<String> vec5 = new Vec<String>((-1410), "");

[MASTER] 18:49:37.046 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.ReadOnlyVec;
[MASTER] 18:49:37.049 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<Object> vec0 = new Vec<Object>(0);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());
assertNotNull(vec0);

IVec<Object> iVec0 = vec0.push((Object) null);
assertFalse(vec0.isEmpty());
assertEquals(1, vec0.size());
assertFalse(iVec0.isEmpty());
assertEquals(1, iVec0.size());
assertNotNull(iVec0);

ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(iVec0);
assertFalse(vec0.isEmpty());
assertEquals(1, vec0.size());
assertFalse(iVec0.isEmpty());
assertEquals(1, iVec0.size());
assertEquals(1, readOnlyVec0.size());
assertFalse(readOnlyVec0.isEmpty());
assertNotNull(readOnlyVec0);

Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(0, readOnlyVec0);
assertFalse(vec0.isEmpty());
assertEquals(1, vec0.size());
assertFalse(iVec0.isEmpty());
assertEquals(1, iVec0.size());
assertEquals(1, readOnlyVec0.size());
assertFalse(readOnlyVec0.isEmpty());
assertEquals(0, vec1.size());
assertTrue(vec1.isEmpty());
assertNotNull(vec1);

ReadOnlyVec<Object>[] readOnlyVecArray0 = vec1.toArray();
assertEquals(0, readOnlyVecArray0.length);
assertFalse(vec0.isEmpty());
assertEquals(1, vec0.size());
assertFalse(iVec0.isEmpty());
assertEquals(1, iVec0.size());
assertEquals(1, readOnlyVec0.size());
assertFalse(readOnlyVec0.isEmpty());
assertEquals(0, vec1.size());
assertTrue(vec1.isEmpty());
assertNotNull(readOnlyVecArray0);


[MASTER] 18:49:45.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.sat4j.core.Vec;
[MASTER] 18:49:45.792 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 354;
Integer integer0 = new Integer(354);
assertTrue(integer0.equals((Object)int0));
assertEquals(354, (int)integer0);
assertNotNull(integer0);

int int1 = integer0.intValue();
assertTrue(integer0.equals((Object)int0));
assertTrue(int1 == int0);
assertEquals(354, int1);

int int2 = integer0.intValue();
assertTrue(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals(354, int2);

Vec<Integer> vec0 = new Vec<Integer>(0, (Integer) 354);
assertEquals(0, vec0.size());
assertTrue(vec0.isEmpty());
assertNotNull(vec0);

vec0.insertFirstWithShifting(integer0);
assertTrue(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)int2));
assertEquals(1, vec0.size());
assertFalse(vec0.isEmpty());

Vec<Object> vec1 = new Vec<Object>();
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());
assertNotNull(vec1);

int int3 = vec1.hashCode();
assertFalse(int3 == int0);
assertFalse(int3 == int2);
assertFalse(int3 == int1);
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());

vec0.insertFirst(integer0);
assertTrue(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertTrue(integer0.equals((Object)int2));
assertEquals(2, vec0.size());
assertFalse(vec0.isEmpty());

Vec<Comparable<Object>> vec2 = new Vec<Comparable<Object>>(354);
assertEquals(0, vec2.size());
assertTrue(vec2.isEmpty());
assertNotNull(vec2);

String string0 = vec2.toString();
assertEquals("", string0);
assertEquals(0, vec2.size());
assertTrue(vec2.isEmpty());
assertNotNull(string0);

Integer[] integerArray0 = new Integer[4];
integerArray0[0] = integer0;
integerArray0[1] = integer0;
integerArray0[2] = integer0;
integerArray0[3] = integer0;
vec0.copyTo(integerArray0);
assertEquals(4, integerArray0.length);
assertEquals(2, vec0.size());
assertFalse(vec0.isEmpty());

Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(0, vec1);
assertEquals(0, vec3.size());
assertTrue(vec3.isEmpty());
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());
assertNotNull(vec3);

vec3.shrinkTo(0);
assertEquals(0, vec3.size());
assertTrue(vec3.isEmpty());
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());

Vec<Object>[] vecArray0 = vec3.toArray();
assertEquals(0, vecArray0.length);
assertEquals(0, vec3.size());
assertTrue(vec3.isEmpty());
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());
assertNotNull(vecArray0);

Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>();
assertEquals(0, vec4.size());
assertTrue(vec4.isEmpty());
assertNotNull(vec4);

int int4 = 1522;
Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
vec2.growTo(1522, comparable0);
assertEquals(1522, vec2.size());
assertFalse(vec2.isEmpty());

boolean boolean0 = vec4.isEmpty();
assertTrue(boolean0);
assertEquals(0, vec4.size());
assertTrue(vec4.isEmpty());

Iterator<Object> iterator0 = vec1.iterator();
assertTrue(vec1.isEmpty());
assertEquals(0, vec1.size());
assertNotNull(iterator0);

Vec<String> vec5 = new Vec<String>((-1410), "");

[MASTER] 18:49:46.366 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ArrayIndexOutOfBoundsException
[MASTER] 18:49:46.367 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Vec<String> vec0 = new Vec<String>(2, "03Zgpn]&CWVP$KJ{");
assertEquals(2, vec0.size());
assertFalse(vec0.isEmpty());
assertNotNull(vec0);

vec0.removeFromLast("03Zgpn]&CWVP$KJ{");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'Vec_ESTest' to evosuite-tests
* Done!

* Computation finished
