/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 16:02:00 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3448);
      intArray0[1] = (-168);
      intArray0[2] = 15;
      intArray0[3] = 15;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      vecInt0.indexOf(15);
      vecInt0.sortUnique();
      vecInt1.unsafeGet(2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 2273;
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      VecInt vecInt1 = new VecInt(66, (-1095));
      vecInt0.copyTo((IVecInt) vecInt1);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      vecInt1.sort(comparator1);
      int int1 = 2013;
      int int2 = 88;
      vecInt1.growTo((-1095), 88);
      int int3 = (-1);
      // Undeclared exception!
      try { 
        vecInt1.moveTo((-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 1;
      VecInt vecInt0 = new VecInt(1, 1);
      IVecInt iVecInt0 = vecInt0.push(1);
      vecInt0.selectionSort(1, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.copyTo(iVecInt0);
      intArray0[1] = 1723;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1723, 1, 1, (-3200), (-1)).when(comparator1).compare(anyInt() , anyInt());
      vecInt0.sort(comparator1);
      // Undeclared exception!
      try { 
        vecInt0.growTo(2013, 1723);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt(0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3120);
      vecInt0.equals("learnt constraints type ");
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        vecInt0.set(3120, 3120);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.toArray();
      vecInt0.sort(500, 500);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[3] = (-3448);
      intArray0[1] = (-168);
      intArray0[3] = 15;
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.pop();
      vecInt0.indexOf((-3448));
      vecInt1.isSubsetOf(vecInt0);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2273;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.equals(vecInt1);
      vecInt1.shrinkTo((-5804));
      vecInt0.containsAt((-1));
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(2, 2, comparator0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2000);
      intArray0[1] = 7;
      intArray0[2] = 12;
      intArray0[3] = 8;
      intArray0[4] = 15;
      VecInt vecInt0 = new VecInt(intArray0);
      Object object0 = new Object();
      vecInt0.push((-1072));
      vecInt0.clear();
      vecInt0.equals(object0);
      vecInt0.pop();
      vecInt0.isEmpty();
      Object object1 = new Object();
      vecInt0.equals(object1);
      vecInt0.sortUnique();
      vecInt0.ensure((-1));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[15];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      vecInt0.subset(22);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = (-2443);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-2443));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt1 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.sort(1224, 1, comparator0);
      vecInt0.moveTo2(vecInt1);
      intArray0[1] = 1;
      vecInt0.insertFirst(1);
      vecInt0.iterator();
      vecInt0.shrinkTo(1);
      vecInt0.shrink(15);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 840;
      intArray0[1] = (-36);
      intArray0[2] = 840;
      intArray0[3] = 1;
      intArray0[4] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.set(1, 1);
      vecInt0.indexOf(204);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(306);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      vecInt0.ensure(0);
      VecInt vecInt1 = new VecInt();
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.shrinkTo(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.delete(0);
      VecInt vecInt3 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt2.equals("");
      vecInt2.copyTo((IVecInt) vecInt3);
      // Undeclared exception!
      try { 
        vecInt0.set(15, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(5000);
      vecInt0.iterator();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(6);
      vecInt0.shrink(6);
      int int0 = 1;
      // Undeclared exception!
      try { 
        vecInt0.subset(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2270, 2270);
      vecInt0.shrinkTo((-2219));
      // Undeclared exception!
      try { 
        vecInt0.push(2270);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2219
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(2, 2, comparator0);
      VecInt vecInt1 = new VecInt(2479, 1031);
      // Undeclared exception!
      vecInt1.sortUnique();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-499);
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 15;
      intArray0[4] = (-2862);
      intArray0[5] = 12;
      intArray0[6] = 0;
      intArray0[7] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.equals((Object) null);
      vecInt0.shrinkTo(1);
      vecInt0.containsAt(15);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt(884);
      vecInt0.containsAt((-1437));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(177);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.equals(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.copyTo(intArray0);
      vecInt0.shrink(446);
      vecInt0.contains(973);
      // Undeclared exception!
      try { 
        vecInt0.set(8, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[15];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.push(500);
      vecInt0.sortUnique();
      vecInt1.equals(vecInt0);
      VecInt vecInt2 = new VecInt();
      vecInt2.copyTo((IVecInt) vecInt0);
      vecInt1.shrinkTo(2273);
      VecInt vecInt3 = new VecInt();
      vecInt3.containsAt(2273);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      vecInt0.toString();
      vecInt0.size();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrink(2757);
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        vecInt0.insertFirst(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2754
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-1386), (-2402));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2401
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.get(0);
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 2;
      VecInt vecInt0 = new VecInt(2);
      vecInt0.containsAt(2, 2);
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.growTo(2, 2);
      int int1 = (-2375);
      // Undeclared exception!
      try { 
        vecInt0.delete((-2375));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2375
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(1657, 1657, comparator0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.toArray();
      vecInt0.clone();
      int int0 = 5;
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1);
      iVecInt0.size();
      VecInt vecInt2 = new VecInt(1);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      VecInt vecInt3 = (VecInt)iVecInt0.push(2);
      vecInt3.size();
      int[] intArray0 = new int[3];
      intArray0[0] = 15;
      intArray0[1] = 0;
      intArray0[2] = 0;
      vecInt1.moveTo(intArray0);
      vecInt1.clear();
      vecInt1.push(2);
      vecInt0.clear();
      vecInt1.push(2);
      vecInt3.push(3712);
      vecInt2.push(53);
      vecInt1.push(2);
      vecInt0.size();
      vecInt1.isSubsetOf(vecInt3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      VecInt vecInt0 = new VecInt(893, (-1800));
      IVecInt iVecInt0 = vecInt0.push(893);
      vecInt0.growTo((-1800), 576);
      vecInt0.moveTo(iVecInt0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(906, 893, comparator0);
      vecInt0.containsAt((-1026), 4);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.selectionSort(576, 1660, comparator1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VecInt vecInt0 = new VecInt(840, 15);
      vecInt0.shrink(15);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1895, 1895);
      vecInt0.toArray();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, (-722));
      VecInt vecInt1 = new VecInt(426, (-2268));
      vecInt0.isSubsetOf(vecInt1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      System.setCurrentTimeMillis((-722));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5, 5);
      vecInt0.toString();
      int int0 = new Integer(5);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3448);
      intArray0[1] = (-168);
      intArray0[2] = 15;
      intArray0[3] = 15;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      vecInt0.equals(vecInt1);
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt1.shrinkTo(2645);
      vecInt0.containsAt(15);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      VecInt vecInt0 = new VecInt(899, (-1485));
      // Undeclared exception!
      try { 
        vecInt0.unsafePush((-2485));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 899
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2409), (-2409), (-2409), (-2409), (-2409)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2009, 2009);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 4;
      VecInt vecInt1 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt2 = new VecInt(3);
      vecInt0.sort((-2163), (-3448), (Comparator<Integer>) null);
      vecInt0.moveTo(15, 2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1);
      vecInt0.insertFirst((-1));
      vecInt0.shrink((-1));
      int int1 = (-2494);
      vecInt0.clear();
      // Undeclared exception!
      try { 
        vecInt0.delete((-2494));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2494
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[1];
      vecInt0.iterator();
      intArray0[0] = 2;
      vecInt0.moveTo(intArray0);
      vecInt0.unsafePush(7);
      int int0 = 5;
      // Undeclared exception!
      try { 
        vecInt0.growTo(15, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 15;
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IVecInt iVecInt0 = emptyVecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.pushAll(iVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 12;
      intArray0[1] = 5;
      intArray0[2] = 12;
      intArray0[3] = 1629;
      intArray0[4] = 12;
      intArray0[5] = 1831;
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1);
      iVecInt0.size();
      VecInt vecInt2 = new VecInt(1);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(2);
      iVecInt1.size();
      VecInt vecInt3 = new VecInt(1);
      iVecInt1.copyTo((IVecInt) vecInt3);
      VecInt vecInt4 = new VecInt();
      IVecInt iVecInt2 = vecInt4.push(1);
      VecInt vecInt5 = (VecInt)iVecInt2.push(2);
      vecInt5.toString();
      vecInt0.moveTo2(vecInt5);
      vecInt0.selectionSort(1831, (-426), comparator0);
      // Undeclared exception!
      try { 
        vecInt0.remove(5);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.delete(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-499);
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 15;
      intArray0[4] = (-2862);
      intArray0[5] = (-2862);
      intArray0[6] = 0;
      intArray0[7] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.shrinkTo((-499));
      vecInt0.equals((Object) null);
      int int0 = 1;
      // Undeclared exception!
      try { 
        vecInt0.subset(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 3;
      intArray0[0] = 3;
      intArray0[1] = (-1590);
      intArray0[2] = (-246);
      intArray0[3] = 128;
      int int1 = 0;
      intArray0[4] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure((-2414));
      vecInt0.sortUnique();
      vecInt0.toString();
      // Undeclared exception!
      try { 
        vecInt0.delete(512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VecInt vecInt0 = new VecInt(403);
      vecInt0.growTo(5, (-586));
      vecInt0.toArray();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1929);
      vecInt0.iterator();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 3120;
      VecInt vecInt0 = new VecInt(3120);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.pushAll(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3448);
      intArray0[1] = (-168);
      intArray0[3] = 15;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      vecInt0.equals(vecInt1);
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt1.shrinkTo(2645);
      vecInt0.containsAt(15);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[6];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 6;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(6, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      iVecInt0.size();
      vecInt0.contains(1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(6);
      // Undeclared exception!
      try { 
        vecInt0.remove((-469));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[1];
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt0.equals(vecInt1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2047);
      vecInt0.clone();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(11);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.hashCode();
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1);
      iVecInt0.size();
      VecInt vecInt2 = new VecInt(1);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(2);
      iVecInt1.size();
      int[] intArray0 = new int[3];
      intArray0[0] = 15;
      intArray0[1] = 0;
      intArray0[2] = 0;
      vecInt1.moveTo(intArray0);
      vecInt1.clear();
      VecInt vecInt3 = (VecInt)vecInt1.push(2);
      vecInt0.clear();
      iVecInt0.contains(2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt3.sort(0, (-1908), comparator0);
      iVecInt0.unsafeGet(0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2009, 2009);
      int int0 = 1;
      int int1 = 4;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 4;
      VecInt vecInt1 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.subset(1298);
      vecInt1.pushAll(vecInt0);
      vecInt1.iterator();
      vecInt1.selectionSort(4, 2, comparator0);
      vecInt1.pop();
      vecInt0.push(15);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.clone();
      vecInt0.isEmpty();
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-2197);
      int int1 = 1000;
      // Undeclared exception!
      try { 
        vecInt0.sort((-2197), 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -599
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1264);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(1930, 1930, comparator0);
      vecInt0.toString();
      vecInt0.sortUnique();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.clone();
      int int0 = 1884;
      vecInt0.insertFirst(1884);
      vecInt0.sort(1264, 1264, comparator1);
      vecInt0.growTo(341, 341);
      vecInt0.clone();
      int[] intArray0 = new int[2];
      intArray0[0] = 341;
      intArray0[1] = 1930;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1930, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 840);
      vecInt0.hashCode();
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1);
      iVecInt0.size();
      VecInt vecInt2 = new VecInt(1);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(2);
      iVecInt1.size();
      VecInt vecInt3 = new VecInt(1);
      iVecInt1.copyTo((IVecInt) vecInt3);
      assertFalse(vecInt1.isEmpty());
      
      VecInt vecInt4 = new VecInt();
      IVecInt iVecInt2 = vecInt4.push(1);
      VecInt vecInt5 = (VecInt)iVecInt2.push(2);
      boolean boolean0 = vecInt0.isSubsetOf(vecInt5);
      assertEquals(1, vecInt0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      VecInt vecInt1 = (VecInt)vecInt0.push(1);
      vecInt0.selectionSort(1, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(779).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.copyTo((IVecInt) vecInt1);
      intArray0[1] = 1723;
      vecInt0.copyTo((IVecInt) vecInt1);
      VecInt vecInt2 = new VecInt();
      vecInt1.push(3);
      vecInt2.push((-1454));
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.ensure(0);
      vecInt0.shrinkTo(0);
      vecInt0.shrink(0);
      vecInt0.growTo(0, 500);
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.subset(0);
      VecInt vecInt1 = new VecInt(106);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 106;
      intArray0[2] = 500;
      intArray0[3] = 2071;
      IteratorInt iteratorInt0 = vecInt1.iterator();
      intArray0[4] = 909;
      intArray0[5] = 2071;
      intArray0[6] = 106;
      intArray0[7] = 2071;
      vecInt1.moveTo(0, intArray0);
      vecInt0.moveTo2(vecInt1);
      vecInt0.subset(2071);
      vecInt0.size();
      vecInt0.growTo((-1), (-1));
      vecInt0.toString();
      vecInt0.size();
      vecInt0.equals(iteratorInt0);
      vecInt1.contains(1927);
      vecInt1.push(15);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.ensure(0);
      VecInt vecInt1 = new VecInt();
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.shrinkTo(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      VecInt vecInt2 = new VecInt(intArray0);
      VecInt vecInt3 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt2.equals("");
      vecInt2.copyTo((IVecInt) vecInt3);
      vecInt0.shrinkTo(0);
      vecInt0.containsAt(0);
      vecInt3.contains((-733));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2375);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-2375);
      intArray0[4] = (-2375);
      intArray0[5] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.delete(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-1780), (-2028), comparator0);
      vecInt0.shrink(Integer.MAX_VALUE);
      vecInt0.sort();
      vecInt0.shrinkTo(2002);
      vecInt0.size();
      vecInt0.clear();
      VecInt vecInt1 = new VecInt();
      vecInt0.copyTo((IVecInt) vecInt1);
      // Undeclared exception!
      try { 
        vecInt1.moveTo(2470, (-1780));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1780
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2273;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.indexOf(2273);
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1);
      iVecInt0.size();
      VecInt vecInt2 = new VecInt(1);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(2);
      iVecInt1.size();
      VecInt vecInt3 = new VecInt(1);
      iVecInt1.copyTo((IVecInt) vecInt3);
      iVecInt1.clear();
      IVecInt iVecInt2 = iVecInt1.push((-1));
      IVecInt iVecInt3 = iVecInt2.push((-2));
      iVecInt3.size();
      VecInt vecInt4 = new VecInt(2);
      iVecInt3.copyTo((IVecInt) vecInt4);
      VecInt vecInt5 = new VecInt();
      IVecInt iVecInt4 = vecInt5.push(1);
      IVecInt iVecInt5 = iVecInt4.push(2);
      IVecInt iVecInt6 = iVecInt5.push(3);
      vecInt0.copyTo(iVecInt6);
      iVecInt6.sortUnique();
      VecInt vecInt6 = new VecInt(intArray0);
      vecInt6.remove(0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2273;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(2273);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-4712), (-4712));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4711
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[1] = 2273;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrink(2293);
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt(0, 2273);
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.subset(2273);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      System.setCurrentTimeMillis((-1018L));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      IVecInt iVecInt0 = vecInt0.push(1);
      vecInt0.copyTo(iVecInt0);
      iVecInt0.iterator();
      iVecInt0.subset(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        iVecInt0.set(2013, 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[6];
      intArray0[0] = 15;
      intArray0[1] = (-168);
      intArray0[2] = 15;
      intArray0[3] = 15;
      intArray0[4] = 15;
      intArray0[5] = 2273;
      VecInt vecInt1 = new VecInt(intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = (-168);
      intArray1[1] = 15;
      intArray1[2] = 2273;
      intArray1[3] = (-1477);
      intArray1[4] = 2273;
      intArray1[5] = (-168);
      VecInt vecInt2 = new VecInt(intArray1);
      vecInt1.equals(vecInt2);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt2.shrinkTo(50);
      vecInt1.containsAt((-1477));
      vecInt1.hashCode();
      vecInt2.toArray();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2159, 2253);
      VecInt vecInt1 = new VecInt(2159, 2159);
      vecInt0.moveTo((IVecInt) vecInt1);
      Object object0 = new Object();
      vecInt0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      vecInt0.shrinkTo(2045);
      // Undeclared exception!
      try { 
        vecInt0.containsAt(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 820;
      VecInt vecInt0 = new VecInt(15, 820);
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 215;
      VecInt vecInt0 = new VecInt(215, 215);
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      VecInt vecInt1 = (VecInt)vecInt0.push(1);
      vecInt0.selectionSort(1, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt1.toString();
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 3;
      intArray1[3] = 4;
      VecInt vecInt3 = new VecInt(intArray1);
      vecInt3.size();
      vecInt0.equals(vecInt3);
      VecInt vecInt4 = new VecInt();
      vecInt4.contains(1);
      vecInt3.push(1360);
      // Undeclared exception!
      try { 
        vecInt4.set((-168), 1757);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isEmpty();
      int int0 = 6;
      // Undeclared exception!
      try { 
        vecInt0.delete(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.set((-722), (-722));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(5);
      int int0 = 984;
      vecInt0.shrinkTo(984);
      vecInt0.size();
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 512
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 4;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.ensure(6);
      vecInt0.sortUnique();
      vecInt0.shrink((-1));
      vecInt0.toString();
      vecInt0.pop();
      vecInt0.growTo((-1), (-1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[15];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.isSubsetOf(vecInt0);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 346;
      intArray0[3] = 0;
      intArray0[4] = 5;
      intArray0[5] = 4089;
      intArray0[6] = 6;
      intArray0[7] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 5;
      intArray1[1] = (-313);
      intArray1[2] = (-1);
      intArray1[3] = 6;
      intArray1[4] = 1331;
      intArray1[5] = 5;
      intArray1[6] = (-1);
      intArray1[7] = 1;
      vecInt0.moveTo(intArray1);
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3120);
      vecInt0.contains(3120);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      Object object0 = new Object();
      int int1 = 820;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      VecInt vecInt0 = new VecInt(500);
      // Undeclared exception!
      try { 
        vecInt0.sort(90, 657, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 656
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 2;
      VecInt vecInt0 = new VecInt(2);
      // Undeclared exception!
      try { 
        vecInt0.set(0, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(emptyVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2273;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.indexOf(2273);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1);
      iVecInt0.size();
      VecInt vecInt2 = new VecInt(1);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(2);
      iVecInt1.size();
      VecInt vecInt3 = new VecInt(1);
      iVecInt1.copyTo((IVecInt) vecInt3);
      VecInt vecInt4 = new VecInt();
      IVecInt iVecInt2 = vecInt4.push(1);
      IVecInt iVecInt3 = iVecInt2.push(2);
      vecInt0.copyTo(iVecInt3);
      vecInt1.sortUnique();
      // Undeclared exception!
      try { 
        iVecInt1.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt(12, 12);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1056), 12, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3448);
      intArray0[1] = (-168);
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      vecInt0.equals((Object) null);
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt0.shrinkTo(812);
      vecInt0.containsAt((-3448));
      vecInt0.contains(0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3448);
      intArray0[1] = (-168);
      intArray0[2] = 15;
      intArray0[3] = 15;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.selectionSort(929, 2, comparator0);
      vecInt0.equals(vecInt1);
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt0.delete(0);
      vecInt1.shrinkTo(2645);
      vecInt0.containsAt(15);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      int int0 = 5;
      vecInt0.shrink(5);
      vecInt0.shrink(5);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      int int1 = (-269);
      // Undeclared exception!
      try { 
        vecInt0.pushAll(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt(919, (-948));
      int[] intArray0 = new int[4];
      intArray0[0] = (-948);
      intArray0[1] = 919;
      intArray0[2] = 919;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(919, (-3839), comparator0);
      vecInt0.shrinkTo(919);
      IVecInt iVecInt0 = vecInt0.push((-292));
      vecInt0.moveTo2(iVecInt0);
      intArray0[0] = (-948);
      vecInt0.moveTo(intArray0);
      vecInt0.pop();
      vecInt0.get(2);
      // Undeclared exception!
      try { 
        vecInt0.set(215, (-948));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(408, (-3174), 408, (-3174), (-1)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort((-1738), (-1019), comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1379
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.copyTo((IVecInt) vecInt1);
      int int0 = 44;
      vecInt0.clone();
      vecInt0.clear();
      vecInt0.iterator();
      int int1 = 28;
      vecInt0.selectionSort(44, 28);
      int int2 = (-1);
      vecInt0.shrinkTo((-1));
      // Undeclared exception!
      try { 
        vecInt0.subset(28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrink((-184));
      vecInt0.sort((-72), (-72), comparator0);
      // Undeclared exception!
      try { 
        vecInt0.sortUnique();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2273;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.indexOf(2273);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[15];
      VecInt vecInt0 = new VecInt(intArray0);
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IVecInt iVecInt0 = emptyVecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(iVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VecInt vecInt0 = new VecInt(500, 500);
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt();
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      IVecInt iVecInt0 = vecInt0.push(1);
      vecInt0.selectionSort(1, 1);
      iVecInt0.set(1, 1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3448);
      intArray0[1] = (-168);
      intArray0[2] = 15;
      intArray0[3] = 15;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      vecInt1.push(15);
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.toString();
      vecInt0.push((-696));
      // Undeclared exception!
      try { 
        vecInt0.remove(5);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1699, 1699);
      int int0 = 395;
      int int1 = 2;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 4;
      VecInt vecInt1 = new VecInt(intArray0);
      int int2 = (-548);
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt1.insertFirst((-548));
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.shrinkTo(395);
      vecInt0.selectionSort(1335, 1335);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.moveTo2(iVecInt0);
      int int3 = (-1715);
      vecInt0.sortUnique();
      vecInt0.sortUnique();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort((-1715), 1335, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -190
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt(2, 2);
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.clone();
      vecInt0.subset(2);
      vecInt1.sortUnique();
      vecInt1.pop();
      vecInt0.toArray();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(2, (-297), comparator0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(5);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push((-1));
      vecInt2.growTo(6, 0);
      iVecInt0.size();
      vecInt2.set(1, 1);
      IVecInt iVecInt1 = iVecInt0.push(1);
      vecInt2.get(1);
      iVecInt1.get(1);
      iVecInt1.set(1, 1);
      vecInt2.set(1, 1);
      iVecInt1.size();
      iVecInt1.get(1);
      iVecInt1.last();
      iVecInt1.set(1, 1);
      int[] intArray0 = new int[2];
      vecInt2.iterator();
      intArray0[0] = 1;
      intArray0[1] = 1;
      VecInt vecInt3 = new VecInt(intArray0);
      vecInt2.indexOf((-1));
      vecInt0.size();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = (VecInt)vecInt1.push(1);
      VecInt vecInt3 = new VecInt(2008, 4);
      vecInt3.hashCode();
      vecInt2.copyTo((IVecInt) vecInt1);
      // Undeclared exception!
      try { 
        vecInt2.selectionSort(0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3120);
      // Undeclared exception!
      try { 
        vecInt0.set(3120, 3120);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(0);
      VecInt vecInt2 = new VecInt(0);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      VecInt vecInt3 = (VecInt)iVecInt0.push(2);
      vecInt3.size();
      int[] intArray0 = new int[3];
      intArray0[0] = 15;
      intArray0[1] = 0;
      intArray0[2] = 0;
      vecInt1.moveTo(intArray0);
      vecInt1.clear();
      vecInt1.push(2);
      vecInt0.clear();
      vecInt3.equals(vecInt2);
      iVecInt0.copyTo((IVecInt) vecInt1);
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 3;
      VecInt vecInt4 = new VecInt(intArray1);
      vecInt4.shrinkTo(2);
      iVecInt0.containsAt(5);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      vecInt0.insertFirst(2691);
      intArray0[4] = 1;
      vecInt0.moveTo(intArray0);
      vecInt0.subset((-1999));
      vecInt0.clone();
      vecInt0.growTo(131, 0);
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        vecInt0.remove(15);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3448);
      intArray0[1] = (-168);
      intArray0[3] = 15;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.pop();
      vecInt1.moveTo((IVecInt) vecInt0);
      vecInt0.selectionSort(2112, (-168));
      vecInt1.pop();
      VecInt vecInt2 = new VecInt(2112);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt2.selectionSort(375, 15, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      vecInt0.sort(comparator1);
      vecInt1.sort();
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      Object object0 = new Object();
      int int1 = 820;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2518), 0).when(comparator0).compare(anyInt() , anyInt());
      VecInt vecInt0 = new VecInt(500);
      // Undeclared exception!
      try { 
        vecInt0.sort(90, 657, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 656
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      vecInt0.insertFirst(0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.remove(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      vecInt0.copyTo((IVecInt) vecInt0);
      vecInt0.subset(1);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 1;
      int int1 = 4;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 4;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.insertFirst(1283);
      vecInt0.shrinkTo((-174));
      vecInt0.size();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(1283, 1, comparator0);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1);
      iVecInt0.size();
      VecInt vecInt2 = new VecInt(1);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(2);
      iVecInt1.size();
      VecInt vecInt3 = new VecInt(1);
      iVecInt1.copyTo((IVecInt) vecInt3);
      VecInt vecInt4 = new VecInt();
      IVecInt iVecInt2 = vecInt4.push(1);
      IVecInt iVecInt3 = iVecInt2.push(2);
      vecInt0.moveTo(iVecInt3);
      vecInt0.clone();
      VecInt vecInt5 = new VecInt(0, 0);
      vecInt0.isSubsetOf(vecInt5);
      vecInt5.clear();
      vecInt5.ensure((-2541));
      vecInt0.shrinkTo(2091);
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(15);
      // Undeclared exception!
      try { 
        vecInt0.indexOf(4518);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      VecInt vecInt1 = (VecInt)vecInt0.push(1);
      vecInt0.selectionSort(1, 1);
      vecInt0.sortUnique();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt0.pushAll(vecInt2);
      vecInt1.sortUnique();
      vecInt0.equals("org.sat4j.core.VecInt$1");
      vecInt1.copyTo((IVecInt) vecInt0);
      vecInt1.shrinkTo(2645);
      vecInt0.containsAt(1);
      // Undeclared exception!
      try { 
        vecInt1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.ensure(0);
      vecInt0.shrinkTo(0);
      vecInt0.shrink(0);
      vecInt0.growTo(0, 500);
      int[] intArray0 = new int[0];
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.sortUnique();
      vecInt1.equals(vecInt0);
      VecInt vecInt3 = new VecInt(1);
      vecInt3.copyTo((IVecInt) vecInt0);
      vecInt0.shrinkTo(90);
      // Undeclared exception!
      try { 
        vecInt0.contains(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.clear();
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 5;
      VecInt vecInt0 = new VecInt(360, 5);
      vecInt0.size();
      int int1 = 15;
      int int2 = (-2801);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[22];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.contains((-3));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[15];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.isEmpty();
      // Undeclared exception!
      try { 
        vecInt0.set((-388), 383);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1137;
      intArray0[1] = 4;
      intArray0[2] = 100;
      intArray0[3] = (-1456);
      intArray0[4] = (-2055);
      intArray0[5] = 12;
      intArray0[6] = (-1);
      intArray0[7] = (-597);
      intArray0[8] = 114;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.last();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = (-948);
      VecInt vecInt0 = new VecInt(919, (-948));
      int[] intArray0 = new int[4];
      intArray0[0] = 687;
      intArray0[1] = 919;
      intArray0[2] = 919;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(687, (-3839), comparator0);
      vecInt0.shrinkTo(919);
      IVecInt iVecInt0 = vecInt0.push((-292));
      vecInt0.moveTo2(iVecInt0);
      intArray0[3] = (-948);
      vecInt0.moveTo(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.set(6, 1141);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      IVecInt iVecInt0 = vecInt0.push(1);
      vecInt0.copyTo(iVecInt0);
      iVecInt0.subset(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, (-164), 2556, (-3066), 1).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        iVecInt0.set(2013, 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      int int0 = 66;
      VecInt vecInt1 = new VecInt(66, (-1095));
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.iterator();
      vecInt0.subset(1406);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1391, (-1095), 8, 1391, 3361).when(comparator1).compare(anyInt() , anyInt());
      vecInt1.sort(comparator1);
      // Undeclared exception!
      try { 
        vecInt0.set(2556, 8);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 5;
      vecInt0.ensure(5);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push((-1));
      int int1 = 0;
      vecInt2.growTo(6, 0);
      iVecInt0.size();
      int int2 = 1;
      vecInt2.set(1, 1);
      IVecInt iVecInt1 = iVecInt0.push(1);
      vecInt2.get(1);
      iVecInt1.get(1);
      iVecInt1.set(1, 1);
      vecInt2.set(1, 1);
      iVecInt1.size();
      iVecInt1.get(1);
      iVecInt1.last();
      iVecInt1.set(1, 1);
      iVecInt1.get(1);
      // Undeclared exception!
      try { 
        vecInt0.set((-1), 6);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.last();
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(2);
      IVecInt iVecInt1 = iVecInt0.push(4);
      iVecInt1.get(0);
      iVecInt1.get(1);
      iVecInt1.clear();
      IVecInt iVecInt2 = iVecInt1.push(2);
      IVecInt iVecInt3 = iVecInt2.push(6);
      IVecInt iVecInt4 = iVecInt3.push(10);
      iVecInt4.size();
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      iVecInt4.moveTo(intArray1);
      iVecInt4.clear();
      iVecInt4.push(3);
      IVecInt iVecInt5 = iVecInt1.push(7);
      IVecInt iVecInt6 = iVecInt5.push(11);
      VecInt vecInt2 = (VecInt)iVecInt6.push(17);
      int int0 = new Integer(2);
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      vecInt0.isSubsetOf(vecInt2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4);
      // Undeclared exception!
      try { 
        vecInt0.get(673);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2040);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(2040);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2040
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      System.setCurrentTimeMillis(866L);
      int[] intArray0 = new int[8];
      intArray0[0] = (-51);
      int int0 = (-472);
      intArray0[1] = (-472);
      intArray0[2] = 128;
      intArray0[3] = 2;
      intArray0[4] = (-5330);
      intArray0[5] = 3685;
      intArray0[6] = (-987);
      intArray0[7] = 50;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push(1242);
      // Undeclared exception!
      try { 
        vecInt0.set((-2072), 50);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(5);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push((-1));
      vecInt2.growTo(6, 0);
      iVecInt0.size();
      vecInt2.set(1, 1);
      IVecInt iVecInt1 = iVecInt0.push(1);
      vecInt2.get(1);
      iVecInt1.get(1);
      iVecInt1.set(1, 1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt1.sort((-1), 17, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      IVecInt iVecInt0 = vecInt0.push(1);
      vecInt0.selectionSort(1, 1);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      VecInt vecInt1 = new VecInt(intArray0);
      iVecInt0.copyTo(intArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[15];
      int int0 = 2273;
      intArray0[1] = 2273;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.growTo(2273, 1862);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-227);
      intArray0[1] = 9;
      intArray0[2] = 2;
      intArray0[3] = 512;
      intArray0[4] = 8;
      intArray0[5] = (-1);
      intArray0[6] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt(10, 5);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      vecInt0.copyTo((IVecInt) vecInt0);
      vecInt0.subset(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.insertFirst((-2313));
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2009, 2009);
      int int0 = 1;
      int int1 = 4;
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 3;
      intArray0[3] = 4;
      VecInt vecInt1 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.subset(2);
      vecInt1.pushAll(vecInt0);
      vecInt1.iterator();
      vecInt1.selectionSort(4, 2, comparator0);
      vecInt1.pop();
      vecInt0.push(15);
      vecInt0.copyTo((IVecInt) vecInt1);
      vecInt0.clone();
      vecInt0.isEmpty();
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[17];
      int int0 = (-39);
      intArray0[0] = (-39);
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-39), (-39), 51, (-39)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      vecInt0.ensure(0);
      VecInt vecInt1 = new VecInt();
      vecInt0.shrinkTo(0);
      int[] intArray0 = new int[1];
      VecInt vecInt2 = new VecInt(intArray0);
      VecInt vecInt3 = new VecInt(intArray0);
      vecInt2.sortUnique();
      vecInt2.equals("");
      vecInt2.copyTo((IVecInt) vecInt3);
      vecInt0.shrinkTo(0);
      vecInt0.containsAt(0);
      vecInt3.contains((-733));
      vecInt3.containsAt(0, (-1));
      vecInt2.containsAt((-733), 801);
      // Undeclared exception!
      try { 
        vecInt1.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.clear();
      vecInt0.pop();
      assertEquals((-1), vecInt0.size());
      
      vecInt0.sortUnique();
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2563, (-2918));
      int[] intArray0 = vecInt0.toArray();
      VecInt vecInt1 = new VecInt(intArray0);
      boolean boolean0 = vecInt0.equals(vecInt1);
      assertTrue(boolean0);
      assertEquals(2563, intArray0.length);
      assertEquals((-2918), vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      vecInt0.clear();
      vecInt0.toString();
      int int0 = vecInt0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1122), 2563);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      intArray0[2] = 3;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo(0);
      vecInt0.toString();
      vecInt0.moveTo(intArray0);
      vecInt0.size();
      vecInt0.pop();
      vecInt0.unsafeGet(0);
      // Undeclared exception!
      try { 
        vecInt0.push(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 3;
      VecInt vecInt0 = new VecInt(3, 3);
      int int1 = 30;
      vecInt0.remove(3);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.unsafePush(30);
      vecInt0.moveTo(iVecInt0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2289;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.selectionSort(1714, 65);
      vecInt0.remove(0);
      vecInt0.copyTo(intArray0);
      assertEquals(2289, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2273;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.equals(vecInt1);
      vecInt1.shrinkTo((-5804));
      vecInt0.containsAt(2273);
      vecInt0.pop();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(50, 0, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 15, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[17];
      int int0 = (-39);
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.clear();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        iVecInt0.copyTo((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1);
      iVecInt0.size();
      VecInt vecInt2 = new VecInt(1);
      iVecInt0.copyTo((IVecInt) vecInt2);
      iVecInt0.clear();
      int[] intArray0 = new int[18];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      VecInt vecInt3 = new VecInt(intArray0);
      vecInt1.indexOf((-2105));
      // Undeclared exception!
      try { 
        iVecInt0.moveTo(1, (-1715));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1715
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      IVecInt iVecInt0 = vecInt0.push(1);
      vecInt0.selectionSort(1, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      VecInt vecInt1 = new VecInt(intArray0);
      iVecInt0.indexOf(1);
      assertEquals(2, vecInt0.size());
      
      vecInt1.sortUnique();
      assertEquals(2, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 1;
      VecInt vecInt0 = new VecInt(1, 1);
      IVecInt iVecInt0 = vecInt0.push(1);
      vecInt0.selectionSort(1, 1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.copyTo(iVecInt0);
      int int1 = 1723;
      intArray0[1] = 1723;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      vecInt0.sort(comparator1);
      // Undeclared exception!
      try { 
        vecInt0.growTo(2013, 1723);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[1] = 2273;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.toArray();
      boolean boolean0 = vecInt0.isSubsetOf(vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2273;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      int int0 = vecInt0.indexOf(2273);
      assertEquals(0, int0);
      
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt(0, 2273);
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      VecInt vecInt0 = new VecInt(553, 553);
      int int0 = vecInt0.last();
      assertEquals(553, int0);
      assertEquals(553, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = vecInt0.indexOf(719);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5, 816);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(7, 816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 816
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(1657, 1657, comparator0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      VecInt vecInt1 = new VecInt(intArray0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator1);
      vecInt0.clear();
      vecInt1.pop();
      vecInt0.sortUnique();
      vecInt1.toString();
      assertEquals((-1), vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push((-1169));
      // Undeclared exception!
      try { 
        vecInt0.remove(2102);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }
}
