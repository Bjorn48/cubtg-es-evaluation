/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:03:44 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.reader.EfficientScanner;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EfficientScanner_ESTest extends EfficientScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.skipComments();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null, 'X');
      try { 
        efficientScanner0.skipSpaces();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null);
      try { 
        efficientScanner0.skipRestOfLine();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null);
      try { 
        efficientScanner0.skipComments();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null);
      try { 
        efficientScanner0.nextLine();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null);
      try { 
        efficientScanner0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null, 'j');
      try { 
        efficientScanner0.nextBigInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null, 'H');
      try { 
        efficientScanner0.next();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(1366);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      EfficientScanner efficientScanner0 = new EfficientScanner(dataInputStream0, 'b');
      try { 
        efficientScanner0.eof();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null);
      try { 
        efficientScanner0.currentChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)32, (byte)32);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      char char0 = efficientScanner0.skipSpaces();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      char char0 = efficientScanner0.currentChar();
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.skipRestOfLine();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      // Undeclared exception!
      efficientScanner0.next();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      try { 
        efficientScanner0.nextBigInteger();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \u0000
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      try { 
        efficientScanner0.nextBigInteger();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \uFFFF
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.nextLine();
      try { 
        efficientScanner0.nextInt();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \uFFFF
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)32, (byte)32);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.skipComments();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.close();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 4818);
      EfficientScanner efficientScanner0 = new EfficientScanner(bufferedInputStream0, 'O');
      boolean boolean0 = efficientScanner0.eof();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      try { 
        efficientScanner0.nextInt();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \u0000
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }
}
