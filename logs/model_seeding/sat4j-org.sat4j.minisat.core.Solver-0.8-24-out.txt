* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 10713
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550568942974
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.15357766143106458
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.08731241473396999
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.09866666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.05639097744360902
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2204724409448819
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.18110236220472442
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.06957708049113233
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[MASTER] 10:37:04.339 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 282
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.20767888307155322
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.11596180081855388
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.11733333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.06390977443609022
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.30708661417322836
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.25984251968503935
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.09140518417462483
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 359
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.23036649214659685
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.12687585266030013
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.13066666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07142857142857142
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.28346456692913385
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.10231923601637108
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 434
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.23821989528795812
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.13506139154160982
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.13066666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3700787401574803
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2992125984251969
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11186903137789904
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 506
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.30977312390924955
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19236016371077763
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16533333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.15789473684210525
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4330708661417323
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17053206002728513
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 575
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3228621291448517
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.20600272851296045
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.17066666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.47244094488188976
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18281036834924966
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 662
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2073669849931787
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.172
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
* Search finished after 124s and 6 generations, 11306 statements, best individual has fitness: 2938.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2073669849931787
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.172
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2073669849931787
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.172
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
* Minimizing test suite
[MASTER] 10:39:10.669 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 34%
* Total number of goals: 1146
* Number of covered goals: 386
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 21%
* Total number of goals: 733
* Number of covered goals: 152
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 18%
* Total number of goals: 750
* Number of covered goals: 138
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 18%
* Total number of goals: 266
* Number of covered goals: 47
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 127
* Number of covered goals: 64
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 39%
* Total number of goals: 127
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 18%
* Total number of goals: 733
* Number of covered goals: 135
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2073669849931787
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.172
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
* Generated 98 tests with total length 2117
* Resulting test suite's coverage: 37% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:40:04.890 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6773666666666667% of time used, but only 28/98 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3237347294938918
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2073669849931787
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.172
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17669172932330826
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.48031496062992124
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
* Compiling and checking tests
[MASTER] 10:40:31.778 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 10:40:31.793 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 10:40:42.024 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 10:40:42.025 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(840.942503);
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
int[] intArray0 = new int[5];
intArray0[0] = (-57);
intArray0[1] = 0;
intArray0[2] = 500;
intArray0[3] = (-858);
intArray0[4] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log("ic#KrG'\"_Do");
Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0, mUSLauncher0);
solver0.simplifyDB();
FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0);
solver1.newVar(0);
FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-2374));
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0);
solver2.setTimeout((-502));
LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver2.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 10:40:42.686 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 10:40:42.687 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams0 = new SearchParams();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
randomWalkDecorator0.getVariableHeuristics();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
SearchParams searchParams1 = new SearchParams();
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
solver0.reduceDB();

[MASTER] 10:40:47.053 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<0>
[MASTER] 10:40:47.055 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(840.942503);
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
int[] intArray0 = new int[5];
intArray0[0] = (-57);
intArray0[1] = 0;
intArray0[2] = 500;
intArray0[3] = (-858);
intArray0[4] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log("ic#KrG'\"_Do");
Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0, mUSLauncher0);
solver0.simplifyDB();
FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0);
solver1.newVar(0);
FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-2374));
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0);
solver2.setTimeout((-502));
solver1.setTimeoutMs((-502));
assertEquals(2, solver1.nVars());


[MASTER] 10:40:55.995 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 10:40:55.996 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
clausalDataStructureWL0.getVocabulary();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams0 = new SearchParams(0, 0);
searchParams0.getInitConflictBound();
int[] intArray0 = new int[2];
intArray0[0] = 0;
intArray0[1] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log("5r:[ZIFFF7");
ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, glucose21Restarts0, mUSLauncher0);
solver0.simplifyDB();
FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
fixedLengthLearning0.toString();
Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, glucose21Restarts0);
solver1.newVar(3);
FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(1940);
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, glucose21Restarts0);
Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, glucose21Restarts0, mUSLauncher0);
solver3.setTimeout((-1349));
LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(0);
Solver<CardinalityDataStructure> solver4 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, glucose21Restarts0);
solver4.isNeedToReduceDB();
solver3.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 10:41:00.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:41:00.240 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.5, double0, 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, pureOrder0, eMARestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertNotNull(solver0);

solver0.learn((Constr) null);

[MASTER] 10:41:01.106 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:41:01.130 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.5, double0, 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertNotNull(doubleArray0);
assertEquals(1, doubleArray0.length);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

SearchParams searchParams1 = new SearchParams();
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, glucose21Restarts0, (ILogAble) null);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotSame(searchParams0, searchParams1);
assertNotNull(iVecInt0);
assertFalse(searchParams0.equals((Object)searchParams1));

ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

int int1 = 0;
levelBasedVarOrderHeap0.updateVar(0);

[MASTER] 10:41:02.072 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:41:02.100 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-20);
assertEquals(1.0E-20, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertNotNull(noRestarts0);

boolean boolean0 = noRestarts0.shouldRestart();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(boolean0);

noRestarts0.onBackjumpToRootLevel();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, noRestarts0);
assertEquals(1.0E-20, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

solver0.setKeepSolverHot(false);
assertEquals(1.0E-20, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, noRestarts0);
assertEquals(1.0E-20, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertNotNull(solver1);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(solver1.equals((Object)solver0));

int int0 = solver0.newVar((-1911));
assertEquals(1.0E-20, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals((-1911), solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals((-1911), int0);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertNotSame(solver0, solver1);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(solver0.equals((Object)solver1));

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, noRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertNotNull(solver2);

solver2.setTimeout((-502));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0, fixedLengthLearning1.getMaxLength());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.nVars());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals((-502), solver2.getTimeout());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());


[MASTER] 10:41:03.098 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:41:03.102 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Constr constr0 = Constr.TAUTOLOGY;
assertNotNull(constr0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("S}c8%:Si2Xu/n");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NoRestarts noRestarts0 = new NoRestarts();
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertNotNull(noRestarts0);

boolean boolean0 = noRestarts0.shouldRestart();
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(boolean0);

noRestarts0.onBackjumpToRootLevel();
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, eMARestarts0, mUSLauncher0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, eMARestarts0, mUSLauncher0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));

solver1.expireTimeout();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));


[MASTER] 10:41:05.782 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:41:05.784 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(4038);
assertEquals(4038, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(1471.04670879, 0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1471.04670879, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1471.04670879, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, int0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.assignLiteral((-1333));
LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log((String) null);
iLogAble0.log((String) null);
iLogAble0.log((String) null);
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, lubyRestarts0, iLogAble0);
assertEquals(4038, percentLengthLearning0.getLimit());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1471.04670879, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 10:41:06.359 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:41:06.376 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0E-20);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.0E-20, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PureOrder pureOrder0 = new PureOrder();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

noRestarts0.onBackjumpToRootLevel();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, noRestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.0E-20, activeLearning0.getActivityPercent(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

int int0 = solver0.nConstraints();
assertEquals(0, activeLearning0.getLimit());
assertEquals(1.0E-20, activeLearning0.getActivityPercent(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, int0);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, pureOrder0, noRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

solver1.setLearningStrategy(fixedLengthLearning0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());


[MASTER] 10:41:07.290 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 10:41:07.292 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn("SIMPLE_SIMPLIFICATION").when(varOrderHeap0).toString();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);

int int0 = (-1333);
tabuListDecorator0.assignLiteral((-1333));
tabuListDecorator0.undo((-1333));
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, tabuListDecorator0, glucose21Restarts0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(2);
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);

solver1.expireTimeout();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());

solver0.model((-1333));

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
