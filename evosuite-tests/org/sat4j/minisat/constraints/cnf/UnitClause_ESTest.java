/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:26:13 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnitClause_ESTest extends UnitClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(884);
      unitClause0.calcReasonOnTheFly((-2), (IVecInt) null, (IVecInt) null);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(33);
      unitClause0.setActivity(33);
      double double0 = unitClause0.getActivity();
      assertEquals(33.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      unitClause0.setActivity((-1));
      double double0 = unitClause0.getActivity();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      int int0 = unitClause0.get(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2074);
      int int0 = unitClause0.get(0);
      assertEquals(2074, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 0);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
      UnitClause unitClause0 = new UnitClause(112);
      unitClause0.assertConstraintIfNeeded(solver0);
      // Undeclared exception!
      try { 
        unitClause0.remove(solver0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-4297));
      // Undeclared exception!
      try { 
        unitClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      UnitClause unitClause0 = new UnitClause((-2002));
      // Undeclared exception!
      try { 
        unitClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2002
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(4257);
      // Undeclared exception!
      try { 
        unitClause0.calcReason((-1), (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2605));
      // Undeclared exception!
      try { 
        unitClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      UnitClause unitClause0 = new UnitClause((-2));
      // Undeclared exception!
      try { 
        unitClause0.assertConstraintIfNeeded(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2264);
      // Undeclared exception!
      try { 
        unitClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      UnitClause unitClause0 = new UnitClause((-1));
      unitClause0.calcReason((-1), vecInt0);
      assertEquals(10, vecInt0.size());
      assertEquals((-2), vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2074);
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      unitClause0.calcReason(2074, vecInt0);
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      boolean boolean0 = unitClause0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      unitClause0.assertConstraint(solver0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(32);
      String string0 = unitClause0.toString();
      assertEquals("16", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(894);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("\"4x");
      String string0 = unitClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("447", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(20);
      // Undeclared exception!
      try { 
        unitClause0.get(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1066));
      int int0 = unitClause0.get((-1066));
      assertEquals((-1066), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      UnitClause unitClause0 = new UnitClause(11);
      unitClause0.remove(solver0);
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      // Undeclared exception!
      try { 
        unitClause0.calcReasonOnTheFly((-1), (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(45);
      // Undeclared exception!
      try { 
        unitClause0.propagate((UnitPropagationListener) null, 45);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1174);
      boolean boolean0 = unitClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      unitClause0.register();
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2556));
      boolean boolean0 = unitClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(206);
      // Undeclared exception!
      try { 
        unitClause0.locked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(138);
      int int0 = unitClause0.getAssertionLevel((IVecInt) null, 138);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      // Undeclared exception!
      try { 
        unitClause0.rescaleBy(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1523));
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      unitClause0.calcReasonOnTheFly(375, (IVecInt) null, vecInt0);
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1066));
      boolean boolean0 = unitClause0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(307);
      String string0 = unitClause0.toString((VarMapper) null);
      assertEquals("-153", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      // Undeclared exception!
      try { 
        unitClause0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1);
      unitClause0.forwardActivity(0.0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2592);
      unitClause0.incActivity(2592);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      double double0 = unitClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(426);
      // Undeclared exception!
      try { 
        unitClause0.propagatePi((MandatoryLiteralListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-2605));
      boolean boolean0 = unitClause0.isSatisfied();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      int int0 = unitClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      int int0 = unitClause0.size();
      assertEquals(1, int0);
  }
}
