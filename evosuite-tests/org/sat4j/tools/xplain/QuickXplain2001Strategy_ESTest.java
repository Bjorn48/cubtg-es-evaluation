/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:38:29 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.xplain.QuickXplain2001Strategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuickXplain2001Strategy_ESTest extends QuickXplain2001Strategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-2146320328));
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).isVerbose();
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      VecInt vecInt1 = new VecInt();
      HashMap<Integer, AbstractMinimalModel> hashMap0 = new HashMap<Integer, AbstractMinimalModel>();
      IVecInt iVecInt0 = quickXplain2001Strategy0.explain(solutionCounter0, hashMap0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(iSolver0).getLogPrefix();
      doReturn(true).when(iSolver0).isVerbose();
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      HashMap<Integer, CardinalityDataStructureYanMax> hashMap0 = new HashMap<Integer, CardinalityDataStructureYanMax>();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(solutionCounter0, hashMap0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(iSolver0).isVerbose();
      doReturn(vecInt0, (IVecInt) null).when(iSolver0).unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      HashMap<Integer, CardinalityDataStructureYanMax> hashMap0 = new HashMap<Integer, CardinalityDataStructureYanMax>();
      vecInt0.growTo(5000, 0);
      IVecInt iVecInt0 = quickXplain2001Strategy0.explain(solutionCounter0, hashMap0, vecInt0);
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(solutionCounter0, hashMap0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.QuickXplain2001Strategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(dimacsStringSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(solutionCounter0, vecInt0, 1881L);
      HashMap<Integer, CardinalityDataStructureYanMax> hashMap0 = new HashMap<Integer, CardinalityDataStructureYanMax>();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(subModelIterator0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(iSolver0).isVerbose();
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(solutionCounter0, vecInt0, 1881L);
      HashMap<Integer, CardinalityDataStructureYanMax> hashMap0 = new HashMap<Integer, CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      hashMap0.put((Integer) Integer.MIN_VALUE, cardinalityDataStructureYanMax0);
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(subModelIterator0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).isVerbose();
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      HashMap<Integer, CardinalityDataStructureYanMax> hashMap0 = new HashMap<Integer, CardinalityDataStructureYanMax>();
      Integer integer0 = Integer.getInteger("T5Kmk#+SUV", 0);
      vecInt0.growTo(5000, 0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      hashMap0.put(integer0, cardinalityDataStructureYanMax0);
      IVecInt iVecInt0 = quickXplain2001Strategy0.explain(solutionCounter0, hashMap0, vecInt0);
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(iSolver0).getLogPrefix();
      doReturn(true).when(iSolver0).isVerbose();
      doReturn(vecInt0).when(iSolver0).unsatExplanation();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      HashMap<Integer, CardinalityDataStructureYanMax> hashMap0 = new HashMap<Integer, CardinalityDataStructureYanMax>();
      vecInt0.insertFirst(1111);
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(solutionCounter0, hashMap0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      String string0 = quickXplain2001Strategy0.toString();
      assertEquals("QuickXplain (IJCAI WS 2001 version) minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      quickXplain2001Strategy0.cancelExplanationComputation();
      assertEquals("QuickXplain (IJCAI WS 2001 version) minimization strategy", quickXplain2001Strategy0.toString());
  }
}
