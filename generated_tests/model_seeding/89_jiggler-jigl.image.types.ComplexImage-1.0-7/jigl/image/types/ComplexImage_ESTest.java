/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 22:56:48 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.Kernel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.get(8, 2756);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-1249);
      int int1 = (-202);
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((-1249), 3225);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 31, (float) 31);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(0, 31, 218.64F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Float float0 = new Float((double) 1376);
      assertEquals(1376.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      double double0 = complex0.magnitude();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      Complex complex1 = complex0.cos();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(1.0F, complex1.floatValue(), 0.01F);
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1.0, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1, complex1.intValue());
      assertEquals(1L, complex1.longValue());
      assertEquals((short)1, complex1.shortValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1376, (-2550), (float) 1376, (float) 1376, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 1376;
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1376, 1376, 165.8F, (float) 1376, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1376
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      
      Complex complex3 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      
      ROI rOI0 = new ROI((-3283), 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI((-3283), 0, 0, (-16777216));
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16777217, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.Y();
      assertEquals(16777217, int0);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(16777217, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(133.1F, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(578, 578);
      assertNotNull(complexImage0);
      assertEquals(578, complexImage0.X());
      assertEquals(578, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      int int0 = 0;
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(0, 0, (float) 0, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      Complex complex3 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      
      Complex complex4 = complex0.cos();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertNotNull(complex4);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(1.0F, complex4.floatValue(), 0.01F);
      assertEquals((byte)1, complex4.byteValue());
      assertEquals(1.0, complex4.magnitude(), 0.01);
      assertEquals(1.0, complex4.doubleValue(), 0.01);
      assertEquals(1.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(1, complex4.intValue());
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(1L, complex4.longValue());
      assertEquals((short)1, complex4.shortValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      float float0 = 32767.0F;
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-3283), (-217), 0, (-217));
      assertNotNull(rOI0);
      assertEquals((-217), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals((-217), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int0 = rOI0.ly();
      assertEquals((-217), int0);
      assertEquals((-217), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals((-217), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals((-3283), int1);
      assertEquals((-217), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals((-217), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-3283), int2);
      assertEquals((-217), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals((-217), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int3 = new Integer((-3283));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-3283), int3);
      
      int int4 = rOI0.uy();
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals((-217), int4);
      assertEquals((-217), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals((-217), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals((-217), int5);
      assertEquals((-217), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals((-217), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -217
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1218, 1218, 1218, 578, 246.0F, 246.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1, 0, 255, 1691);
      assertEquals(1691, rOI0.ly());
      assertEquals(255, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1692, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(1692, int1);
      assertEquals(1691, rOI0.ly());
      assertEquals(255, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1692, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-1443.2925F), (-1443.2925F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.uy();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int2 = (-164);
      rOI0.setROI(255, 255, 0, (-164));
      assertEquals(420, rOI0.Y());
      assertEquals((-164), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(256, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(255, int3);
      assertEquals(420, rOI0.Y());
      assertEquals((-164), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(256, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      assertEquals(420, rOI0.Y());
      assertEquals((-164), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(256, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      
      int int5 = rOI0.ux();
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals(0, int5);
      assertEquals(420, rOI0.Y());
      assertEquals((-164), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(256, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      
      int int6 = rOI0.lx();
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertEquals(255, int6);
      assertEquals(420, rOI0.Y());
      assertEquals((-164), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(256, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      
      int int7 = 0;
      rOI0.setROI(0, 0, 0, (-3283));
      assertEquals(0, rOI0.ly());
      assertEquals((-3283), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.Y());
      
      int int8 = new Integer(0);
      assertFalse(int8 == int2);
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertTrue(int8 == int4);
      assertFalse(int8 == int3);
      assertTrue(int8 == int1);
      assertFalse(int8 == int6);
      assertTrue(int8 == int5);
      assertEquals(0, int8);
      
      int int9 = rOI0.ly();
      assertTrue(int9 == int0);
      assertTrue(int9 == int8);
      assertTrue(int9 == int4);
      assertTrue(int9 == int1);
      assertFalse(int9 == int6);
      assertTrue(int9 == int7);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertTrue(int9 == int5);
      assertEquals(0, int9);
      assertEquals(0, rOI0.ly());
      assertEquals((-3283), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3283
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage1.multiply(0.0F, 0.0F);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      ComplexImage complexImage4 = complexImage0.multiply(1394.488F, 0.0F);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertNotNull(complexImage4);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage4.X());
      assertEquals(0, complexImage4.Y());
      
      // Undeclared exception!
      try { 
        complexImage2.add((-386), (-386), 0.0F, 1394.488F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 0.0F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1, 1, 0, (-3154));
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(3156, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals((-3154), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1, 0, 255, 1691);
      assertEquals(1691, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(255, rOI0.X());
      assertEquals(1692, rOI0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1, (-807));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.uy();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 1, (-3283), 0, (float) (-3283), (float) (-3283));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int4 = 0;
      rOI0.setROI(0, 0, 0, (-3283));
      assertEquals(3284, rOI0.Y());
      assertEquals((-3283), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int4));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertEquals(3284, rOI0.Y());
      assertEquals((-3283), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3283
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(1, 1, 1, 8);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(8, rOI0.Y());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(8, rOI0.ly());
      
      int int0 = rOI0.Y();
      assertEquals(8, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(8, rOI0.Y());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(8, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage(8, 1);
      assertNotNull(complexImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNotNull(realGrayImage0);
      assertEquals(8, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(8, realGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 578;
      ComplexImage complexImage0 = new ComplexImage(578, 578);
      assertNotNull(complexImage0);
      assertEquals(578, complexImage0.X());
      assertEquals(578, complexImage0.Y());
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(2778.56F, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals((-194), int1);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-3283), int2);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-3283), int3);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals((-194), int5);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -194
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      ComplexImage complexImage3 = new ComplexImage();
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      complexImage0.divide(complexImage3);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      complexImage1.multiply(complexImage3);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(8, (-207), (float) 1376, (float) (-207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -207
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(31, (-174), 310.9219F, (float) 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = (-3283);
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals((-194), int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-3283), int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -194
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-15), 16, (float) 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex(0.0, 0.0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      complex0.polar(0.0, (-914.2181530702));
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(3.141592653589793, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(-0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      Complex complex1 = complex0.exp();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(3.141592653589793, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(-0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(1.0, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(1, complex1.intValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(3.141592653589793, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(-0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      
      Complex complex3 = complexImage0.max();
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0L, complex3.longValue());
      
      Complex complex4 = complex2.cos();
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(3.141592653589793, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(-0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(1, complex4.intValue());
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(1.0, complex4.magnitude(), 0.01);
      assertEquals(1.0, complex4.doubleValue(), 0.01);
      assertEquals(1L, complex4.longValue());
      assertEquals((byte)1, complex4.byteValue());
      assertEquals(1.0, complex4.real(), 0.01);
      assertEquals((short)1, complex4.shortValue());
      assertEquals(1.0F, complex4.floatValue(), 0.01F);
      assertEquals(0.0, complex4.arg(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.clear(complex2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.add(130, 103, (-1.0F), (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 103
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.addbuffer(1, 588, (-2174), 1, (float) 1376, 3235.01F);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(588, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.divide((float) 1376, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      
      Complex complex3 = complex2.sin();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0, complex3.intValue());
      assertEquals(-0.0, complex3.imaginary(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals((byte)0, complex3.byteValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      Complex complex4 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0L, complex4.longValue());
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals((short)0, complex4.shortValue());
      assertEquals(0, complex4.intValue());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-194), int2);
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-194), int3);
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals((-3283), int4);
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.ux();
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals((-3283), int5);
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int6 = rOI0.lx();
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertEquals(0, int6);
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int7 = rOI0.uy();
      assertTrue(int7 == int2);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int0);
      assertEquals((-194), int7);
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int8 = rOI0.ly();
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertTrue(int8 == int7);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertEquals((-194), int8);
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(851, (-1249), (float) 851, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1249
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.add((-1379), (-1379), (float) (-1379), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.set(1, 1, (-332.0271F), (-332.0271F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(1755, (-597), (-71), 1);
      assertNotNull(rOI0);
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-597), rOI0.uy());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals((-597), int0);
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-597), rOI0.uy());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-597), rOI0.uy());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-71), int2);
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-597), rOI0.uy());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-71), int3);
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-597), rOI0.uy());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(1755, int4);
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-597), rOI0.uy());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      
      int int5 = new Integer(1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertEquals(1, int5);
      
      int int6 = rOI0.ly();
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertTrue(int6 == int5);
      assertEquals(1, int6);
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-597), rOI0.uy());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-1), 860, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      Complex complex3 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals((short)0, complex3.shortValue());
      
      Complex complex4 = complex0.cos();
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertNotNull(complex4);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((short)1, complex4.shortValue());
      assertEquals(1.0, complex4.magnitude(), 0.01);
      assertEquals(1.0, complex4.doubleValue(), 0.01);
      assertEquals(1, complex4.intValue());
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(1.0, complex4.real(), 0.01);
      assertEquals(1.0F, complex4.floatValue(), 0.01F);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals((byte)1, complex4.byteValue());
      assertEquals(1L, complex4.longValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 0, (float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      int int0 = (-194);
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int1 = rOI0.uy();
      assertTrue(int1 == int0);
      assertEquals((-194), int1);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-194), int2);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-3283), int3);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals((-3283), int4);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int5 = rOI0.lx();
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int6 = rOI0.uy();
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertEquals((-194), int6);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int7 = rOI0.ly();
      assertTrue(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertTrue(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertEquals((-194), int7);
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1376, 738, (-2022.524F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1907
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = (-2759);
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-2759), (-2759), 0, (-2759), 1.0F, 1080.9434F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage2.subtract(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      
      int int0 = rOI0.uy();
      assertEquals((-194), int0);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals((-194), int1);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-3283), int2);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-3283), int3);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      
      int int4 = rOI0.uy();
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals((-194), int4);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals((-194), int5);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -194
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-71), (-71), 0.0F, 0.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1, (-1), (-1151.975F), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals((-194), int0);
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals((-194), int1);
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-3283), int2);
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-3283), int3);
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.uy();
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertEquals((-194), int5);
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int6 = rOI0.ly();
      assertFalse(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertEquals((-194), int6);
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-194), (-194), (-247.0F), (-247.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-1051), (-1051), (float) (-1051));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.uy();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = (-3669);
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ComplexImage complexImage0 = new ComplexImage(0, 0);
          assertNotNull(complexImage0);
          assertEquals(0, complexImage0.Y());
          assertEquals(0, complexImage0.X());
          
          ROI rOI0 = new ROI();
          assertNotNull(rOI0);
          assertEquals(1, rOI0.Y());
          assertEquals(0, rOI0.lx());
          assertEquals(0, rOI0.ly());
          assertEquals(0, rOI0.ux());
          assertEquals(0, rOI0.uy());
          assertEquals(1, rOI0.X());
          
          int int0 = rOI0.uy();
          assertEquals(0, int0);
          assertEquals(1, rOI0.Y());
          assertEquals(0, rOI0.lx());
          assertEquals(0, rOI0.ly());
          assertEquals(0, rOI0.ux());
          assertEquals(0, rOI0.uy());
          assertEquals(1, rOI0.X());
          
          rOI0.setROI(0, 0, 0, 0);
          assertEquals(1, rOI0.Y());
          assertEquals(0, rOI0.lx());
          assertEquals(0, rOI0.ly());
          assertEquals(0, rOI0.ux());
          assertEquals(0, rOI0.uy());
          assertEquals(1, rOI0.X());
          
          int int1 = rOI0.ly();
          assertTrue(int1 == int0);
          assertEquals(0, int1);
          assertEquals(1, rOI0.Y());
          assertEquals(0, rOI0.lx());
          assertEquals(0, rOI0.ly());
          assertEquals(0, rOI0.ux());
          assertEquals(0, rOI0.uy());
          assertEquals(1, rOI0.X());
          
          int int2 = rOI0.ux();
          assertTrue(int2 == int1);
          assertTrue(int2 == int0);
          assertEquals(0, int2);
          assertEquals(1, rOI0.Y());
          assertEquals(0, rOI0.lx());
          assertEquals(0, rOI0.ly());
          assertEquals(0, rOI0.ux());
          assertEquals(0, rOI0.uy());
          assertEquals(1, rOI0.X());
          
          int int3 = rOI0.ux();
          assertTrue(int3 == int1);
          assertTrue(int3 == int2);
          assertTrue(int3 == int0);
          assertEquals(0, int3);
          assertEquals(1, rOI0.Y());
          assertEquals(0, rOI0.lx());
          assertEquals(0, rOI0.ly());
          assertEquals(0, rOI0.ux());
          assertEquals(0, rOI0.uy());
          assertEquals(1, rOI0.X());
          
          int int4 = rOI0.lx();
          assertTrue(int4 == int2);
          assertTrue(int4 == int3);
          assertTrue(int4 == int1);
          assertTrue(int4 == int0);
          assertEquals(0, int4);
          assertEquals(1, rOI0.Y());
          assertEquals(0, rOI0.lx());
          assertEquals(0, rOI0.ly());
          assertEquals(0, rOI0.ux());
          assertEquals(0, rOI0.uy());
          assertEquals(1, rOI0.X());
          
          ComplexImage complexImage1 = complexImage0.copy();
          assertNotSame(complexImage0, complexImage1);
          assertNotSame(complexImage1, complexImage0);
          assertFalse(complexImage1.equals((Object)complexImage0));
          assertNotNull(complexImage1);
          assertEquals(0, complexImage0.Y());
          assertEquals(0, complexImage0.X());
          assertEquals(0, complexImage1.X());
          assertEquals(0, complexImage1.Y());
          
          complexImage1.setImag((RealGrayImage) null);
          assertNotSame(complexImage0, complexImage1);
          assertNotSame(complexImage1, complexImage0);
          assertFalse(complexImage0.equals((Object)complexImage1));
          assertFalse(complexImage1.equals((Object)complexImage0));
          assertEquals(0, complexImage0.Y());
          assertEquals(0, complexImage0.X());
          assertEquals(0, complexImage1.X());
          assertEquals(0, complexImage1.Y());
          
          // Undeclared exception!
          try { 
            complexImage1.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // jigl.image.types.ComplexImage.getJavaImage(ComplexImage.java:94)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = null;
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI(1376, 1376, 1376, 1376);
      assertNotNull(rOI0);
      assertEquals(1376, rOI0.ux());
      assertEquals(1376, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1376, rOI0.lx());
      assertEquals(1376, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1376, rOI0.ux());
      assertEquals(1376, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1376, rOI0.lx());
      assertEquals(1376, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1376, rOI0.ux());
      assertEquals(1376, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1376, rOI0.lx());
      assertEquals(1376, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1376
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals((-194), int0);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals((-194), int1);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-3283), int2);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int3 = new Integer((-3283));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-3283), int3);
      
      int int4 = rOI0.uy();
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals((-194), int4);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals((-194), int5);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int6 = rOI0.lx();
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertEquals(0, int6);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int7 = rOI0.uy();
      assertTrue(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertFalse(int7 == int3);
      assertTrue(int7 == int4);
      assertEquals((-194), int7);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int8 = rOI0.ly();
      assertTrue(int8 == int7);
      assertFalse(int8 == int6);
      assertTrue(int8 == int5);
      assertFalse(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertFalse(int8 == int3);
      assertTrue(int8 == int0);
      assertEquals((-194), int8);
      assertEquals((-194), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, (float) (-194), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -194
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 1218;
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      
      int int0 = (-1);
      int int1 = 441;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 441;
      floatArray0[3] = 1230.5968F;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-1), 441, floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      int int0 = (-1379);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.add((-1379), (-1379), (float) (-1379), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      complexImage0.clear();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = (-2759);
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int1 = 6;
      Float float0 = new Float((double) (-2759));
      assertEquals((-2759.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 6, (float) 6);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage2.subtract((-2518), 6, (-391.0F), (float) 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 578;
      ComplexImage complexImage0 = new ComplexImage(578, 578);
      assertNotNull(complexImage0);
      assertEquals(578, complexImage0.X());
      assertEquals(578, complexImage0.Y());
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      double double1 = complex0.magnitude();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      Complex complex1 = complex0.cos();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1L, complex1.longValue());
      assertEquals(1.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(1.0, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.doubleValue(), 0.01);
      assertEquals(1, complex1.intValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      complexImage0.set(1, 1, 1742.95F, (-2596.8308F), rOI0);
      assertEquals(578, complexImage0.X());
      assertEquals(578, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set(2, 578, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 578
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI((-3283), (-194), 0, (-194));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      int int0 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((-194), int0);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      int int1 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals((-194), int1);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      int int2 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-3283), int2);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-3283), int3);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      int int4 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(0, int4);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      int int5 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals((-194), int5);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      int int6 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertEquals((-194), int6);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      int int7 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertEquals(3284, int7);
      assertEquals(1, rOI1.Y());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-194), rOI1.ly());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(1755, (-597), (-71), 1);
      assertNotNull(rOI0);
      assertEquals((-597), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals((-597), int0);
      assertEquals((-597), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals((-597), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-71), int2);
      assertEquals((-597), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-71), int3);
      assertEquals((-597), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(1755, int4);
      assertEquals((-597), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int3));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(1, int5);
      assertEquals((-597), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals((-71), rOI0.ux());
      assertEquals(1827, rOI0.X());
      assertEquals(1755, rOI0.lx());
      assertEquals(599, rOI0.Y());
      
      float float0 = new Integer((-71));
      assertEquals((-71), float0, 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) (-597), (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 578;
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int1 = 417;
      int int2 = (-1567);
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals((short) (-1), complex0.shortValue());
      
      int int3 = complexImage0.X();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(417, (-1567), 3751.027F, 3751.027F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = (-2003);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(1253, 1253, 1253, 1);
      assertEquals(1253, rOI0.Y());
      assertEquals(1253, rOI0.ly());
      assertEquals(1253, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1253, rOI0.ux());
      
      rOI0.setROI(1, (-2135), (-2003), 1218);
      assertEquals(1218, rOI0.ly());
      assertEquals((-2003), rOI0.ux());
      assertEquals(2005, rOI0.X());
      assertEquals((-2135), rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(3354, rOI0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      complexImage2.setImag(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ComplexImage complexImage3 = complexImage1.multiply(0.0F, 0.0F);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      Complex complex0 = complexImage3.min();
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complex0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      
      rOI0.setROI(1, 1, 1, 1);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      complexImage3.setReal(realGrayImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.uy();
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(0, 0, (float) 0, 893.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.copy(rOI0);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      Complex complex0 = complexImage3.max(rOI0);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      
      String string0 = complexImage3.toString(rOI0);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertNotNull(string0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      ComplexImage complexImage0 = new ComplexImage(0, 3);
      assertNotNull(complexImage0);
      assertEquals(3, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(3, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(3, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      Complex complex3 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.arg(), 0.01);
      
      Complex complex4 = complex2.sin();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertEquals(-0.0, complex4.arg(), 0.01);
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(-0.0, complex4.imaginary(), 0.01);
      assertEquals(-0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals((short)0, complex4.shortValue());
      assertEquals(0, complex4.intValue());
      assertEquals(0L, complex4.longValue());
      
      double double1 = complex2.magnitude();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 0, complex2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      Complex complex0 = new Complex((-1298.065), (-3791.4569641244));
      assertNotNull(complex0);
      assertEquals((-1.9006538893396687), complex0.arg(), 0.01);
      assertEquals(4007.5078290628453, complex0.doubleValue(), 0.01);
      assertEquals(4007, complex0.intValue());
      assertEquals((-3791.45703125), complex0.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex0.real(), 0.01);
      assertEquals((byte) (-89), complex0.byteValue());
      assertEquals(4007.5078290628453, complex0.magnitude(), 0.01);
      assertEquals(4007L, complex0.longValue());
      assertEquals(4007.5078F, complex0.floatValue(), 0.01F);
      assertEquals((short)4007, complex0.shortValue());
      assertEquals((-3791.45703125), complex0.imag(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals((-1.9006538893396687), complex0.arg(), 0.01);
      assertEquals(4007.5078290628453, complex0.doubleValue(), 0.01);
      assertEquals(4007, complex0.intValue());
      assertEquals((-3791.45703125), complex0.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex0.real(), 0.01);
      assertEquals((byte) (-89), complex0.byteValue());
      assertEquals(4007.5078290628453, complex0.magnitude(), 0.01);
      assertEquals(4007L, complex0.longValue());
      assertEquals(4007.5078F, complex0.floatValue(), 0.01F);
      assertEquals((short)4007, complex0.shortValue());
      assertEquals((-3791.45703125), complex0.imag(), 0.01);
      assertEquals((-3791.45703125), complex1.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex1.real(), 0.01);
      assertEquals((short)4007, complex1.shortValue());
      assertEquals((-3791.45703125), complex1.imag(), 0.01);
      assertEquals((byte) (-89), complex1.byteValue());
      assertEquals(4007, complex1.intValue());
      assertEquals((-1.9006538893396687), complex1.arg(), 0.01);
      assertEquals(4007.5078290628453, complex1.magnitude(), 0.01);
      assertEquals(4007.5078290628453, complex1.doubleValue(), 0.01);
      assertEquals(4007L, complex1.longValue());
      assertEquals(4007.5078F, complex1.floatValue(), 0.01F);
      
      Complex complex2 = Complex.add(complex1, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals((-1.9006538893396687), complex0.arg(), 0.01);
      assertEquals(4007.5078290628453, complex0.doubleValue(), 0.01);
      assertEquals(4007, complex0.intValue());
      assertEquals((-3791.45703125), complex0.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex0.real(), 0.01);
      assertEquals((byte) (-89), complex0.byteValue());
      assertEquals(4007.5078290628453, complex0.magnitude(), 0.01);
      assertEquals(4007L, complex0.longValue());
      assertEquals(4007.5078F, complex0.floatValue(), 0.01F);
      assertEquals((short)4007, complex0.shortValue());
      assertEquals((-3791.45703125), complex0.imag(), 0.01);
      assertEquals((-3791.45703125), complex1.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex1.real(), 0.01);
      assertEquals((short)4007, complex1.shortValue());
      assertEquals((-3791.45703125), complex1.imag(), 0.01);
      assertEquals((byte) (-89), complex1.byteValue());
      assertEquals(4007, complex1.intValue());
      assertEquals((-1.9006538893396687), complex1.arg(), 0.01);
      assertEquals(4007.5078290628453, complex1.magnitude(), 0.01);
      assertEquals(4007.5078290628453, complex1.doubleValue(), 0.01);
      assertEquals(4007L, complex1.longValue());
      assertEquals(4007.5078F, complex1.floatValue(), 0.01F);
      assertEquals((-7582.9140625), complex2.imag(), 0.01);
      assertEquals(8015.0156F, complex2.floatValue(), 0.01F);
      assertEquals((-7582.9140625), complex2.imaginary(), 0.01);
      assertEquals((byte)79, complex2.byteValue());
      assertEquals(8015, complex2.intValue());
      assertEquals((-1.9006538893396687), complex2.arg(), 0.01);
      assertEquals((-2596.1298828125), complex2.real(), 0.01);
      assertEquals(8015L, complex2.longValue());
      assertEquals((short)8015, complex2.shortValue());
      assertEquals(8015.015658125691, complex2.doubleValue(), 0.01);
      assertEquals(8015.015658125691, complex2.magnitude(), 0.01);
      
      Complex complex3 = new Complex(complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      assertEquals((-1.9006538893396687), complex0.arg(), 0.01);
      assertEquals(4007.5078290628453, complex0.doubleValue(), 0.01);
      assertEquals(4007, complex0.intValue());
      assertEquals((-3791.45703125), complex0.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex0.real(), 0.01);
      assertEquals((byte) (-89), complex0.byteValue());
      assertEquals(4007.5078290628453, complex0.magnitude(), 0.01);
      assertEquals(4007L, complex0.longValue());
      assertEquals(4007.5078F, complex0.floatValue(), 0.01F);
      assertEquals((short)4007, complex0.shortValue());
      assertEquals((-3791.45703125), complex0.imag(), 0.01);
      assertEquals((-3791.45703125), complex1.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex1.real(), 0.01);
      assertEquals((short)4007, complex1.shortValue());
      assertEquals((-3791.45703125), complex1.imag(), 0.01);
      assertEquals((byte) (-89), complex1.byteValue());
      assertEquals(4007, complex1.intValue());
      assertEquals((-1.9006538893396687), complex1.arg(), 0.01);
      assertEquals(4007.5078290628453, complex1.magnitude(), 0.01);
      assertEquals(4007.5078290628453, complex1.doubleValue(), 0.01);
      assertEquals(4007L, complex1.longValue());
      assertEquals(4007.5078F, complex1.floatValue(), 0.01F);
      assertEquals((-7582.9140625), complex2.imag(), 0.01);
      assertEquals(8015.0156F, complex2.floatValue(), 0.01F);
      assertEquals((-7582.9140625), complex2.imaginary(), 0.01);
      assertEquals((byte)79, complex2.byteValue());
      assertEquals(8015, complex2.intValue());
      assertEquals((-1.9006538893396687), complex2.arg(), 0.01);
      assertEquals((-2596.1298828125), complex2.real(), 0.01);
      assertEquals(8015L, complex2.longValue());
      assertEquals((short)8015, complex2.shortValue());
      assertEquals(8015.015658125691, complex2.doubleValue(), 0.01);
      assertEquals(8015.015658125691, complex2.magnitude(), 0.01);
      assertEquals((-7582.9140625), complex3.imag(), 0.01);
      assertEquals(8015, complex3.intValue());
      assertEquals((-2596.1298828125), complex3.real(), 0.01);
      assertEquals((byte)79, complex3.byteValue());
      assertEquals(8015.0156F, complex3.floatValue(), 0.01F);
      assertEquals(8015.015658125691, complex3.magnitude(), 0.01);
      assertEquals(8015.015658125691, complex3.doubleValue(), 0.01);
      assertEquals((-1.9006538893396687), complex3.arg(), 0.01);
      assertEquals(8015L, complex3.longValue());
      assertEquals((short)8015, complex3.shortValue());
      assertEquals((-7582.9140625), complex3.imaginary(), 0.01);
      
      double double0 = complex3.real();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertEquals((-2596.1298828125), double0, 0.01);
      assertEquals((-1.9006538893396687), complex0.arg(), 0.01);
      assertEquals(4007.5078290628453, complex0.doubleValue(), 0.01);
      assertEquals(4007, complex0.intValue());
      assertEquals((-3791.45703125), complex0.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex0.real(), 0.01);
      assertEquals((byte) (-89), complex0.byteValue());
      assertEquals(4007.5078290628453, complex0.magnitude(), 0.01);
      assertEquals(4007L, complex0.longValue());
      assertEquals(4007.5078F, complex0.floatValue(), 0.01F);
      assertEquals((short)4007, complex0.shortValue());
      assertEquals((-3791.45703125), complex0.imag(), 0.01);
      assertEquals((-3791.45703125), complex1.imaginary(), 0.01);
      assertEquals((-1298.06494140625), complex1.real(), 0.01);
      assertEquals((short)4007, complex1.shortValue());
      assertEquals((-3791.45703125), complex1.imag(), 0.01);
      assertEquals((byte) (-89), complex1.byteValue());
      assertEquals(4007, complex1.intValue());
      assertEquals((-1.9006538893396687), complex1.arg(), 0.01);
      assertEquals(4007.5078290628453, complex1.magnitude(), 0.01);
      assertEquals(4007.5078290628453, complex1.doubleValue(), 0.01);
      assertEquals(4007L, complex1.longValue());
      assertEquals(4007.5078F, complex1.floatValue(), 0.01F);
      assertEquals((-7582.9140625), complex2.imag(), 0.01);
      assertEquals(8015.0156F, complex2.floatValue(), 0.01F);
      assertEquals((-7582.9140625), complex2.imaginary(), 0.01);
      assertEquals((byte)79, complex2.byteValue());
      assertEquals(8015, complex2.intValue());
      assertEquals((-1.9006538893396687), complex2.arg(), 0.01);
      assertEquals((-2596.1298828125), complex2.real(), 0.01);
      assertEquals(8015L, complex2.longValue());
      assertEquals((short)8015, complex2.shortValue());
      assertEquals(8015.015658125691, complex2.doubleValue(), 0.01);
      assertEquals(8015.015658125691, complex2.magnitude(), 0.01);
      assertEquals((-7582.9140625), complex3.imag(), 0.01);
      assertEquals(8015, complex3.intValue());
      assertEquals((-2596.1298828125), complex3.real(), 0.01);
      assertEquals((byte)79, complex3.byteValue());
      assertEquals(8015.0156F, complex3.floatValue(), 0.01F);
      assertEquals(8015.015658125691, complex3.magnitude(), 0.01);
      assertEquals(8015.015658125691, complex3.doubleValue(), 0.01);
      assertEquals((-1.9006538893396687), complex3.arg(), 0.01);
      assertEquals(8015L, complex3.longValue());
      assertEquals((short)8015, complex3.shortValue());
      assertEquals((-7582.9140625), complex3.imaginary(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set(1, 1, complex3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.uy();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set((-194), 497, complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI(1, 0, 255, 1691);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1691, rOI0.ly());
      assertEquals(255, rOI0.X());
      assertEquals(1692, rOI0.Y());
      assertEquals(255, rOI0.lx());
      
      rOI0.setROI(1691, 1691, 1691, 255);
      assertEquals(1691, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(1691, rOI0.lx());
      assertEquals(1691, rOI0.ly());
      assertEquals(1437, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(1437, int1);
      assertEquals(1691, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(1691, rOI0.lx());
      assertEquals(1691, rOI0.ly());
      assertEquals(1437, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-1443.2925F), (-1443.2925F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.uy());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals((-194), int1);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.uy());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-3283), int2);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.uy());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-3283), int3);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.uy());
      
      rOI0.setROI(0, (-3283), (-3283), 0);
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-3283), rOI0.uy());
      assertEquals(3284, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-3283), rOI0.uy());
      assertEquals(3284, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int5 = rOI0.ly();
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-3283), rOI0.uy());
      assertEquals(3284, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(1, (-194), (-1.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -194
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 0;
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals((-194), int1);
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int2 = (-164);
      rOI0.setROI(255, 255, (-194), (-164));
      assertEquals(450, rOI0.X());
      assertEquals(420, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals((-194), rOI0.ux());
      assertEquals((-164), rOI0.uy());
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(255, int3);
      assertEquals(450, rOI0.X());
      assertEquals(420, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals((-194), rOI0.ux());
      assertEquals((-164), rOI0.uy());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-194), int4);
      assertEquals(450, rOI0.X());
      assertEquals(420, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals((-194), rOI0.ux());
      assertEquals((-164), rOI0.uy());
      
      int int5 = rOI0.ux();
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertEquals((-194), int5);
      assertEquals(450, rOI0.X());
      assertEquals(420, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals((-194), rOI0.ux());
      assertEquals((-164), rOI0.uy());
      
      int int6 = rOI0.lx();
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      assertFalse(int6 == int5);
      assertEquals(255, int6);
      assertEquals(450, rOI0.X());
      assertEquals(420, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals((-194), rOI0.ux());
      assertEquals((-164), rOI0.uy());
      
      int int7 = 0;
      rOI0.setROI(0, 0, (-194), (-3283));
      assertEquals(0, rOI0.ly());
      assertEquals((-3283), rOI0.uy());
      assertEquals(195, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.Y());
      assertEquals((-194), rOI0.ux());
      
      int int8 = rOI0.uy();
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertEquals((-3283), int8);
      assertEquals(0, rOI0.ly());
      assertEquals((-3283), rOI0.uy());
      assertEquals(195, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.Y());
      assertEquals((-194), rOI0.ux());
      
      int int9 = rOI0.ly();
      assertFalse(int9 == int4);
      assertFalse(int9 == int8);
      assertFalse(int9 == int1);
      assertTrue(int9 == int0);
      assertTrue(int9 == int7);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int2);
      assertEquals(0, int9);
      assertEquals(0, rOI0.ly());
      assertEquals((-3283), rOI0.uy());
      assertEquals(195, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.Y());
      assertEquals((-194), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3283
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 522;
      ComplexImage complexImage0 = new ComplexImage(0, 522);
      assertNotNull(complexImage0);
      assertEquals(522, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 0, (float) 0, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      rOI0.setROI(0, 0, (-16777216), 347);
      assertEquals(347, rOI0.ly());
      assertEquals(16777217, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(348, rOI0.Y());
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = new Integer(347);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(347, int2);
      
      // Undeclared exception!
      try { 
        complexImage2.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 0, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.diff(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(1, 1, (float) 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 0;
      int int1 = (-1708);
      complexImage0.imag = null;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1708), 0, (float) (-1708), 0.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      int int0 = (-1379);
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1379), (-3283), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-2759);
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1, (-247.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-3283);
      int int1 = 1;
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-3283), (-683), (float) (-683), (float) (-683), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage2.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(2424, 2424);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.lx();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.uy();
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int5 = rOI0.ly();
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 0, (-1583.1481F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      complexImage0.setImag(1, 1, (-1.0F), rOI0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage1.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1379), (-3307), 32767.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Float float0 = new Float((double) (-2759));
      assertEquals((-2759.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      ComplexImage complexImage1 = complexImage0.subtract(1.0F, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = new ComplexImage(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      int int0 = 0;
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(0, 0, (float) 0, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(1376, (-3283), 0, 0);
      assertEquals(1377, rOI0.X());
      assertEquals(1376, rOI0.lx());
      assertEquals(3284, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-3283), rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1377, int0);
      assertEquals(1377, rOI0.X());
      assertEquals(1376, rOI0.lx());
      assertEquals(3284, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-3283), rOI0.uy());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(3284, int1);
      assertEquals(1377, rOI0.X());
      assertEquals(1376, rOI0.lx());
      assertEquals(3284, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-3283), rOI0.uy());
      
      // Undeclared exception!
      complexImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(573, 573);
      assertNotNull(complexImage0);
      assertEquals(573, complexImage0.Y());
      assertEquals(573, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(573, complexImage0.Y());
      assertEquals(573, complexImage0.X());
      assertEquals(573, realGrayImage0.X());
      assertEquals(573, realGrayImage0.Y());
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals((-194), int0);
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals((-194), int1);
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-3283), int2);
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-3283), int3);
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int5 = rOI0.uy();
      assertFalse(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals((-194), int5);
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      int int6 = rOI0.ly();
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertEquals((-194), int6);
      assertEquals(0, rOI0.lx());
      assertEquals((-3283), rOI0.ux());
      assertEquals((-194), rOI0.uy());
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 573, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3283
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.ly();
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage1.multiply(0.0F, 0.0F);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals((-194), int0);
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals((-194), int1);
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-3283), int2);
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-3283), int3);
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int5 = rOI0.uy();
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals((-194), int5);
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int6 = rOI0.ly();
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int5);
      assertEquals((-194), int6);
      assertEquals((-194), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage3, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      Complex complex3 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      
      int int0 = (-3283);
      // Undeclared exception!
      try { 
        complexImage0.setImag(0, 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 578;
      ComplexImage complexImage0 = new ComplexImage(578, 578);
      assertNotNull(complexImage0);
      assertEquals(578, complexImage0.X());
      assertEquals(578, complexImage0.Y());
      
      int int1 = 417;
      int int2 = (-1565);
      float float0 = 3751.027F;
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 31, (float) 31);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      complexImage1.divide(complexImage0);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      complexImage1.multiply(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      String string0 = complexImage0.toString();
      assertEquals("0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      int int0 = (-1);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-3283);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-1), (-1428), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      complexImage0.setImag(1, 1, (float) 1376);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage1.multiply(0.0F, 0.0F);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      // Undeclared exception!
      try { 
        complexImage3.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.uy();
      assertEquals((-194), int0);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals((-194), int1);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-3283), int2);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-3283), int3);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.uy();
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals((-194), int5);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      int int6 = rOI0.ly();
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals((-194), int6);
      assertEquals((-194), rOI0.uy());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-916), (-738), (float) (-738), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = (-2003);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1, (-2135), (-2003), 1218);
      assertEquals(2005, rOI0.X());
      assertEquals(1218, rOI0.ly());
      assertEquals((-2135), rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(3354, rOI0.Y());
      assertEquals((-2003), rOI0.ux());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      complexImage1.setImag(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      Complex complex0 = complexImage2.min();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      
      rOI0.setROI(1, 1, 1, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      complexImage2.setReal(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = 0;
      rOI0.setROI(1376, 1376, 1376, 0);
      assertEquals(1376, rOI0.ly());
      assertEquals(1376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1377, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1376, rOI0.ux());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1376, rOI0.ly());
      assertEquals(1376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1377, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1376, rOI0.ux());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1376, rOI0.ly());
      assertEquals(1376, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1377, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1376, rOI0.ux());
      
      int int3 = (-1911);
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1376
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage1.multiply(0.0F, 0.0F);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      complexImage0.divide(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      complexImage1.multiply(complexImage3);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(578, 578);
      assertNotNull(complexImage0);
      assertEquals(578, complexImage0.Y());
      assertEquals(578, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 578, (float) 578);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 3600;
      Complex complex0 = null;
      try {
        complex0 = new Complex((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.math.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = null;
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.diff((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      Complex complex3 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      
      Complex complex4 = complex0.cos();
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)1, complex4.shortValue());
      assertEquals(1.0, complex4.magnitude(), 0.01);
      assertEquals(1.0, complex4.doubleValue(), 0.01);
      assertEquals((byte)1, complex4.byteValue());
      assertEquals(1L, complex4.longValue());
      assertEquals(1.0F, complex4.floatValue(), 0.01F);
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(1, complex4.intValue());
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(1.0, complex4.real(), 0.01);
      
      Complex complex5 = complex2.sin();
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertNotNull(complex5);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex5.longValue());
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals((short)0, complex5.shortValue());
      assertEquals(-0.0, complex5.arg(), 0.01);
      assertEquals(0, complex5.intValue());
      assertEquals((byte)0, complex5.byteValue());
      assertEquals(-0.0, complex5.imag(), 0.01);
      assertEquals(0.0F, complex5.floatValue(), 0.01F);
      assertEquals(0.0, complex5.magnitude(), 0.01);
      assertEquals(0.0, complex5.doubleValue(), 0.01);
      assertEquals(-0.0, complex5.imaginary(), 0.01);
      
      double double1 = complex2.magnitude();
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.Y();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 0, (float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 0;
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals((-194), int1);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int2 = rOI0.ly();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-194), int2);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-3283), int3);
      assertEquals((-194), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      rOI0.setROI(0, (-1), (-1249), 0);
      assertEquals(2, rOI0.Y());
      assertEquals(1250, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1249), rOI0.ux());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals((-1249), int4);
      assertEquals(2, rOI0.Y());
      assertEquals(1250, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1249), rOI0.ux());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals(0, int5);
      assertEquals(2, rOI0.Y());
      assertEquals(1250, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1249), rOI0.ux());
      
      int int6 = rOI0.uy();
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertEquals((-1), int6);
      assertEquals(2, rOI0.Y());
      assertEquals(1250, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1249), rOI0.ux());
      
      int int7 = rOI0.ly();
      assertTrue(int7 == int5);
      assertFalse(int7 == int3);
      assertTrue(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertEquals(0, int7);
      assertEquals(2, rOI0.Y());
      assertEquals(1250, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1249), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      Complex complex3 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0L, complex3.longValue());
      
      Complex complex4 = complex0.cos();
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertNotNull(complex4);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(1.0, complex4.doubleValue(), 0.01);
      assertEquals(1, complex4.intValue());
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals((byte)1, complex4.byteValue());
      assertEquals((short)1, complex4.shortValue());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(1.0, complex4.real(), 0.01);
      assertEquals(1L, complex4.longValue());
      assertEquals(1.0F, complex4.floatValue(), 0.01F);
      assertEquals(1.0, complex4.magnitude(), 0.01);
      
      Complex complex5 = complexImage0.min();
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertNotNull(complex5);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((byte) (-1), complex5.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex5.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.imag(), 0.01);
      assertEquals((short) (-1), complex5.shortValue());
      assertEquals(Integer.MAX_VALUE, complex5.intValue());
      assertEquals(0.7853981633974483, complex5.arg(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex5.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex5.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex5.longValue());
      
      complexImage0.setReal(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.diff(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal(1, (-2456), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2456
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 17;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(17, 0);
      assertNotNull(complexImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      Complex complex1 = Complex.add(complex0, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(17, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(17, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      Complex complex3 = complex0.cos();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(1.0F, complex3.floatValue(), 0.01F);
      assertEquals(1.0, complex3.doubleValue(), 0.01);
      assertEquals((byte)1, complex3.byteValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(1.0, complex3.magnitude(), 0.01);
      assertEquals(1, complex3.intValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((short)1, complex3.shortValue());
      assertEquals(1L, complex3.longValue());
      
      Complex complex4 = complex2.sin();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals(-0.0, complex4.imag(), 0.01);
      assertEquals((short)0, complex4.shortValue());
      assertEquals(0, complex4.intValue());
      assertEquals(-0.0, complex4.arg(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(-0.0, complex4.imaginary(), 0.01);
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0L, complex4.longValue());
      
      double double1 = complex2.magnitude();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      
      // Undeclared exception!
      try { 
        complexImage0.set(17, 17, complex2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply((float) 1, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(1, 1, (float) 1, (-3355.0F));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(1, 1, 6115.462F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      
      ComplexImage complexImage1 = complexImage0.multiply(1.0F, 1.0F);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      // Undeclared exception!
      complexImage0.toString();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply((-2759), 0, (float) 0, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      int int1 = (-1782);
      // Undeclared exception!
      try { 
        complexImage0.setImag((-1782), (-1782), (float) (-1782));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1782
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 0;
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int1 = (-164);
      int int2 = rOI0.ly();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-194), int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-3283), int3);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals((-3283), int4);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int5 = rOI0.lx();
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(0, int5);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int6 = 0;
      int int7 = rOI0.uy();
      assertTrue(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertEquals((-194), int7);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      int int8 = rOI0.ly();
      assertFalse(int8 == int5);
      assertTrue(int8 == int7);
      assertFalse(int8 == int6);
      assertTrue(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertEquals((-194), int8);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.ly());
      assertEquals(3284, rOI0.X());
      assertEquals((-194), rOI0.uy());
      assertEquals((-3283), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -194
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 2212;
      ComplexImage complexImage0 = new ComplexImage(2212, 2212);
      assertNotNull(complexImage0);
      assertEquals(2212, complexImage0.Y());
      assertEquals(2212, complexImage0.X());
      
      int int1 = (-587);
      int int2 = 0;
      int int3 = 8;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(int1, int2, int3, int2, (float) int2, (float) int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      rOI0.setROI(0, (int) integer0, (-16777216), 347);
      assertEquals((-16777216), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(16777217, rOI0.X());
      assertEquals(348, rOI0.Y());
      assertEquals(347, rOI0.ly());
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(347);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(347, (int)integer2);
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        complexImage2.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      String string0 = complexImage0.toString(rOI0);
      assertEquals("1376:1376\nnull \n1376:1376\nnull \n", string0);
      assertNotNull(string0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI((-3283), (-194), 0, (-194));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int1 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals((-194), int1);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int2 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-194), int2);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-3283), int3);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int4 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals((-3283), int4);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int5 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int6 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertEquals((-194), int6);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int7 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertEquals((-194), int7);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int8 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int5);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertTrue(int8 == int0);
      assertEquals(1, int8);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int9 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int9 == int0);
      assertFalse(int9 == int7);
      assertTrue(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int9 == int6);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertTrue(int9 == int4);
      assertEquals((-3283), int9);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      int int10 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int10 == int7);
      assertFalse(int10 == int9);
      assertFalse(int10 == int2);
      assertFalse(int10 == int6);
      assertFalse(int10 == int4);
      assertFalse(int10 == int3);
      assertFalse(int10 == int0);
      assertTrue(int10 == int5);
      assertFalse(int10 == int1);
      assertFalse(int10 == int8);
      assertEquals(0, int10);
      assertEquals(1, rOI1.Y());
      assertEquals((-194), rOI1.ly());
      assertEquals((-3283), rOI1.ux());
      assertEquals((-194), rOI1.uy());
      assertEquals(3284, rOI1.X());
      assertEquals(0, rOI1.lx());
      
      rOI1.setROI(0, (-3283), (-1), 8);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(2, rOI1.X());
      assertEquals(3292, rOI1.Y());
      assertEquals((-3283), rOI1.uy());
      assertEquals(8, rOI1.ly());
      assertEquals((-1), rOI1.ux());
      assertEquals(0, rOI1.lx());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(1376, realGrayImage0.Y());
      assertEquals(1376, realGrayImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      int int11 = (-2759);
      ComplexImage complexImage1 = new ComplexImage(int11, int11);
      complexImage1.real();
      complexImage0.multiply(complexImage1, rOI1, rOI1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-2003);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      complexImage1.setImag(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, 0.0F);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      Complex complex0 = complexImage2.min();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      
      rOI0.setROI(1, 1, 1, 1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(1, rOI0.uy());
      
      complexImage2.setReal(realGrayImage0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      int int2 = (-462);
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      Complex complex3 = complex0.cos();
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(1L, complex3.longValue());
      assertEquals((short)1, complex3.shortValue());
      assertEquals(1.0, complex3.magnitude(), 0.01);
      assertEquals(1.0, complex3.doubleValue(), 0.01);
      assertEquals((byte)1, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(1, complex3.intValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(1.0F, complex3.floatValue(), 0.01F);
      
      Complex complex4 = complex2.sin();
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertNotNull(complex4);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0L, complex4.longValue());
      assertEquals(-0.0, complex4.arg(), 0.01);
      assertEquals((short)0, complex4.shortValue());
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals(-0.0, complex4.imaginary(), 0.01);
      assertEquals(-0.0, complex4.imag(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0, complex4.intValue());
      
      double double1 = complex2.magnitude();
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, 0, complex2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1381, 1381);
      assertNotNull(complexImage0);
      assertEquals(1381, complexImage0.Y());
      assertEquals(1381, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(1381, complexImage0.Y());
      assertEquals(1381, complexImage0.X());
      assertEquals(1381, realGrayImage0.X());
      assertEquals(1381, realGrayImage0.Y());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 1376, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1759), 0, (float) 0, 2771.0684F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      
      Complex complex3 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0, complex3.intValue());
      
      ROI rOI0 = new ROI((-3283), 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.ly();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(3284, rOI0.X());
      assertEquals((-3283), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(realGrayImage1, realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      
      complexImage0.divide(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.Y());
      assertEquals(1376, complexImage0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      
      Complex complex2 = new Complex(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      Complex complex3 = Complex.add(complex1, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertNotNull(complex3);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      
      ROI rOI0 = new ROI((-3283), (-194), 0, (-194));
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int2 = rOI0.uy();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-194), int2);
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-194), int3);
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-3283), int4);
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int5 = rOI0.ux();
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals((-3283), int5);
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int6 = rOI0.lx();
      assertTrue(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(0, int6);
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int7 = rOI0.uy();
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertFalse(int7 == int1);
      assertTrue(int7 == int2);
      assertEquals((-194), int7);
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      int int8 = rOI0.ly();
      assertTrue(int8 == int2);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int3);
      assertFalse(int8 == int5);
      assertEquals((-194), int8);
      assertEquals(1, rOI0.Y());
      assertEquals((-194), rOI0.ly());
      assertEquals((-3283), rOI0.ux());
      assertEquals(3284, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-194), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -194
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-3283), (-683), (float) (-683), (float) (-683), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.get(8, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      assertNotNull(complexImage0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.copy(rOI0);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      Complex complex0 = complexImage3.max(rOI0);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertEquals(1376, complexImage0.X());
      assertEquals(1376, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      
      int int1 = (-462);
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.get(8, 2947);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2947
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(225, (-2504));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2504
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage1.divide((float) 1376, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.multiply(0.0F, 0.0F);
      ROI rOI0 = new ROI();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage1.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.copy();
      // Undeclared exception!
      try { 
        complexImage1.multiply(0.0F, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      Complex complex2 = new Complex(complex0);
      Complex.add(complex1, complex2);
      ROI rOI0 = new ROI((-3283), 0, 0, 0);
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      complexImage0.imaginary();
      int int0 = (-2759);
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((-2759), (-2759));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      Complex complex0 = new Complex();
      complex0.real();
      Complex complex1 = new Complex(complex0);
      Complex complex2 = new Complex(complex0);
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      complex0.cos();
      complex0.conj();
      complex2.sin();
      complex0.sinh();
      complexImage0.setImaginary(realGrayImage0);
      complex2.magnitude();
      // Undeclared exception!
      try { 
        complexImage0.set(0, 0, complex2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1376, 1376);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        complexImage0.multiply(1.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }
}
