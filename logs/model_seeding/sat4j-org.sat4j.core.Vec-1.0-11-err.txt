[MASTER] 18:44:38.001 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.core.ReadOnlyVec<T> : Type points to itself
[MASTER] 18:44:38.001 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.core.Vec<T> : Type points to itself
[MASTER] 18:45:12.352 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 18:45:13.645 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 18:45:18.657 [logback-2] ERROR AbstractStatement - Error assigning value of type Vec[] defined at statement Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 5), assignment statement: vecArray0[0] = (Vec<String>) vecArray0; SUT=org.sat4j.core.Vec
[MASTER] 18:45:56.860 [logback-2] ERROR AbstractStatement - Error assigning value of type Comparable[] defined at statement Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 2), assignment statement: comparableArray0[0] = (Comparable<Object>) comparableArray0; SUT=org.sat4j.core.Vec
[MASTER] 18:49:25.624 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_75_1550512165405/org/sat4j/core/Vec_75_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_75_1550512165405/org/sat4j/core/Vec_75_tmp__ESTest_scaffolding.java]]
[MASTER] 18:49:25.624 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 18:49:25.624 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 18:49:25.647 [logback-2] ERROR JUnitAnalyzer - Diagnostic: int cannot be dereferenced: 63
[MASTER] 18:49:25.647 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_75_1550512165405/org/sat4j/core/Vec_75_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 18:49:25.647 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 18:49:25.655 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_75_1550512165405/org/sat4j/core/Vec_75_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Mon Feb 18 17:49:25 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.lang.reflect.Array;
12: import java.util.NoSuchElementException;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: import org.sat4j.core.ReadOnlyVec;
17: import org.sat4j.core.Vec;
18: import org.sat4j.specs.IVec;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class Vec_75_tmp__ESTest extends Vec_75_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Vec<Object> vec0 = new Vec<Object>(1342);
26:       assertTrue(vec0.isEmpty());
27:       assertEquals(0, vec0.size());
28:       assertNotNull(vec0);
29:       
30:       Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1342, vec0);
31:       assertTrue(vec0.isEmpty());
32:       assertEquals(0, vec0.size());
33:       assertEquals(1342, vec1.size());
34:       assertFalse(vec1.isEmpty());
35:       assertNotNull(vec1);
36:       
37:       vec1.hashCode();
38:       assertTrue(vec0.isEmpty());
39:       assertEquals(0, vec0.size());
40:       assertEquals(1342, vec1.size());
41:       assertFalse(vec1.isEmpty());
42:       
43:       Integer[] integerArray0 = new Integer[5];
44:       int int0 = 0;
45:       Integer integer0 = new Integer(0);
46:       assertTrue(integer0.equals((Object)int0));
47:       assertEquals(0, (int)integer0);
48:       assertNotNull(integer0);
49:       
50:       int int1 = integer0.intValue();
51:       assertTrue(integer0.equals((Object)int0));
52:       assertTrue(int1 == int0);
53:       assertEquals(0, int1);
54:       
55:       integerArray0[0] = (Integer) 0;
56:       int int2 = integer0.intValue();
57:       assertTrue(integer0.equals((Object)int1));
58:       assertTrue(integer0.equals((Object)int0));
59:       assertTrue(int2 == int0);
60:       assertTrue(int2 == int1);
61:       assertEquals(0, int2);
62:       
63:       int int3 = int0.intValue();
64:       assertTrue(int0 == int2);
65:       assertTrue(int0 == int1);
66:       assertTrue(int3 == int1);
67:       assertTrue(int3 == int0);
68:       assertTrue(int3 == int2);
69:       assertEquals(0, int3);
70:       
71:       integerArray0[1] = (Integer) 0;
72:       Integer integer1 = Integer.valueOf(5);
73:       assertFalse(integer1.equals((Object)int3));
74:       assertFalse(integer1.equals((Object)int0));
75:       assertFalse(integer1.equals((Object)integer0));
76:       assertFalse(integer1.equals((Object)int1));
77:       assertFalse(integer1.equals((Object)int2));
78:       assertEquals(5, (int)integer1);
79:       assertNotNull(integer1);
80:       
81:       String string0 = integer1.toString();
82:       assertFalse(integer1.equals((Object)int3));
83:       assertFalse(integer1.equals((Object)int0));
84:       assertFalse(integer1.equals((Object)integer0));
85:       assertFalse(integer1.equals((Object)int1));
86:       assertFalse(integer1.equals((Object)int2));
87:       assertEquals("5", string0);
88:       assertNotNull(string0);
89:       
90:       ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
91:       assertTrue(vec0.isEmpty());
92:       assertEquals(0, vec0.size());
93:       assertTrue(readOnlyVec0.isEmpty());
94:       assertEquals(0, readOnlyVec0.size());
95:       assertNotNull(readOnlyVec0);
96:       
97:       Vec<Object> vec2 = new Vec<Object>(913);
98:       assertTrue(vec2.equals((Object)vec0));
99:       assertEquals(0, vec2.size());
100:       assertTrue(vec2.isEmpty());
101:       assertNotNull(vec2);
102:       
103:       IVec<Object> iVec0 = vec2.push(int0);
104:       assertTrue(int0 == int2);
105:       assertTrue(int0 == int3);
106:       assertTrue(int0 == int1);
107:       assertFalse(vec2.equals((Object)vec0));
108:       assertNotSame(vec2, vec0);
109:       assertEquals(1, vec2.size());
110:       assertFalse(vec2.isEmpty());
111:       assertEquals(1, iVec0.size());
112:       assertFalse(iVec0.isEmpty());
113:       assertNotNull(iVec0);
114:       
115:       ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(iVec0);
116:       assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
117:       assertTrue(int0 == int2);
118:       assertTrue(int0 == int3);
119:       assertTrue(int0 == int1);
120:       assertFalse(vec2.equals((Object)vec0));
121:       assertEquals(1, readOnlyVec1.size());
122:       assertFalse(readOnlyVec1.isEmpty());
123:       assertEquals(1, vec2.size());
124:       assertFalse(vec2.isEmpty());
125:       assertEquals(1, iVec0.size());
126:       assertFalse(iVec0.isEmpty());
127:       assertNotNull(readOnlyVec1);
128:       
129:       ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 3);
130:       readOnlyVecArray0[0] = readOnlyVec1;
131:       readOnlyVecArray0[1] = readOnlyVec0;
132:       ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(iVec0);
133:       assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
134:       assertFalse(readOnlyVec2.equals((Object)readOnlyVec0));
135:       assertTrue(int0 == int2);
136:       assertTrue(int0 == int3);
137:       assertTrue(int0 == int1);
138:       assertFalse(vec2.equals((Object)vec0));
139:       assertFalse(readOnlyVec2.isEmpty());
140:       assertEquals(1, readOnlyVec2.size());
141:       assertEquals(1, vec2.size());
142:       assertFalse(vec2.isEmpty());
143:       assertEquals(1, iVec0.size());
144:       assertFalse(iVec0.isEmpty());
145:       assertNotNull(readOnlyVec2);
146:       
147:       readOnlyVecArray0[2] = readOnlyVec2;
148:       Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
149:       assertEquals(3, readOnlyVecArray0.length);
150:       assertFalse(vec3.isEmpty());
151:       assertEquals(3, vec3.size());
152:       assertNotNull(vec3);
153:       
154:       vec3.set(1, readOnlyVec2);
155:       assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
156:       assertFalse(readOnlyVec2.equals((Object)readOnlyVec0));
157:       assertTrue(int0 == int2);
158:       assertTrue(int0 == int3);
159:       assertTrue(int0 == int1);
160:       assertFalse(vec2.equals((Object)vec0));
161:       assertNotSame(readOnlyVec2, readOnlyVec1);
162:       assertNotSame(readOnlyVec2, readOnlyVec0);
163:       assertNotSame(vec2, vec0);
164:       assertEquals(3, readOnlyVecArray0.length);
165:       assertFalse(readOnlyVec2.isEmpty());
166:       assertEquals(1, readOnlyVec2.size());
167:       assertFalse(vec3.isEmpty());
168:       assertEquals(3, vec3.size());
169:       assertEquals(1, vec2.size());
170:       assertFalse(vec2.isEmpty());
171:       assertEquals(1, iVec0.size());
172:       assertFalse(iVec0.isEmpty());
173:       
174:       boolean boolean0 = vec0.contains(vec1);
175:       assertFalse(vec0.equals((Object)vec2));
176:       assertFalse(boolean0);
177:       assertNotSame(vec0, vec2);
178:       assertTrue(vec0.isEmpty());
179:       assertEquals(0, vec0.size());
180:       assertEquals(1342, vec1.size());
181:       assertFalse(vec1.isEmpty());
182:       
183:       Vec<Integer> vec4 = new Vec<Integer>();
184:       assertEquals(0, vec4.size());
185:       assertTrue(vec4.isEmpty());
186:       assertNotNull(vec4);
187:       
188:       // Undeclared exception!
189:       try { 
190:         vec4.remove((Integer) int0);
191:         fail("Expecting exception: NoSuchElementException");
192:       
193:       } catch(NoSuchElementException e) {
194:          //
195:          // no message in exception (getMessage() returned null)
196:          //
197:          verifyException("org.sat4j.core.Vec", e);
198:       }
199:   }
200: }
RegularFileObject[/tmp/EvoSuite_75_1550512165405/org/sat4j/core/Vec_75_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Mon Feb 18 17:49:25 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Vec_75_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.Vec"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Vec_75_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.Vec$1",
82:       "org.sat4j.core.Vec",
83:       "org.sat4j.specs.IVec",
84:       "org.sat4j.core.ReadOnlyVec"
85:     );
86:   } 
87: 
88:   private static void resetClasses() {
89:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Vec_75_tmp__ESTest_scaffolding.class.getClassLoader()); 
90: 
91:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
92:       "org.sat4j.core.Vec",
93:       "org.sat4j.core.Vec$1",
94:       "org.sat4j.core.ReadOnlyVec"
95:     );
96:   }
97: }

[MASTER] 18:49:25.657 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Vec<Object> vec0 = new Vec<Object>(1342);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());
assertNotNull(vec0);

Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1342, vec0);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());
assertEquals(1342, vec1.size());
assertFalse(vec1.isEmpty());
assertNotNull(vec1);

vec1.hashCode();
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());
assertEquals(1342, vec1.size());
assertFalse(vec1.isEmpty());

Integer[] integerArray0 = new Integer[5];
int int0 = 0;
Integer integer0 = new Integer(0);
assertTrue(integer0.equals((Object)int0));
assertEquals(0, (int)integer0);
assertNotNull(integer0);

int int1 = integer0.intValue();
assertTrue(integer0.equals((Object)int0));
assertTrue(int1 == int0);
assertEquals(0, int1);

integerArray0[0] = (Integer) 0;
int int2 = integer0.intValue();
assertTrue(integer0.equals((Object)int1));
assertTrue(integer0.equals((Object)int0));
assertTrue(int2 == int0);
assertTrue(int2 == int1);
assertEquals(0, int2);

int int3 = int0.intValue();
assertTrue(int0 == int2);
assertTrue(int0 == int1);
assertTrue(int3 == int1);
assertTrue(int3 == int0);
assertTrue(int3 == int2);
assertEquals(0, int3);

integerArray0[1] = (Integer) 0;
Integer integer1 = Integer.valueOf(5);
assertFalse(integer1.equals((Object)int3));
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)int1));
assertFalse(integer1.equals((Object)int2));
assertEquals(5, (int)integer1);
assertNotNull(integer1);

String string0 = integer1.toString();
assertFalse(integer1.equals((Object)int3));
assertFalse(integer1.equals((Object)int0));
assertFalse(integer1.equals((Object)integer0));
assertFalse(integer1.equals((Object)int1));
assertFalse(integer1.equals((Object)int2));
assertEquals("5", string0);
assertNotNull(string0);

ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());
assertTrue(readOnlyVec0.isEmpty());
assertEquals(0, readOnlyVec0.size());
assertNotNull(readOnlyVec0);

Vec<Object> vec2 = new Vec<Object>(913);
assertTrue(vec2.equals((Object)vec0));
assertEquals(0, vec2.size());
assertTrue(vec2.isEmpty());
assertNotNull(vec2);

IVec<Object> iVec0 = vec2.push(int0);
assertTrue(int0 == int2);
assertTrue(int0 == int3);
assertTrue(int0 == int1);
assertFalse(vec2.equals((Object)vec0));
assertNotSame(vec2, vec0);
assertEquals(1, vec2.size());
assertFalse(vec2.isEmpty());
assertEquals(1, iVec0.size());
assertFalse(iVec0.isEmpty());
assertNotNull(iVec0);

ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(iVec0);
assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
assertTrue(int0 == int2);
assertTrue(int0 == int3);
assertTrue(int0 == int1);
assertFalse(vec2.equals((Object)vec0));
assertEquals(1, readOnlyVec1.size());
assertFalse(readOnlyVec1.isEmpty());
assertEquals(1, vec2.size());
assertFalse(vec2.isEmpty());
assertEquals(1, iVec0.size());
assertFalse(iVec0.isEmpty());
assertNotNull(readOnlyVec1);

ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 3);
readOnlyVecArray0[0] = readOnlyVec1;
readOnlyVecArray0[1] = readOnlyVec0;
ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(iVec0);
assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec2.equals((Object)readOnlyVec0));
assertTrue(int0 == int2);
assertTrue(int0 == int3);
assertTrue(int0 == int1);
assertFalse(vec2.equals((Object)vec0));
assertFalse(readOnlyVec2.isEmpty());
assertEquals(1, readOnlyVec2.size());
assertEquals(1, vec2.size());
assertFalse(vec2.isEmpty());
assertEquals(1, iVec0.size());
assertFalse(iVec0.isEmpty());
assertNotNull(readOnlyVec2);

readOnlyVecArray0[2] = readOnlyVec2;
Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
assertEquals(3, readOnlyVecArray0.length);
assertFalse(vec3.isEmpty());
assertEquals(3, vec3.size());
assertNotNull(vec3);

vec3.set(1, readOnlyVec2);
assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
assertFalse(readOnlyVec2.equals((Object)readOnlyVec0));
assertTrue(int0 == int2);
assertTrue(int0 == int3);
assertTrue(int0 == int1);
assertFalse(vec2.equals((Object)vec0));
assertNotSame(readOnlyVec2, readOnlyVec1);
assertNotSame(readOnlyVec2, readOnlyVec0);
assertNotSame(vec2, vec0);
assertEquals(3, readOnlyVecArray0.length);
assertFalse(readOnlyVec2.isEmpty());
assertEquals(1, readOnlyVec2.size());
assertFalse(vec3.isEmpty());
assertEquals(3, vec3.size());
assertEquals(1, vec2.size());
assertFalse(vec2.isEmpty());
assertEquals(1, iVec0.size());
assertFalse(iVec0.isEmpty());

boolean boolean0 = vec0.contains(vec1);
assertFalse(vec0.equals((Object)vec2));
assertFalse(boolean0);
assertNotSame(vec0, vec2);
assertTrue(vec0.isEmpty());
assertEquals(0, vec0.size());
assertEquals(1342, vec1.size());
assertFalse(vec1.isEmpty());

Vec<Integer> vec4 = new Vec<Integer>();
assertEquals(0, vec4.size());
assertTrue(vec4.isEmpty());
assertNotNull(vec4);

vec4.remove((Integer) int0);

[MASTER] 18:49:57.396 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
