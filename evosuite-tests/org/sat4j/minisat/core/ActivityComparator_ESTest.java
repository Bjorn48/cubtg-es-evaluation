/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:04:21 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.ActivityComparator;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivityComparator_ESTest extends ActivityComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(233);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 233);
      IVecInt iVecInt0 = vecInt0.push(0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, (ILits) null);
      int int0 = activityComparator0.compare((Constr) originalWLClause0, (Constr) minWatchCard0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(233);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 233);
      IVecInt iVecInt0 = vecInt0.push(0);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(iVecInt0, (ILits) null);
      int int0 = activityComparator0.compare((Constr) minWatchCard0, (Constr) originalWLClause0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(575);
      Constr constr0 = MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 0);
      // Undeclared exception!
      try { 
        activityComparator0.compare(constr0, constr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin0).getVocabulary();
      PureOrder pureOrder0 = new PureOrder();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, (RestartStrategy) null);
      VecInt vecInt0 = (VecInt)solver0.implied;
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        activityComparator0.compare((Constr) null, (Constr) learntBinaryClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ActivityComparator activityComparator0 = new ActivityComparator();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(233);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 233);
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, (ILits) null);
      int int0 = activityComparator0.compare((Constr) minWatchCard0, (Constr) originalWLClause0);
      assertEquals(0, int0);
  }
}
