/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:28:54 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.core.SizeComparator;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeComparator_ESTest extends SizeComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      Constr constr0 = Constr.TAUTOLOGY;
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr1 = mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      int int0 = sizeComparator0.compare(constr0, constr1);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      Constr constr0 = Constr.TAUTOLOGY;
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push(1163);
      vecInt0.remove(1163);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      Constr constr1 = mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      constr1.incActivity(770.744687256);
      int int0 = sizeComparator0.compare(constr1, constr0);
      assertEquals((-771), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      Constr constr0 = Constr.TAUTOLOGY;
      // Undeclared exception!
      try { 
        sizeComparator0.compare(constr0, (Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      Constr constr0 = Constr.TAUTOLOGY;
      int int0 = sizeComparator0.compare(constr0, constr0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      Constr constr0 = Constr.TAUTOLOGY;
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr1 = mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      int int0 = sizeComparator0.compare(constr1, constr0);
      assertEquals(7, int0);
  }
}
