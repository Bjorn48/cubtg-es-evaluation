/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:02:09 GMT 2019
 */

package org.sat4j.minisat.constraints;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.ModelIteratorToSATAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MixedDataStructureDanielWLConciseBinary_ESTest extends MixedDataStructureDanielWLConciseBinary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[2];
      intArray0[0] = 27;
      intArray0[1] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(1.0);
      SearchParams searchParams0 = new SearchParams(2163.2166, 37);
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      ASolverFactory<ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>> aSolverFactory0 = (ASolverFactory<ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>> basicLauncher0 = new BasicLauncher<ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>>(aSolverFactory0);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0, basicLauncher0);
      vecInt0.push(0);
      mixedDataStructureDanielWLConciseBinary0.createClause(vecInt0);
      IVecInt iVecInt0 = vecInt0.push(0);
      mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(iVecInt0, 0);
      assertEquals(0, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      ILits iLits0 = mixedDataStructureDanielWLConciseBinary0.createLits();
      assertEquals(0, iLits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createCardinalityConstraint(vecInt0, (-1330));
      assertEquals((-1330), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(readOnlyVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(1354);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint((IVecInt) null, 964);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt(769);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(iVecInt0, 769);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint((IVecInt) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(46);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(vecInt0, 2948);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        mixedDataStructureDanielWLConciseBinary0.createClause(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt(4988, 2);
      // Undeclared exception!
      mixedDataStructureDanielWLConciseBinary0.createClause(vecInt0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt(5);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createClause(readOnlyVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt(294);
      IVecInt iVecInt0 = vecInt0.push(294);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createClause(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createCardinalityConstraint(readOnlyVecInt0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      VecInt vecInt0 = new VecInt(397, 397);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createCardinalityConstraint(vecInt0, 397);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[2];
      intArray0[0] = 27;
      intArray0[1] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      PureOrder pureOrder0 = new PureOrder(1);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
      mixedDataStructureDanielWLConciseBinary0.createClause(iVecInt0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      IVecInt iVecInt1 = solver1.dimacs2internal(iVecInt0);
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createClause(iVecInt1);
      assertEquals(1, constr0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[2];
      intArray0[0] = 27;
      intArray0[1] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      PureOrder pureOrder0 = new PureOrder(1);
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createClause(iVecInt0);
      assertEquals(1, constr0.size());
      assertFalse(iVecInt0.isEmpty());
      
      Constr constr1 = mixedDataStructureDanielWLConciseBinary0.createClause(iVecInt0);
      assertEquals(2, constr1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[2];
      intArray0[0] = 100;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push(18);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      PureOrder pureOrder0 = new PureOrder(1);
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, miniSATRestarts0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(27);
      mixedDataStructureDanielWLConciseBinary0.createClause(iVecInt0);
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createClause(vecInt0);
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint(readOnlyVecInt0, (-317));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      try { 
        mixedDataStructureDanielWLConciseBinary0.createCardinalityConstraint(vecInt0, 27);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }
}
