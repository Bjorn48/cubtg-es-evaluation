/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 17:30:55 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.dom4j.tree.ConcurrentReaderHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentReaderHashMap_ESTest extends ConcurrentReaderHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      Integer integer0 = new Integer(2140845074);
      assertEquals(2140845074, (int)integer0);
      assertNotNull(integer0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(32);
      assertNotNull(concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ConcurrentReaderHashMap concurrentReaderHashMap3 = (ConcurrentReaderHashMap)concurrentReaderHashMap1.merge(concurrentReaderHashMap0, concurrentReaderHashMap2, biFunction0);
      assertNotNull(concurrentReaderHashMap3);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap3.isEmpty());
      
      int int0 = concurrentReaderHashMap0.capacity();
      assertEquals(4, int0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertNotNull(enumeration0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      BiFunction<Integer, Object, String> biFunction1 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap2.replaceAll(biFunction1);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      
      int int1 = concurrentReaderHashMap1.size();
      assertEquals(1, int1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(int1 == int0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      
      Object object0 = concurrentReaderHashMap2.sput(concurrentReaderHashMap0, (Object) null, 27);
      assertNull(object0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap1.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(701);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      
      Object object0 = concurrentReaderHashMap1.remove((Object) concurrentReaderHashMap2);
      assertNull(object0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      
      Object object1 = concurrentReaderHashMap2.replace((Object) null, (Object) concurrentReaderHashMap1);
      assertNull(object1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      
      Object object2 = concurrentReaderHashMap0.sremove((Object) null, 1445);
      assertNull(object2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap0.replace((Object) null, (Object) null, (Object) null);
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Map.Entry<Integer, ConcurrentReaderHashMap> map_Entry0 = (Map.Entry<Integer, ConcurrentReaderHashMap>) mock(Map.Entry.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(map_Entry0).getKey();
      boolean boolean1 = concurrentReaderHashMap0.findAndRemoveEntry(map_Entry0);
      assertFalse(boolean1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      Object object3 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertNull(object3);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      Set set0 = concurrentReaderHashMap0.keySet();
      assertNotNull(set0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertNotNull(concurrentReaderHashMap3);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap3.capacity());
      
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1, 1);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1134, 32);
      assertNotNull(concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap1.eq(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertTrue(boolean0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.clear();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Collection collection0 = concurrentReaderHashMap0.values();
      assertNotNull(collection0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(3177);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      float float0 = concurrentReaderHashMap0.loadFactor();
      assertEquals(0.75F, float0, 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      String string0 = "_xO!XlG(AJ*M63+]6";
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry((-1699), "I+mG:uw9m", concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      assertNotNull(concurrentReaderHashMap_Entry1);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      concurrentReaderHashMap_KeyIterator0.entry = concurrentReaderHashMap_Entry1;
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      Object object0 = concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      assertNull(object0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      Object object1 = concurrentReaderHashMap0.sput("_xO!XlG(AJ*M63+]6", (Object) null, 3177);
      assertNull(object1);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap_ValueIterator0.forEachRemaining(consumer0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.put((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(490, 490);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(490.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(490.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      BiFunction<String, Object, Object> biFunction0 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      boolean boolean0 = concurrentReaderHashMap0.containsValue(concurrentReaderHashMap1);
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(490.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      Object object0 = concurrentReaderHashMap0.compute(concurrentReaderHashMap1, biFunction0);
      assertNull(object0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(490.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      String string0 = "org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator";
      Object object1 = unaryOperator0.apply("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator");
      assertEquals("org.dom4j.tree.ConcurrentReaderHashMap$KeyIterator", object1);
      assertNotNull(object1);
      assertTrue(object1.equals((Object)string0));
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      assertNotNull(function1);
      
      Function<AbstractMap.SimpleEntry<Integer, Integer>, Object> function2 = function1.compose((Function<? super AbstractMap.SimpleEntry<Integer, Integer>, ?>) unaryOperator0);
      assertNotNull(function2);
      
      Function<Object, Object> function3 = unaryOperator0.compose((Function<? super Object, ?>) function1);
      assertNotNull(function3);
      assertFalse(function3.equals((Object)function1));
      
      Function<Object, Object> function4 = function1.compose((Function<? super Object, ?>) unaryOperator0);
      assertNotNull(function4);
      assertFalse(function1.equals((Object)function3));
      assertFalse(function4.equals((Object)function3));
      assertFalse(function4.equals((Object)function1));
      assertNotSame(function4, function3);
      
      Function<Object, Object> function5 = unaryOperator0.andThen((Function<? super Object, ?>) function4);
      assertNotNull(function5);
      assertFalse(function1.equals((Object)function4));
      assertFalse(function1.equals((Object)function3));
      assertFalse(function4.equals((Object)function3));
      assertFalse(function4.equals((Object)function1));
      assertFalse(function5.equals((Object)function3));
      assertFalse(function5.equals((Object)function4));
      assertFalse(function5.equals((Object)function1));
      assertNotSame(function1, function5);
      assertNotSame(function4, function3);
      assertNotSame(function5, function1);
      
      Object object2 = concurrentReaderHashMap0.computeIfAbsent((Object) null, unaryOperator0);
      assertNull(object2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(490.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertNotNull(set0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.merge((Object) null, concurrentReaderHashMap1, biFunction0);
      assertNotNull(concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent(concurrentReaderHashMap2, "");
      assertNull(object0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      Object object1 = concurrentReaderHashMap0.remove((Object) concurrentReaderHashMap1);
      assertNull(object1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = (ConcurrentReaderHashMap)concurrentReaderHashMap1.clone();
      assertNotNull(concurrentReaderHashMap3);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap3.size());
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      
      Collection collection0 = concurrentReaderHashMap3.values();
      assertNotNull(collection0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap3.size());
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(3177);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      float float0 = concurrentReaderHashMap0.loadFactor();
      assertEquals(0.75F, float0, 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Integer integer0 = new Integer(197);
      assertEquals(197, (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<String, String, Integer> biFunction0 = (BiFunction<String, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = concurrentReaderHashMap0.merge(integer0, integer0, biFunction0);
      assertEquals(197, object0);
      assertNotNull(object0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object1 = concurrentReaderHashMap0.remove(object0);
      assertEquals(197, object1);
      assertNotNull(object1);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Object object2 = concurrentReaderHashMap0.put((Object) null, object0);
      assertNull(object2);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object3 = concurrentReaderHashMap0.replace((Object) null, (Object) ">x?JF@sD{W");
      assertEquals(197, object3);
      assertNotNull(object3);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Integer integer1 = new Integer(15);
      assertEquals(15, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)object3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object1));
      
      boolean boolean0 = concurrentReaderHashMap0.containsKey(integer1);
      assertFalse(boolean0);
      assertFalse(integer1.equals((Object)object0));
      assertFalse(integer1.equals((Object)object3));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)object1));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(15);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.getTableForReading();
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(32, concurrentReaderHashMap_EntryArray0.length);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(776);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap1.new HashIterator();
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      boolean boolean0 = concurrentReaderHashMap_HashIterator0.hasNext();
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      concurrentReaderHashMap0.values = (Collection) linkedList0;
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.sput(integer0, (Object) null, (-3241));
      assertNull(object0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.forEach(biConsumer0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Integer integer1 = new Integer(68);
      assertEquals(68, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object1 = concurrentReaderHashMap0.sremove(concurrentReaderHashMap0, 68);
      assertNull(object1);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(7240);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.lastWrite;
      assertNull(object0);
      
      Object object1 = concurrentReaderHashMap0.sput(concurrentReaderHashMap0, (Object) null, 2508);
      assertNull(object1);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object2 = concurrentReaderHashMap0.putIfAbsent(integer0, concurrentReaderHashMap0);
      assertNull(object2);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object3 = concurrentReaderHashMap0.get(32);
      assertNull(object3);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap0.eq(integer0, (Object) null);
      assertFalse(boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Collection collection0 = concurrentReaderHashMap0.values();
      assertNotNull(collection0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap_ValueIterator0.next();
      assertNotNull(concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(7240, concurrentReaderHashMap1, (Object) null, (ConcurrentReaderHashMap.Entry) null);
      assertNotNull(concurrentReaderHashMap_Entry1);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      String string0 = concurrentReaderHashMap_Entry1.toString();
      assertEquals("{-1=(this Map)}=null", string0);
      assertNotNull(string0);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      Integer integer1 = new Integer(7240);
      assertEquals(7240, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object4 = concurrentReaderHashMap0.sput(integer1, integer1, 7240);
      assertNull(object4);
      assertFalse(integer1.equals((Object)integer0));
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(3, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
  }
}
