/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 18:04:07 GMT 2019
 */

package net.virtualinfinity.atrobots.arena;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.arena.Explosion;
import net.virtualinfinity.atrobots.arena.LinearDamageFunction;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.arenaobjects.ArenaObject;
import net.virtualinfinity.atrobots.hardware.missiles.Missile;
import net.virtualinfinity.atrobots.measures.AbsoluteAngle;
import net.virtualinfinity.atrobots.measures.Vector;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearDamageFunction_ESTest extends LinearDamageFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Position position0 = Position.random((-1723.251), (-1723.251), 1100.0, (-2275.2014849737));
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, (-1723.251), 0.0);
      double double0 = linearDamageFunction0.getRadius();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Position position0 = Position.random((-3.07621892), 0.0, 0.0, 1893.4542958316258);
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 0.0, (-3.07621892));
      double double0 = linearDamageFunction0.getRadius();
      assertEquals((-3.07621892), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Position position0 = Position.random(450.0, 450.0, 2192.0, 0.0);
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 2192.0, 0.0);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("", 181, robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian(0.0, 1.0);
      Missile missile0 = new Missile(robot0, position0, absoluteAngle0, 0.0, false);
      double double0 = linearDamageFunction0.getDamageAmount(missile0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, linearDamageFunction0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Position position0 = Position.random((-1723.251), (-1723.251), 1100.0, (-2275.2014849737));
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, (-1723.251), 0.0);
      Position position1 = Position.random(0.5, 0.0, 6.283185307179586, 6.283185307179586);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("", 181, robotScoreKeeper0);
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromCartesian(0.0, 1.0);
      Missile missile0 = new Missile(robot0, position1, absoluteAngle0, 0.0, false);
      double double0 = linearDamageFunction0.getDamageAmount(missile0);
      assertEquals(4271745.920393117, double0, 0.01);
      assertEquals(0.0, linearDamageFunction0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Position position0 = new Position();
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, (-1435.92), (-1435.92));
      linearDamageFunction0.getCenter();
      assertEquals((-1435.92), linearDamageFunction0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AbsoluteAngle absoluteAngle0 = AbsoluteAngle.fromRadians(64.0);
      Vector vector0 = absoluteAngle0.toUnitVector();
      Explosion explosion0 = new Explosion(vector0, (-83.509));
      Position position0 = explosion0.getPosition();
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 1.0, 0.0);
      linearDamageFunction0.getCenter();
      assertEquals(0.0, linearDamageFunction0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction((Position) null, (-1011.6), (-1011.6));
      // Undeclared exception!
      try { 
        linearDamageFunction0.getDamageAmount((ArenaObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.LinearDamageFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction((Position) null, 25.0, 25.0);
      // Undeclared exception!
      try { 
        linearDamageFunction0.getCenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.LinearDamageFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Position position0 = Position.random(1.0, 1.0, 1.0, 1.0);
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 1.0, 1.0);
      double double0 = linearDamageFunction0.getRadius();
      assertEquals(1.0, double0, 0.01);
  }
}
