/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 19:02:11 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall((-3525.23F), (-3525.23F), (-3525.23F), 1497.72F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5022.95F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5022.95F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1013.755F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3525.23F), wall0.getXEnd(), 0.01F);
      assertEquals(1497.72F, wall0.getYEnd(), 0.01F);
      assertEquals((-3525.23F), wall0.getYStart(), 0.01F);
      assertEquals((-3525.23F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3525.23F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(639.0767F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2886.1533F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5022.95F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5022.95F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2886.1533F), wall0.getXEnd(), 0.01F);
      assertEquals((-1013.755F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1497.72F, wall0.getYEnd(), 0.01F);
      assertEquals((-2886.1533F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3525.23F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(5022.95F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2886.1533F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5022.95F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5022.95F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2886.1533F), wall0.getXEnd(), 0.01F);
      assertEquals((-1013.755F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1497.72F, wall0.getYEnd(), 0.01F);
      assertEquals((-2886.1533F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3525.23F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLeftSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2886.1533F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5022.95F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5022.95F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2886.1533F), wall0.getXEnd(), 0.01F);
      assertEquals((-1013.755F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1497.72F, wall0.getYEnd(), 0.01F);
      assertEquals((-2886.1533F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3525.23F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", uRLContent0, (-1.0F), 0.0F, "com.eteks.sweethome3d.model.BackgroundImage");
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertNotNull(catalogTexture0);
      
      wall0.setPattern(catalogTexture0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2886.1533F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(5022.95F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5022.95F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2886.1533F), wall0.getXEnd(), 0.01F);
      assertEquals((-1013.755F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1497.72F, wall0.getYEnd(), 0.01F);
      assertEquals((-2886.1533F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3525.23F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), 206.914F, 206.914F, (-1041.0F));
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((-2792.4));
      assertEquals((-2792.4F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals((-2792.4F), float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2535499.2F, wall0.getLength(), 0.01F);
      assertEquals((-568.4027F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-265.68332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2792.4F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2535499.2F, wall0.getLength(), 0.01F);
      assertEquals((-568.4027F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-265.68332F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2792.4F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(2084, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall((-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F));
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-335.64337F), (-335.64337F), (-335.64337F));
      assertFalse(boolean0);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setXEnd((-335.64337F));
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-335.64337F), float0, 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      linkedList0.addFirst(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.offerLast(wall0);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = new LinkedList<Wall>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(wall0));
      
      Float float0 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      linkedList0.addFirst(wall0);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.offerLast(wall0);
      assertTrue(boolean0);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      Float float0 = new Float(2.0);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals(2.0F, float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      int int0 = Float.compare(1.0F, (-451.10004F));
      assertEquals(1, int0);
      
      float float4 = ((Float)(-451.10004F)).floatValue();
      assertEquals((-451.10004F), float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      Float float5 = new Float((double) 1);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      float float6 = float5.floatValue();
      assertEquals(1.0F, float6, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      int int1 = Float.floatToIntBits((-1264.8F));
      assertEquals((-996271718), int1);
      assertFalse(int1 == int0);
      
      int int2 = Float.floatToIntBits(1344.6F);
      assertEquals(1151865651, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = Float.floatToIntBits(0.0F);
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = Float.floatToIntBits(1151865651);
      assertEquals(1317621798, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float7 = wall0.getYArcCircleCenter();
      assertEquals((-167.3719F), float7, 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(2273.0F, 330.91F, 0.01F, 0.1F);
      assertFalse(boolean1);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean1 == boolean0);
      
      float float8 = wall0.getYEnd();
      assertEquals(0.0F, float8, 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertEquals(float8, float2, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(level0);
      
      Float float9 = wall0.getArcExtent();
      assertEquals(0.0F, (float)float9, 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(float9);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertEquals((float)float9, (float)float1, 0.01F);
      assertEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertEquals((float)float9, (float)float2, 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      float float10 = wall0.getLength();
      assertEquals(334.7438F, float10, 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float10, float4, 0.01F);
      assertNotEquals(float10, float3, 0.01F);
      assertNotEquals(float10, float6, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      assertNotEquals(float10, float2, 0.01F);
      assertNotEquals(float10, float7, 0.01F);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertFalse(boolean2);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-245.5514F));
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Level level0 = new Level("|hkV", (-1.0F), (-1.0F), 1757.1099F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals("|hkV", level0.getName());
      assertEquals(1757.1099F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      level0.setHeight(1947.4F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(1947.4F, level0.getHeight(), 0.01F);
      assertEquals("|hkV", level0.getName());
      
      Level level1 = level0.clone();
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(1947.4F, level0.getHeight(), 0.01F);
      assertEquals("|hkV", level0.getName());
      assertEquals("|hkV", level1.getName());
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1947.4F, level1.getHeight(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("[4QpBcD?U&jZk,l", (PropertyChangeListener) null);
      assertEquals("[4QpBcD?U&jZk,l", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(1947.4F, level0.getHeight(), 0.01F);
      assertEquals("|hkV", level0.getName());
      assertEquals("[4QpBcD?U&jZk,l", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      level0.setElevation((-1.0F));
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(1947.4F, level0.getHeight(), 0.01F);
      assertEquals("|hkV", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      wall0.setLevel(level0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(1947.4F, level0.getHeight(), 0.01F);
      assertEquals("|hkV", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertTrue(boolean0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(1947.4F, level0.getHeight(), 0.01F);
      assertEquals("|hkV", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertTrue(boolean1);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(1947.4F, level0.getHeight(), 0.01F);
      assertEquals("|hkV", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
      assertTrue(boolean1 == boolean0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(textureImage0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Level level2 = wall0.getLevel();
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1.0F), level2.getElevation(), 0.01F);
      assertEquals(1947.4F, level2.getHeight(), 0.01F);
      assertEquals("|hkV", level2.getName());
      assertNotSame(level2, level1);
      assertSame(level2, level0);
      assertNotNull(level2);
      assertFalse(level2.equals((Object)level1));
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertFalse(boolean2);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Float float0 = new Float(1757.1099F);
      assertEquals(1757.1099F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max((-4338.9F), (-245.5514F));
      assertEquals((-245.5514F), float1, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1757.1099F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      boolean boolean3 = wall0.isTrapezoidal();
      assertFalse(boolean3);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1757.1099F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-245.5514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1757.1099F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall((-202.54F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-202.54F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(838.46F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-621.77F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(838.46F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-202.54F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(838.46F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-621.77F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(838.46F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-621.77F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-202.54F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(838.46F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(838.46F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float0 = new Float(3603.7274044);
      assertEquals(3603.7273F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(3603.7274044);
      assertEquals(3603.7273F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(31.759594F);
      assertEquals(31.759594F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(31.759594F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall1.setXStart(1.0F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-202.54F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(838.46F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-621.77F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(838.46F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1042.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1042.0F, wall1.getLength(), 0.01F);
      assertEquals((-520.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = Float.valueOf((-2419.0F));
      assertEquals((-2419.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      Float float5 = Float.valueOf((-202.54F));
      assertEquals((-202.54F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      float float6 = float0.floatValue();
      assertEquals(3603.7273F, float6, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      
      wall0.setArcExtent(float4);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-32867.41F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-202.54F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(838.46F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-621.77F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.6994768E7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2419.0F), wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float6, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-32867.41F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-202.54F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(838.46F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-621.77F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.6994768E7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2419.0F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1042.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1042.0F, wall1.getLength(), 0.01F);
      assertEquals((-520.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(187.229F, 3965.96F, 3965.96F, 0.0F, 3965.96F, 630.0513F);
      assertEquals(5477.9233F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1982.98F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2076.5945F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3965.96F, wall0.getYStart(), 0.01F);
      assertEquals(630.0513F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3965.96F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5477.9233F, wall0.getLength(), 0.01F);
      assertEquals(3965.96F, wall0.getXEnd(), 0.01F);
      assertEquals(187.229F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(" doesn't contain texture ", "^.&TYq. 6:", object0, " doesn't contain texture ");
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string0);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string1);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      
      String string2 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string2);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string2);
      
      String string3 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string3);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string3);
      
      String string4 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string4);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string4);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(5477.9233F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1982.98F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2076.5945F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3965.96F, wall0.getYStart(), 0.01F);
      assertEquals(630.0513F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3965.96F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5477.9233F, wall0.getLength(), 0.01F);
      assertEquals(3965.96F, wall0.getXEnd(), 0.01F);
      assertEquals(187.229F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setLeftSideColor(integer1);
      assertEquals(5477.9233F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1982.98F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2076.5945F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3965.96F, wall0.getYStart(), 0.01F);
      assertEquals(630.0513F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3965.96F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5477.9233F, wall0.getLength(), 0.01F);
      assertEquals(3965.96F, wall0.getXEnd(), 0.01F);
      assertEquals(187.229F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint(0.0F, 0, 630.0513F);
      assertTrue(boolean0);
      assertEquals(5477.9233F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1982.98F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2076.5945F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3965.96F, wall0.getYStart(), 0.01F);
      assertEquals(630.0513F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3965.96F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5477.9233F, wall0.getLength(), 0.01F);
      assertEquals(3965.96F, wall0.getXEnd(), 0.01F);
      assertEquals(187.229F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(5477.9233F, float0, 0.01F);
      assertEquals(5477.9233F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1982.98F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2076.5945F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3965.96F, wall0.getYStart(), 0.01F);
      assertEquals(630.0513F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3965.96F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5477.9233F, wall0.getLength(), 0.01F);
      assertEquals(3965.96F, wall0.getXEnd(), 0.01F);
      assertEquals(187.229F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals(0, (int)integer2);
      assertEquals(5477.9233F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1982.98F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2076.5945F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3965.96F, wall0.getYStart(), 0.01F);
      assertEquals(630.0513F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3965.96F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5477.9233F, wall0.getLength(), 0.01F);
      assertEquals(3965.96F, wall0.getXEnd(), 0.01F);
      assertEquals(187.229F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNotNull(integer2);
      
      wall0.setThickness(3965.96F);
      assertEquals(5477.9233F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1982.98F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2076.5945F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3965.96F, wall0.getYStart(), 0.01F);
      assertEquals(630.0513F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3965.96F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5477.9233F, wall0.getLength(), 0.01F);
      assertEquals(3965.96F, wall0.getXEnd(), 0.01F);
      assertEquals(187.229F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      
      boolean boolean1 = wall0.containsWallEndAt((-1.0F), (-2312.5007F), (-2312.5007F));
      assertFalse(boolean1);
      assertEquals(5477.9233F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1982.98F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2076.5945F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3965.96F, wall0.getYStart(), 0.01F);
      assertEquals(630.0513F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3965.96F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5477.9233F, wall0.getLength(), 0.01F);
      assertEquals(3965.96F, wall0.getXEnd(), 0.01F);
      assertEquals(187.229F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), 206.914F, 206.914F, (-1041.0F), (-1041.0F));
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1041.0F));
      assertEquals((-1041.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1569.632F);
      assertEquals(1569.632F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(1569.632F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeight((Float) 1569.632F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1569.632F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = wall1.getHeight();
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertNull(float3);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1569.632F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float4 = new Float(1.0179149190214787E-12);
      assertEquals(1.0179149E-12F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      Float float5 = Float.valueOf((-654.0F));
      assertEquals((-654.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      Float float6 = Float.valueOf((-654.0F));
      assertEquals((-654.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      
      float float7 = float6.floatValue();
      assertEquals((-654.0F), float7, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      
      Float float8 = new Float((double) (-1041.0F));
      assertEquals((-1041.0F), (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      
      float float9 = float5.floatValue();
      assertEquals((-654.0F), float9, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float7, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float8, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float6, 0.01F);
      assertEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1569.632F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
      
      Float float10 = Float.valueOf(830.89F);
      assertEquals(830.89F, (float)float10, 0.01F);
      assertNotNull(float10);
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float7, 0.01F);
      assertNotEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertNotEquals((float)float10, (float)float6, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      
      wall2.setArcExtent(float10);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(830.89F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(633768.0F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2256.0825F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1569.632F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float7, 0.01F);
      assertNotEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertNotEquals((float)float10, (float)float6, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1569.632F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("B0L(,jAmSAqRZ/", temporaryURLContent0, (-4972.91F), 1131.397F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("B0L(,jAmSAqRZ/", catalogTexture0.getName());
      assertEquals((-4972.91F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNotNull(catalogTexture0);
      
      String string0 = catalogTexture0.getName();
      assertEquals("B0L(,jAmSAqRZ/", string0);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("B0L(,jAmSAqRZ/", catalogTexture0.getName());
      assertEquals((-4972.91F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNotNull(string0);
      
      Content content0 = catalogTexture0.getImage();
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("B0L(,jAmSAqRZ/", catalogTexture0.getName());
      assertEquals((-4972.91F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertSame(temporaryURLContent0, content0);
      assertSame(content0, temporaryURLContent0);
      assertNotNull(content0);
      
      float float1 = catalogTexture0.getWidth();
      assertEquals((-4972.91F), float1, 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("B0L(,jAmSAqRZ/", catalogTexture0.getName());
      assertEquals((-4972.91F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertSame(temporaryURLContent0, content0);
      
      float float2 = catalogTexture0.getHeight();
      assertEquals(1131.397F, float2, 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("B0L(,jAmSAqRZ/", catalogTexture0.getName());
      assertEquals((-4972.91F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertSame(temporaryURLContent0, content0);
      assertNotEquals(float2, float1, 0.01F);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("B0L(,jAmSAqRZ/", catalogTexture0.getName());
      assertEquals((-4972.91F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("B0L(,jAmSAqRZ/", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-4972.91F), homeTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, homeTexture0.getHeight(), 0.01F);
      assertNotNull(homeTexture0);
      
      wall0.setRightSideTexture(homeTexture0);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("B0L(,jAmSAqRZ/", catalogTexture0.getName());
      assertEquals((-4972.91F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("B0L(,jAmSAqRZ/", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-4972.91F), homeTexture0.getWidth(), 0.01F);
      assertEquals(1131.397F, homeTexture0.getHeight(), 0.01F);
      assertSame(temporaryURLContent0, content0);
      
      Float float3 = new Float(1700.4711F);
      assertEquals(1700.4711F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      wall0.setHeight(float3);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean1 = Float.isFinite(0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals(1177.8855F, float4, 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      Float float5 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      float float6 = float5.floatValue();
      assertEquals(1.0E-10F, float6, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      
      float float7 = float5.floatValue();
      assertEquals(1.0E-10F, float7, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float6, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      
      wall0.setArcExtent((Float) 1.0E-10F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1045.1697F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0451697E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1177.8843F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1045.1697F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0451697E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1177.8843F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(66, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall(206.914F, 1.0F, 1.0F, 206.914F, 206.914F, 1.0F);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setLeftSideShininess(475);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Level level0 = wall0.getLevel();
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(level0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = wall0.clone();
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(291.20636F, wall1.getLength(), 0.01F);
      assertEquals(103.957F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(291.20636F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(103.957F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall1.getXStart(), 0.01F);
      assertEquals(475.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart(36.96454F);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(266.9895F, wall1.getLength(), 0.01F);
      assertEquals(266.9895F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.957F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(36.96454F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(121.93927F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(206.914F, wall1.getXStart(), 0.01F);
      assertEquals(475.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = Float.valueOf((-2262.0F));
      assertEquals((-2262.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = Float.valueOf((-2262.0F));
      assertEquals((-2262.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall0.setArcExtent(float2);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3967.112F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2262.0F), wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall1.setLevel((Level) null);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3967.112F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2262.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(266.9895F, wall1.getLength(), 0.01F);
      assertEquals(266.9895F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.957F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(36.96454F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(121.93927F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(206.914F, wall1.getXStart(), 0.01F);
      assertEquals(475.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3967.112F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2262.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(206.914F, wall2.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-2262.0F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3967.112F, wall2.getYArcCircleCenter(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(475.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall2.getYEnd(), 0.01F);
      assertEquals(291.20636F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall2));
      
      boolean boolean0 = linkedList0.add(wall1);
      assertTrue(boolean0);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3967.112F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2262.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(266.9895F, wall1.getLength(), 0.01F);
      assertEquals(266.9895F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.957F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(36.96454F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(121.93927F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(206.914F, wall1.getXStart(), 0.01F);
      assertEquals(475.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(linkedList0.contains(wall2));
      assertTrue(linkedList0.contains(wall1));
      
      boolean boolean1 = wall2.isTrapezoidal();
      assertTrue(boolean1);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3967.112F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2262.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(206.914F, wall2.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-2262.0F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3967.112F, wall2.getYArcCircleCenter(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(475.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall2.getYEnd(), 0.01F);
      assertEquals(291.20636F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      Float float3 = wall2.getArcExtent();
      assertEquals((-2262.0F), (float)float3, 0.01F);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3967.112F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2262.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(206.914F, wall2.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-2262.0F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3967.112F, wall2.getYArcCircleCenter(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(475.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall2.getYEnd(), 0.01F);
      assertEquals(291.20636F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Integer integer0 = new Integer((-511));
      assertEquals((-511), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = wall2.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3967.112F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2262.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(206.914F, wall2.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-2262.0F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3967.112F, wall2.getYArcCircleCenter(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(475.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall2.getYEnd(), 0.01F);
      assertEquals(291.20636F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Level level1 = new Level("!/", 36.96454F, 206.914F, 475);
      assertEquals(36.96454F, level1.getElevation(), 0.01F);
      assertEquals(475.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(206.914F, level1.getFloorThickness(), 0.01F);
      assertEquals("!/", level1.getName());
      assertNotNull(level1);
      
      boolean boolean3 = wall1.isAtLevel(level1);
      assertFalse(boolean3);
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(475.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3967.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(1.2362432E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3967.112F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2262.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(36.96454F, level1.getElevation(), 0.01F);
      assertEquals(475.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(206.914F, level1.getFloorThickness(), 0.01F);
      assertEquals("!/", level1.getName());
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(266.9895F, wall1.getLength(), 0.01F);
      assertEquals(266.9895F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.957F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(36.96454F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(121.93927F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(206.914F, wall1.getXStart(), 0.01F);
      assertEquals(475.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      
      Float float1 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 1700.4711F);
      assertEquals(1700.4711F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1700.4711F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals(0.01F, float5, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(574.03625F, wall2.getXStart(), 0.01F);
      assertEquals(465.7185F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(614.6681F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(932.437F, wall2.getYStart(), 0.01F);
      assertEquals(932.437F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float6 = new Float((double) 1700.4711F);
      assertEquals(1700.4711F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      wall2.setArcExtent(float6);
      assertEquals(446.85117F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(397.94803F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(878340.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getArcExtent(), 0.01F);
      assertEquals(446.85117F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(397.94803F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(574.03625F, wall2.getXStart(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(932.437F, wall2.getYStart(), 0.01F);
      assertEquals(932.437F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(878340.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(446.85117F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(397.94803F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(878340.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotNull(floatArray0);
      assertEquals(2588, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((-334.7438F));
      assertEquals((-334.7438F), (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall((-1040.4601F), (-1040.4601F), (-1040.4601F), (-1040.4601F), (-1040.4601F), (-1040.4601F));
      assertEquals((-1040.4601F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1040.4601F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1040.4601F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYStart(), 0.01F);
      assertEquals((-1040.4601F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1040.4601F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1040.4601F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1040.4601F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1040.4601F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYStart(), 0.01F);
      assertEquals((-1040.4601F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1040.4601F), wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-1040.4601F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1040.4601F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1040.4601F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYStart(), 0.01F);
      assertEquals((-1040.4601F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1040.4601F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1040.4601F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1040.4601F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1040.4601F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1040.4601F), wall1.getHeight(), 0.01F);
      assertEquals((-1040.4601F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall1.getThickness(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      float float0 = Float.sum((-1040.4601F), (-1040.4601F));
      assertEquals((-2080.9202F), float0, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-1040.4601F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1040.4601F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1040.4601F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYStart(), 0.01F);
      assertEquals((-1040.4601F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1040.4601F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1040.4601F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1040.4601F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1040.4601F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1040.4601F), wall1.getHeight(), 0.01F);
      assertEquals((-1040.4601F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall1.getThickness(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals((-1040.4601F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1040.4601F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1040.4601F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYStart(), 0.01F);
      assertEquals((-1040.4601F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1040.4601F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1040.4601F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1040.4601F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1040.4601F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1040.4601F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1040.4601F), wall1.getHeight(), 0.01F);
      assertEquals((-1040.4601F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1040.4601F), wall1.getThickness(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall((-2126.353F), (-2126.353F), (-2126.353F), (-2126.353F), 0.0F, 0.01F);
      assertEquals((-2126.353F), wall0.getYStart(), 0.01F);
      assertEquals((-2126.353F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2126.353F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2126.353F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2126.353F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2126.353F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.01F, 1324.9045F, 0.0F);
      assertFalse(boolean0);
      assertEquals((-2126.353F), wall0.getYStart(), 0.01F);
      assertEquals((-2126.353F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2126.353F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2126.353F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2126.353F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2126.353F), wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-2126.353F), wall0.getYStart(), 0.01F);
      assertEquals((-2126.353F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2126.353F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2126.353F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2126.353F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2126.353F), wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2126.353F), wall0.getYStart(), 0.01F);
      assertEquals((-2126.353F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2126.353F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2126.353F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2126.353F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2126.353F), wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall((-1669.8F), (-1669.8F), (-1669.8F), (-1669.8F), (-935.138F), (-1669.8F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1669.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-1669.8F), wall0.getXEnd(), 0.01F);
      assertEquals((-1669.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-935.138F), wall0.getThickness(), 0.01F);
      assertEquals((-1669.8F), wall0.getYStart(), 0.01F);
      assertEquals((-1669.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1669.8F), wall0.getHeight(), 0.01F);
      assertEquals((-1669.8F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1669.8F), (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1669.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-1669.8F), wall0.getXEnd(), 0.01F);
      assertEquals((-1669.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-935.138F), wall0.getThickness(), 0.01F);
      assertEquals((-1669.8F), wall0.getYStart(), 0.01F);
      assertEquals((-1669.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1669.8F), wall0.getHeight(), 0.01F);
      assertEquals((-1669.8F), wall0.getXStart(), 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall((-38.06434F), (-38.06434F), 0.0F, 0.0F, 559.5F);
      assertEquals((-19.03217F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(53.831104F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(53.831104F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setYEnd((-369.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(textureImage0);
      
      float float0 = wall0.getThickness();
      assertEquals(559.5F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setXEnd(1623.3F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1694.0042F, wall0.getLength(), 0.01F);
      assertEquals(792.61786F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals(1694.0042F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertEquals(1623.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float(932.437F);
      assertEquals(932.437F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      float float4 = float0.floatValue();
      assertEquals(0.01F, float4, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      
      Float float5 = Float.valueOf((-90.27636F));
      assertEquals((-90.27636F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      float float6 = float3.floatValue();
      assertEquals(932.437F, float6, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      
      wall1.setArcExtent(float1);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(296903.56F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(484.7282F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(833.02344F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float5, 0.01F);
      assertNotEquals((float)float1, (float)float6, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(296903.56F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(484.7282F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(833.02344F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(1506, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(296903.56F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(484.7282F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(833.02344F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(296903.56F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(484.7282F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(833.02344F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray1);
      assertEquals(1506, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      
      float float0 = Float.sum((-1041.0F), (-1041.0F));
      assertEquals((-2082.0F), float0, 0.01F);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getHeight();
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNull(float1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(2039);
      assertEquals(2039, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float(655.3F);
      assertEquals(655.3F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 206.914F, 1.0F, 1.0F, 1.0F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(float0);
      
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", uRLContent0, (-369.0F), (-1.0F), "");
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-369.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertNotNull(catalogTexture0);
      
      wall0.setPattern(catalogTexture0);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-369.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = new Float((-1041.0F));
      assertEquals((-1041.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall((-4546.8F), (-4546.8F), (-4546.8F), (-4546.8F), (-4546.8F));
      assertEquals((-4546.8F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4546.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4546.8F), wall0.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4546.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-4546.8F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4546.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4546.8F), wall0.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4546.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4546.8F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4546.8F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall1.getXStart(), 0.01F);
      assertEquals((-4546.8F), wall1.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-4546.8F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4546.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4546.8F), wall0.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4546.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4546.8F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4546.8F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall1.getXStart(), 0.01F);
      assertEquals((-4546.8F), wall1.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(3881.0F);
      assertEquals(1165135872, int1);
      assertFalse(int1 == int0);
      
      wall1.setHeightAtEnd((Float) 3881.0F);
      assertEquals((-4546.8F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4546.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4546.8F), wall0.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4546.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4546.8F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3881.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-4546.8F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall1.getXStart(), 0.01F);
      assertEquals((-4546.8F), wall1.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(3049.6735609913053);
      assertEquals(3049.6736F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeight(float0);
      assertEquals((-4546.8F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4546.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4546.8F), wall0.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4546.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4546.8F), wall1.getXEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3881.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(3049.6736F, wall1.getHeight(), 0.01F);
      assertEquals((-4546.8F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall1.getXStart(), 0.01F);
      assertEquals((-4546.8F), wall1.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getHeightAtEnd();
      assertEquals(3881.0F, (float)float1, 0.01F);
      assertEquals((-4546.8F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4546.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4546.8F), wall0.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4546.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4546.8F), wall1.getXEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3881.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(3049.6736F, wall1.getHeight(), 0.01F);
      assertEquals((-4546.8F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall1.getXStart(), 0.01F);
      assertEquals((-4546.8F), wall1.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(2.0F);
      assertEquals(2.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall1.setHeight(float2);
      assertEquals((-4546.8F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4546.8F), wall0.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4546.8F), wall0.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4546.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-4546.8F), wall1.getXEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3881.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-4546.8F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYEnd(), 0.01F);
      assertEquals((-4546.8F), wall1.getXStart(), 0.01F);
      assertEquals((-4546.8F), wall1.getThickness(), 0.01F);
      assertEquals((-4546.8F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4546.8F), wall1.getYStart(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.sum(0.0F, 0.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.offerLast(wall0);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      Float float2 = wall0.getArcExtent();
      assertEquals(0.0F, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), 0.0F, (-1.0F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float0 = new Float((-1815.2976735668294));
      assertEquals((-1815.2977F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-334.7438F));
      assertEquals((-334.7438F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float((-4512.01F));
      assertEquals((-4512.01F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      int int0 = Float.compare(0.01F, 0.01F);
      assertEquals(0, int0);
      
      float float3 = ((Float)0.01F).floatValue();
      assertEquals(0.01F, float3, 0.01F);
      
      wall0.setXStart((-1309.4794F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(974.7356F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float4 = Float.valueOf((-334.7438F));
      assertEquals((-334.7438F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, temporaryURLContent0, 0.0F, (-2297.42F));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-2297.42F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      wall1.setPattern(catalogTexture0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(974.7356F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-2297.42F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float5 = new Float((-445.5764968479));
      assertEquals((-445.5765F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      float float6 = ((Float)0.01F).floatValue();
      assertEquals(0.01F, float6, 0.01F);
      assertEquals(float6, float3, 0.01F);
      
      Float float7 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      
      float float8 = Float.max((-1309.4794F), 5726.9976F);
      assertEquals(5726.9976F, float8, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      
      wall0.setArcExtent(float7);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float8, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(66, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      CatalogTexture catalogTexture1 = (CatalogTexture)wall1.getPattern();
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(catalogTexture1.getName());
      assertFalse(catalogTexture1.isModifiable());
      assertEquals((-2297.42F), catalogTexture1.getHeight(), 0.01F);
      assertEquals(0.0F, catalogTexture1.getWidth(), 0.01F);
      assertNull(catalogTexture1.getId());
      assertNull(catalogTexture1.getCreator());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertSame(catalogTexture1, catalogTexture0);
      assertNotNull(catalogTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      Float float9 = wall1.getHeightAtEnd();
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(float9);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 2372.2373F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2372.2373F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float((-2623.549F));
      assertEquals((-2623.549F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      float float1 = Float.sum(0.01F, 0.01F);
      assertEquals(0.02F, float1, 0.01F);
      
      boolean boolean0 = float0.equals(integer0);
      assertFalse(boolean0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2372.2373F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2623.549F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      try { 
        Integer.parseUnsignedInt("]G#F65&MPQk<", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall1.getXStart();
      assertEquals(1700.4711F, float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(32.0F, 32.0F, 32.0F, 32.0F, 32.0F);
      assertEquals(32.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(32.0F, wall0.getYEnd(), 0.01F);
      assertEquals(32.0F, wall0.getYStart(), 0.01F);
      assertEquals(32.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(32.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(32.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(32.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(32.0F);
      assertEquals(32.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(32.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(32.0F, wall0.getYEnd(), 0.01F);
      assertEquals(32.0F, wall0.getYStart(), 0.01F);
      assertEquals(32.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(32.0F, wall0.getHeight(), 0.01F);
      assertEquals(32.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(32.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(32.0F, wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(32.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(32.0F, wall0.getYEnd(), 0.01F);
      assertEquals(32.0F, wall0.getYStart(), 0.01F);
      assertEquals(32.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(32.0F, wall0.getHeight(), 0.01F);
      assertEquals(32.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(32.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(32.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.01F, 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.01F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.495F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.01F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.495F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.01F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.495F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = wall0.getYArcCircleCenter();
      assertEquals((-0.495F), float2, 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.01F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.495F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(1.01F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      float float0 = Float.min(1.0F, 854.1003F);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(854.1003F);
      assertTrue(boolean0);
      
      Float float1 = new Float((double) 854.1003F);
      assertEquals(854.1003F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(854.1003F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getYArcCircleCenter();
      assertEquals((-284.65674F), float3, 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float4, 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNull(level0);
      
      boolean boolean1 = wall0.intersectsRectangle((-164.50792F), (-625.8657F), 1.0F, 0.0F);
      assertTrue(boolean1);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Float float5 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float5, 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNotNull(float5);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      float float6 = wall0.getYEnd();
      assertEquals(206.914F, float6, 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNull(level1);
      
      float float7 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float7, 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float0, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      
      Integer integer0 = new Integer(783);
      assertEquals(783, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.sum(8192, 8192);
      assertEquals(16384, int0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(783, (int)wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      Float float8 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      
      wall0.setHeightAtEnd(float5);
      assertEquals(783, (int)wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(854.1003F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNotEquals((float)float5, (float)float7, 0.01F);
      assertNotEquals((float)float5, (float)float8, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float6, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(783, (int)wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(854.1003F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1442, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLeftSideShininess((-16.0F));
      assertEquals((-16.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-16.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-16.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-3527.014F), (-113.6F), (-3714.708F), 0.0F, (-2626.9666F));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2626.9666F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2626.9666F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float1 = Float.sum(0.0F, (-718.012F));
      assertEquals((-718.012F), float1, 0.01F);
      
      wall0.setLeftSideShininess((-1071.0F));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertEquals((-1071.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2626.9666F), wall0.getHeight(), 0.01F);
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float2 = Float.max((-1018.0F), 1.0F);
      assertEquals(1.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      float float3 = Float.min((-375.72F), (-3527.014F));
      assertEquals((-3527.014F), float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertEquals((-1071.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertEquals((-1071.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(level0);
      
      boolean boolean0 = wall0.containsWallStartAt(1674.661F, (-3527.014F), (-113.6F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertEquals((-1071.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertEquals((-1071.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      float float4 = wall0.getXEnd();
      assertEquals((-113.6F), float4, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertEquals((-1071.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      wall0.setXStart(1.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(219.91414F, wall0.getLength(), 0.01F);
      assertEquals((-1071.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3714.708F), wall0.getYEnd(), 0.01F);
      assertEquals((-113.6F), wall0.getXEnd(), 0.01F);
      assertEquals((-3620.8608F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-56.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3527.014F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(219.91414F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setXStart(206.914F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = wall0.getArcExtent();
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 422.1799F, (-1131.0F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(422.1799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(211.08995F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(422.1799F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(422.1799F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(422.1799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(211.08995F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(422.1799F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(422.1799F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Ca$LCV=.<VT2mNUF", propertyChangeListener1);
      assertEquals("Ca$LCV=.<VT2mNUF", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(422.1799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(211.08995F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(422.1799F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(422.1799F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals("Ca$LCV=.<VT2mNUF", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(422.1799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(211.08995F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(422.1799F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(422.1799F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(propertyChangeListenerProxy1.getPropertyName());
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = Float.isFinite(0.1F);
      assertTrue(boolean0);
      
      boolean boolean1 = Float.isFinite(0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float float1 = Float.min((-1691.333F), (-1131.0F));
      assertEquals((-1691.333F), float1, 0.01F);
      
      boolean boolean2 = float0.equals(object0);
      assertFalse(boolean2);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(422.1799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(211.08995F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(422.1799F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(422.1799F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      wall0.setYEnd((-940.0F));
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertEquals((-470.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1131.0F), wall1.getThickness(), 0.01F);
      assertEquals(940.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(940.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-940.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall0, wall1);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-470.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1131.0F), wall1.getThickness(), 0.01F);
      assertEquals(940.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(940.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-940.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall0, wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals((-470.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1131.0F), wall1.getThickness(), 0.01F);
      assertEquals(940.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(940.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-940.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float2 = wall1.getHeightAtEnd();
      assertEquals((-470.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1131.0F), wall1.getThickness(), 0.01F);
      assertEquals(940.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(940.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-940.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall0, wall1);
      assertNull(float2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
      
      float float3 = wall0.getXEnd();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float1, 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(940.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1131.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-470.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-940.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(940.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(3.141592653589793);
      assertEquals(3.1415927F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals((-334.7438F), float1, 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-49.39F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(level0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = Float.isFinite(2696.0F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float1 = new Float((double) (-49.39F));
      assertEquals((-49.39F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min(0.0F, 2696.0F);
      assertEquals(0.0F, float2, 0.01F);
      
      boolean boolean2 = Float.isFinite((-903.373F));
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = Float.isFinite(2405.535F);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      Float float3 = new Float((-3525.23F));
      assertEquals((-3525.23F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      float float4 = float3.floatValue();
      assertEquals((-3525.23F), float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      float float5 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, float5, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float2, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertNull(level1);
      
      boolean boolean4 = wall0.intersectsRectangle((-625.8657F), (-3525.23F), 1285.4F, 0.0F);
      assertFalse(boolean4);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      Float float6 = wall0.getArcExtent();
      assertEquals((-49.39F), (float)float6, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      float float7 = wall0.getYEnd();
      assertEquals(0.0F, float7, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertEquals(float7, float5, 0.01F);
      assertEquals(float7, float2, 0.01F);
      
      Level level2 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertNull(level2);
      
      float float8 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float8, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertEquals(float8, float2, 0.01F);
      assertEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertEquals(float8, float7, 0.01F);
      
      Integer integer0 = new Integer(764);
      assertEquals(764, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      
      float float9 = wall0.getXStart();
      assertEquals(0.0F, float9, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getArcExtent(), 0.01F);
      assertEquals(float9, float2, 0.01F);
      assertEquals(float9, float8, 0.01F);
      assertEquals(float9, float5, 0.01F);
      assertEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-49.39F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(level0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Float float0 = new Float((-988.6951649));
      assertEquals((-988.6952F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(206.914F, 0.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      boolean boolean1 = Float.isFinite(0.0F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Float float2 = new Float((-2132.1708156522));
      assertEquals((-2132.171F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = Float.min((-49.39F), 0.0F);
      assertEquals((-49.39F), float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      boolean boolean2 = Float.isFinite(0.0F);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = Float.isFinite(0.0F);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      float float4 = float2.floatValue();
      assertEquals((-2132.171F), float4, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      wall0.setArcExtent((Float) (-2132.171F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float5 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, float5, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(float5, float1, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(level1);
      
      boolean boolean4 = wall0.intersectsRectangle(0.0F, 0.0F, (-625.8657F), (-625.8657F));
      assertFalse(boolean4);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      Float float6 = wall0.getArcExtent();
      assertEquals((-2132.171F), (float)float6, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(float6);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      
      Level level2 = wall0.getLevel();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(level2);
      
      float float7 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float7, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals(float7, float3, 0.01F);
      assertEquals(float7, float1, 0.01F);
      assertEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      
      Integer integer0 = new Integer(764);
      assertEquals(764, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      
      Float float8 = new Float(703.016);
      assertEquals(703.016F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float8);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(703.016F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean5 = linkedList0.add(wall0);
      assertTrue(boolean5);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(703.016F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      
      wall0.setThickness((-2239.324F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2239.324F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(703.016F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2239.324F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(703.016F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(0.01F, 0.01F, (-1054.7294F), (-1054.7294F), (-151.61465F));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideShininess(630.00073F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = new Wall((-1.3890862F), (-0.5323695F), (-0.5323695F), (-49.39F), 630.00073F, 0.0F);
      assertEquals((-0.5323695F), wall2.getYStart(), 0.01F);
      assertEquals(630.00073F, wall2.getThickness(), 0.01F);
      assertEquals((-1.3890862F), wall2.getXStart(), 0.01F);
      assertEquals((-49.39F), wall2.getYEnd(), 0.01F);
      assertEquals((-0.5323695F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(48.86514F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-24.961184F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(48.86514F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.9607279F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setYStart(0.01F);
      assertEquals(630.00073F, wall2.getThickness(), 0.01F);
      assertEquals((-1.3890862F), wall2.getXStart(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-49.39F), wall2.getYEnd(), 0.01F);
      assertEquals((-0.5323695F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(49.40743F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-24.69F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(49.40743F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.9607279F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setLevel((Level) null);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertEquals(630.00073F, wall2.getThickness(), 0.01F);
      assertEquals((-1.3890862F), wall2.getXStart(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-49.39F), wall2.getYEnd(), 0.01F);
      assertEquals((-0.5323695F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(49.40743F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-24.69F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(49.40743F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.9607279F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(homeTexture0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall2));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(list0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.contains(wall2));
      assertFalse(list0.contains(wall2));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-49.39F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(level0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((-988.6951649));
      assertEquals((-988.6952F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = Float.isFinite(0.0F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float1 = new Float((-2132.1708156522));
      assertEquals((-2132.171F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min((-49.39F), 0.0F);
      assertEquals((-49.39F), float2, 0.01F);
      
      boolean boolean2 = Float.isFinite(0.0F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = Float.isFinite(0.0F);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      float float3 = float1.floatValue();
      assertEquals((-2132.171F), float3, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      wall0.setArcExtent((Float) (-2132.171F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, float4, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(level1);
      
      boolean boolean4 = wall0.intersectsRectangle(0.0F, 0.0F, (-625.8657F), (-625.8657F));
      assertFalse(boolean4);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      
      Float float5 = wall0.getArcExtent();
      assertEquals((-2132.171F), (float)float5, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      float float6 = wall0.getYEnd();
      assertEquals(0.0F, float6, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      
      Level level2 = wall0.getLevel();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(level2);
      
      float float7 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float7, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertEquals(float7, float4, 0.01F);
      assertEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      
      Integer integer0 = new Integer(764);
      assertEquals(764, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Float float8 = new Float(703.016);
      assertEquals(703.016F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      
      wall0.setHeightAtEnd(float8);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(703.016F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      
      wall0.setThickness((-2239.324F));
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(703.016F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2239.324F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(703.016F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2239.324F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-334.7438F));
      assertEquals((-334.7438F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall((-3787.0F), 0.01F, 2687.0376F, (-3787.0F), (-3787.0F), 0.0F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-3787.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1893.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3787.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-549.9812F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(7500.307F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2687.0376F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7500.307F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3787.0F), wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getHeight();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-3787.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1893.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3787.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-549.9812F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(7500.307F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2687.0376F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7500.307F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3787.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotNull(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall2 = wall1.clone();
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-3787.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1893.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3787.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-549.9812F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(7500.307F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2687.0376F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7500.307F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3787.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(7500.307F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-3787.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-549.9812F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(7500.307F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3787.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1893.495F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3787.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2687.0376F, wall2.getXEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float2 = new Float(2425.1F);
      assertEquals(2425.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float2.equals(object0);
      assertFalse(boolean0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall2.setHeight(float2);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-3787.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1893.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3787.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-549.9812F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(7500.307F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2687.0376F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7500.307F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-3787.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(7500.307F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-3787.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-549.9812F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2425.1F, wall2.getHeight(), 0.01F);
      assertEquals(7500.307F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3787.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1893.495F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3787.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2687.0376F, wall2.getXEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 2.0F, 813.54F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(813.54F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(813.54F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(656.682F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(813.54F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(813.54F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(textureImage0);
      
      TextureImage textureImage1 = wall0.getPattern();
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(813.54F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(textureImage1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(31.759594F, 31.759594F, 31.759594F, 31.759594F, 31.759594F, 31.759594F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(31.759594F);
      assertEquals(31.759594F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(31.759594F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(31.759594F, float1, 0.01F);
      assertEquals(31.759594F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(3009.0F, 288.87296F, 64.689F, 3009.0F, 2.0F, 2096.85F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(" doesn't contain texture ", "^.&TYq. 6:", object0, " doesn't contain texture ");
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string0);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.toString();
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string2);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string3);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string4);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      
      String string5 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string5);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = new Float(2096.85F);
      assertEquals(2096.85F, float0, 0.01F);
      
      Integer integer0 = new Integer((-2302));
      assertEquals((-2302), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = integer0.equals((Object) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean2 = integer0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Integer integer1 = Integer.valueOf(2295);
      assertEquals(2295, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      wall0.setRightSideColor(integer1);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2295, (int)wall0.getRightSideColor());
      assertFalse(integer1.equals((Object)integer0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2295, (int)wall0.getRightSideColor());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2295, (int)wall0.getRightSideColor());
      
      float float1 = wall0.getXEnd();
      assertEquals(64.689F, float1, 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2295, (int)wall0.getRightSideColor());
      assertNotEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall((-714.4006F), 1668.3F, (-656.66565F), 1.0F, 1.0F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-714.4006F), 1668.3F, 0.0F);
      assertTrue(boolean0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-685.5331F), float0, 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean1 = wall0.intersectsRectangle(1.0F, 1.0F, 2768.45F, 0.0F);
      assertFalse(boolean1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = Float.isFinite(932.437F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      wall1.setHeight(float0);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 1700.4711F);
      assertEquals(1700.4711F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1700.4711F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals(0.01F, float5, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(936.9677F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(932.437F, wall2.getThickness(), 0.01F);
      assertEquals(932.437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(465.7185F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(614.6681F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall2.getXStart(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float6 = new Float(0.0F);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall2.setArcExtent(float6);
      assertEquals(7.6220917E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6.6356874E17F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(936.9677F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(932.437F, wall2.getThickness(), 0.01F);
      assertEquals(932.437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(6.6356874E17F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(7.6220917E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall2.getXStart(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(7.6220917E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6.6356874E17F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(floatArray1, floatArray0);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      float float7 = wall0.getLength();
      assertEquals(936.9677F, float7, 0.01F);
      assertEquals(7.6220917E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6.6356874E17F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 1.0F, 2885.3914F, 1.0F, (-1.0F));
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2886.392F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2886.392F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1442.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2886.392F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2886.392F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1442.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLeftSideShininess((-3155.021F));
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2886.392F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2886.392F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1442.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setXEnd(1092.1353F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3086.4543F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(545.5676F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertEquals(3086.4543F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1442.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1092.1353F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall1.getThickness();
      assertEquals(655.3F, float1, 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setXEnd(1092.1353F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3086.4543F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(545.5676F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertEquals(3086.4543F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1442.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1092.1353F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(31.759594F, 31.759594F, 31.759594F, 31.759594F, 31.759594F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Level level0 = new Level(".I|6Y^Mr8Av", 31.759594F, 31.759594F, 31.759594F);
      assertEquals(31.759594F, level0.getElevation(), 0.01F);
      assertEquals(31.759594F, level0.getFloorThickness(), 0.01F);
      assertEquals(".I|6Y^Mr8Av", level0.getName());
      assertEquals(31.759594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(31.759594F, level0.getElevation(), 0.01F);
      assertEquals(31.759594F, level0.getFloorThickness(), 0.01F);
      assertEquals(".I|6Y^Mr8Av", level0.getName());
      assertEquals(31.759594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(31.759594F, level1.getElevation(), 0.01F);
      assertEquals(31.759594F, level1.getFloorThickness(), 0.01F);
      assertEquals(".I|6Y^Mr8Av", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(31.759594F, level1.getHeight(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(31.759594F, level0.getElevation(), 0.01F);
      assertEquals(31.759594F, level0.getFloorThickness(), 0.01F);
      assertEquals(".I|6Y^Mr8Av", level0.getName());
      assertEquals(31.759594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotSame(level0, level1);
      assertFalse(level0.equals((Object)level1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(115.22698F, 1.0F, 206.914F, 1.0F, (-859.93F));
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 1.0F, 1.0F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = Float.sum(0.0F, (-859.93F));
      assertEquals((-859.93F), float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(15);
      assertEquals(15, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), 206.914F, 206.914F, (-1041.0F));
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((-2792.4));
      assertEquals((-2792.4F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals((-2792.4F), float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float3 = new Float(1.0);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      float float4 = float3.floatValue();
      assertEquals(1.0F, float4, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-417.043F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals(1764.8169F, wall1.getLength(), 0.01F);
      assertEquals((-417.043F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.setArcExtent(float0);
      assertEquals((-325.28073F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-508.80527F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(14270.397F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-16.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertEquals(14270.397F, wall1.getLength(), 0.01F);
      assertEquals((-508.80527F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-16.0F), wall1.getArcExtent(), 0.01F);
      assertEquals((-325.28073F), wall1.getYArcCircleCenter(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals((-325.28073F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-508.80527F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(14270.397F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-16.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertEquals(14270.397F, wall1.getLength(), 0.01F);
      assertEquals((-508.80527F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-16.0F), wall1.getArcExtent(), 0.01F);
      assertEquals((-325.28073F), wall1.getYArcCircleCenter(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(158, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall((-335.64337F), (-335.64337F), (-1405.45F), (-1295.3384F), (-335.64337F), (-335.64337F));
      assertEquals((-815.49084F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1437.1849F, wall0.getLength(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1437.1849F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.54663F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-1295.3384F), wall0.getYEnd(), 0.01F);
      assertEquals((-1405.45F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean0 = integer0.equals(integer1);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      wall0.setLeftSideColor(integer1);
      assertEquals((-815.49084F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1437.1849F, wall0.getLength(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1437.1849F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.54663F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-1295.3384F), wall0.getYEnd(), 0.01F);
      assertEquals((-1405.45F), wall0.getXEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertTrue(integer1.equals((Object)integer0));
      
      wall0.setLeftSideColor(integer1);
      assertEquals((-815.49084F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1437.1849F, wall0.getLength(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1437.1849F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.54663F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-1295.3384F), wall0.getYEnd(), 0.01F);
      assertEquals((-1405.45F), wall0.getXEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 206.914F, 206.914F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setLeftSideShininess(296.298F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("_", propertyChangeListener0);
      assertEquals("_", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals("_", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.intersectsRectangle(296.298F, 206.914F, 206.914F, 480.0F);
      assertFalse(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(296.298F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(103.457F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals(292.62057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(292.62057F, wall1.getLength(), 0.01F);
      assertEquals(103.457F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(296.298F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(103.457F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals(292.62057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(292.62057F, wall1.getLength(), 0.01F);
      assertEquals(103.457F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(292.62057F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(103.457F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(296.298F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(206.914F, wall2.getYEnd(), 0.01F);
      assertEquals(206.914F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-16.0F), wall2.getHeight(), 0.01F);
      assertEquals(292.62057F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(103.457F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setRightSideShininess((-2297.42F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2297.42F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(296.298F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(103.457F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2297.42F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals(292.62057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(292.62057F, wall1.getLength(), 0.01F);
      assertEquals(103.457F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      
      Float float1 = wall1.getArcExtent();
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2297.42F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(296.298F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(103.457F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2297.42F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals(292.62057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(292.62057F, wall1.getLength(), 0.01F);
      assertEquals(103.457F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertSame(wall1, wall0);
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      
      float float2 = wall0.getLength();
      assertEquals(292.62057F, float2, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2297.42F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall2));
      
      Wall wall3 = wall0.clone();
      assertNull(wall0.getLeftSideColor());
      assertEquals(292.62057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2297.42F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(103.457F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(292.62057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-16.0F), wall3.getHeight(), 0.01F);
      assertEquals(103.457F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(292.62057F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(206.914F, wall3.getXEnd(), 0.01F);
      assertEquals(296.298F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(206.914F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(292.62057F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(103.457F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2297.42F), wall3.getRightSideShininess(), 0.01F);
      assertSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setThickness(63.621853F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall((-1744.7346F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1744.7346F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(703.7346F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(703.7346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1392.8673F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.compare(1648.989F, 1648.989F);
      assertEquals(0, int0);
      
      wall1.setArcExtent((Float) 1648.989F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1744.7346F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1648.989F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(703.7346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(589075.94F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-979.3075F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1392.8673F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1744.7346F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1648.989F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(703.7346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(589075.94F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-979.3075F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1392.8673F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("L4b|anqd", temporaryURLContent0, 1648.989F, 1.0F, false);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("L4b|anqd", catalogTexture0.getName());
      assertEquals(1648.989F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(1.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("L4b|anqd", catalogTexture0.getName());
      assertEquals(1648.989F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(1.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertEquals(1648.989F, homeTexture0.getWidth(), 0.01F);
      assertEquals(1.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals("L4b|anqd", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNotNull(homeTexture0);
      
      wall1.setRightSideTexture(homeTexture0);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1744.7346F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1648.989F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(703.7346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(589075.94F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-979.3075F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1392.8673F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("L4b|anqd", catalogTexture0.getName());
      assertEquals(1648.989F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(1.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertEquals(1648.989F, homeTexture0.getWidth(), 0.01F);
      assertEquals(1.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals("L4b|anqd", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setYStart(63.621853F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(63.621853F, float0, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float1 = wall0.getXEnd();
      assertEquals(63.621853F, float1, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(float1, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(115.22698F, 1.0F, 206.914F, 1.0F, (-859.93F));
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 1.0F, 1.0F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = Float.sum(0.0F, (-859.93F));
      assertEquals((-859.93F), float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(8192);
      assertEquals(8192, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = wall1.intersectsRectangle((-859.93F), 8192, 2650.89F, 1700.4711F);
      assertFalse(boolean0);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1161.5844F, (-1.0F), (-2291.445F), (-2291.445F), 1942.379F);
      assertEquals(4143.6157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4143.6157F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals((-564.93036F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1161.5844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1942.379F);
      assertEquals(4143.6157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(4143.6157F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-564.93036F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1161.5844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setXStart(0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      float float1 = wall0.getXEnd();
      assertEquals((-2291.445F), float1, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      float float2 = Float.min(0.0F, 0.0F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      float float3 = Float.min((-2291.445F), 0.01F);
      assertEquals((-2291.445F), float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2291.445F), wall1.getXEnd(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2291.445F), wall1.getXEnd(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2291.445F), wall1.getXEnd(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals((-1146.2225F), float4, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      wall1.move(1942.379F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.containsWallStartAt(1207.04F, 1161.5844F, 1942.379F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setPattern((TextureImage) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float5 = wall1.getArcExtent();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(float5);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float6 = wall1.getYStart();
      assertEquals((-1.0F), float6, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float7 = wall1.getRightSideShininess();
      assertEquals(1942.379F, float7, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("0k(idL_`&1n}nW.S vv", propertyChangeListener0);
      assertEquals("0k(idL_`&1n}nW.S vv", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals("0k(idL_`&1n}nW.S vv", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(3009.0F, 288.87296F, 64.689F, 3009.0F, 2.0F, 2096.85F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(" doesn't contain texture ", "^.&TYq. 6:", object0, " doesn't contain texture ");
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string0);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.toString();
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string2);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string3);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string4);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      
      String string5 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string5);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall0.getXStart();
      assertEquals(3009.0F, float0, 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1536.8445F, float1, 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float1, float0, 0.01F);
      
      Integer integer0 = new Integer((-2302));
      assertEquals((-2302), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = integer0.equals((Object) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean2 = integer0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Integer integer1 = Integer.valueOf(2295);
      assertEquals(2295, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      wall0.setRightSideColor(integer1);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(2295, (int)wall0.getRightSideColor());
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(integer1.equals((Object)integer0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(2295, (int)wall0.getRightSideColor());
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(2295, (int)wall0.getRightSideColor());
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 206.914F, 206.914F, 1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(6287.357F, 6287.357F, (-335.64337F), (-335.64337F), (-1350.15F), (-2292.1602F));
      assertEquals(9366.337F, wall0.getLength(), 0.01F);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals(6287.357F, wall0.getYStart(), 0.01F);
      assertEquals(6287.357F, wall0.getXStart(), 0.01F);
      assertEquals(2975.8567F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2292.1602F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2975.8567F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1350.15F), wall0.getThickness(), 0.01F);
      assertEquals(9366.337F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals(6287.357F, wall0.getYStart(), 0.01F);
      assertEquals(6287.357F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2292.1602F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(9037.518F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1350.15F), wall0.getThickness(), 0.01F);
      assertEquals(9366.337F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9768.292F, wall0.getLength(), 0.01F);
      assertEquals((-3085.8037F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals(6287.357F, wall0.getYStart(), 0.01F);
      assertEquals(6287.357F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2292.1602F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(9037.518F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1350.15F), wall0.getThickness(), 0.01F);
      assertEquals(9366.337F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9768.292F, wall0.getLength(), 0.01F);
      assertEquals((-3085.8037F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(194, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall((-714.4006F), 1668.3F, (-656.66565F), 1.0F, 1.0F);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-714.4006F), 1668.3F, 0.0F);
      assertTrue(boolean0);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-685.5331F), float0, 0.01F);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 1.0F, (-1.0F), 1229.0F, 1229.0F);
      assertEquals(615.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1229.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1228.0004F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1229.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1228.0004F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(615.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1229.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1228.0004F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1229.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1228.0004F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(1416);
      assertEquals(1416, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1416, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean1 = wall0.intersectsRectangle((-1.0F), 1166.0F, (-3572.0F), (-714.4006F));
      assertTrue(boolean1);
      assertEquals((-656.66565F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1416, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-685.5331F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(834.65F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-714.4006F), wall0.getXStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getLength(), 0.01F);
      assertEquals(1668.3F, wall0.getYStart(), 0.01F);
      assertEquals(1668.2993F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-1.0F), 854.1003F, 2047.6F, 2047.6F, 2047.6F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1450.8501F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2370.9077F, wall1.getLength(), 0.01F);
      assertEquals(2047.6F, wall1.getXEnd(), 0.01F);
      assertEquals(2047.6F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2047.6F, wall1.getYEnd(), 0.01F);
      assertEquals(1023.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2370.9077F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(854.1003F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.containsPoint(854.1003F, 1.0F, 206.914F);
      assertTrue(boolean0);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1450.8501F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2370.9077F, wall1.getLength(), 0.01F);
      assertEquals(2047.6F, wall1.getXEnd(), 0.01F);
      assertEquals(2047.6F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2047.6F, wall1.getYEnd(), 0.01F);
      assertEquals(1023.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2370.9077F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(854.1003F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(103.957F, float0, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = new Wall(206.914F, 1338.0F, 1800.5516F, 2035.7F, (-489.51718F));
      assertEquals(1003.7328F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-489.51718F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1739.6742F, wall2.getLength(), 0.01F);
      assertEquals(1686.85F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1338.0F, wall2.getYStart(), 0.01F);
      assertEquals(1739.6742F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2035.7F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(206.914F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1800.5516F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1450.8501F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2370.9077F, wall1.getLength(), 0.01F);
      assertEquals(2047.6F, wall1.getXEnd(), 0.01F);
      assertEquals(2047.6F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2047.6F, wall1.getYEnd(), 0.01F);
      assertEquals(1023.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2370.9077F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(854.1003F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      Integer integer0 = new Integer(1711);
      assertEquals(1711, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(8192);
      assertEquals(8192, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      wall0.setRightSideColor(integer1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8192, (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer1.equals((Object)integer0));
      
      Wall wall3 = wall1.getWallAtEnd();
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1450.8501F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2370.9077F, wall1.getLength(), 0.01F);
      assertEquals(2047.6F, wall1.getXEnd(), 0.01F);
      assertEquals(2047.6F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2047.6F, wall1.getYEnd(), 0.01F);
      assertEquals(1023.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2370.9077F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(854.1003F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(205.914F, wall3.getLength(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(205.914F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall3.getYStart(), 0.01F);
      assertEquals(103.957F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeight());
      assertEquals(206.914F, wall3.getThickness(), 0.01F);
      assertEquals(8192, (int)wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(206.914F, wall3.getYEnd(), 0.01F);
      assertEquals(206.914F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertNotNull(wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      
      boolean boolean1 = wall3.intersectsRectangle((-2785.2651F), (-3693.7253F), (-962.8414F), 1684.3F);
      assertFalse(boolean1);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1450.8501F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2370.9077F, wall1.getLength(), 0.01F);
      assertEquals(2047.6F, wall1.getXEnd(), 0.01F);
      assertEquals(2047.6F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2047.6F, wall1.getYEnd(), 0.01F);
      assertEquals(1023.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2370.9077F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(854.1003F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(205.914F, wall3.getLength(), 0.01F);
      assertEquals(1.0F, wall3.getXStart(), 0.01F);
      assertEquals(205.914F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall3.getYStart(), 0.01F);
      assertEquals(103.957F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeight());
      assertEquals(206.914F, wall3.getThickness(), 0.01F);
      assertEquals(8192, (int)wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(206.914F, wall3.getYEnd(), 0.01F);
      assertEquals(206.914F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(boolean1 == boolean0);
      
      Float float1 = wall2.getHeightAtEnd();
      assertEquals(1003.7328F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-489.51718F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1739.6742F, wall2.getLength(), 0.01F);
      assertEquals(1686.85F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1338.0F, wall2.getYStart(), 0.01F);
      assertEquals(1739.6742F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2035.7F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(206.914F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1800.5516F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(float1);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), 206.914F, 206.914F, (-1041.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((-2792.4));
      assertEquals((-2792.4F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals((-2792.4F), float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float3 = new Float(1.0);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      float float4 = float3.floatValue();
      assertEquals(1.0F, float4, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-417.043F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals(1764.8169F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-417.043F), wall1.getXArcCircleCenter(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      int int0 = Float.compare((-4926.8022F), 1148.7F);
      assertEquals((-1), int0);
      
      int int1 = Float.compare((-4926.8022F), (-255.0F));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = Float.compare(710.63104F, 1148.7F);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = Float.compare((-1), (-255.0F));
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = Float.compare((-526.0568F), 2592.0F);
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      
      wall0.setHeightAtEnd((Float) 2592.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2592.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertSame(wall0, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2592.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2592.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-417.043F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals(1764.8169F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-417.043F), wall1.getXArcCircleCenter(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall1.setArcExtent(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-325.28073F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(2592.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(14270.397F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-16.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-508.80527F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(2592.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(14270.397F, wall1.getLength(), 0.01F);
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-16.0F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-325.28073F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals((-508.80527F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-325.28073F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(2592.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(14270.397F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-16.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-508.80527F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(2592.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(14270.397F, wall1.getLength(), 0.01F);
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-16.0F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-325.28073F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals((-508.80527F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertSame(wall1, wall0);
      assertNotNull(floatArray1);
      assertEquals(158, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-325.28073F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(2592.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(14270.397F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-16.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-508.80527F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-325.28073F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall2.getXStart(), 0.01F);
      assertEquals(206.914F, wall2.getYEnd(), 0.01F);
      assertEquals(206.914F, wall2.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall2.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall2.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(14270.397F, wall2.getLength(), 0.01F);
      assertEquals((-16.0F), wall2.getArcExtent(), 0.01F);
      assertEquals(2592.0F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-508.80527F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      boolean boolean0 = Float.isFinite(1700.4711F);
      assertTrue(boolean0);
      
      wall0.setLeftSideShininess(1700.4711F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall1.getYStart();
      assertEquals(1700.4711F, float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer((-1183));
      assertEquals((-1183), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((double) (-334.7438F));
      assertEquals((-334.7438F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeight(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((-1815.01946295));
      assertEquals((-1815.0194F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) (-334.7438F));
      assertEquals((-334.7438F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float((-4512.01F));
      assertEquals((-4512.01F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      int int0 = Float.compare(0.01F, 0.01F);
      assertEquals(0, int0);
      
      float float4 = ((Float)0.01F).floatValue();
      assertEquals(0.01F, float4, 0.01F);
      
      wall0.setXStart((-1309.4794F));
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(974.7356F, wall0.getLength(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float5 = Float.valueOf(3062.8994F);
      assertEquals(3062.8994F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      Float float6 = Float.valueOf((-334.7438F));
      assertEquals((-334.7438F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      
      Float float7 = new Float((-445.5764968479));
      assertEquals((-445.5765F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      
      float float8 = float7.floatValue();
      assertEquals((-445.5765F), float8, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      
      float float9 = ((Float)(-445.5765F)).floatValue();
      assertEquals((-445.5765F), float9, 0.01F);
      assertEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float4, 0.01F);
      
      Float float10 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float10, 0.01F);
      assertNotNull(float10);
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertNotEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotEquals((float)float10, (float)float7, 0.01F);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float6, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float3, 0.01F);
      
      float float11 = Float.max((-1309.4794F), 5726.9976F);
      assertEquals(5726.9976F, float11, 0.01F);
      assertNotEquals(float11, float9, 0.01F);
      assertNotEquals(float11, float8, 0.01F);
      assertNotEquals(float11, float4, 0.01F);
      
      wall0.setArcExtent(float10);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertNotEquals((float)float10, (float)float11, 0.01F);
      assertNotEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotEquals((float)float10, (float)float7, 0.01F);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float6, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float3, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(66, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-49.39F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float((-988.6951649));
      assertEquals((-988.6952F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean1 = Float.isFinite(0.0F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float1 = new Float((-2132.1708156522));
      assertEquals((-2132.171F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min((-49.39F), 0.0F);
      assertEquals((-49.39F), float2, 0.01F);
      
      boolean boolean2 = Float.isFinite(0.0F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      float float3 = Float.min(1.0F, 0.0F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      boolean boolean3 = Float.isFinite(0.0F);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      float float4 = float1.floatValue();
      assertEquals((-2132.171F), float4, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      wall0.setArcExtent((Float) (-2132.171F));
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float5 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, float5, 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      
      Float float6 = wall0.getArcExtent();
      assertEquals((-2132.171F), (float)float6, 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level1);
      
      boolean boolean4 = wall0.intersectsRectangle(0.0F, 0.0F, (-625.8657F), (-625.8657F));
      assertFalse(boolean4);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      Float float7 = wall0.getArcExtent();
      assertEquals((-2132.171F), (float)float7, 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float7);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      
      float float8 = wall0.getYEnd();
      assertEquals(0.0F, float8, 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(float8, float3, 0.01F);
      assertEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      
      Level level2 = wall0.getLevel();
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level2);
      
      float float9 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float9, 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertEquals(float9, float5, 0.01F);
      assertNotEquals(float9, float4, 0.01F);
      assertEquals(float9, float3, 0.01F);
      
      Integer integer0 = new Integer(764);
      assertEquals(764, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float10 = new Float(703.016);
      assertEquals(703.016F, (float)float10, 0.01F);
      assertNotNull(float10);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float3, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      assertNotEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float7, 0.01F);
      assertNotEquals((float)float10, (float)float6, 0.01F);
      
      wall0.setHeightAtEnd(float10);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(764, (int)wall0.getLeftSideColor());
      assertEquals((-988.6952F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(703.016F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float3, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      assertNotEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float7, 0.01F);
      assertNotEquals((float)float10, (float)float6, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(3202.57F, 31.759594F, 31.759594F, (-0.28388792F), 3202.57F, (-0.28388792F));
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(15.737853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3202.57F, wall0.getThickness(), 0.01F);
      assertEquals(1617.1648F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3170.9724F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3170.9724F, wall0.getLength(), 0.01F);
      assertEquals((-0.28388792F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3202.57F, wall0.getXStart(), 0.01F);
      assertEquals((-0.28388792F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(15.737853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3202.57F, wall0.getThickness(), 0.01F);
      assertEquals(1617.1648F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3170.9724F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3170.9724F, wall0.getLength(), 0.01F);
      assertEquals((-0.28388792F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3202.57F, wall0.getXStart(), 0.01F);
      assertEquals((-0.28388792F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(15.737853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3202.57F, wall0.getThickness(), 0.01F);
      assertEquals(1617.1648F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3170.9724F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3170.9724F, wall0.getLength(), 0.01F);
      assertEquals((-0.28388792F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3202.57F, wall0.getXStart(), 0.01F);
      assertEquals((-0.28388792F), wall0.getHeight(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float1 = Float.sum(3202.57F, (-1901.2452F));
      assertEquals(1301.3248F, float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(15.737853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3202.57F, wall0.getThickness(), 0.01F);
      assertEquals(1617.1648F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3170.9724F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3170.9724F, wall0.getLength(), 0.01F);
      assertEquals((-0.28388792F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3202.57F, wall0.getXStart(), 0.01F);
      assertEquals((-0.28388792F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall2.getPoints();
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(15.737853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3202.57F, wall0.getThickness(), 0.01F);
      assertEquals(1617.1648F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3170.9724F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3170.9724F, wall0.getLength(), 0.01F);
      assertEquals((-0.28388792F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3202.57F, wall0.getXStart(), 0.01F);
      assertEquals((-0.28388792F), wall0.getHeight(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setHeight(float0);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals(0.01F, float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      float float4 = float0.floatValue();
      assertEquals(0.01F, float4, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertEquals(float4, float2, 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      Float float5 = new Float((-6.971583F));
      assertEquals((-6.971583F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      wall1.setArcExtent(float5);
      assertEquals((-6.971583F), wall0.getArcExtent(), 0.01F);
      assertEquals(9678.903F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals((-687.3124F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(352.3699F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(352.3699F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(9678.903F, wall1.getLength(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals((-687.3124F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-6.971583F), wall1.getArcExtent(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-6.971583F), wall0.getArcExtent(), 0.01F);
      assertEquals(9678.903F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals((-687.3124F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(352.3699F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(230, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), 206.914F, 206.914F, (-1041.0F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setLeftSideShininess(296.298F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("_", propertyChangeListener0);
      assertEquals("_", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals("_", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.intersectsRectangle(296.298F, 206.914F, 206.914F, 480.0F);
      assertFalse(boolean0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall1.getLength(), 0.01F);
      assertEquals(296.298F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-417.043F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-417.043F), wall1.getYArcCircleCenter(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      Float float1 = wall1.getArcExtent();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1764.8169F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals(206.914F, wall1.getYEnd(), 0.01F);
      assertEquals(206.914F, wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall1.getLength(), 0.01F);
      assertEquals(296.298F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-417.043F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-417.043F), wall1.getYArcCircleCenter(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNull(float1);
      
      float float2 = wall0.getLength();
      assertEquals(1764.8169F, float2, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertSame(wall0, wall1);
      
      Wall wall2 = wall0.clone();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall2.getXStart(), 0.01F);
      assertEquals(206.914F, wall2.getXEnd(), 0.01F);
      assertEquals(1764.8169F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-417.043F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-16.0F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1764.8169F, wall2.getLength(), 0.01F);
      assertEquals(296.298F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(206.914F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-417.043F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall2.getYStart(), 0.01F);
      assertSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(258.03F, 0.1F, 1.0F, 0.1F, 1031.2F);
      assertEquals(257.03F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(257.03F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(4793.5F, (-1.0F), 0.0F, 0.01F, 1965.0125F);
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(257.03F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(257.03F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideShininess(655.3F);
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall0.getLevel();
      assertEquals(257.03F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(257.03F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setYStart((-1.0F));
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(257.03235F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(257.03235F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setLevel((Level) null);
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(257.03235F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(257.03235F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(258.03F, wall2.getXStart(), 0.01F);
      assertEquals(257.03235F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(129.515F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1031.2F, wall2.getThickness(), 0.01F);
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeight());
      assertEquals(257.03235F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setXEnd(1700.4711F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(257.03235F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(257.03235F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(258.03F, wall2.getXStart(), 0.01F);
      assertEquals(979.25055F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1442.4415F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1031.2F, wall2.getThickness(), 0.01F);
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1442.4415F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setPattern((TextureImage) null);
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd((Wall) null);
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYEnd(0.1F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(257.03235F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(257.03235F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      Integer integer0 = new Integer((-2146760265));
      assertEquals((-2146760265), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1040);
      assertEquals(1040, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = integer0.equals(integer1);
      assertFalse(boolean0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      wall1.setRightSideColor(integer0);
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2146760265), (int)wall1.getRightSideColor());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, 574.03625F, 932.437F, 0.01F);
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(367.49817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(753.23663F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(367.49817F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(367.49817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(753.23663F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(367.49817F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(367.49817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(753.23663F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(367.49817F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      
      Float float1 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(367.49817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(753.23663F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(367.49817F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      float float4 = float0.floatValue();
      assertEquals(0.01F, float4, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Float float5 = Float.valueOf((-90.27636F));
      assertEquals((-90.27636F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      Float float6 = Float.valueOf((-90.27636F));
      assertEquals((-90.27636F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      float float7 = float6.floatValue();
      assertEquals((-90.27636F), float7, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      
      wall1.setArcExtent(float6);
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(535.7329F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(367.49817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-90.27636F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(18126.186F, wall1.getLength(), 0.01F);
      assertEquals(735.33887F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float7, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(535.7329F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(367.49817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-90.27636F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(18126.186F, wall1.getLength(), 0.01F);
      assertEquals(735.33887F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(494, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(535.7329F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(367.49817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals((-90.27636F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(18126.186F, wall1.getLength(), 0.01F);
      assertEquals(735.33887F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(367.49817F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(753.23663F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(367.49817F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getYEnd(), 0.01F);
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 206.914F, 206.914F, 1.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(103.957F, float1, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(2354.7092F, wall0.getLength(), 0.01F);
      assertEquals(88.81562F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(119.09838F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-16.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 206.914F, 1.0F, 1.0F, 1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getHeight();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart(655.3F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("PATTERN", propertyChangeListener0);
      assertEquals("PATTERN", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals("PATTERN", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Level level0 = new Level("2,u&-cdIgBaGgK!K:", (-130.43324F), 1260.119F, 1.0F);
      assertTrue(level0.isVisible());
      assertEquals((-130.43324F), level0.getElevation(), 0.01F);
      assertEquals("2,u&-cdIgBaGgK!K:", level0.getName());
      assertEquals(1.0F, level0.getHeight(), 0.01F);
      assertEquals(1260.119F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      wall1.setLevel(level0);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-130.43324F), level0.getElevation(), 0.01F);
      assertEquals("2,u&-cdIgBaGgK!K:", level0.getName());
      assertEquals(1.0F, level0.getHeight(), 0.01F);
      assertEquals(1260.119F, level0.getFloorThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(655.3F, wall2.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.setXEnd((-130.43324F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-130.43324F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(131.43324F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(131.43324F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-64.71662F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      wall2.setPattern((TextureImage) null);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(655.3F, wall2.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      Float float2 = wall1.getArcExtent();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(float2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      Integer integer0 = new Integer(1422);
      assertEquals(1422, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-130.43324F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(131.43324F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(131.43324F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-64.71662F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertTrue(level0.isVisible());
      assertEquals((-130.43324F), level0.getElevation(), 0.01F);
      assertEquals("2,u&-cdIgBaGgK!K:", level0.getName());
      assertEquals(1.0F, level0.getHeight(), 0.01F);
      assertEquals(1260.119F, level0.getFloorThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertTrue(boolean1 == boolean0);
      
      float float3 = wall2.getRightSideShininess();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(655.3F, wall2.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(0.01F, 0.01F, (-1053.2F), (-1053.2F), (-151.61465F));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-526.595F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(1489.4637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1489.4637F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-526.595F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(1489.4637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1489.4637F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideShininess(630.00073F);
      assertEquals((-526.595F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(1489.4637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1489.4637F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setHeightAtEnd(float0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = new Wall((-1.0F), 0.1F, 0.1F, (-49.39F), 630.00073F, 0.0F);
      assertEquals(49.502224F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-0.45F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-49.39F), wall2.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall2.getThickness(), 0.01F);
      assertEquals((-24.645F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(49.502224F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setYStart(0.01F);
      assertEquals(49.412247F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-24.69F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.45F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-49.39F), wall2.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(49.412247F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setLevel((Level) null);
      assertEquals((-526.595F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(1489.4637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(1489.4637F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      Wall wall3 = wall0.clone();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall3.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall3.getLength(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall3.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-167.3719F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(334.7438F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      
      wall0.setXEnd(1.1F);
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall3));
      
      boolean boolean1 = wall3.isTrapezoidal();
      assertFalse(boolean1);
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall3.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall3.getLength(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall3.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-167.3719F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(334.7438F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      
      Float float1 = wall3.getArcExtent();
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall3.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall3.getLength(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.01F, wall3.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall3.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-167.3719F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(334.7438F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      
      Integer integer0 = new Integer((-511));
      assertEquals((-511), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = wall2.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertEquals(49.412247F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-24.69F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.45F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-49.39F), wall2.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(49.412247F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall3));
      assertFalse(list0.contains(wall3));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(3009.0F, 288.87296F, 64.689F, 3009.0F, 2.0F, 2096.85F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(" doesn't contain texture ", "^.&TYq. 6:", object0, " doesn't contain texture ");
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string0);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.toString();
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string2);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string3);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string4);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      
      String string5 = propertyChangeEvent0.getPropertyName();
      assertEquals("^.&TYq. 6:", string5);
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertEquals("^.&TYq. 6:", propertyChangeEvent0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getXStart();
      assertEquals(3009.0F, float0, 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1536.8445F, float1, 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      Integer integer0 = new Integer((-2302));
      assertEquals((-2302), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = integer0.equals((Object) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(1536.8445F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4008.4983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(64.689F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals(4008.4983F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setXEnd((-460.0F));
      assertEquals(1274.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4408.2935F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals((-460.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4408.2935F, wall0.getLength(), 0.01F);
      
      Float float2 = wall0.getHeight();
      assertEquals(2096.85F, (float)float2, 0.01F);
      assertEquals(1274.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(288.87296F, wall0.getYStart(), 0.01F);
      assertEquals(3009.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4408.2935F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1648.9365F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3009.0F, wall0.getXStart(), 0.01F);
      assertEquals(2096.85F, wall0.getHeight(), 0.01F);
      assertEquals((-460.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2302), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4408.2935F, wall0.getLength(), 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(559.5F, 559.5F, 559.5F, 559.5F, 559.5F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(559.5F, wall0.getXEnd(), 0.01F);
      assertEquals(559.5F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(559.5F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(559.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(559.5F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(559.5F, wall0.getXEnd(), 0.01F);
      assertEquals(559.5F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(559.5F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(559.5F, wall0.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(559.5F, wall0.getXEnd(), 0.01F);
      assertEquals(559.5F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(559.5F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(559.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(559.5F, wall0.getXEnd(), 0.01F);
      assertEquals(559.5F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(559.5F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(559.5F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(559.5F, wall0.getXEnd(), 0.01F);
      assertEquals(559.5F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(559.5F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(559.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(textureImage0);
      
      float float0 = wall0.getThickness();
      assertEquals(559.5F, float0, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(559.5F, wall0.getXEnd(), 0.01F);
      assertEquals(559.5F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(559.5F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(559.5F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setXEnd((-1074.683F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-257.5915F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1634.183F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(559.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(559.5F, wall0.getYEnd(), 0.01F);
      assertEquals((-1074.683F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(559.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(559.5F, wall0.getYStart(), 0.01F);
      assertEquals(1634.183F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(0.01F, 0.01F, (-1054.7294F), (-1054.7294F), (-151.61465F));
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideShininess(630.00073F);
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals((-167.3719F), float1, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = wall1.intersectsRectangle(0.0F, (-1085.6888F), (-151.61465F), 630.00073F);
      assertTrue(boolean0);
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      
      float float3 = wall1.getYEnd();
      assertEquals((-1054.7294F), float3, 0.01F);
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float3, float1, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(level1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer0 = Integer.valueOf(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals(1491.6267F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals((-1054.7294F), wall1.getYEnd(), 0.01F);
      assertEquals((-1054.7294F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-527.3597F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1491.6267F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertEquals((-527.3597F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(textureImage0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(float4);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-1041.0F), float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-334.7438F), (float)float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      linkedList0.addFirst(wall0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      Float float0 = new Float((-1041.0F));
      assertEquals((-1041.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = Float.sum((-1041.0F), (-1041.0F));
      assertEquals((-2082.0F), float0, 0.01F);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getHeight();
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.intersectsRectangle(655.3F, 655.3F, 1700.4711F, 655.3F);
      assertFalse(boolean0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, 655.3F, 932.437F, 0.01F);
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(793.8685F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(288.8057F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(288.8057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(793.8685F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(288.8057F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(288.8057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(793.8685F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(288.8057F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(288.8057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 0.01F);
      assertEquals(0.01F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(793.8685F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(288.8057F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(288.8057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      float float4 = float0.floatValue();
      assertEquals(0.01F, float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      Float float5 = Float.valueOf((-90.27636F));
      assertEquals((-90.27636F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      float float6 = float1.floatValue();
      assertEquals(574.03625F, float6, 0.01F);
      assertNotEquals((float)float1, (float)float5, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      
      wall1.setArcExtent(float0);
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(288.8057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(288.8069F, wall1.getLength(), 0.01F);
      assertEquals(8920.174F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(28328.14F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float6, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(288.8057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(288.8069F, wall1.getLength(), 0.01F);
      assertEquals(8920.174F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(28328.14F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(38, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(288.8057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(288.8069F, wall1.getLength(), 0.01F);
      assertEquals(8920.174F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(28328.14F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall0.equals((Object)wall1));
      
      TextureImage textureImage1 = wall1.getPattern();
      assertEquals(288.8057F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(793.8685F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(288.8057F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(288.8057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(288.8069F, wall1.getLength(), 0.01F);
      assertEquals(8920.174F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(28328.14F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(textureImage1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(2764.1636F, (-3306.0F), 2764.1636F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(31.759594F, 31.759594F, 31.759594F, 31.759594F, 31.759594F, 31.759594F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level((String) null, 0.0F, 0.0F, 0.0F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      
      Level level2 = level1.clone();
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertNull(level2.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertNotNull(level2);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      
      wall0.setLevel(level2);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertNull(level2.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(115.22698F, 1.0F, 206.914F, 1.0F, (-859.93F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 1.0F, 1.0F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = Float.sum(0.0F, (-859.93F));
      assertEquals((-859.93F), float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(8192);
      assertEquals(8192, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean0 = wall0.intersectsRectangle((-859.93F), 0.1F, (-3572.0F), (-859.93F));
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((-2792.4));
      assertEquals((-2792.4F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals((-2792.4F), float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((-16.0F), float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      wall1.setArcExtent(float0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-16.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-16.0F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-16.0F), wall1.getHeight(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Wall wall2 = new Wall((-766.4469F), (-1.0F), 3366.1345F, (-1212.11F), (-1041.0F));
      assertEquals((-1212.11F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3366.1345F, wall2.getXEnd(), 0.01F);
      assertEquals(4306.3926F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-766.4469F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(4306.3926F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-606.555F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1299.8438F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      boolean boolean0 = wall2.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals((-1212.11F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3366.1345F, wall2.getXEnd(), 0.01F);
      assertEquals(4306.3926F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-766.4469F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(4306.3926F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-606.555F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1299.8438F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(31.759594F, 31.759594F, 31.759594F, 31.759594F, 31.759594F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(3.141592653589793);
      assertEquals(3.1415927F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3.1415927F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(31.759594F, float1, 0.01F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3.1415927F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float2 = wall0.getLength();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3.1415927F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = Float.isFinite(191.34679F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(191.34679F, 191.34679F, 191.34679F, 191.34679F, 191.34679F, 191.34679F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(191.34679F, wall0.getXStart(), 0.01F);
      assertEquals(191.34679F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(191.34679F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(191.34679F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(191.34679F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(191.34679F, wall0.getHeight(), 0.01F);
      assertEquals(191.34679F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(191.34679F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart(191.34679F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(191.34679F, wall0.getXStart(), 0.01F);
      assertEquals(191.34679F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(191.34679F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(191.34679F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(191.34679F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(191.34679F, wall0.getHeight(), 0.01F);
      assertEquals(191.34679F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(191.34679F, wall0.getXEnd(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(191.34679F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(191.34679F, wall0.getXStart(), 0.01F);
      assertEquals(191.34679F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(191.34679F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(191.34679F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(191.34679F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(191.34679F, wall0.getHeight(), 0.01F);
      assertEquals(191.34679F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(191.34679F, wall0.getXEnd(), 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(191.34679F, wall0.getXStart(), 0.01F);
      assertEquals(191.34679F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(191.34679F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(191.34679F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(191.34679F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(191.34679F, wall0.getHeight(), 0.01F);
      assertEquals(191.34679F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(191.34679F, wall0.getXEnd(), 0.01F);
      
      Float float1 = new Float(191.34679F);
      assertEquals(191.34679F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          assertNotNull(wall0);
          
          Float float0 = new Float(0.0F);
          assertEquals(0.0F, (float)float0, 0.01F);
          assertNotNull(float0);
          
          float float1 = float0.floatValue();
          assertEquals(0.0F, float1, 0.01F);
          
          wall0.setLeftSideShininess((-702.5F));
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          
          wall0.setArcExtent(float0);
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          assertEquals((float)float0, (float)float1, 0.01F);
          
          float float2 = wall0.getYArcCircleCenter();
          assertEquals((-167.3719F), float2, 0.01F);
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          assertNotEquals(float2, float1, 0.01F);
          
          Float float3 = wall0.getArcExtent();
          assertEquals(0.0F, (float)float3, 0.01F);
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          assertNotNull(float3);
          assertEquals((float)float3, (float)float1, 0.01F);
          assertNotEquals((float)float3, (float)float2, 0.01F);
          
          boolean boolean0 = wall0.intersectsRectangle(1548.01F, 207.914F, (-2976.57F), 0.0F);
          assertFalse(boolean0);
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          
          float float4 = wall0.getYEnd();
          assertEquals(0.0F, float4, 0.01F);
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          assertNotEquals(float4, float2, 0.01F);
          assertEquals(float4, float1, 0.01F);
          
          Level level0 = wall0.getLevel();
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          assertNull(level0);
          
          float float5 = wall0.getLeftSideShininess();
          assertEquals((-702.5F), float5, 0.01F);
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals(334.7438F, wall0.getLength(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
          assertNotEquals(float5, float2, 0.01F);
          assertNotEquals(float5, float4, 0.01F);
          assertNotEquals(float5, float1, 0.01F);
          
          Integer integer0 = new Integer(783);
          assertEquals(783, (int)integer0);
          assertNotNull(integer0);
          
          Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
          assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
          assertFalse(wall1.isTrapezoidal());
          assertNull(wall1.getLeftSideColor());
          assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
          assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
          assertNull(wall1.getHeight());
          assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
          assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
          assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
          assertEquals(1045.1711F, wall1.getLength(), 0.01F);
          assertEquals(655.3F, wall1.getYEnd(), 0.01F);
          assertNull(wall1.getRightSideColor());
          assertNull(wall1.getArcExtent());
          assertNull(wall1.getHeightAtEnd());
          assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
          assertEquals(655.3F, wall1.getThickness(), 0.01F);
          assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
          assertNotNull(wall1);
          assertFalse(wall1.equals((Object)wall0));
          
          Float float6 = wall1.getHeight();
          assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
          assertFalse(wall1.isTrapezoidal());
          assertNull(wall1.getLeftSideColor());
          assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
          assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
          assertNull(wall1.getHeight());
          assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
          assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
          assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
          assertEquals(1045.1711F, wall1.getLength(), 0.01F);
          assertEquals(655.3F, wall1.getYEnd(), 0.01F);
          assertNull(wall1.getRightSideColor());
          assertNull(wall1.getArcExtent());
          assertNull(wall1.getHeightAtEnd());
          assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
          assertEquals(655.3F, wall1.getThickness(), 0.01F);
          assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
          assertNotSame(wall1, wall0);
          assertNull(float6);
          assertFalse(wall1.equals((Object)wall0));
          
          wall1.setHeight((Float) null);
          assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
          assertFalse(wall1.isTrapezoidal());
          assertNull(wall1.getLeftSideColor());
          assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
          assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
          assertNull(wall1.getHeight());
          assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
          assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
          assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
          assertEquals(1045.1711F, wall1.getLength(), 0.01F);
          assertEquals(655.3F, wall1.getYEnd(), 0.01F);
          assertNull(wall1.getRightSideColor());
          assertNull(wall1.getArcExtent());
          assertNull(wall1.getHeightAtEnd());
          assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
          assertEquals(655.3F, wall1.getThickness(), 0.01F);
          assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
          assertNotSame(wall1, wall0);
          assertFalse(wall1.equals((Object)wall0));
          
          float float7 = wall1.getThickness();
          assertEquals(655.3F, float7, 0.01F);
          assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
          assertFalse(wall1.isTrapezoidal());
          assertNull(wall1.getLeftSideColor());
          assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
          assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
          assertNull(wall1.getHeight());
          assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
          assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
          assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
          assertEquals(1045.1711F, wall1.getLength(), 0.01F);
          assertEquals(655.3F, wall1.getYEnd(), 0.01F);
          assertNull(wall1.getRightSideColor());
          assertNull(wall1.getArcExtent());
          assertNull(wall1.getHeightAtEnd());
          assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
          assertEquals(655.3F, wall1.getThickness(), 0.01F);
          assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
          assertNotSame(wall1, wall0);
          assertFalse(wall1.equals((Object)wall0));
          assertNotEquals(float7, float5, 0.01F);
          assertNotEquals(float7, float4, 0.01F);
          assertNotEquals(float7, float1, 0.01F);
          assertNotEquals(float7, float2, 0.01F);
          
          wall0.setXEnd((-394.187F));
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(339.98074F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals(339.98074F, wall0.getLength(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-394.187F), wall0.getXEnd(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-4.85390644E17F), wall0.getYArcCircleCenter(), 0.01F);
          assertNotSame(wall0, wall1);
          assertFalse(wall0.equals((Object)wall1));
          
          Float float8 = Float.valueOf(0.0F);
          assertEquals(0.0F, (float)float8, 0.01F);
          assertNotNull(float8);
          assertEquals((float)float8, (float)float3, 0.01F);
          assertEquals((float)float8, (float)float4, 0.01F);
          assertEquals((float)float8, (float)float0, 0.01F);
          assertNotEquals((float)float8, (float)float5, 0.01F);
          assertNotEquals((float)float8, (float)float7, 0.01F);
          assertEquals((float)float8, (float)float1, 0.01F);
          assertNotEquals((float)float8, (float)float2, 0.01F);
          
          float float9 = Float.sum(207.914F, 0.0F);
          assertEquals(207.914F, float9, 0.01F);
          assertNotEquals(float9, float7, 0.01F);
          assertNotEquals(float9, float2, 0.01F);
          assertNotEquals(float9, float4, 0.01F);
          assertNotEquals(float9, float5, 0.01F);
          assertNotEquals(float9, float1, 0.01F);
          
          wall0.setArcExtent(float8);
          assertEquals((-2.73339058E18F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals(339.98074F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getYEnd(), 0.01F);
          assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
          assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertEquals(339.98074F, wall0.getLength(), 0.01F);
          assertNull(wall0.getHeight());
          assertNull(wall0.getRightSideColor());
          assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
          assertEquals((-702.5F), wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-394.187F), wall0.getXEnd(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-4.85390644E17F), wall0.getYArcCircleCenter(), 0.01F);
          assertNotSame(wall0, wall1);
          assertFalse(wall0.equals((Object)wall1));
          assertEquals((float)float8, (float)float3, 0.01F);
          assertEquals((float)float8, (float)float4, 0.01F);
          assertEquals((float)float8, (float)float0, 0.01F);
          assertNotEquals((float)float8, (float)float9, 0.01F);
          assertNotEquals((float)float8, (float)float5, 0.01F);
          assertNotEquals((float)float8, (float)float7, 0.01F);
          assertEquals((float)float8, (float)float1, 0.01F);
          assertNotEquals((float)float8, (float)float2, 0.01F);
          
          Wall wall2 = wall1.getWallAtEnd();
          assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
          assertFalse(wall1.isTrapezoidal());
          assertNull(wall1.getLeftSideColor());
          assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
          assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
          assertNull(wall1.getHeight());
          assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
          assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
          assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
          assertEquals(1045.1711F, wall1.getLength(), 0.01F);
          assertEquals(655.3F, wall1.getYEnd(), 0.01F);
          assertNull(wall1.getRightSideColor());
          assertNull(wall1.getArcExtent());
          assertNull(wall1.getHeightAtEnd());
          assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
          assertEquals(655.3F, wall1.getThickness(), 0.01F);
          assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
          assertNotSame(wall1, wall0);
          assertNull(wall2);
          assertFalse(wall1.equals((Object)wall0));
          
          boolean boolean1 = wall1.isTrapezoidal();
          assertFalse(boolean1);
          assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
          assertFalse(wall1.isTrapezoidal());
          assertNull(wall1.getLeftSideColor());
          assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
          assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
          assertNull(wall1.getHeight());
          assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
          assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
          assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
          assertEquals(1045.1711F, wall1.getLength(), 0.01F);
          assertEquals(655.3F, wall1.getYEnd(), 0.01F);
          assertNull(wall1.getRightSideColor());
          assertNull(wall1.getArcExtent());
          assertNull(wall1.getHeightAtEnd());
          assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
          assertEquals(655.3F, wall1.getThickness(), 0.01F);
          assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
          assertNotSame(wall1, wall0);
          assertTrue(boolean1 == boolean0);
          assertFalse(wall1.equals((Object)wall0));
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertNull(wall0.getHeight());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("RIGHT_SIDE_SHININESS", propertyChangeListener0);
      assertEquals("RIGHT_SIDE_SHININESS", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeight());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals("RIGHT_SIDE_SHININESS", propertyChangeListenerProxy0.getPropertyName());
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getHeight());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(wall0.getHeight());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getHeight());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      
      wall0.setRightSideColor(integer0);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(6, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Wall wall0 = new Wall(1.0F, 2.0F, 1.0F, 2.0F, 702.2F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(702.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(702.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(6);
      assertEquals(6, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(2240847.2786745764);
      assertEquals(2240847.2F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(2240847.2F, float1, 0.01F);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall1.getHeight();
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertNull(float2);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      float float4 = new Float((double) 0.0F);
      assertEquals(0.0F, float4, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float5 = new Float(1.0F);
      assertEquals(1.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      Float float6 = new Float(1569.632F);
      assertEquals(1569.632F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      
      float float7 = float6.floatValue();
      assertEquals(1569.632F, float7, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      
      wall1.setArcExtent((Float) 1569.632F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1569.632F, wall1.getArcExtent(), 0.01F);
      assertEquals(1491801.9F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(906.62396F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1569.632F, wall1.getArcExtent(), 0.01F);
      assertEquals(1491801.9F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(906.62396F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(2836, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1569.632F, wall1.getArcExtent(), 0.01F);
      assertEquals(1491801.9F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(906.62396F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(31.759594F, 31.759594F, 31.759594F, 31.759594F, 31.759594F, 31.759594F);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(31.759594F);
      assertEquals(31.759594F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(31.759594F, wall0.getArcExtent(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(31.759594F, wall0.getXEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getYEnd(), 0.01F);
      assertEquals(31.759594F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(31.759594F, wall0.getArcExtent(), 0.01F);
      assertEquals(31.759594F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(31.759594F, wall0.getYStart(), 0.01F);
      assertEquals(31.759594F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.759594F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(31.759594F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, 1438.6738F, 2885.3914F, (-1.0F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1438.6738F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3223.7205F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(3223.7205F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(718.8369F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1443.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1.0F, (-1071.0F), (-1804.0884F), (-341.69F), (-1071.0F));
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-341.69F), wall1.getYEnd(), 0.01F);
      assertEquals((-1804.0884F), wall1.getXEnd(), 0.01F);
      assertEquals(1946.8531F, wall1.getLength(), 0.01F);
      assertEquals((-706.345F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1946.8531F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-901.5442F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1071.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1071.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setYEnd((-1071.0F));
      assertEquals((-1071.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1438.6738F, wall0.getXEnd(), 0.01F);
      assertEquals((-535.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(718.8369F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1794.9498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1794.9498F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-341.69F), wall1.getYEnd(), 0.01F);
      assertEquals((-1804.0884F), wall1.getXEnd(), 0.01F);
      assertEquals(1946.8531F, wall1.getLength(), 0.01F);
      assertEquals((-706.345F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1946.8531F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-901.5442F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1071.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1071.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-341.69F), wall1.getYEnd(), 0.01F);
      assertEquals((-1804.0884F), wall1.getXEnd(), 0.01F);
      assertEquals(1946.8531F, wall1.getLength(), 0.01F);
      assertEquals((-706.345F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1946.8531F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-901.5442F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1071.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1071.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-341.69F), wall1.getYEnd(), 0.01F);
      assertEquals((-1804.0884F), wall1.getXEnd(), 0.01F);
      assertEquals(1946.8531F, wall1.getLength(), 0.01F);
      assertEquals((-706.345F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1946.8531F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-901.5442F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1071.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1071.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertNull(textureImage0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall1.getThickness();
      assertEquals((-1071.0F), float0, 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-341.69F), wall1.getYEnd(), 0.01F);
      assertEquals((-1804.0884F), wall1.getXEnd(), 0.01F);
      assertEquals(1946.8531F, wall1.getLength(), 0.01F);
      assertEquals((-706.345F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1946.8531F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-901.5442F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1071.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1071.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setXEnd((-1529.0F));
      assertEquals((-1071.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1866.5391F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-535.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1529.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-765.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1866.5391F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      float float0 = Float.sum(63.621853F, 63.621853F);
      assertEquals(127.243706F, float0, 0.01F);
      
      Wall wall1 = new Wall(63.621853F, (-1.0F), 127.243706F, 63.621853F, (-1.0F));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall1.getXStart(), 0.01F);
      assertEquals(90.68475F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(95.43278F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(90.68475F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(127.243706F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(31.310926F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall0.getHeight();
      assertEquals(63.621853F, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall2 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float2 = wall2.getHeight();
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(float2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setHeight((Float) null);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setHeight((Float) null);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setWallAtEnd(wall1);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall1.getXStart(), 0.01F);
      assertEquals(90.68475F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(95.43278F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(90.68475F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(127.243706F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(31.310926F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall2);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(63.621853F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(63.621853F, wall1.getXStart(), 0.01F);
      assertEquals(90.68475F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(95.43278F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(90.68475F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(127.243706F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(31.310926F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Integer integer0 = new Integer(2039);
      assertEquals(2039, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall2.getPoints();
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Wall wall3 = new Wall((-1.0F), 655.3F, (-3391.18F), (-3391.18F), 0.1F);
      assertEquals(5278.9507F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-3391.18F), wall3.getYEnd(), 0.01F);
      assertEquals(0.1F, wall3.getThickness(), 0.01F);
      assertEquals((-3391.18F), wall3.getXEnd(), 0.01F);
      assertEquals((-1367.94F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(655.3F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(5278.9507F, wall3.getLength(), 0.01F);
      assertEquals((-1.0F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1696.09F), wall3.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.4711F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1045.1711F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall2.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1045.1711F, wall2.getLength(), 0.01F);
      assertEquals(1700.4711F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1700.4711F, wall2.getYStart(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNull(homeTexture0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-49.39F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(level0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, (-1870.1595F), 1092.1353F, (-561.0F));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1092.1353F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2165.7F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2165.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1870.1595F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(546.0676F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-561.0F), wall1.getThickness(), 0.01F);
      assertEquals((-935.0798F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall1.getArcExtent();
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1092.1353F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2165.7F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2165.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1870.1595F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(546.0676F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-561.0F), wall1.getThickness(), 0.01F);
      assertEquals((-935.0798F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNull(float1);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = Integer.valueOf((-1793));
      assertEquals((-1793), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1793));
      assertEquals((-1793), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.valueOf((-1793));
      assertEquals((-1793), (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      wall1.setRightSideColor(integer2);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1092.1353F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1793), (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2165.7F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2165.7F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1870.1595F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(546.0676F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-561.0F), wall1.getThickness(), 0.01F);
      assertEquals((-935.0798F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      Float float2 = wall0.getHeight();
      assertEquals((-49.39F), (float)float2, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = Float.min(0.0F, 3208.0593F);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = Float.isFinite((-334.7438F));
      assertTrue(boolean0);
      
      wall0.move((-334.7438F), 1.0F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-166.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-333.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(334.7438F, float1, 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-166.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-333.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotEquals(float1, float0, 0.01F);
      
      wall0.setLeftSideShininess((-647.9F));
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-166.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-647.9F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-333.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer(2926);
      assertEquals(2926, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-166.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-647.9F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-333.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2926, (int)wall0.getRightSideColor());
      
      boolean boolean1 = wall0.containsWallEndAt((-647.9F), 0.0F, 1430.8F);
      assertTrue(boolean1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-166.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-647.9F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-333.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2926, (int)wall0.getRightSideColor());
      assertTrue(boolean1 == boolean0);
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals(2926, (int)integer1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-166.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-647.9F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-333.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2926, (int)wall0.getRightSideColor());
      assertNotNull(integer1);
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals((-647.9F), float2, 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-166.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-647.9F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-333.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2926, (int)wall0.getRightSideColor());
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), 3491.9312F, (-1745.0F), (-1844.1725F), (-38.06434F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5519.314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1039.872F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1745.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1844.1725F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(823.87933F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5519.314F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3491.9312F, wall0.getYStart(), 0.01F);
      assertEquals((-38.06434F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(115.22698F, 3491.9312F, (-334.7438F), (-2610.9563F), (-1.0F));
      assertEquals((-2610.9563F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(6119.453F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-109.75841F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(3491.9312F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(115.22698F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(440.48743F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6119.453F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = Float.sum(1700.4711F, (-1.0F));
      assertEquals(1699.4711F, float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5519.314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1039.872F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1745.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1844.1725F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(823.87933F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5519.314F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3491.9312F, wall0.getYStart(), 0.01F);
      assertEquals((-38.06434F), wall0.getThickness(), 0.01F);
      assertEquals((-2610.9563F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(6119.453F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-109.75841F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(3491.9312F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(115.22698F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(440.48743F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6119.453F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5519.314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1039.872F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1745.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1844.1725F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(823.87933F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5519.314F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3491.9312F, wall0.getYStart(), 0.01F);
      assertEquals((-38.06434F), wall0.getThickness(), 0.01F);
      assertEquals((-2610.9563F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(6119.453F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-109.75841F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertEquals(3491.9312F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(115.22698F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(440.48743F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6119.453F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(676);
      assertEquals(676, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5519.314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1039.872F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1745.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1844.1725F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(823.87933F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5519.314F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3491.9312F, wall0.getYStart(), 0.01F);
      assertEquals((-38.06434F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = Float.min(1.0F, 854.1003F);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(854.1003F);
      assertTrue(boolean0);
      
      Float float1 = new Float((double) 854.1003F);
      assertEquals(854.1003F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(854.1003F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getYArcCircleCenter();
      assertEquals((-284.65674F), float3, 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float4, 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(level0);
      
      boolean boolean1 = wall0.intersectsRectangle((-164.50792F), (-625.8657F), 1.0F, 3.4243548F);
      assertTrue(boolean1);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Float float5 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float5, 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      boolean boolean2 = wall0.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float float6 = wall0.getXStart();
      assertEquals(1.0F, float6, 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(float6, float0, 0.01F);
      
      Float float7 = new Float((-284.65674F));
      assertEquals((-284.65674F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(wall1);
      
      Integer integer0 = Integer.valueOf((-2302));
      assertEquals((-2302), (int)integer0);
      assertNotNull(integer0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(textureImage0);
      
      Float float8 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float8, 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      
      int int0 = Float.compare(1.0F, (-451.10004F));
      assertEquals(1, int0);
      
      wall0.setHeightAtEnd((Float) (-451.10004F));
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals((-451.10004F), wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level(".I|6Y^Mr8Av", 1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, level0.getHeight(), 0.01F);
      assertEquals(".I|6Y^Mr8Av", level0.getName());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      float float1 = wall0.getXEnd();
      assertEquals(1.0F, float1, 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-334.7438F));
      assertEquals((-334.7438F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-334.7438F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float1 = wall0.getArcExtent();
      assertEquals((-334.7438F), (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-334.7438F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = wall0.intersectsRectangle((-334.7438F), 0.01F, (-334.7438F), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-334.7438F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-334.7438F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(level0);
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-334.7438F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setXEnd(0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-476.67157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(73459.695F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3669F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float3 = new Float(98.540038137744);
      assertEquals(98.54004F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = new Float(642.5075F);
      assertEquals(642.5075F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      wall0.setLevel((Level) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-476.67157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(73459.695F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3669F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setArcExtent(float4);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(148294.47F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-175.82152F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3669F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(642.5075F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      float float5 = wall0.getXArcCircleCenter();
      assertEquals((-167.3669F), float5, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(334.7538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(148294.47F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-175.82152F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3669F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(642.5075F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals(float5, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertEquals((-1041.0F), (float)float0, 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(float0);
      
      float float1 = Float.sum((-1.0F), 3156.752F);
      assertEquals(3155.752F, float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      wall1.setHeight(float0);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      Integer integer0 = new Integer(278);
      assertEquals(278, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float0 = new Float((-1815.2976735668294));
      assertEquals((-1815.2977F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-334.7438F));
      assertEquals((-334.7438F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float((-4512.01F));
      assertEquals((-4512.01F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      int int0 = Float.compare(0.01F, 0.01F);
      assertEquals(0, int0);
      
      float float3 = ((Float)0.01F).floatValue();
      assertEquals(0.01F, float3, 0.01F);
      
      wall0.setXStart((-1309.4794F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(974.7356F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float4 = Float.valueOf((-334.7438F));
      assertEquals((-334.7438F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      
      float float5 = ((Float)0.01F).floatValue();
      assertEquals(0.01F, float5, 0.01F);
      assertEquals(float5, float3, 0.01F);
      
      Float float6 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      float float7 = Float.max((-1309.4794F), 5726.9976F);
      assertEquals(5726.9976F, float7, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      
      wall0.setArcExtent(float6);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float7, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(66, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      wall1.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1016.56616F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-822.1116F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1309.4794F), wall0.getXStart(), 0.01F);
      assertEquals((-1226.8645F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(974.7356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1815.2977F), wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.7438F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float0, (float)float7, 0.01F);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float6, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(level0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      
      Float float1 = new Float(4699.973816945282);
      assertEquals(4699.9736F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean1 = Float.isFinite((-1.0F));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setHeight(float2);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(1.0);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      boolean boolean2 = Float.isFinite(2696.0F);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Float float5 = new Float((-3525.23F));
      assertEquals((-3525.23F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      float float6 = float5.floatValue();
      assertEquals((-3525.23F), float6, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      Float float7 = new Float((-3944.7F));
      assertEquals((-3944.7F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      
      wall0.setArcExtent(float7);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2515.399F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3818834.5F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3944.7F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      
      float float8 = wall0.getYArcCircleCenter();
      assertEquals(1177.8855F, float8, 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2515.399F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3818834.5F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3944.7F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      
      boolean boolean3 = wall0.intersectsRectangle((-3238.8115F), (-688.8F), (-3944.7F), 1.0F);
      assertFalse(boolean3);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2515.399F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3818834.5F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3944.7F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      float float9 = wall0.getYEnd();
      assertEquals(655.3F, float9, 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2515.399F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3818834.5F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3944.7F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2515.399F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3818834.5F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3944.7F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNull(level1);
      
      Float float10 = wall0.getArcExtent();
      assertEquals((-3944.7F), (float)float10, 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2515.399F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3818834.5F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3944.7F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertNotNull(float10);
      assertNotEquals((float)float10, (float)float6, 0.01F);
      assertNotEquals((float)float10, (float)float3, 0.01F);
      assertNotEquals((float)float10, (float)float4, 0.01F);
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertNotEquals((float)float10, (float)float9, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float0 = new Float((double) (-1041.0F));
      assertEquals((-1041.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1041.0F));
      assertEquals((-1041.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals((-1041.0F), float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      float float3 = Float.sum((-2429.64F), 1.0F);
      assertEquals((-2428.64F), float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float(1067.2783F);
      assertEquals(1067.2783F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      Float float5 = new Float(2232206.52205557);
      assertEquals(2232206.5F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      float float6 = float5.floatValue();
      assertEquals(2232206.5F, float6, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      Float float7 = Float.valueOf(2232206.5F);
      assertEquals(2232206.5F, (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      
      Float float8 = Float.valueOf((-1041.0F));
      assertEquals((-1041.0F), (float)float8, 0.01F);
      assertNotNull(float8);
      assertEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      
      float float9 = float0.floatValue();
      assertEquals((-1041.0F), float9, 0.01F);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float6, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float7, 0.01F);
      assertEquals((float)float0, (float)float8, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertEquals(float9, float2, 0.01F);
      assertNotEquals(float9, float3, 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      
      wall1.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall2.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals((-1041.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1041.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(1.0F, float1, 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = Float.min(1.0F, 854.1003F);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(854.1003F);
      assertTrue(boolean0);
      
      Float float1 = new Float((double) 854.1003F);
      assertEquals(854.1003F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(854.1003F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float3 = wall0.getYArcCircleCenter();
      assertEquals((-284.65674F), float3, 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float4, 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level0);
      
      boolean boolean1 = wall0.intersectsRectangle((-164.50792F), (-625.8657F), 1.0F, 0.0F);
      assertTrue(boolean1);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      Float float5 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float5, 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      float float6 = wall0.getYEnd();
      assertEquals(206.914F, float6, 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level1);
      
      float float7 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float7, 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float7, float0, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      
      Integer integer0 = new Integer(783);
      assertEquals(783, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(783, (int)wall0.getLeftSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float8 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      
      wall0.setHeightAtEnd(float5);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(854.1003F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(783, (int)wall0.getLeftSideColor());
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals((float)float5, (float)float8, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float7, 0.01F);
      assertNotEquals((float)float5, (float)float6, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall0.clone();
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(932.437F, wall2.getThickness(), 0.01F);
      assertEquals(932.437F, wall2.getYStart(), 0.01F);
      assertEquals(574.03625F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(936.9677F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(614.6681F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Wall wall3 = new Wall(655.3F, (-575.30707F), 1.0F, 574.03625F, (-1478.741F));
      assertEquals(1322.5349F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1478.741F), wall3.getThickness(), 0.01F);
      assertEquals(1322.5349F, wall3.getLength(), 0.01F);
      assertEquals((-0.6354065F), wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-575.30707F), wall3.getYStart(), 0.01F);
      assertEquals(574.03625F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(328.15F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXEnd(), 0.01F);
      assertEquals(655.3F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getLeftSideColor());
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      
      wall1.setWallAtStart(wall3);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1322.5349F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1478.741F), wall3.getThickness(), 0.01F);
      assertEquals(1322.5349F, wall3.getLength(), 0.01F);
      assertEquals((-0.6354065F), wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-575.30707F), wall3.getYStart(), 0.01F);
      assertEquals(574.03625F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(328.15F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall3.getXEnd(), 0.01F);
      assertEquals(655.3F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      
      Float float1 = new Float(1700.4711F);
      assertEquals(1700.4711F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      
      float float2 = Float.min(1.0F, 206.914F);
      assertEquals(1.0F, float2, 0.01F);
      
      boolean boolean1 = Float.isFinite(1700.4711F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Float.isFinite(2405.535F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      float float4 = float3.floatValue();
      assertEquals(1.0F, float4, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(float4, float2, 0.01F);
      
      Float float5 = new Float((-445.5764968479));
      assertEquals((-445.5765F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      wall0.setArcExtent((Float) 1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      
      float float6 = wall0.getYArcCircleCenter();
      assertEquals(1177.8855F, float6, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      
      float float7 = float1.floatValue();
      assertEquals(1700.4711F, float7, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float5, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float6, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      
      Float float8 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      
      float float9 = float8.floatValue();
      assertEquals(1.0E-10F, float9, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertNotEquals(float9, float4, 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      
      float float10 = float8.floatValue();
      assertEquals(1.0E-10F, float10, 0.01F);
      assertNotEquals(float10, float6, 0.01F);
      assertNotEquals(float10, float4, 0.01F);
      assertEquals(float10, float9, 0.01F);
      assertNotEquals(float10, float7, 0.01F);
      assertNotEquals(float10, float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float9, 0.01F);
      
      float float11 = float8.floatValue();
      assertEquals(1.0E-10F, float11, 0.01F);
      assertNotEquals(float11, float6, 0.01F);
      assertNotEquals(float11, float2, 0.01F);
      assertNotEquals(float11, float4, 0.01F);
      assertEquals(float11, float10, 0.01F);
      assertNotEquals(float11, float7, 0.01F);
      assertEquals(float11, float9, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float10, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float9, 0.01F);
      
      float float12 = float8.floatValue();
      assertEquals(1.0E-10F, float12, 0.01F);
      assertNotEquals(float12, float4, 0.01F);
      assertEquals(float12, float10, 0.01F);
      assertNotEquals(float12, float2, 0.01F);
      assertNotEquals(float12, float6, 0.01F);
      assertNotEquals(float12, float7, 0.01F);
      assertEquals(float12, float11, 0.01F);
      assertEquals(float12, float9, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float10, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertEquals((float)float8, (float)float11, 0.01F);
      assertEquals((float)float8, (float)float9, 0.01F);
      
      wall0.setArcExtent((Float) 1.0E-10F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1177.8843F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0451697E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1697F, wall0.getLength(), 0.01F);
      
      float float13 = wall0.getYArcCircleCenter();
      assertEquals(1177.8843F, float13, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1177.8843F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0451697E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1697F, wall0.getLength(), 0.01F);
      assertNotEquals(float13, float11, 0.01F);
      assertNotEquals(float13, float10, 0.01F);
      assertEquals(float13, float6, 0.01F);
      assertNotEquals(float13, float9, 0.01F);
      assertNotEquals(float13, float7, 0.01F);
      assertNotEquals(float13, float12, 0.01F);
      assertNotEquals(float13, float4, 0.01F);
      assertNotEquals(float13, float2, 0.01F);
      
      boolean boolean3 = wall0.intersectsRectangle(1.0F, (-579.532F), 1.0F, 1700.4711F);
      assertFalse(boolean3);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1177.8843F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0451697E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1697F, wall0.getLength(), 0.01F);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      float float14 = wall0.getYEnd();
      assertEquals(655.3F, float14, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1177.8843F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0451697E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1697F, wall0.getLength(), 0.01F);
      assertNotEquals(float14, float2, 0.01F);
      assertNotEquals(float14, float12, 0.01F);
      assertNotEquals(float14, float10, 0.01F);
      assertNotEquals(float14, float7, 0.01F);
      assertNotEquals(float14, float9, 0.01F);
      assertNotEquals(float14, float11, 0.01F);
      assertNotEquals(float14, float13, 0.01F);
      assertNotEquals(float14, float6, 0.01F);
      assertNotEquals(float14, float4, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1177.8843F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0451697E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1697F, wall0.getLength(), 0.01F);
      assertNull(level0);
      
      Float float15 = wall0.getArcExtent();
      assertEquals(1.0E-10F, (float)float15, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(1177.8843F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0451697E13F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1697F, wall0.getLength(), 0.01F);
      assertNotNull(float15);
      assertNotEquals((float)float15, (float)float5, 0.01F);
      assertNotEquals((float)float15, (float)float14, 0.01F);
      assertNotEquals((float)float15, (float)float1, 0.01F);
      assertNotEquals((float)float15, (float)float4, 0.01F);
      assertNotEquals((float)float15, (float)float2, 0.01F);
      assertNotEquals((float)float15, (float)float6, 0.01F);
      assertNotEquals((float)float15, (float)float3, 0.01F);
      assertEquals((float)float15, (float)float12, 0.01F);
      assertEquals((float)float15, (float)float9, 0.01F);
      assertNotEquals((float)float15, (float)float7, 0.01F);
      assertNotEquals((float)float15, (float)float13, 0.01F);
      assertEquals((float)float15, (float)float10, 0.01F);
      assertEquals((float)float15, (float)float11, 0.01F);
      assertEquals((float)float15, (float)float8, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall(31.084461F, 31.084461F, 31.084461F, 31.084461F, 31.084461F);
      assertEquals(31.084461F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(31.084461F, wall0.getXEnd(), 0.01F);
      assertEquals(31.084461F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(31.084461F, wall0.getYStart(), 0.01F);
      assertEquals(31.084461F, wall0.getThickness(), 0.01F);
      assertEquals(31.084461F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(31.084461F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(31.084461F, 31.084461F);
      assertEquals(62.168922F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(62.168922F, wall0.getXEnd(), 0.01F);
      assertEquals(62.168922F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(62.168922F, wall0.getYStart(), 0.01F);
      assertEquals(31.084461F, wall0.getThickness(), 0.01F);
      assertEquals(62.168922F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(62.168922F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = Float.valueOf(31.084461F);
      assertEquals(31.084461F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(62.168922F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(62.168922F, wall0.getXEnd(), 0.01F);
      assertEquals(62.168922F, wall0.getYEnd(), 0.01F);
      assertEquals(31.084461F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(62.168922F, wall0.getYStart(), 0.01F);
      assertEquals(31.084461F, wall0.getThickness(), 0.01F);
      assertEquals(62.168922F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(62.168922F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(62.168922F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(62.168922F, wall0.getXEnd(), 0.01F);
      assertEquals(62.168922F, wall0.getYEnd(), 0.01F);
      assertEquals(31.084461F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(62.168922F, wall0.getYStart(), 0.01F);
      assertEquals(31.084461F, wall0.getThickness(), 0.01F);
      assertEquals(62.168922F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(62.168922F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1);
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(62.168922F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(62.168922F, wall0.getXEnd(), 0.01F);
      assertEquals(62.168922F, wall0.getYEnd(), 0.01F);
      assertEquals(31.084461F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(62.168922F, wall0.getYStart(), 0.01F);
      assertEquals(31.084461F, wall0.getThickness(), 0.01F);
      assertEquals(62.168922F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(62.168922F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(1.0E-10F, 0.0F, 0.0F, (-0.05263158F), 1.0E-10F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.0E-11F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0E-10F, wall0.getXStart(), 0.01F);
      assertEquals(0.05263158F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getThickness(), 0.01F);
      assertEquals((-0.05263158F), wall0.getYEnd(), 0.01F);
      assertEquals(0.05263158F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-0.02631579F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.0E-11F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0E-10F, wall0.getXStart(), 0.01F);
      assertEquals(0.05263158F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall0.getThickness(), 0.01F);
      assertEquals((-0.05263158F), wall0.getYEnd(), 0.01F);
      assertEquals(0.05263158F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-0.02631579F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float1 = new Float(1700.4711F);
      assertEquals(1700.4711F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float2 = Float.min(1.0F, 206.914F);
      assertEquals(1.0F, float2, 0.01F);
      
      boolean boolean1 = Float.isFinite(1700.4711F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Float.isFinite(2405.535F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      float float4 = float3.floatValue();
      assertEquals(1.0F, float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(float4, float2, 0.01F);
      
      Float float5 = new Float((-445.5764968479));
      assertEquals((-445.5765F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      
      wall0.setArcExtent((Float) 1.0F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      
      float float6 = wall0.getYArcCircleCenter();
      assertEquals(1177.8855F, float6, 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      
      boolean boolean3 = wall0.intersectsRectangle(0.0F, 1.0F, 1177.8855F, 1649.593F);
      assertFalse(boolean3);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      Float float7 = wall0.getArcExtent();
      assertEquals(1.0F, (float)float7, 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertNotNull(float7);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      
      float float8 = wall0.getYEnd();
      assertEquals(655.3F, float8, 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertNull(level0);
      
      Integer integer0 = Integer.valueOf(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertNull(textureImage0);
      
      Float float9 = wall0.getArcExtent();
      assertEquals(1.0F, (float)float9, 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(2657.0576F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.0245F, wall0.getLength(), 0.01F);
      assertNotNull(float9);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertEquals((float)float9, (float)float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall((-1.0F), (-1.0F), 574.03625F, 932.437F, 655.3F);
      assertEquals(1096.3445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(574.03625F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1096.3445F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(286.51813F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(932.437F, wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(1096.3445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(574.03625F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1096.3445F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(286.51813F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(932.437F, wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float0 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1096.3445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(574.03625F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1096.3445F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(286.51813F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(932.437F, wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float1 = new Float(1.0F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals(574.03625F, float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Float float3 = Float.valueOf((-237.162F));
      assertEquals((-237.162F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = Float.valueOf((-237.162F));
      assertEquals((-237.162F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      wall0.setArcExtent(float4);
      assertEquals(1096.3445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(181313.48F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals((-167.20168F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(745.2289F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-237.162F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(932.437F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1096.3445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(181313.48F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals((-167.20168F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(574.03625F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(745.2289F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-237.162F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(932.437F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(1020, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(1499.935F, 0.0F, 1499.935F, 0.0F, (-3525.23F), 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1499.935F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1499.935F, wall0.getXEnd(), 0.01F);
      assertEquals((-3525.23F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1499.935F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(639.0767F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3525.23F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0117F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0117F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2139.0117F, wall0.getXEnd(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3525.23F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0117F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0117F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2139.0117F, wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3525.23F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0117F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0117F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2139.0117F, wall0.getXEnd(), 0.01F);
      
      Integer integer0 = new Integer(3230);
      assertEquals(3230, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3525.23F), wall0.getThickness(), 0.01F);
      assertEquals(3230, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0117F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0117F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2139.0117F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(3230, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3525.23F), wall0.getThickness(), 0.01F);
      assertEquals(3230, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0117F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0117F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2139.0117F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-334.81668F), (-334.81668F), (-334.81668F), (-334.81668F), (-334.81668F));
      assertEquals((-334.81668F), wall0.getXStart(), 0.01F);
      assertEquals((-334.81668F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.81668F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.81668F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.81668F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.81668F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-334.81668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-334.81668F));
      assertEquals((-334.81668F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-334.81668F));
      assertEquals((-334.81668F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt((-334.81668F), (-334.81668F), (-334.81668F));
      assertFalse(boolean0);
      assertEquals((-334.81668F), wall0.getXStart(), 0.01F);
      assertEquals((-334.81668F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.81668F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.81668F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.81668F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.81668F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-334.81668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertEquals((-334.81668F), wall0.getXStart(), 0.01F);
      assertEquals((-334.81668F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.81668F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.81668F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.81668F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.81668F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-334.81668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.81668F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-334.81668F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-334.81668F), wall1.getXStart(), 0.01F);
      assertEquals((-334.81668F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-334.81668F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-334.81668F), wall1.getYEnd(), 0.01F);
      assertEquals((-334.81668F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = new Float((-334.81668F));
      assertEquals((-334.81668F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertEquals((-334.81668F), wall0.getXStart(), 0.01F);
      assertEquals((-334.81668F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.81668F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.81668F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.81668F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.81668F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-334.81668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.81668F), wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      Integer integer0 = new Integer((-757));
      assertEquals((-757), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-334.81668F), wall0.getXStart(), 0.01F);
      assertEquals((-334.81668F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.81668F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.81668F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.81668F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.81668F), wall0.getXEnd(), 0.01F);
      assertEquals((-757), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-334.81668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.81668F), wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals((-757), (int)integer1);
      assertEquals((-334.81668F), wall0.getXStart(), 0.01F);
      assertEquals((-334.81668F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.81668F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.81668F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.81668F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.81668F), wall0.getXEnd(), 0.01F);
      assertEquals((-757), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-334.81668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.81668F), wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setArcExtent(float2);
      assertEquals((-334.81668F), wall0.getXStart(), 0.01F);
      assertEquals((-334.81668F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.81668F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.81668F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.81668F), wall0.getYEnd(), 0.01F);
      assertEquals((-334.81668F), wall0.getXEnd(), 0.01F);
      assertEquals((-757), (int)wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-334.81668F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.81668F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.81668F), wall0.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = Float.sum(1.0F, (-1115.775F));
      assertEquals((-1114.775F), float1, 0.01F);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall1.getHeight();
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNull(float2);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(2039);
      assertEquals(2039, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = new Wall(2265.0F, (-1115.775F), 655.3F, 1.0F, 0.0F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1959.1632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-557.3875F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals((-1115.775F), wall2.getYStart(), 0.01F);
      assertEquals(2265.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1460.15F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1959.1632F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1959.1632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-557.3875F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getLeftSideColor());
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals((-1115.775F), wall2.getYStart(), 0.01F);
      assertEquals(2265.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1460.15F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1959.1632F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(homeTexture0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(6909.02F, 6909.02F, 1751.151F, 1751.151F, 1.007466F, (-1425.9915F));
      assertEquals(1.007466F, wall0.getThickness(), 0.01F);
      assertEquals(7294.328F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1425.9915F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4330.0854F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6909.02F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6909.02F, wall0.getYStart(), 0.01F);
      assertEquals(1751.151F, wall0.getXEnd(), 0.01F);
      assertEquals(1751.151F, wall0.getYEnd(), 0.01F);
      assertEquals(7294.328F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4330.0854F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-1425.9915F));
      assertEquals((-1425.9915F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.007466F, wall0.getThickness(), 0.01F);
      assertEquals(7294.328F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.5796472E7F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1425.9915F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6909.02F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-13231.977F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6909.02F, wall0.getYStart(), 0.01F);
      assertEquals(1751.151F, wall0.getXEnd(), 0.01F);
      assertEquals(21892.146F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1751.151F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1425.9915F), wall0.getArcExtent(), 0.01F);
      
      Float float1 = wall0.getArcExtent();
      assertEquals((-1425.9915F), (float)float1, 0.01F);
      assertEquals(1.007466F, wall0.getThickness(), 0.01F);
      assertEquals(7294.328F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.5796472E7F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1425.9915F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6909.02F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-13231.977F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6909.02F, wall0.getYStart(), 0.01F);
      assertEquals(1751.151F, wall0.getXEnd(), 0.01F);
      assertEquals(21892.146F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1751.151F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1425.9915F), wall0.getArcExtent(), 0.01F);
      assertNotNull(float1);
      
      float float2 = 327.5555F;
      // Undeclared exception!
      wall0.containsWallStartAt((-1.0F), 2.0F, 327.5555F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(206.914F, 655.3F, 0.01F, 0.01F, 0.01F, 655.3F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(687.17847F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getHeight(), 0.01F);
      assertEquals(327.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.17847F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(103.462F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(655.3F, (float)float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(687.17847F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getHeight(), 0.01F);
      assertEquals(327.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.17847F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(103.462F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(687.17847F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getHeight(), 0.01F);
      assertEquals(327.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.17847F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(103.462F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      
      Float float1 = new Float(1700.4711F);
      assertEquals(1700.4711F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeight(float1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(687.17847F, wall0.getLength(), 0.01F);
      assertEquals(327.655F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.17847F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(103.462F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min(1.0F, 206.914F);
      assertEquals(1.0F, float2, 0.01F);
      
      boolean boolean1 = Float.isFinite(1700.4711F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = Float.isFinite(2405.535F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Float float3 = new Float(1.0F);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      float float4 = float3.floatValue();
      assertEquals(1.0F, float4, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(float4, float2, 0.01F);
      
      Float float5 = new Float((-445.5764968479));
      assertEquals((-445.5765F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      wall0.setArcExtent((Float) 1.0F);
      assertEquals(138.28738F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(716.6686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.2121F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.17847F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      
      float float6 = wall0.getYArcCircleCenter();
      assertEquals(138.28738F, float6, 0.01F);
      assertEquals(138.28738F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(716.6686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.2121F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.17847F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      
      float float7 = float1.floatValue();
      assertEquals(1700.4711F, float7, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float6, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float5, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(138.28738F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(716.6686F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.2121F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(687.17847F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(655.3F, wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      
      Integer integer0 = new Integer((-2730));
      assertEquals((-2730), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-49.39F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(level0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-49.39F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setXStart(280.7484F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(280.7484F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(140.3742F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(280.7484F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(280.7484F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(280.7484F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(140.3742F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(280.7484F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(280.7484F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(280.7484F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(140.3742F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(280.7484F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(280.7484F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Float float0 = wall1.getArcExtent();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(280.7484F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(140.3742F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(280.7484F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(280.7484F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-49.39F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-1132.7628F), 1.0F, 1.0F, 0.0F, (-1.0F), 647.892F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1133.7633F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-565.8814F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1132.7628F), 0.01F, (-1.0F), 647.892F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1133.7633F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-565.8814F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1133.7633F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-565.8814F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-565.8814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getXStart(), 0.01F);
      assertEquals(1133.7633F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1133.7633F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(647.892F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall0.containsWallStartAt((-2160.2F), 2562.7F, (-1071.0F));
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1133.7633F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-565.8814F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(2735);
      assertEquals(2735, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.max((-3198), (-3198));
      assertEquals((-3198), int0);
      
      boolean boolean2 = integer0.equals(wall1);
      assertFalse(boolean2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1133.7633F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-565.8814F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-565.8814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getXStart(), 0.01F);
      assertEquals(1133.7633F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1133.7633F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(647.892F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      wall1.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1133.7633F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-565.8814F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-565.8814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getXStart(), 0.01F);
      assertEquals(1133.7633F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2735, (int)wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1133.7633F, wall1.getLength(), 0.01F);
      assertEquals(647.892F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1133.7633F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-565.8814F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      
      int int1 = Float.compare((-2160.2F), 2562.7F);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Float float0 = new Float((double) 647.892F);
      assertEquals(647.892F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-564.561F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1497.5925F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals(1037162.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(647.892F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall1.getRightSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-564.561F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1497.5925F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals(1037162.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(647.892F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-565.8814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getXStart(), 0.01F);
      assertEquals(1133.7633F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2735, (int)wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1133.7633F, wall1.getLength(), 0.01F);
      assertEquals(647.892F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean3 = wall0.isTrapezoidal();
      assertFalse(boolean3);
      assertEquals((-564.561F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1497.5925F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals(1037162.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(647.892F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-564.561F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1497.5925F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals(1037162.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(647.892F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-565.8814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getXStart(), 0.01F);
      assertEquals(1133.7633F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2735, (int)wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1133.7633F, wall1.getLength(), 0.01F);
      assertEquals(647.892F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((-564.561F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1497.5925F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1132.7628F), wall0.getXStart(), 0.01F);
      assertEquals(1037162.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1133.7633F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(647.892F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(647.892F, wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), 2741.4712F, (-334.7438F), 2741.4712F);
      assertEquals(2741.4712F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(3076.215F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3076.215F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2741.4712F, wall0.getThickness(), 0.01F);
      assertEquals(1203.3636F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(2741.4712F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(3076.215F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3076.215F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2741.4712F, wall0.getThickness(), 0.01F);
      assertEquals(1203.3636F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(float0);
      
      Float float1 = Float.valueOf((-2262.0F));
      assertEquals((-2262.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf((-2262.0F));
      assertEquals((-2262.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setHeightAtEnd(float2);
      assertEquals(2741.4712F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(3076.215F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3076.215F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2741.4712F, wall0.getThickness(), 0.01F);
      assertEquals(1203.3636F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = Float.sum(0.0F, 0.01F);
      assertEquals(0.01F, float3, 0.01F);
      
      Wall wall1 = new Wall(2741.4712F, 0.01F, (-2262.0F), (-1115.775F), 197.67877F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(197.67877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5126.373F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2262.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-557.8825F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(239.7356F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getYEnd(), 0.01F);
      assertEquals(2741.4712F, wall1.getXStart(), 0.01F);
      assertEquals(5126.373F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(2741.4712F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(3076.215F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3076.215F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2741.4712F, wall0.getThickness(), 0.01F);
      assertEquals(1203.3636F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(197.67877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5126.373F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2262.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-557.8825F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(239.7356F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getYEnd(), 0.01F);
      assertEquals(2741.4712F, wall1.getXStart(), 0.01F);
      assertEquals(5126.373F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = wall1.getHeight();
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(197.67877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5126.373F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2262.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-557.8825F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(239.7356F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getYEnd(), 0.01F);
      assertEquals(2741.4712F, wall1.getXStart(), 0.01F);
      assertEquals(5126.373F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNull(float4);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float5 = new Float((double) (-1115.775F));
      assertEquals((-1115.775F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertEquals(2741.4712F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(3076.215F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3076.215F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2741.4712F, wall0.getThickness(), 0.01F);
      assertEquals(1203.3636F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(197.67877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5126.373F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2262.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-557.8825F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(239.7356F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getYEnd(), 0.01F);
      assertEquals(2741.4712F, wall1.getXStart(), 0.01F);
      assertEquals(5126.373F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float5);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(197.67877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5126.373F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-557.8825F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getHeight(), 0.01F);
      assertEquals(239.7356F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getYEnd(), 0.01F);
      assertEquals(2741.4712F, wall1.getXStart(), 0.01F);
      assertEquals(5126.373F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(2741.4712F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(3076.215F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3076.215F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2741.4712F, wall0.getThickness(), 0.01F);
      assertEquals(1203.3636F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(197.67877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5126.373F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-557.8825F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getHeight(), 0.01F);
      assertEquals(239.7356F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getYEnd(), 0.01F);
      assertEquals(2741.4712F, wall1.getXStart(), 0.01F);
      assertEquals(5126.373F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(2741.4712F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(3076.215F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3076.215F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2741.4712F, wall0.getThickness(), 0.01F);
      assertEquals(1203.3636F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(197.67877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5126.373F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-557.8825F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getHeight(), 0.01F);
      assertEquals(239.7356F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getYEnd(), 0.01F);
      assertEquals(2741.4712F, wall1.getXStart(), 0.01F);
      assertEquals(5126.373F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(2039);
      assertEquals(2039, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(197.67877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5126.373F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-557.8825F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getHeight(), 0.01F);
      assertEquals(239.7356F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1115.775F), wall1.getYEnd(), 0.01F);
      assertEquals(2741.4712F, wall1.getXStart(), 0.01F);
      assertEquals(5126.373F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(0.01F, (-1053.4165F), (-793.373F), 0.01F, 2741.4712F);
      assertEquals((-396.6815F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1318.7737F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2741.4712F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(1318.7737F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-793.373F), wall2.getXEnd(), 0.01F);
      assertEquals(0.01F, wall2.getXStart(), 0.01F);
      assertEquals((-1053.4165F), wall2.getYStart(), 0.01F);
      assertEquals((-526.70325F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Integer integer1 = new Integer(2039);
      assertEquals(2039, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(2741.4712F, wall0.getXEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(3076.215F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2262.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3076.215F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2741.4712F, wall0.getThickness(), 0.01F);
      assertEquals(1203.3636F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall(258.03F, 0.1F, 1.0F, 0.1F, 1031.2F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(257.03F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(257.03F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(4793.5F, (-1.0F), 0.0F, 0.01F, 1965.0125F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(257.03F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(257.03F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideShininess(258.03F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(257.03F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(257.03F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setYStart((-1.0F));
      assertEquals(257.03235F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1031.2F, wall0.getThickness(), 0.01F);
      assertEquals(257.03235F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(258.03F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(129.515F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setLevel((Level) null);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.clone();
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2396.75F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.495F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(258.03F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(4793.5F, wall2.getXStart(), 0.01F);
      assertEquals(1965.0125F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(4793.5F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Wall wall3 = wall2.clone();
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2396.75F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4793.5F, wall1.getLength(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(4793.5F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2396.75F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.495F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(258.03F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(4793.5F, wall2.getXStart(), 0.01F);
      assertEquals(1965.0125F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(4793.5F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.495F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.01F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1965.0125F, wall3.getThickness(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(4793.5F, wall3.getXStart(), 0.01F);
      assertEquals(4793.5F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(258.03F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2396.75F, wall3.getXArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotNull(wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      
      wall1.setXEnd(2405.535F);
      assertEquals(2387.9653F, wall1.getLength(), 0.01F);
      assertEquals(2405.535F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3599.5176F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2387.9653F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      
      wall1.setPattern((TextureImage) null);
      assertEquals(2387.9653F, wall1.getLength(), 0.01F);
      assertEquals(2405.535F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3599.5176F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2387.9653F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      
      boolean boolean0 = Float.isFinite(559.5F);
      assertTrue(boolean0);
      
      Float float1 = wall3.getArcExtent();
      assertEquals(2387.9653F, wall1.getLength(), 0.01F);
      assertEquals(2405.535F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3599.5176F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2387.9653F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2396.75F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.495F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(258.03F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(4793.5F, wall2.getXStart(), 0.01F);
      assertEquals(1965.0125F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(4793.5F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.495F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.01F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1965.0125F, wall3.getThickness(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(4793.5F, wall3.getXStart(), 0.01F);
      assertEquals(4793.5F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(258.03F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2396.75F, wall3.getXArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNull(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      
      HomeTexture homeTexture0 = wall2.getLeftSideTexture();
      assertEquals(2387.9653F, wall1.getLength(), 0.01F);
      assertEquals(2405.535F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3599.5176F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2387.9653F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2396.75F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.495F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(258.03F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(4793.5F, wall2.getXStart(), 0.01F);
      assertEquals(1965.0125F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(4793.5F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setLeftSideTexture((HomeTexture) null);
      assertEquals(2387.9653F, wall1.getLength(), 0.01F);
      assertEquals(2405.535F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3599.5176F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2387.9653F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2396.75F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.495F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(258.03F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(4793.5F, wall2.getXStart(), 0.01F);
      assertEquals(1965.0125F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(4793.5F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setRightSideShininess((-647.9F));
      assertEquals(2387.9653F, wall1.getLength(), 0.01F);
      assertEquals(2405.535F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3599.5176F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2387.9653F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2396.75F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.495F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(258.03F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(4793.5F, wall2.getXStart(), 0.01F);
      assertEquals((-647.9F), wall2.getRightSideShininess(), 0.01F);
      assertEquals(1965.0125F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(4793.5F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall1.setRightSideShininess(0.0F);
      assertEquals(2387.9653F, wall1.getLength(), 0.01F);
      assertEquals(2405.535F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3599.5176F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4793.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(1965.0125F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2387.9653F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.03F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.495F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(1645.5152801525574);
      assertEquals(1645.5153F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(1645.5153F, float1, 0.01F);
      
      Wall wall0 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float2 = wall0.getHeight();
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float2);
      
      wall0.setHeight((Float) null);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float3 = new Float((-4041.67F));
      assertEquals((-4041.67F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      wall0.setArcExtent(float3);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1183.5886F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2970732.2F, wall0.getLength(), 0.01F);
      assertEquals((-4041.67F), wall0.getArcExtent(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals(1177.8855F, float4, 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1183.5886F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2970732.2F, wall0.getLength(), 0.01F);
      assertEquals((-4041.67F), wall0.getArcExtent(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      
      Float float5 = wall0.getArcExtent();
      assertEquals((-4041.67F), (float)float5, 0.01F);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1183.5886F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2970732.2F, wall0.getLength(), 0.01F);
      assertEquals((-4041.67F), wall0.getArcExtent(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1183.5886F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2970732.2F, wall0.getLength(), 0.01F);
      assertEquals((-4041.67F), wall0.getArcExtent(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(level0);
      
      Wall wall1 = new Wall(1645.5153F, (-811.71533F), 0.0F, 3394.78F, (-3525.23F), (-3525.23F));
      assertEquals(4516.893F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1645.5153F, wall1.getXStart(), 0.01F);
      assertEquals(3394.78F, wall1.getYEnd(), 0.01F);
      assertEquals((-3525.23F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3525.23F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(822.7576F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1291.5323F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4516.893F, wall1.getLength(), 0.01F);
      assertEquals((-811.71533F), wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = Integer.valueOf(46);
      assertEquals(46, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(3);
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(3);
      assertEquals(3, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      wall1.setLeftSideColor(integer2);
      assertEquals(4516.893F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1645.5153F, wall1.getXStart(), 0.01F);
      assertEquals(3394.78F, wall1.getYEnd(), 0.01F);
      assertEquals((-3525.23F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3525.23F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3, (int)wall1.getLeftSideColor());
      assertEquals(822.7576F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1291.5323F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4516.893F, wall1.getLength(), 0.01F);
      assertEquals((-811.71533F), wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(1045.1711F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1183.5886F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall0.getYEnd(), 0.01F);
      assertEquals(1700.4711F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2970732.2F, wall0.getLength(), 0.01F);
      assertEquals((-4041.67F), wall0.getArcExtent(), 0.01F);
      assertEquals(1700.4711F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall0.getThickness(), 0.01F);
      assertEquals(1177.8855F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1700.4711F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer3 = new Integer(2);
      assertEquals(2, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      
      boolean boolean0 = wall1.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(4516.893F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1645.5153F, wall1.getXStart(), 0.01F);
      assertEquals(3394.78F, wall1.getYEnd(), 0.01F);
      assertEquals((-3525.23F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3525.23F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3, (int)wall1.getLeftSideColor());
      assertEquals(822.7576F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1291.5323F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4516.893F, wall1.getLength(), 0.01F);
      assertEquals((-811.71533F), wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1.0F, 0.0F, 1.0F, (-10.0F), (-10.0F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-10.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-10.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Wall$Property", (PropertyChangeListener) null);
      assertEquals("com.eteks.sweethome3d.model.Wall$Property", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.beans.PropertyChangeListenerProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Wall wall2 = new Wall((-1189.4F), 0.01F, (-335.64337F), (-583.509F), 655.3F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1034.1155F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1034.1155F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-335.64337F), wall2.getXEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-762.5217F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-583.509F), wall2.getYEnd(), 0.01F);
      assertEquals((-291.74948F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float1 = wall2.getHeight();
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1034.1155F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1034.1155F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-335.64337F), wall2.getXEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-762.5217F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-583.509F), wall2.getYEnd(), 0.01F);
      assertEquals((-291.74948F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(float1);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setHeight(float0);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1034.1155F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1034.1155F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals((-335.64337F), wall2.getXEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-762.5217F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-583.509F), wall2.getYEnd(), 0.01F);
      assertEquals((-291.74948F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall2.setWallAtEnd(wall0);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertEquals(1034.1155F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1034.1155F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals((-335.64337F), wall2.getXEnd(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-762.5217F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-583.509F), wall2.getYEnd(), 0.01F);
      assertEquals((-291.74948F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Integer integer0 = new Integer(2786);
      assertEquals(2786, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer1 = new Integer(2709);
      assertEquals(2709, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess((-1041.0F));
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1041.0F));
      assertEquals((-1041.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      
      Float float1 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 1700.4711F);
      assertEquals(1700.4711F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1700.4711F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals(0.01F, float5, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      Float float6 = Float.valueOf((-90.27636F));
      assertEquals((-90.27636F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      Float float7 = Float.valueOf((-90.27636F));
      assertEquals((-90.27636F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      
      float float8 = float7.floatValue();
      assertEquals((-90.27636F), float8, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float5, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      TextureImage textureImage0 = wall1.getPattern();
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(115.22698F, 1.0F, 193.32997F, 1.0F, (-859.93F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(78.10299F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(154.27847F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(78.10299F, wall0.getLength(), 0.01F);
      assertEquals(193.32997F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 1.0F, 1.0F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = Float.sum(0.0F, (-859.93F));
      assertEquals((-859.93F), float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(78.10299F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(154.27847F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(78.10299F, wall0.getLength(), 0.01F);
      assertEquals(193.32997F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(78.10299F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(154.27847F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(78.10299F, wall0.getLength(), 0.01F);
      assertEquals(193.32997F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(78.10299F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(154.27847F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(78.10299F, wall0.getLength(), 0.01F);
      assertEquals(193.32997F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(32.0F, 32.0F, 32.0F, 32.0F, 32.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(32.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(32.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(32.0F, wall0.getYStart(), 0.01F);
      assertEquals(32.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(32.0F, wall0.getYEnd(), 0.01F);
      assertEquals(32.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(32.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(32.0F);
      assertEquals(32.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(32.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(32.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(32.0F, wall0.getYStart(), 0.01F);
      assertEquals(32.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(32.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(32.0F, wall0.getYEnd(), 0.01F);
      assertEquals(32.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(32.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(32.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(32.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(32.0F, wall0.getYStart(), 0.01F);
      assertEquals(32.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(32.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(32.0F, wall0.getYEnd(), 0.01F);
      assertEquals(32.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(32.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Wall wall0 = new Wall(206.914F, 1.0F, (-2054.33F), (-859.93F), 115.26847F, 1.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-923.708F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2419.592F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-429.465F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2419.592F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2054.33F), wall0.getXEnd(), 0.01F);
      assertEquals((-859.93F), wall0.getYEnd(), 0.01F);
      assertEquals(115.26847F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-923.708F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2419.592F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-429.465F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2419.592F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2054.33F), wall0.getXEnd(), 0.01F);
      assertEquals((-859.93F), wall0.getYEnd(), 0.01F);
      assertEquals(115.26847F, wall0.getThickness(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-923.708F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2419.592F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-429.465F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2419.592F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2054.33F), wall0.getXEnd(), 0.01F);
      assertEquals((-859.93F), wall0.getYEnd(), 0.01F);
      assertEquals(115.26847F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      
      Wall wall2 = new Wall((-1189.4F), 0.01F, (-335.64337F), (-583.509F), 655.3F);
      assertEquals((-335.64337F), wall2.getXEnd(), 0.01F);
      assertEquals((-762.5217F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-583.509F), wall2.getYEnd(), 0.01F);
      assertEquals(1034.1155F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-291.74948F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1189.4F), wall2.getXStart(), 0.01F);
      assertEquals(1034.1155F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float1 = wall2.getHeight();
      assertEquals((-335.64337F), wall2.getXEnd(), 0.01F);
      assertEquals((-762.5217F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-583.509F), wall2.getYEnd(), 0.01F);
      assertEquals(1034.1155F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-291.74948F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1189.4F), wall2.getXStart(), 0.01F);
      assertEquals(1034.1155F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(float1);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall2.setHeight(float0);
      assertEquals((-335.64337F), wall2.getXEnd(), 0.01F);
      assertEquals((-762.5217F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-583.509F), wall2.getYEnd(), 0.01F);
      assertEquals(1034.1155F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-291.74948F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1189.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(1034.1155F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall2.setWallAtEnd(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall2.getXEnd(), 0.01F);
      assertEquals((-762.5217F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(655.3F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-583.509F), wall2.getYEnd(), 0.01F);
      assertEquals(1034.1155F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-291.74948F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1189.4F), wall2.getXStart(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(1034.1155F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Integer integer0 = new Integer(2786);
      assertEquals(2786, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall3 = new Wall(0.0F, 932.437F, 0.0F, (-1.0F), (-1189.4F));
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(465.7185F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-1189.4F), wall3.getThickness(), 0.01F);
      assertEquals(933.437F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(932.437F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(933.437F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      
      Integer integer1 = new Integer(2709);
      assertEquals(2709, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(115.22698F, 1.0F, 193.32997F, 1.0F, (-859.93F));
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(78.10299F, wall0.getLength(), 0.01F);
      assertEquals(193.32997F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(78.10299F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(154.27847F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 1.0F, 1.0F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = Float.sum(0.0F, (-859.93F));
      assertEquals((-859.93F), float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(78.10299F, wall0.getLength(), 0.01F);
      assertEquals(193.32997F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(78.10299F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(154.27847F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(78.10299F, wall0.getLength(), 0.01F);
      assertEquals(193.32997F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(78.10299F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(154.27847F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(601.86163F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(301.43082F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(600.86163F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(600.86163F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(601.86163F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(1.0F, 1.0F, 1.0F, 1.0F);
      assertFalse(boolean0);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(301.43082F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(600.86163F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(600.86163F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(601.86163F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F));
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-335.64337F));
      assertEquals((-335.64337F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), 206.914F, 206.914F, (-1041.0F));
      assertNull(wall0.getHeight());
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setWallAtStart(wall0);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Float float1 = wall0.getHeightAtEnd();
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals((-417.043F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-417.043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.8169F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(1764.8169F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall((-1744.7346F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1744.7346F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1392.8673F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(703.7346F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(703.7346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      int int0 = Float.compare(1648.989F, 1648.989F);
      assertEquals(0, int0);
      
      wall1.setArcExtent((Float) 1648.989F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1744.7346F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1392.8673F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(589075.94F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(703.7346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1648.989F, wall1.getArcExtent(), 0.01F);
      assertEquals((-979.3075F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1744.7346F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1392.8673F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(589075.94F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(703.7346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1648.989F, wall1.getArcExtent(), 0.01F);
      assertEquals((-979.3075F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((-1744.7346F));
      assertEquals((-1744.7346F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1744.7346F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1392.8673F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(703.7346F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(703.7346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1744.7346F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1392.8673F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(589075.94F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals(703.7346F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1648.989F, wall1.getArcExtent(), 0.01F);
      assertEquals((-979.3075F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(2, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall((-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F), (-335.64337F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-335.64337F));
      assertEquals((-335.64337F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getRightSideColor());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(11.4865055F, (-1040.4601F), 11.4865055F, (-335.64337F), (-1040.4601F));
      assertEquals((-335.64337F), wall1.getYEnd(), 0.01F);
      assertEquals((-1040.4601F), wall1.getThickness(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(704.8167F, wall1.getLength(), 0.01F);
      assertEquals(11.4865055F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(11.4865055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-688.05176F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(704.8167F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(11.4865055F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = wall0.getHeight();
      assertEquals((-335.64337F), (float)float1, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.sum(0.01F, (-335.64337F));
      assertEquals((-335.63336F), float2, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getRightSideColor());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall1.getYEnd(), 0.01F);
      assertEquals((-1040.4601F), wall1.getThickness(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(704.8167F, wall1.getLength(), 0.01F);
      assertEquals(11.4865055F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(11.4865055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-688.05176F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(704.8167F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(11.4865055F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setHeight(float1);
      assertNull(wall0.getRightSideColor());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals((-335.64337F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-335.64337F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-335.64337F), wall0.getXEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getHeight(), 0.01F);
      assertEquals((-335.64337F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getYEnd(), 0.01F);
      assertEquals((-335.64337F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-335.64337F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-335.64337F), wall1.getYEnd(), 0.01F);
      assertEquals((-1040.4601F), wall1.getThickness(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(704.8167F, wall1.getLength(), 0.01F);
      assertEquals(11.4865055F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(11.4865055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-688.05176F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(704.8167F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(11.4865055F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals((-335.64337F), wall1.getYEnd(), 0.01F);
      assertEquals((-1040.4601F), wall1.getThickness(), 0.01F);
      assertEquals((-1040.4601F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(704.8167F, wall1.getLength(), 0.01F);
      assertEquals(11.4865055F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(11.4865055F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-688.05176F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(704.8167F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(11.4865055F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd((-1041.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = Float.min(1.0F, 854.1003F);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(854.1003F);
      assertTrue(boolean0);
      
      Float float1 = new Float((double) 854.1003F);
      assertEquals(854.1003F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(854.1003F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getYArcCircleCenter();
      assertEquals((-284.65674F), float3, 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float4, 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNull(level0);
      
      Wall wall1 = new Wall(839.217F, 1.0F, (-164.50792F), 854.1003F, 678.419F, (-1664.1127F));
      assertEquals((-1664.1127F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(427.55014F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(854.1003F, wall1.getYEnd(), 0.01F);
      assertEquals((-164.50792F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1317.2865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1317.2865F, wall1.getLength(), 0.01F);
      assertEquals(839.217F, wall1.getXStart(), 0.01F);
      assertEquals(337.35452F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(678.419F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(46);
      assertEquals(46, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      wall0.setLeftSideColor(integer1);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(46, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer1.equals((Object)integer0));
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(46, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer2 = wall1.getRightSideColor();
      assertEquals((-1664.1127F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(427.55014F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(854.1003F, wall1.getYEnd(), 0.01F);
      assertEquals((-164.50792F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1317.2865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1317.2865F, wall1.getLength(), 0.01F);
      assertEquals(839.217F, wall1.getXStart(), 0.01F);
      assertEquals(337.35452F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(678.419F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(integer2);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall1.isAtLevel((Level) null);
      assertTrue(boolean1);
      assertEquals((-1664.1127F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(427.55014F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(854.1003F, wall1.getYEnd(), 0.01F);
      assertEquals((-164.50792F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1317.2865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1317.2865F, wall1.getLength(), 0.01F);
      assertEquals(839.217F, wall1.getXStart(), 0.01F);
      assertEquals(337.35452F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(678.419F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(2831.9F, 2831.9F, 2831.9F, 2831.9F, 2831.9F);
      assertEquals(2831.9F, wall0.getYStart(), 0.01F);
      assertEquals(2831.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2831.9F, wall0.getThickness(), 0.01F);
      assertEquals(2831.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2831.9F, wall0.getYEnd(), 0.01F);
      assertEquals(2831.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2831.9F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(2831.9F, wall0.getYStart(), 0.01F);
      assertEquals(2831.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2831.9F, wall0.getThickness(), 0.01F);
      assertEquals(2831.9F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2831.9F, wall0.getYEnd(), 0.01F);
      assertEquals(2831.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2831.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      wall0.setHeightAtEnd((Float) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      
      float float1 = Float.sum(1.0F, (-1115.775F));
      assertEquals((-1114.775F), float1, 0.01F);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall1.getHeight();
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNull(float2);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = Float.isFinite(854.1003F);
      assertTrue(boolean0);
      
      Float float0 = new Float((double) 854.1003F);
      assertEquals(854.1003F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(854.1003F, (-2017.26F));
      assertEquals((-2017.26F), float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals(854.1003F, float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      wall0.setLeftSideShininess(3208.0593F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      float float3 = new Float(854.1003F);
      assertEquals(854.1003F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float4, 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      
      boolean boolean1 = wall0.intersectsRectangle(206.914F, (-625.9F), 3208.0593F, 0.0F);
      assertTrue(boolean1);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      float float5 = new Float(0.0F);
      assertEquals(0.0F, float5, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      
      boolean boolean2 = Float.isFinite(0.0055555557F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Level level0 = wall0.getLevel();
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(level0);
      
      float float6 = wall0.getLeftSideShininess();
      assertEquals(3208.0593F, float6, 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      
      Integer integer0 = new Integer(776);
      assertEquals(776, (int)integer0);
      assertNotNull(integer0);
      
      float float7 = wall0.getThickness();
      assertEquals(206.914F, float7, 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      
      wall0.setXEnd(776);
      assertEquals((-1643.2144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(776.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1614482.5F, wall0.getLength(), 0.01F);
      assertEquals(775.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(388.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((-1643.2144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(776.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1614482.5F, wall0.getLength(), 0.01F);
      assertEquals(775.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(388.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float6, 0.01F);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float7, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals((-1643.2144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(776.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1614482.5F, wall0.getLength(), 0.01F);
      assertEquals(775.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(388.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall1);
      
      float float8 = wall0.getLength();
      assertEquals(1614482.5F, float8, 0.01F);
      assertEquals((-1643.2144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(776.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1614482.5F, wall0.getLength(), 0.01F);
      assertEquals(775.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(388.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotEquals(float8, float1, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      
      wall0.setArcExtent(float4);
      assertEquals((-1643.2144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(776.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1614482.5F, wall0.getLength(), 0.01F);
      assertEquals(775.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(388.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3208.0593F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      assertNotEquals((float)float4, (float)float8, 0.01F);
      assertNotEquals((float)float4, (float)float7, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float6, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall(63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F, 63.621853F);
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(63.621853F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(63.621853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(63.621853F, wall0.getYEnd(), 0.01F);
      assertEquals(63.621853F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(63.621853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(63.621853F, wall0.getYStart(), 0.01F);
      assertEquals(63.621853F, wall0.getXStart(), 0.01F);
      assertEquals(63.621853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-49.39F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(level0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(float1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      boolean boolean1 = integer0.equals(integer1);
      assertTrue(boolean1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
      
      wall0.setRightSideColor(integer1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(integer1.equals((Object)integer0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Float float2 = new Float((double) (-49.39F));
      assertEquals((-49.39F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall0.setHeight(float2);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Integer integer2 = wall0.getRightSideColor();
      assertEquals(0, (int)integer2);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-49.39F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall((-38.06434F), (-38.06434F), 0.0F, 0.0F, 559.5F);
      assertEquals((-19.03217F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.831104F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(53.831104F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-369.0F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Integer integer0 = new Integer(960);
      assertEquals(960, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(960, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals(960, (int)integer1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-38.06434F), wall0.getXStart(), 0.01F);
      assertEquals((-369.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-38.06434F), wall0.getYStart(), 0.01F);
      assertEquals(559.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(960, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(333.11755F, wall0.getLength(), 0.01F);
      assertEquals((-19.03217F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-203.53217F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(333.11755F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 206.914F, 206.914F, 206.914F, 206.914F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(206.914F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = Float.min(1.0F, 854.1003F);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(854.1003F);
      assertTrue(boolean0);
      
      Float float1 = new Float((double) 854.1003F);
      assertEquals(854.1003F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(854.1003F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getYArcCircleCenter();
      assertEquals((-284.65674F), float3, 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float4, 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level0);
      
      boolean boolean1 = wall0.intersectsRectangle((-164.50792F), (-625.8657F), 1.0F, 0.0F);
      assertTrue(boolean1);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      float float5 = wall0.getYEnd();
      assertEquals(206.914F, float5, 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      Level level1 = wall0.getLevel();
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level1);
      
      float float6 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float6, 0.01F);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt((-625.8657F), 0.01F, (-1018.7275F));
      assertFalse(boolean2);
      assertEquals((-284.65674F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertEquals(206.914F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(428960.72F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(1161.5844F, (-1.0F), (-2291.445F), (-2291.445F), 1942.379F);
      assertEquals(4143.6157F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-564.93036F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4143.6157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1161.5844F, wall0.getXStart(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1942.379F);
      assertEquals(4143.6157F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-564.93036F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4143.6157F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1161.5844F, wall0.getXStart(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float0);
      
      float float1 = wall0.getXEnd();
      assertEquals((-2291.445F), float1, 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = Float.min(0.0F, 0.0F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      float float3 = Float.min((-2291.445F), 0.01F);
      assertEquals((-2291.445F), float3, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1145.7225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeightAtEnd((Float) null);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1145.7225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1145.7225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals((-2291.445F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals((-1146.2225F), float4, 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.move(1942.379F, 0.0F);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.containsWallStartAt(1207.04F, 1161.5844F, 1942.379F);
      assertTrue(boolean0);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setPattern((TextureImage) null);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float5 = wall1.getArcExtent();
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(float5);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float6 = wall1.getYStart();
      assertEquals((-1.0F), float6, 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLeftSideShininess(0.0F);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float7 = wall1.getRightSideShininess();
      assertEquals(1942.379F, float7, 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-349.06604F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1942.379F, wall1.getThickness(), 0.01F);
      assertEquals((-2291.445F), wall1.getYEnd(), 0.01F);
      assertEquals(796.6565F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1942.379F, wall1.getXStart(), 0.01F);
      assertEquals(1942.379F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3239.8857F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("0k(idL_`&1n}nW.S vv", propertyChangeListener0);
      assertEquals("0k(idL_`&1n}nW.S vv", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeight());
      assertEquals((-2291.445F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1942.379F, wall0.getThickness(), 0.01F);
      assertEquals(3239.8857F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1942.379F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1146.2225F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2291.445F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3239.8857F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.7225F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals("0k(idL_`&1n}nW.S vv", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-73.425F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-73.425F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-73.425F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(377.7F, (-581.0F), 377.7F, 377.7F, 1.0F);
      assertEquals(958.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(377.7F, wall0.getXStart(), 0.01F);
      assertEquals(958.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(377.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-101.649994F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-581.0F), wall0.getYStart(), 0.01F);
      assertEquals(377.7F, wall0.getYEnd(), 0.01F);
      assertEquals(377.7F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Class<Wall> class0 = Wall.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 0.0F, 1.0F, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogTexture0.getId());
      assertEquals(1.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogTexture0.getId());
      assertEquals(1.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals(1.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNotNull(homeTexture0);
      
      wall0.setLeftSideTexture(homeTexture0);
      assertEquals(958.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(377.7F, wall0.getXStart(), 0.01F);
      assertEquals(958.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(377.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-101.649994F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-581.0F), wall0.getYStart(), 0.01F);
      assertEquals(377.7F, wall0.getYEnd(), 0.01F);
      assertEquals(377.7F, wall0.getXEnd(), 0.01F);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogTexture0.getId());
      assertEquals(1.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals(1.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      
      boolean boolean0 = wall0.containsWallStartAt(1.0F, 1.0F, 1953.09F);
      assertTrue(boolean0);
      assertEquals(958.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(377.7F, wall0.getXStart(), 0.01F);
      assertEquals(958.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(377.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-101.649994F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-581.0F), wall0.getYStart(), 0.01F);
      assertEquals(377.7F, wall0.getYEnd(), 0.01F);
      assertEquals(377.7F, wall0.getXEnd(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertEquals(958.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(377.7F, wall0.getXStart(), 0.01F);
      assertEquals(958.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(377.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-101.649994F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-581.0F), wall0.getYStart(), 0.01F);
      assertEquals(377.7F, wall0.getYEnd(), 0.01F);
      assertEquals(377.7F, wall0.getXEnd(), 0.01F);
      assertFalse(boolean1 == boolean0);
      
      float float0 = wall0.getXStart();
      assertEquals(377.7F, float0, 0.01F);
      assertEquals(958.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(377.7F, wall0.getXStart(), 0.01F);
      assertEquals(958.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(377.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-101.649994F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-581.0F), wall0.getYStart(), 0.01F);
      assertEquals(377.7F, wall0.getYEnd(), 0.01F);
      assertEquals(377.7F, wall0.getXEnd(), 0.01F);
      
      Float float1 = new Float(221.27547);
      assertEquals(221.27547F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(958.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-212.66235F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(377.7F, wall0.getXStart(), 0.01F);
      assertEquals(221.27547F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-101.649994F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(168271.83F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-581.0F), wall0.getYStart(), 0.01F);
      assertEquals(377.7F, wall0.getYEnd(), 0.01F);
      assertEquals(377.7F, wall0.getXEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall((-9.308598F), (-9.308598F), (-9.308598F), (-9.308598F), (-9.308598F), (-9.308598F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-9.308598F), wall0.getYEnd(), 0.01F);
      assertEquals((-9.308598F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-9.308598F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-9.308598F), wall0.getXStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getHeight(), 0.01F);
      assertEquals((-9.308598F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-9.308598F), wall0.getYStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-9.308598F), wall0.getYEnd(), 0.01F);
      assertEquals((-9.308598F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-9.308598F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-9.308598F), wall0.getXStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getHeight(), 0.01F);
      assertEquals((-9.308598F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-9.308598F), wall0.getYStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getThickness(), 0.01F);
      
      Integer integer0 = Integer.valueOf(475);
      assertEquals(475, (int)integer0);
      assertNotNull(integer0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-9.308598F), wall0.getYEnd(), 0.01F);
      assertEquals((-9.308598F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-9.308598F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-9.308598F), wall0.getXStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getHeight(), 0.01F);
      assertEquals((-9.308598F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-9.308598F), wall0.getYStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getThickness(), 0.01F);
      assertNull(textureImage0);
      
      Float float0 = wall0.getArcExtent();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-9.308598F), wall0.getYEnd(), 0.01F);
      assertEquals((-9.308598F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-9.308598F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-9.308598F), wall0.getXStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getHeight(), 0.01F);
      assertEquals((-9.308598F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-9.308598F), wall0.getYStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-9.308598F), wall0.getYEnd(), 0.01F);
      assertEquals((-9.308598F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-9.308598F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-9.308598F), wall0.getXStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getHeight(), 0.01F);
      assertEquals((-9.308598F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-9.308598F), wall0.getYStart(), 0.01F);
      assertEquals((-9.308598F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      
      List<Wall> list2 = Wall.clone(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setXStart(695.13544F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(1082.9149F, float0, 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(16);
      assertEquals(16, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(textureImage0);
      
      float float1 = wall0.getThickness();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(771.5353F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(347.56772F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(771.5353F, wall0.getLength(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      
      List<Wall> list2 = Wall.clone(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setXStart(695.13544F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall0.getLength();
      assertEquals(1082.9149F, float0, 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(16);
      assertEquals(16, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.valueOf(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = Integer.getInteger("", 0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      
      try { 
        Integer.parseUnsignedInt("", 16);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(1467.0171F, 1467.0171F, 5418.0F, 1467.0171F, 1467.0171F);
      assertEquals(3950.983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1467.0171F, wall0.getXStart(), 0.01F);
      assertEquals(1467.0171F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1467.0171F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1467.0171F, wall0.getYEnd(), 0.01F);
      assertEquals(3950.983F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5418.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1467.0171F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3442.5085F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(3950.983F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1467.0171F, wall0.getXStart(), 0.01F);
      assertEquals(1467.0171F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1467.0171F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1467.0171F, wall0.getYEnd(), 0.01F);
      assertEquals(3950.983F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5418.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1467.0171F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3442.5085F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 854.1003F);
      assertEquals(854.1003F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(854.1003F, (-2017.26F));
      assertEquals((-2017.26F), float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals(854.1003F, float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      wall0.setLeftSideShininess((-3734.6F));
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      float float3 = wall0.getYArcCircleCenter();
      assertEquals(1.0F, float3, 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(854.1003F, (float)float4, 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(1.0F, (-625.9F), (-3734.6F), 0.0F);
      assertFalse(boolean0);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      float float5 = wall0.getYEnd();
      assertEquals(1.0F, float5, 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(level0);
      
      float float6 = wall0.getLeftSideShininess();
      assertEquals((-3734.6F), float6, 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      
      Float float7 = new Float((double) 854.1003F);
      assertEquals(854.1003F, (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float4, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      
      Wall wall1 = new Wall(854.1003F, (-2017.26F), (-3734.6F), 1863.3364F, (-3734.6F));
      assertEquals((-1440.2499F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2017.26F), wall1.getYStart(), 0.01F);
      assertEquals(6009.5923F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3734.6F), wall1.getThickness(), 0.01F);
      assertEquals(854.1003F, wall1.getXStart(), 0.01F);
      assertEquals((-3734.6F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1863.3364F, wall1.getYEnd(), 0.01F);
      assertEquals(6009.5923F, wall1.getLength(), 0.01F);
      assertEquals((-76.96179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float8 = new Float(854.1003F);
      assertEquals(854.1003F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float0, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      
      wall1.setArcExtent(float8);
      assertEquals((-2017.26F), wall1.getYStart(), 0.01F);
      assertEquals(6009.5923F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3734.6F), wall1.getThickness(), 0.01F);
      assertEquals(854.1003F, wall1.getXStart(), 0.01F);
      assertEquals((-3734.6F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(7823.7524F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1863.3364F, wall1.getYEnd(), 0.01F);
      assertEquals(1.2519202E7F, wall1.getLength(), 0.01F);
      assertEquals(10877.47F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(854.1003F, wall1.getArcExtent(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertEquals((float)float8, (float)float0, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      
      float float9 = wall0.getXArcCircleCenter();
      assertEquals(1.0F, float9, 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotEquals(float9, float1, 0.01F);
      assertEquals(float9, float3, 0.01F);
      assertEquals(float9, float5, 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.clone();
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(854.1003F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3734.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(854.1003F, wall2.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals((-3734.6F), wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F), (-334.7438F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      wall0.move((-334.7438F), 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(textureImage0);
      
      Float float1 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(float3, float0, 0.01F);
      
      wall0.setHeightAtEnd((Float) 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-669.4876F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-669.4876F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getHeight(), 0.01F);
      assertEquals((-669.4876F), wall0.getXStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Float float0 = new Float(0.01F);
      assertEquals(0.01F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(574.03625F, 932.437F, 655.3F, (-1.0F), 932.437F, 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight(float0);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float1 = new Float((double) 574.03625F);
      assertEquals(574.03625F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((double) 1700.4711F);
      assertEquals(1700.4711F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1700.4711F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float4 = new Float(1.0F);
      assertEquals(1.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      float float5 = float0.floatValue();
      assertEquals(0.01F, float5, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(614.6681F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall2.getThickness(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(614.6681F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(465.7185F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(932.437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(936.9677F, wall2.getLength(), 0.01F);
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(574.03625F, wall2.getXStart(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Float float6 = new Float(0.0F);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      wall2.setArcExtent(float6);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.6356874E17F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(7.6220917E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(932.437F, wall2.getThickness(), 0.01F);
      assertEquals(0.01F, wall2.getHeight(), 0.01F);
      assertEquals(936.9677F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(932.437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(6.6356874E17F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(7.6220917E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(936.9677F, wall2.getLength(), 0.01F);
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals(574.03625F, wall2.getXStart(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(932.437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(932.437F, wall0.getYStart(), 0.01F);
      assertEquals(936.9677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(655.3F, wall0.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.6356874E17F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(936.9677F, wall0.getLength(), 0.01F);
      assertEquals(7.6220917E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(655.3F, wall1.getXEnd(), 0.01F);
      assertEquals(574.03625F, wall1.getXStart(), 0.01F);
      assertEquals(936.9677F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(932.437F, wall1.getYStart(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(614.6681F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(932.437F, wall1.getThickness(), 0.01F);
      assertEquals(465.7185F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(936.9677F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1041.0F), (-282.3172F), (-282.3172F), (-1041.0F));
      assertFalse(boolean0);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 2.0F, 1.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Level$Property", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.Level$Property", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Level$Property", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setYStart(1.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLeftSideShininess(630.00073F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level0);
      
      wall0.setHeightAtEnd((Float) null);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall((-1.0F), 0.1F, 0.1F, (-49.39F), 630.00073F, 0.0F);
      assertEquals(49.502224F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-49.39F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(630.00073F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(49.502224F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-24.645F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setYStart(0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(49.412247F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(49.412247F, wall1.getLength(), 0.01F);
      assertEquals((-49.39F), wall1.getYEnd(), 0.01F);
      assertEquals((-24.69F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(630.00073F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLevel((Level) null);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall0.clone();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-167.3719F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(630.00073F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(334.7438F, wall2.getLength(), 0.01F);
      assertEquals((-334.7438F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      wall0.setXEnd(1.1F);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, linkedList0.size());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(linkedList0.contains(wall2));
      assertTrue(linkedList0.contains(wall0));
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = float1.equals(integer0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall0.setHeight(float1);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      wall2.setPattern((TextureImage) null);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-167.3719F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(630.00073F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(334.7438F, wall2.getLength(), 0.01F);
      assertEquals((-334.7438F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      boolean boolean2 = wall2.isTrapezoidal();
      assertFalse(boolean2);
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-167.3719F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(630.00073F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(334.7438F, wall2.getLength(), 0.01F);
      assertEquals((-334.7438F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Float float2 = wall2.getArcExtent();
      assertEquals((-166.8219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(474.17767F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(474.17767F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(630.00073F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-167.3719F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(334.7438F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(630.00073F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(334.7438F, wall2.getLength(), 0.01F);
      assertEquals((-334.7438F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(float2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Integer integer1 = new Integer((-511));
      assertEquals((-511), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean3 = wall1.isAtLevel((Level) null);
      assertTrue(boolean3);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(49.412247F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals(49.412247F, wall1.getLength(), 0.01F);
      assertEquals((-49.39F), wall1.getYEnd(), 0.01F);
      assertEquals((-24.69F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(630.00073F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall2));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall2));
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-153.32474F), (-334.7438F), (-153.32474F));
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(181.41907F, wall0.getLength(), 0.01F);
      assertEquals((-153.32474F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-153.32474F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-244.03427F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(181.41907F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.48139909E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(181.41907F, wall0.getLength(), 0.01F);
      assertEquals((-153.32474F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-153.32474F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(181.41907F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      
      Float float1 = new Float((-153.32474F));
      assertEquals((-153.32474F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-153.32474F), (-153.32474F), 3505.2354F);
      assertTrue(boolean0);
      assertEquals(1.48139909E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(181.41907F, wall0.getLength(), 0.01F);
      assertEquals((-153.32474F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-153.32474F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(181.41907F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      
      wall0.setXEnd(3505.2354F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-153.32474F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.1355809E19F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3839.9792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3839.9792F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(3505.2354F, wall0.getXEnd(), 0.01F);
      
      int int0 = Float.floatToIntBits(2740.0F);
      assertEquals(1160462336, int0);
      
      wall0.setArcExtent((Float) 2740.0F);
      assertEquals((-334.7438F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-153.32474F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.0041706E7F, wall0.getLength(), 0.01F);
      assertEquals(3839.9792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1585.2457F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6723.2603F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(2740.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3505.2354F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall((-859.93F), 115.22698F, 1.0F, 115.22698F, 115.22698F);
      assertEquals(860.93F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-859.93F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(115.22698F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(115.22698F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-429.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(860.93F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(860.93F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-859.93F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(115.22698F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(115.22698F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-429.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(860.93F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(115.22698F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(860.93F, wall1.getLength(), 0.01F);
      assertEquals((-429.465F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(115.22698F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-859.93F), wall1.getXStart(), 0.01F);
      assertEquals(115.22698F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(860.93F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(860.93F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-859.93F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(115.22698F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(115.22698F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-429.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(860.93F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(115.22698F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(860.93F, wall1.getLength(), 0.01F);
      assertEquals((-429.465F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(115.22698F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-859.93F), wall1.getXStart(), 0.01F);
      assertEquals(115.22698F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(860.93F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(860.93F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-859.93F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(115.22698F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(115.22698F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-429.465F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(860.93F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(115.22698F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = Float.isFinite(0.01F);
      assertTrue(boolean0);
      
      Wall wall0 = new Wall(206.914F, 206.914F, 0.01F, 0.01F, 0.01F, 206.914F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(292.60645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.462F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.462F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(292.60645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(206.914F, (float)float0, 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(292.60645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.462F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.462F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(292.60645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(292.60645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.462F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.462F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(292.60645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      
      Float float1 = new Float(1700.4711F);
      assertEquals(1700.4711F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(0.05263158F);
      assertEquals(0.05263158F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      boolean boolean1 = Float.isFinite(0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float float3 = float0.floatValue();
      assertEquals(206.914F, float3, 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(292.60645F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals(103.462F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103.462F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(292.60645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-369.0107F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(575.9347F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(141530.61F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(292.60645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals(575.9347F, float4, 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-369.0107F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(575.9347F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(141530.61F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(292.60645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle(206.914F, (-180.798F), 206.914F, (-2651.0F));
      assertFalse(boolean2);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(206.914F, wall0.getYStart(), 0.01F);
      assertEquals((-369.0107F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(575.9347F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(141530.61F, wall0.getLength(), 0.01F);
      assertEquals(206.914F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(292.60645F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(206.914F, 1.0F, 1.0F, 206.914F, 115.22698F, 1.0F);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = Integer.valueOf(475);
      assertEquals(475, (int)integer0);
      assertNotNull(integer0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(textureImage0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(291.20636F, wall0.getLength(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(103.957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float1 = new Float(3.141592653589793);
      assertEquals(3.1415927F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertEquals(103.95701F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(3.1415927F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(457.4259F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(103.95701F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(103.95701F, float2, 0.01F);
      assertEquals(103.95701F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(115.22698F, wall0.getThickness(), 0.01F);
      assertEquals(3.1415927F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(291.20636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(206.914F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(457.4259F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(103.95701F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(206.914F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall(115.22698F, 1.0F, 206.914F, 1.0F, (-859.93F));
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 1.0F, 1.0F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(91.68702F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float1 = new Float((-2132.1708156522));
      assertEquals((-2132.171F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertEquals((-2132.171F), float2, 0.01F);
      
      wall0.setArcExtent((Float) (-2132.171F));
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(110503.22F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.17377F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float3 = wall0.getYArcCircleCenter();
      assertEquals((-23.17377F), float3, 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(110503.22F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.17377F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      
      Wall wall2 = new Wall(90.63F, 2227.53F, (-859.93F), 689.2689F, (-23.17377F), 2.0F);
      assertEquals(2227.53F, wall2.getYStart(), 0.01F);
      assertEquals(1808.262F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-23.17377F), wall2.getThickness(), 0.01F);
      assertEquals(1458.3994F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-859.93F), wall2.getXEnd(), 0.01F);
      assertEquals(1808.262F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(90.63F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(689.2689F, wall2.getYEnd(), 0.01F);
      assertEquals((-384.65F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Wall wall3 = wall2.clone();
      assertEquals(2227.53F, wall2.getYStart(), 0.01F);
      assertEquals(1808.262F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-23.17377F), wall2.getThickness(), 0.01F);
      assertEquals(1458.3994F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-859.93F), wall2.getXEnd(), 0.01F);
      assertEquals(1808.262F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(90.63F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(689.2689F, wall2.getYEnd(), 0.01F);
      assertEquals((-384.65F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(1808.262F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(689.2689F, wall3.getYEnd(), 0.01F);
      assertEquals((-384.65F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2.0F, wall3.getHeight(), 0.01F);
      assertEquals(1808.262F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-859.93F), wall3.getXEnd(), 0.01F);
      assertEquals(1458.3994F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2227.53F, wall3.getYStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-23.17377F), wall3.getThickness(), 0.01F);
      assertEquals(90.63F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotNull(wall3);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      boolean boolean0 = wall3.intersectsRectangle(1142.476F, 2405.535F, 0.01F, (-1613.3F));
      assertTrue(boolean0);
      assertEquals(2227.53F, wall2.getYStart(), 0.01F);
      assertEquals(1808.262F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-23.17377F), wall2.getThickness(), 0.01F);
      assertEquals(1458.3994F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-859.93F), wall2.getXEnd(), 0.01F);
      assertEquals(1808.262F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(90.63F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(689.2689F, wall2.getYEnd(), 0.01F);
      assertEquals((-384.65F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(1808.262F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(689.2689F, wall3.getYEnd(), 0.01F);
      assertEquals((-384.65F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2.0F, wall3.getHeight(), 0.01F);
      assertEquals(1808.262F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-859.93F), wall3.getXEnd(), 0.01F);
      assertEquals(1458.3994F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2227.53F, wall3.getYStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-23.17377F), wall3.getThickness(), 0.01F);
      assertEquals(90.63F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      Wall wall4 = wall1.clone();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall4.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall4.getLength(), 0.01F);
      assertEquals(1700.4711F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(850.73553F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getArcExtent());
      assertEquals(1700.4711F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1699.4711F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertNotNull(wall4);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      
      float float4 = wall4.getYEnd();
      assertEquals(1.0F, float4, 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall4.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall4.getLength(), 0.01F);
      assertEquals(1700.4711F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(850.73553F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getArcExtent());
      assertEquals(1700.4711F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1699.4711F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      Level level0 = wall3.getLevel();
      assertEquals(2227.53F, wall2.getYStart(), 0.01F);
      assertEquals(1808.262F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-23.17377F), wall2.getThickness(), 0.01F);
      assertEquals(1458.3994F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-859.93F), wall2.getXEnd(), 0.01F);
      assertEquals(1808.262F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(90.63F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(689.2689F, wall2.getYEnd(), 0.01F);
      assertEquals((-384.65F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(1808.262F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(689.2689F, wall3.getYEnd(), 0.01F);
      assertEquals((-384.65F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2.0F, wall3.getHeight(), 0.01F);
      assertEquals(1808.262F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-859.93F), wall3.getXEnd(), 0.01F);
      assertEquals(1458.3994F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2227.53F, wall3.getYStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-23.17377F), wall3.getThickness(), 0.01F);
      assertEquals(90.63F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall4);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNull(level0);
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall4));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      Float float5 = wall2.getArcExtent();
      assertEquals(2227.53F, wall2.getYStart(), 0.01F);
      assertEquals(1808.262F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-23.17377F), wall2.getThickness(), 0.01F);
      assertEquals(1458.3994F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-859.93F), wall2.getXEnd(), 0.01F);
      assertEquals(1808.262F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertEquals(90.63F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(689.2689F, wall2.getYEnd(), 0.01F);
      assertEquals((-384.65F), wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNull(float5);
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      
      HomeTexture homeTexture0 = wall4.getLeftSideTexture();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall4.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall4.getLength(), 0.01F);
      assertEquals(1700.4711F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(850.73553F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getArcExtent());
      assertEquals(1700.4711F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1699.4711F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      
      float float6 = wall0.getLength();
      assertEquals(110503.22F, float6, 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(110503.22F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.93F), wall0.getThickness(), 0.01F);
      assertEquals((-2132.171F), wall0.getArcExtent(), 0.01F);
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.17377F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(115.22698F, wall0.getXStart(), 0.01F);
      assertEquals(91.68702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(161.0705F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      
      boolean boolean1 = wall4.isTrapezoidal();
      assertFalse(boolean1);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1699.4711F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(850.73553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1699.4711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall4.getThickness(), 0.01F);
      assertEquals(1699.4711F, wall4.getLength(), 0.01F);
      assertEquals(1700.4711F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getHeightAtEnd());
      assertEquals(850.73553F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getRightSideColor());
      assertNull(wall4.getArcExtent());
      assertEquals(1700.4711F, wall4.getYStart(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1699.4711F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(1.0F, wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall4);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(boolean1 == boolean0);
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      Wall wall1 = new Wall(4.8190265F, 0.01F, (-1053.2F), (-1053.2F), (-151.61465F));
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(4.8190265F, wall1.getXStart(), 0.01F);
      assertEquals(1492.8682F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-524.1905F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1492.8682F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float(4.8190265F);
      assertEquals(4.8190265F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(4.8190265F, wall1.getXStart(), 0.01F);
      assertEquals(1492.8682F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-524.1905F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1492.8682F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setLeftSideShininess(630.00073F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.8190265F, wall1.getXStart(), 0.01F);
      assertEquals(1492.8682F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-524.1905F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1492.8682F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      Level level0 = wall0.getLevel();
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.8190265F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = wall1.clone();
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.8190265F, wall1.getXStart(), 0.01F);
      assertEquals(1492.8682F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-524.1905F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1492.8682F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-524.1905F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4.8190265F, wall2.getXStart(), 0.01F);
      assertEquals(1492.8682F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-526.595F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1053.2F), wall2.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1053.2F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-151.61465F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1492.8682F, wall2.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall2.setYStart(0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-526.595F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.8190265F, wall1.getXStart(), 0.01F);
      assertEquals(1492.8682F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-524.1905F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1492.8682F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-524.1905F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4.8190265F, wall2.getXStart(), 0.01F);
      assertEquals(1492.8682F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-526.595F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1053.2F), wall2.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1053.2F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-151.61465F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1492.8682F, wall2.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall1.setArcExtent(float0);
      assertEquals((-1110.1736F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(5381.4937F, wall1.getLength(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.8190265F, wall1.getXStart(), 0.01F);
      assertEquals(62.063705F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1492.8682F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      wall1.setLevel((Level) null);
      assertEquals((-1110.1736F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(5381.4937F, wall1.getLength(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.8190265F, wall1.getXStart(), 0.01F);
      assertEquals(62.063705F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1492.8682F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      Wall wall3 = wall0.clone();
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.8190265F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-334.7438F), wall3.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall3.getHeight(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-167.3719F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall3.getYStart(), 0.01F);
      assertEquals(334.7438F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(4.8190265F, wall3.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      wall0.setXEnd((-334.7438F));
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.8190265F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.8190265F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, linkedList0.size());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      
      boolean boolean1 = wall3.isTrapezoidal();
      assertFalse(boolean1);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.8190265F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-334.7438F), wall3.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall3.getHeight(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-167.3719F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall3.getYStart(), 0.01F);
      assertEquals(334.7438F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(4.8190265F, wall3.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertFalse(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      Float float1 = wall3.getArcExtent();
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.8190265F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(334.7438F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-334.7438F), wall3.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall3.getHeight(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-167.3719F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-334.7438F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall3.getYStart(), 0.01F);
      assertEquals(334.7438F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(4.8190265F, wall3.getHeightAtEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      
      Integer integer0 = new Integer((-511));
      assertEquals((-511), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = wall2.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertEquals((-1110.1736F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1053.2F), wall1.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1053.2F), wall1.getYEnd(), 0.01F);
      assertEquals(5381.4937F, wall1.getLength(), 0.01F);
      assertEquals(630.00073F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.8190265F, wall1.getXStart(), 0.01F);
      assertEquals(62.063705F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.01F, wall1.getYStart(), 0.01F);
      assertEquals((-151.61465F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1492.8682F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall2.getYStart(), 0.01F);
      assertEquals((-524.1905F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(4.8190265F, wall2.getXStart(), 0.01F);
      assertEquals(1492.8682F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-526.595F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1053.2F), wall2.getYEnd(), 0.01F);
      assertEquals(630.00073F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1053.2F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-151.61465F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1492.8682F, wall2.getLength(), 0.01F);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      
      boolean boolean3 = wall0.isAtLevel((Level) null);
      assertTrue(boolean3);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.8190265F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals(4.8190265F, wall0.getHeight(), 0.01F);
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(26.0F, (-1041.0F), (-1041.0F), 26.0F, 26.0F);
      assertEquals(26.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(26.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-507.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1508.9658F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-507.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1508.9658F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall0.getArcExtent();
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setHeightAtEnd((Float) null);
      assertEquals(26.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(26.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-507.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1508.9658F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertEquals((-507.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(26.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1508.9658F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1041.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1041.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = new Float((-1041.0F));
      assertEquals((-1041.0F), (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(115.4393F, 919.3792F, (-2126.353F), 0.8384916F, (-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(460.10886F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2422.674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2422.674F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.8384916F, wall0.getYEnd(), 0.01F);
      assertEquals(919.3792F, wall0.getYStart(), 0.01F);
      assertEquals((-2126.353F), wall0.getXEnd(), 0.01F);
      assertEquals((-1005.45685F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(115.4393F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(919.3792F, (-2126.353F), 1.0F, (-1.0F), (-1.0F));
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2315.2852F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2126.353F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(460.1896F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(919.3792F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2315.2852F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1063.6765F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(460.10886F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2422.674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2422.674F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.8384916F, wall0.getYEnd(), 0.01F);
      assertEquals(919.3792F, wall0.getYStart(), 0.01F);
      assertEquals((-2126.353F), wall0.getXEnd(), 0.01F);
      assertEquals((-1005.45685F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(115.4393F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = Float.sum((-1.0F), 0.8384916F);
      assertEquals((-0.16150838F), float1, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(460.10886F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2422.674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2422.674F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.8384916F, wall0.getYEnd(), 0.01F);
      assertEquals(919.3792F, wall0.getYStart(), 0.01F);
      assertEquals((-2126.353F), wall0.getXEnd(), 0.01F);
      assertEquals((-1005.45685F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(115.4393F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2315.2852F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2126.353F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(460.1896F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(919.3792F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2315.2852F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1063.6765F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(115.4393F, 0.0F, 0.8384916F, (-0.16150838F), 133.0F, 919.3792F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(919.3792F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(114.60092F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.16150838F), wall2.getYEnd(), 0.01F);
      assertEquals((-0.08075419F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.8384916F, wall2.getXEnd(), 0.01F);
      assertEquals(133.0F, wall2.getThickness(), 0.01F);
      assertEquals(114.60092F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(115.4393F, wall2.getXStart(), 0.01F);
      assertEquals(58.138897F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      int int0 = Float.compare(3794.4756F, 0.0F);
      assertEquals(1, int0);
      
      wall2.setHeight((Float) 0.0F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(114.60092F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.16150838F), wall2.getYEnd(), 0.01F);
      assertEquals((-0.08075419F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.8384916F, wall2.getXEnd(), 0.01F);
      assertEquals(133.0F, wall2.getThickness(), 0.01F);
      assertEquals(114.60092F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(115.4393F, wall2.getXStart(), 0.01F);
      assertEquals(58.138897F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(460.10886F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2422.674F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2422.674F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.8384916F, wall0.getYEnd(), 0.01F);
      assertEquals(919.3792F, wall0.getYStart(), 0.01F);
      assertEquals((-2126.353F), wall0.getXEnd(), 0.01F);
      assertEquals((-1005.45685F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(115.4393F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2315.2852F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2126.353F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(460.1896F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(919.3792F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2315.2852F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1063.6765F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      boolean boolean0 = wall1.intersectsRectangle((-735.73F), (-2163.0F), (-735.73F), 3794.4756F);
      assertFalse(boolean0);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2315.2852F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2126.353F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(460.1896F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(919.3792F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2315.2852F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1063.6765F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, 1438.6738F, 2885.3914F, (-1.0F));
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(718.8369F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3223.7205F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1443.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1438.6738F, wall0.getXEnd(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3223.7205F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(718.8369F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3223.7205F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1443.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1438.6738F, wall0.getXEnd(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3223.7205F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setLeftSideShininess((-3155.021F));
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(718.8369F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3223.7205F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1443.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1438.6738F, wall0.getXEnd(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3223.7205F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Level level0 = wall0.getLevel();
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(718.8369F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3223.7205F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1443.1957F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1438.6738F, wall0.getXEnd(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3223.7205F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setYStart(2437.0F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(718.8369F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1507.8844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1438.6738F, wall0.getXEnd(), 0.01F);
      assertEquals(2437.0F, wall0.getYStart(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2661.1958F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1507.8844F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setLevel((Level) null);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(718.8369F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1507.8844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1438.6738F, wall0.getXEnd(), 0.01F);
      assertEquals(2437.0F, wall0.getYStart(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2661.1958F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1507.8844F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setXEnd(1092.1353F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(545.5676F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1181.5242F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2437.0F, wall0.getYStart(), 0.01F);
      assertEquals(1181.5242F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1092.1353F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2661.1958F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(545.5676F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1181.5242F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2437.0F, wall0.getYStart(), 0.01F);
      assertEquals(1181.5242F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1092.1353F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2661.1958F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(545.5676F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1181.5242F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2437.0F, wall0.getYStart(), 0.01F);
      assertEquals(1181.5242F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2885.3914F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1092.1353F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2661.1958F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setYEnd((-1.0F));
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(2671.851F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(545.5676F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2671.851F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1218.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2437.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1092.1353F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3155.021F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals((Object) null);
      assertFalse(boolean0);
      
      wall1.setRightSideColor(integer0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = new Float((-16.0F));
      assertEquals((-16.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setWallAtStart(wall0);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setLeftSideShininess(296.298F);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-16.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(296.298F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-16.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 270.1F, 270.1F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(270.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(270.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(135.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(270.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(270.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall1.getYStart();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(270.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(270.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(135.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(270.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(270.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(270.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(270.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(135.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(270.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(270.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float1, float0, 0.01F);
      
      Integer integer0 = new Integer(342);
      assertEquals(342, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger(" doesn't contain texture ", 1425);
      assertEquals(1425, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      wall1.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(270.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(270.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(135.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(270.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(342, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(270.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)integer1));
      
      float float2 = wall0.getYStart();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(270.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(270.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(135.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(270.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(270.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall((-1719.1603F), 0.0F, 0.0F, (-1719.1603F), (-1132.7628F), (-1.0F));
      assertEquals(2431.2598F, wall0.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals((-859.58014F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.58014F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, (-1.0F), 2403.1057F, 753.22F);
      assertFalse(boolean0);
      assertEquals(2431.2598F, wall0.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals((-859.58014F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.58014F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(2431.2598F, wall0.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals((-859.58014F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.58014F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-859.58014F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2431.2598F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1719.1603F), wall1.getYEnd(), 0.01F);
      assertEquals((-859.58014F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2431.2598F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1719.1603F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean1 = wall0.containsWallStartAt((-1132.7628F), (-1132.7628F), (-2160.2F));
      assertFalse(boolean1);
      assertEquals(2431.2598F, wall0.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals((-859.58014F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.58014F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer(2735);
      assertEquals(2735, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.max(2735, 0);
      assertEquals(2735, int0);
      
      boolean boolean2 = integer0.equals((Object) null);
      assertFalse(boolean2);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      wall1.setLeftSideColor(integer0);
      assertEquals(2431.2598F, wall0.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals((-859.58014F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.58014F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-859.58014F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2431.2598F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2735, (int)wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1719.1603F), wall1.getYEnd(), 0.01F);
      assertEquals((-859.58014F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2431.2598F, wall1.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = wall1.getLeftSideColor();
      assertEquals(2735, (int)integer1);
      assertEquals(2431.2598F, wall0.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals((-859.58014F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-859.58014F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-859.58014F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2431.2598F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2735, (int)wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1719.1603F), wall1.getYEnd(), 0.01F);
      assertEquals((-859.58014F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2431.2598F, wall1.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(integer1.equals((Object)int0));
      
      int int1 = Float.compare(0.0F, (-1.0F));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      wall0.setArcExtent((Float) (-1.0F));
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-2433.031F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals(2535.597F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2433.031F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-2433.031F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals(2535.597F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2433.031F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      
      boolean boolean3 = wall0.isTrapezoidal();
      assertFalse(boolean3);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-2433.031F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals(2535.597F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2433.031F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-1719.1603F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-2433.031F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1719.1603F), wall0.getYEnd(), 0.01F);
      assertEquals((-1132.7628F), wall0.getThickness(), 0.01F);
      assertEquals(2535.597F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2431.2598F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2433.031F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1132.7628F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-859.58014F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2431.2598F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2735, (int)wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1719.1603F), wall1.getYEnd(), 0.01F);
      assertEquals((-859.58014F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2431.2598F, wall1.getLength(), 0.01F);
      assertEquals((-1719.1603F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall((-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F), (-1041.0F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNull(float0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      
      float float1 = Float.sum(1.0F, (-1115.775F));
      assertEquals((-1114.775F), float1, 0.01F);
      
      Wall wall1 = new Wall(1700.4711F, 1700.4711F, 1700.4711F, 655.3F, 655.3F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float2 = wall1.getHeight();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNull(float2);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setHeight((Float) null);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Integer integer0 = new Integer(2039);
      assertEquals(2039, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1041.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1041.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1041.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1041.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1041.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1041.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1041.0F), wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall2 = new Wall(2265.0F, (-1115.775F), 655.3F, 1.0F, 0.0F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1959.1632F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1460.15F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-557.3875F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1959.1632F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-1115.775F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(655.3F, wall2.getXEnd(), 0.01F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      Integer integer1 = new Integer(2039);
      assertEquals(2039, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(1700.4711F, wall1.getXEnd(), 0.01F);
      assertEquals(655.3F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1700.4711F, wall1.getXStart(), 0.01F);
      assertEquals(1045.1711F, wall1.getLength(), 0.01F);
      assertEquals(1177.8855F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1045.1711F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.4711F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(655.3F, wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall(2574.3F, 2574.3F, 2574.3F, 2574.3F, 2574.3F, 1860.0869F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2574.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2574.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2574.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2574.3F, wall0.getXStart(), 0.01F);
      assertEquals(2574.3F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1860.0869F, wall0.getHeight(), 0.01F);
      assertEquals(2574.3F, wall0.getYStart(), 0.01F);
      assertEquals(2574.3F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("", 1860.0869F, 2574.3F, (-3295.7F));
      assertEquals(2574.3F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-3295.7F), level0.getHeight(), 0.01F);
      assertEquals(1860.0869F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2574.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2574.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2574.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2574.3F, wall0.getXStart(), 0.01F);
      assertEquals(2574.3F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1860.0869F, wall0.getHeight(), 0.01F);
      assertEquals(2574.3F, wall0.getYStart(), 0.01F);
      assertEquals(2574.3F, wall0.getThickness(), 0.01F);
      assertEquals(2574.3F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-3295.7F), level0.getHeight(), 0.01F);
      assertEquals(1860.0869F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2574.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2574.3F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2574.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2574.3F, wall0.getXStart(), 0.01F);
      assertEquals(2574.3F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1860.0869F, wall0.getHeight(), 0.01F);
      assertEquals(2574.3F, wall0.getYStart(), 0.01F);
      assertEquals(2574.3F, wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setYStart(972.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2574.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1602.3F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1773.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1602.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2574.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2574.3F, wall0.getXStart(), 0.01F);
      assertEquals(2574.3F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(972.0F, wall0.getYStart(), 0.01F);
      assertEquals(1860.0869F, wall0.getHeight(), 0.01F);
      assertEquals(2574.3F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2574.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1602.3F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1773.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1602.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2574.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2574.3F, wall0.getXStart(), 0.01F);
      assertEquals(2574.3F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(972.0F, wall0.getYStart(), 0.01F);
      assertEquals(1860.0869F, wall0.getHeight(), 0.01F);
      assertEquals(2574.3F, wall0.getThickness(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2574.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1602.3F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1773.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1602.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2574.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2574.3F, wall0.getXStart(), 0.01F);
      assertEquals(2574.3F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(972.0F, wall0.getYStart(), 0.01F);
      assertEquals(1860.0869F, wall0.getHeight(), 0.01F);
      assertEquals(2574.3F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1860.0869F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2574.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1602.3F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1773.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1602.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2574.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2574.3F, wall0.getXStart(), 0.01F);
      assertEquals(2574.3F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(972.0F, wall0.getYStart(), 0.01F);
      assertEquals(1860.0869F, wall0.getHeight(), 0.01F);
      assertEquals(2574.3F, wall0.getThickness(), 0.01F);
      assertNotNull(float0);
      
      Level level1 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2574.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1602.3F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1773.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1602.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2574.3F, wall0.getYEnd(), 0.01F);
      assertEquals(2574.3F, wall0.getXStart(), 0.01F);
      assertEquals(2574.3F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(972.0F, wall0.getYStart(), 0.01F);
      assertEquals(1860.0869F, wall0.getHeight(), 0.01F);
      assertEquals(2574.3F, wall0.getThickness(), 0.01F);
      assertEquals(2574.3F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-3295.7F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1860.0869F, level1.getElevation(), 0.01F);
      assertSame(level1, level0);
      assertNotNull(level1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      
      List<Wall> list2 = Wall.clone(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall((-334.7438F), (-334.7438F), (-334.7438F), 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-334.7438F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(334.7438F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(334.7438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      
      List<Wall> list1 = Wall.clone(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      
      List<Wall> list2 = Wall.clone(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setXStart(695.13544F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(1082.9149F, float0, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(16);
      assertEquals(16, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.valueOf(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = Integer.getInteger("", 0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      
      wall0.setLeftSideColor(integer2);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      assertFalse(integer2.equals((Object)integer1));
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(180.19582F, float1, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals(1.0F, float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      wall0.setHeight((Float) 1.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertEquals((-167.3719F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1082.9149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1082.9149F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd(1082.9149F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(374.08557F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1752.2578F, wall0.getLength(), 0.01F);
      assertEquals(695.13544F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-334.7438F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1752.2578F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1082.9149F, wall0.getYEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals((-334.7438F), wall0.getYStart(), 0.01F);
      assertEquals(180.19582F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 206.914F, 1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(1.0F, 1.0F, 2696.0F);
      assertTrue(boolean0);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(205.914F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(206.914F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(103.957F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(205.914F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }
}
