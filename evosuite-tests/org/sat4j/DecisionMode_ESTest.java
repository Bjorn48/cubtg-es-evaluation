/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:47:53 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.DecisionMode;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.OptimizationMode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.encoding.Binomial;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DecisionMode_ESTest extends DecisionMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^U,(NV2G+/bi/(";
      ISolver iSolver0 = mUSLauncher0.configureSolver(stringArray0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0, (String) null);
      // Undeclared exception!
      try { 
        decisionMode0.solve(dimacsOutputSolver0, dimacsReader0, (ILogAble) null, mockPrintWriter0, (-1673L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c ";
      ISolver iSolver0 = mUSLauncher0.configureSolver(stringArray0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(minOneDecorator0, decisionMode0);
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0, "Ne<<(JYy)Bqd+R(.yU");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      decisionMode0.solve(abstractMinimalModel0, dimacsReader0, mUSLauncher0, mockPrintWriter0, (-4420L));
      decisionMode0.displayResult(iSolver0, iSolver0, mUSLauncher0, mockPrintWriter0, dimacsReader0, 726, true);
      assertEquals(ExitCode.SATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      // Undeclared exception!
      try { 
        optimizationMode0.onUnsatTermination();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(clausalCardinalitiesDecorator0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0, true);
      OptimizationMode optimizationMode0 = new OptimizationMode();
      // Undeclared exception!
      try { 
        optimizationMode0.displayResult(singleSolutionDetector0, singleSolutionDetector0, iLogAble0, mockPrintWriter0, (Reader) null, 0L, false);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.onUnsatTermination();
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, decisionMode0);
      FullClauseSelectorSolver<ModelIteratorToSATAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, true);
      DimacsReader dimacsReader0 = new DimacsReader(fullClauseSelectorSolver0, "jnSl3{*qSqq!hry[Uw");
      decisionMode0.solve(modelIteratorToSATAdapter0, dimacsReader0, (ILogAble) null, mockPrintWriter0, 0L);
      //  // Unstable assertion: assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(clausalCardinalitiesDecorator0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(writer0, true);
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      decisionMode0.solve(singleSolutionDetector0, (Reader) null, basicLauncher0, mockPrintWriter0, 0L);
      assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0, 467L);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      InstanceReader instanceReader0 = new InstanceReader(modelIterator0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      decisionMode0.solve(modelIterator0, instanceReader0, iLogAble0, mockPrintWriter0, 467L);
      decisionMode0.onSolutionFound((int[]) null);
      decisionMode0.displayResult(modelIterator0, modelIterator0, iLogAble0, mockPrintWriter0, (Reader) null, 467L, true);
      assertEquals(1L, modelIterator0.numberOfModelsFoundSoFar());
      assertEquals("c Found solution #1  (1392409280.85)s\nc starts\t\t: 1\nc conflicts\t\t: 0\nc decisions\t\t: 0\nc propagations\t\t: 0\nc inspects\t\t: 0\nc shortcuts\t\t: 0\nc learnt literals\t: 0\nc learnt binary clauses\t: 0\nc learnt ternary clauses\t: 0\nc learnt constraints\t: 0\nc ignored constraints\t: 0\nc root simplifications\t: 0\nc removed literals (reason simplification)\t: 0\nc reason swapping (by a shorter reason)\t: 0\nc Calls to reduceDB\t: 0\nc Number of update (reduction) of LBD\t: 0\nc Imported unit clauses\t: 0\nc speed (assignments/second)\t: NaN\nc non guided choices\t: 0\ns SATISFIABLE\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0, 467L);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      InstanceReader instanceReader0 = new InstanceReader(modelIterator0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      decisionMode0.solve(modelIterator0, instanceReader0, iLogAble0, mockPrintWriter0, 467L);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(modelIterator0, modelIterator0, iLogAble0, mockPrintWriter0, (Reader) null, 467L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      FullClauseSelectorSolver<ModelIteratorToSATAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, true);
      DimacsReader dimacsReader0 = new DimacsReader(fullClauseSelectorSolver0, "");
      StringWriter stringWriter0 = new StringWriter(1);
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(fullClauseSelectorSolver0, fullClauseSelectorSolver0, (ILogAble) null, printWriter0, dimacsReader0, 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      FullClauseSelectorSolver<ModelIteratorToSATAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, true);
      DimacsReader dimacsReader0 = new DimacsReader(fullClauseSelectorSolver0, "");
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      PrintWriter printWriter0 = new PrintWriter(stringWriter1);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(fullClauseSelectorSolver0, fullClauseSelectorSolver0, (ILogAble) null, printWriter0, dimacsReader0, 726, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0, 467L);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(modelIterator0, modelIterator0, iLogAble0, mockPrintWriter0, (Reader) null, 467L, true);
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      decisionMode0.displayResult((ISolver) null, (IProblem) null, basicLauncher0, (PrintWriter) null, dimacsReader0, (-222L), false);
      assertFalse(dimacsReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = ExitCode.UNSATISFIABLE;
      decisionMode0.setExitCode(exitCode0);
      assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.setIncomplete(false);
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ExitCode exitCode0 = decisionMode0.getCurrentExitCode();
      //  // Unstable assertion: assertEquals("UNKNOWN", exitCode0.toString());
  }
}
