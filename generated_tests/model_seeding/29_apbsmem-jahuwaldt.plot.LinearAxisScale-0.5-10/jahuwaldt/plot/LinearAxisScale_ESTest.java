/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 18:20:49 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.AxisLimitData;
import jahuwaldt.plot.LinearAxisScale;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.TickMarkData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearAxisScale_ESTest extends LinearAxisScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      PlotDatum plotDatum0 = new PlotDatum(1.0, 3127.746115672, true);
      assertNotNull(plotDatum0);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertTrue(plotDatum0.connected());
      assertEquals(1.0, plotDatum0.getX(), 0.01);
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(3127.746115672, plotDatum0.getY(), 0.01);
      assertEquals(1.0, plotDatum0.x, 0.01);
      assertEquals(3127.746115672, plotDatum0.y, 0.01);
      
      plotDatum0.setYError(3127.746115672);
      assertTrue(plotDatum0.hasErrorBar());
      assertTrue(plotDatum0.connected());
      assertEquals(1.0, plotDatum0.getX(), 0.01);
      assertEquals(3127.746115672, plotDatum0.getYError(), 0.01);
      assertEquals(3127.746115672, plotDatum0.getY(), 0.01);
      assertEquals(1.0, plotDatum0.x, 0.01);
      assertEquals(3127.746115672, plotDatum0.y, 0.01);
      
      AxisLimitData axisLimitData0 = new AxisLimitData();
      assertNotNull(axisLimitData0);
      
      linearAxisScale0.adjustForErrorBars(plotDatum0, 3127.746115672, 1179.7304658577596, axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertTrue(plotDatum0.hasErrorBar());
      assertTrue(plotDatum0.connected());
      assertEquals(1.0, plotDatum0.getX(), 0.01);
      assertEquals(3127.746115672, plotDatum0.getYError(), 0.01);
      assertEquals(3127.746115672, plotDatum0.getY(), 0.01);
      assertEquals(1.0, plotDatum0.x, 0.01);
      assertEquals(3127.746115672, plotDatum0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      PlotDatum plotDatum0 = new PlotDatum(1165.4901354086549, 1165.4901354086549, false);
      assertNotNull(plotDatum0);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertFalse(plotDatum0.connected());
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(1165.4901354086549, plotDatum0.getY(), 0.01);
      assertEquals(1165.4901354086549, plotDatum0.getX(), 0.01);
      assertEquals(1165.4901354086549, plotDatum0.y, 0.01);
      assertEquals(1165.4901354086549, plotDatum0.x, 0.01);
      
      AxisLimitData axisLimitData0 = new AxisLimitData();
      assertNotNull(axisLimitData0);
      
      linearAxisScale0.adjustForErrorBars(plotDatum0, 1165.4901354086549, 1165.4901354086549, axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertFalse(plotDatum0.connected());
      assertFalse(plotDatum0.hasErrorBar());
      assertEquals(1165.4901354086549, plotDatum0.getY(), 0.01);
      assertEquals(1165.4901354086549, plotDatum0.getX(), 0.01);
      assertEquals(1165.4901354086549, plotDatum0.y, 0.01);
      assertEquals(1165.4901354086549, plotDatum0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(0.0, 320.3, (-497.1291505), (-2112.87369782), 0.0);
      assertNotNull(tickMarkData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 1.0);
      assertNotNull(axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(1.0E-6, 0.0);
      assertNotNull(axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      double double0 = linearAxisScale0.func(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      double double0 = linearAxisScale0.func(229.2101818);
      assertEquals(229.2101818, double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      // Undeclared exception!
      linearAxisScale0.findGoodLimits(2301.8, 1.0E-6);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.calcTickMarks(383.4486108, 383.4486108, 0.0, 0.0, 177.9994419065);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = new AxisLimitData();
      assertNotNull(axisLimitData0);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.adjustForErrorBars((PlotDatum) null, (-903.492198446571), (-691.128), axisLimitData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      double double0 = linearAxisScale0.func((-2142.51));
      assertEquals((-2142.51), double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      // Undeclared exception!
      linearAxisScale0.calcTickMarks(1.0, 1.0, 2200.267866698211, 1.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(1087.60272109, (-154.0), 1.0E-6, (-1.0000000000000004E283), (-1255.1356));
      assertNotNull(tickMarkData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-2989.1), (-1439.4646480381552));
      assertNotNull(axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(1144.973649789, 3251.2791);
      assertNotNull(axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(1165.4901354086549, 2199.862612959745);
      assertNotNull(axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 0.0);
      assertNotNull(axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1.8577745760837916), (-1.8577745760837916));
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      double double0 = linearAxisScale0.lowerBounds();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      double double0 = linearAxisScale0.upperBounds();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 1.0E-6);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks((-1.0), 0.0, (-1.0), (-1.0), 0.0);
      assertNotNull(tickMarkData0);
  }
}
