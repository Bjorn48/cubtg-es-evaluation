/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:32:28 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HTClause_ESTest extends HTClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      vecInt0.growTo(109, 1);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("printallmodels");
      originalHTClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(218, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(157, 157);
      Lits lits0 = new Lits();
      vecInt0.growTo(157, 1111);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      vecInt0.growTo(68, 0);
      int int0 = learntHTClause0.getAssertionLevel(vecInt0, 3653);
      assertEquals((-1), int0);
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      vecInt0.growTo(1111, 109);
      learntHTClause0.tail = 1111;
      int int0 = learntHTClause0.getAssertionLevel(vecInt0, (-1457));
      assertEquals(1110, int0);
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      vecInt0.growTo(109, 1);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.isSatisfied();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(218, originalHTClause0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 99);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.calcReasonOnTheFly(98, vecInt0, (IVecInt) null);
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      vecInt0.push(1111);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.hashCode();
      assertEquals(110, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.head = 65;
      learntHTClause0.hashCode();
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      vecInt0.push(1111);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.equals(learntHTClause0);
      assertEquals(110, learntHTClause0.size());
      assertTrue(boolean0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.head = 65;
      boolean boolean0 = learntHTClause0.equals(learntHTClause0);
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.head = 218;
      int[] intArray0 = learntHTClause0.getLits();
      assertEquals(109, intArray0.length);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(109, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.tail = 0;
      learntHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(110, 110);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.incActivity(187);
      learntHTClause0.rescaleBy(2.0);
      assertEquals(374.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(69, (-189));
      IVecInt iVecInt0 = vecInt0.push(1);
      LearntHTClause learntHTClause0 = new LearntHTClause(iVecInt0, (ILits) null);
      int int0 = learntHTClause0.get(69);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(70, learntHTClause0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.get(109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(110, 110);
      vecInt0.growTo(110, 0);
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        noLearningButHeuristics0.claBumpActivity(learntHTClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.AbstractLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      vecInt0.set((byte)1, (byte)1);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      String string0 = learntHTClause0.toString();
      assertEqualsstring0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.tail = 1111;
      // Undeclared exception!
      try { 
        learntHTClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      vecInt0.push(2154);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1077
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.propagate((UnitPropagationListener) null, 218);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(157, 157);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.tail = 1111;
      // Undeclared exception!
      try { 
        learntHTClause0.propagate((UnitPropagationListener) null, 801);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(108, 108);
      vecInt0.growTo(108, 76);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.simplify();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(216, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.tail = 1111;
      // Undeclared exception!
      try { 
        learntHTClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      vecInt0.push(1111);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.calcReason(3242, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1111
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(157, 157);
      Lits lits0 = new Lits();
      vecInt0.growTo(157, 1111);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReasonOnTheFly(157, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1111
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(69, (-189));
      IVecInt iVecInt0 = vecInt0.push(1);
      LearntHTClause learntHTClause0 = new LearntHTClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.calcReason((-189), iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      Constr constr0 = learntHTClause0.toConstraint();
      assertEquals(109, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      int int0 = learntHTClause0.size();
      assertEquals(109, int0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      lits0.getFromPool(1077);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.getVocabulary();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(109, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.getVocabulary();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(109, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(561, 1543);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      DotSearchTracing<LearntHTClause> dotSearchTracing0 = new DotSearchTracing<LearntHTClause>("H|");
      // Undeclared exception!
      try { 
        originalHTClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(86, 86);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(110, 110);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      lits0.getFromPool(109);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.head = 218;
      // Undeclared exception!
      try { 
        learntHTClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(69, 69);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(40, 40);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, (-44));
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -43
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(110, 110);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(580, 580);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      vecInt0.growTo(4680, 2622);
      int int0 = learntHTClause0.getAssertionLevel(vecInt0, 37);
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      lits0.satisfies(109);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.isSatisfied();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(109, learntHTClause0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.equals(lits0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(109, learntHTClause0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(86, 86);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      boolean boolean0 = originalHTClause0.equals((Object) null);
      assertEquals(86, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.get((-3972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3973
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.locked();
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn(lits0).when(cardinalityDataStructureYanMax0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        learntHTClause0.propagate(solver0, 109);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      lits0.satisfies(109);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.simplify();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertTrue(boolean0);
      assertEquals(109, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.calcReason(3242, vecInt0);
      assertEquals(0, vecInt0.size());
      assertEquals(109, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(2, 2);
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(110, 110);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.calcReasonOnTheFly((-1810), vecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(40, 40);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.getVocabulary();
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals(40, learntHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(86, 86);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      int int0 = originalHTClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(86, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      boolean boolean0 = learntHTClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(110, 110);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      Constr constr0 = originalHTClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(110, constr0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      vecInt0.growTo(27, 37);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.canBePropagatedMultipleTimes();
      assertEquals(27, originalHTClause0.size());
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(109, 109);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      double double0 = learntHTClause0.getActivity();
      assertEquals(109, learntHTClause0.size());
      assertEquals(0.0, double0, 0.01);
  }
}
