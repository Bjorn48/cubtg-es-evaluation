[MASTER] 04:57:33.137 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructure>> : Invalid generic instance
[MASTER] 04:57:33.205 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielHT>> : Invalid generic instance
[MASTER] 04:57:33.227 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielWL>> : Invalid generic instance
[MASTER] 04:57:42.884 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 04:57:42.885 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 04:57:42.885 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 04:57:50.131 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:57:50.173 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:57:54.381 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:57:54.444 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:03.344 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:17.489 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:28.876 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:37.712 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:41.877 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:52.028 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:53.110 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:54.630 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:59.236 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:58:59.449 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:02.781 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:07.763 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:12.196 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:14.991 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:16.607 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:17.040 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:20.344 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:22.259 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:22.555 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:24.057 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 2), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:28.569 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 04:59:31.723 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 05:01:23.902 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 05:01:29.258 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe (Write failed)
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:157) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_191]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_191]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191]
Caused by: java.net.SocketException: Broken pipe (Write failed)
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_191]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111) ~[na:1.8.0_191]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155) ~[na:1.8.0_191]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_191]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:290) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:152) ~[na:1.8.0_191]
	... 13 common frames omitted
[MASTER] 05:01:34.117 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7), assignment statement: solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 05:01:34.190 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_61_1550376094115/org/sat4j/minisat/core/Solver_61_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_61_1550376094115/org/sat4j/minisat/core/Solver_61_tmp__ESTest_scaffolding.java]]
[MASTER] 05:01:34.190 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:01:34.190 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 05:01:34.195 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielHT>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielHT>: 226
[MASTER] 05:01:34.195 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_61_1550376094115/org/sat4j/minisat/core/Solver_61_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 05:01:34.196 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 05:01:34.196 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_61_1550376094115/org/sat4j/minisat/core/Solver_61_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 05:01:34.196 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 05:01:34.198 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_61_1550376094115/org/sat4j/minisat/core/Solver_61_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sun Feb 17 04:01:34 GMT 2019
4:  */
5: 
6: package org.sat4j.minisat.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.lang.reflect.Array;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.junit.runner.RunWith;
17: import org.sat4j.minisat.constraints.CardinalityDataStructure;
18: import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
19: import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
20: import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
21: import org.sat4j.minisat.core.ILits;
22: import org.sat4j.minisat.core.SearchParams;
23: import org.sat4j.minisat.core.Solver;
24: import org.sat4j.minisat.core.SolverStats;
25: import org.sat4j.minisat.learning.FixedLengthLearning;
26: import org.sat4j.minisat.learning.NoLearningNoHeuristics;
27: import org.sat4j.minisat.orders.PureOrder;
28: import org.sat4j.minisat.orders.RandomWalkDecorator;
29: import org.sat4j.minisat.restarts.NoRestarts;
30: import org.sat4j.specs.IVecInt;
31: import org.sat4j.specs.UnitPropagationListener;
32: import org.sat4j.tools.ManyCore;
33: 
34: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
35: public class Solver_61_tmp__ESTest extends Solver_61_tmp__ESTest_scaffolding {
36: 
37:   @Test(timeout = 4000)
38:   public void test0()  throws Throwable  {
39:       CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
40:       assertNotNull(cardinalityDataStructure0);
41:       
42:       int int0 = 3;
43:       PureOrder pureOrder0 = new PureOrder(3);
44:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
45:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
46:       assertEquals(3, pureOrder0.getPeriod());
47:       assertNotNull(pureOrder0);
48:       
49:       pureOrder0.assignLiteral(3);
50:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
51:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
52:       assertEquals(3, pureOrder0.getPeriod());
53:       
54:       RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 3);
55:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
56:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
57:       assertEquals(3, pureOrder0.getPeriod());
58:       assertEquals(3.0, randomWalkDecorator0.getProbability(), 0.01);
59:       assertNotNull(randomWalkDecorator0);
60:       
61:       FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-2097));
62:       assertEquals((-2097), fixedLengthLearning0.getMaxLength());
63:       assertNotNull(fixedLengthLearning0);
64:       
65:       NoRestarts noRestarts0 = new NoRestarts();
66:       assertEquals("NoRestarts", noRestarts0.toString());
67:       assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
68:       assertFalse(noRestarts0.shouldRestart());
69:       assertNotNull(noRestarts0);
70:       
71:       SearchParams searchParams0 = new SearchParams();
72:       assertEquals(100, searchParams0.getInitConflictBound());
73:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
74:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
75:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
76:       assertNotNull(searchParams0);
77:       
78:       noRestarts0.init(searchParams0, (SolverStats) null);
79:       assertEquals("NoRestarts", noRestarts0.toString());
80:       assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
81:       assertFalse(noRestarts0.shouldRestart());
82:       assertEquals(100, searchParams0.getInitConflictBound());
83:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
84:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
85:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
86:       
87:       noRestarts0.onRestart();
88:       assertEquals("NoRestarts", noRestarts0.toString());
89:       assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
90:       assertFalse(noRestarts0.shouldRestart());
91:       
92:       NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
93:       assertNotNull(noLearningNoHeuristics0);
94:       
95:       CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
96:       assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
97:       assertNotNull(cardinalityDataStructure1);
98:       
99:       Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure1, searchParams0, pureOrder0, noRestarts0);
100:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
101:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
102:       assertEquals(3, pureOrder0.getPeriod());
103:       assertEquals("NoRestarts", noRestarts0.toString());
104:       assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
105:       assertFalse(noRestarts0.shouldRestart());
106:       assertEquals(100, searchParams0.getInitConflictBound());
107:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
108:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
109:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
110:       assertFalse(solver0.isVerbose());
111:       assertEquals(1, solver0.realNumberOfVariables());
112:       assertFalse(solver0.isSolverKeptHot());
113:       assertEquals(0, solver0.nConstraints());
114:       assertEquals(2, solver0.newVar());
115:       assertEquals(0, solver0.getPropagationLevel());
116:       assertEquals("c ", solver0.getLogPrefix());
117:       assertFalse(solver0.isDBSimplificationAllowed());
118:       assertEquals(1, solver0.nVars());
119:       assertEquals(0, solver0.currentDecisionLevel());
120:       assertEquals(2147483, solver0.getTimeout());
121:       assertEquals(0, solver0.decisionLevel());
122:       assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
123:       assertNotNull(solver0);
124:       
125:       solver0.setLogPrefix("5-GQy=wspT7tb^WB8");
126:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
127:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
128:       assertEquals(3, pureOrder0.getPeriod());
129:       assertEquals("NoRestarts", noRestarts0.toString());
130:       assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
131:       assertFalse(noRestarts0.shouldRestart());
132:       assertEquals(100, searchParams0.getInitConflictBound());
133:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
134:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
135:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
136:       assertFalse(solver0.isVerbose());
137:       assertFalse(solver0.isSolverKeptHot());
138:       assertEquals(0, solver0.nConstraints());
139:       assertEquals(0, solver0.getPropagationLevel());
140:       assertEquals(3, solver0.realNumberOfVariables());
141:       assertEquals(4, solver0.newVar());
142:       assertEquals(3, solver0.nVars());
143:       assertFalse(solver0.isDBSimplificationAllowed());
144:       assertEquals(0, solver0.currentDecisionLevel());
145:       assertEquals(2147483, solver0.getTimeout());
146:       assertEquals(0, solver0.decisionLevel());
147:       assertEquals("5-GQy=wspT7tb^WB8", solver0.getLogPrefix());
148:       assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
149:       assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
150:       
151:       solver0.decayActivities();
152:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
153:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
154:       assertEquals(3, pureOrder0.getPeriod());
155:       assertEquals("NoRestarts", noRestarts0.toString());
156:       assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
157:       assertFalse(noRestarts0.shouldRestart());
158:       assertEquals(100, searchParams0.getInitConflictBound());
159:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
160:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
161:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
162:       assertFalse(solver0.isVerbose());
163:       assertFalse(solver0.isSolverKeptHot());
164:       assertEquals(0, solver0.nConstraints());
165:       assertEquals(0, solver0.getPropagationLevel());
166:       assertEquals(5, solver0.nVars());
167:       assertEquals(5, solver0.realNumberOfVariables());
168:       assertEquals(6, solver0.newVar());
169:       assertFalse(solver0.isDBSimplificationAllowed());
170:       assertEquals(0, solver0.currentDecisionLevel());
171:       assertEquals(2147483, solver0.getTimeout());
172:       assertEquals(0, solver0.decisionLevel());
173:       assertEquals("5-GQy=wspT7tb^WB8", solver0.getLogPrefix());
174:       assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
175:       assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
176:       
177:       SolverStats solverStats0 = solver0.getStats();
178:       assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
179:       assertEquals(0, pureOrder0.numberOfInterestingVariables());
180:       assertEquals(3, pureOrder0.getPeriod());
181:       assertEquals("NoRestarts", noRestarts0.toString());
182:       assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
183:       assertFalse(noRestarts0.shouldRestart());
184:       assertEquals(100, searchParams0.getInitConflictBound());
185:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
186:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
187:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
188:       assertFalse(solver0.isVerbose());
189:       assertFalse(solver0.isSolverKeptHot());
190:       assertEquals(0, solver0.nConstraints());
191:       assertEquals(0, solver0.getPropagationLevel());
192:       assertEquals(7, solver0.nVars());
193:       assertEquals(7, solver0.realNumberOfVariables());
194:       assertEquals(8, solver0.newVar());
195:       assertFalse(solver0.isDBSimplificationAllowed());
196:       assertEquals(0, solver0.currentDecisionLevel());
197:       assertEquals(2147483, solver0.getTimeout());
198:       assertEquals(0, solver0.decisionLevel());
199:       assertEquals("5-GQy=wspT7tb^WB8", solver0.getLogPrefix());
200:       assertEquals(0L, solverStats0.getReducedliterals());
201:       assertEquals(0L, solverStats0.getLearnedclauses());
202:       assertEquals(0, solverStats0.getReduceddb());
203:       assertEquals(0L, solverStats0.getInspects());
204:       assertEquals(0L, solverStats0.getConflicts());
205:       assertEquals(0L, solverStats0.getLearnedternaryclauses());
206:       assertEquals(0L, solverStats0.getPropagations());
207:       assertEquals(0L, solverStats0.getChangedreason());
208:       assertEquals(0L, solverStats0.getLearnedliterals());
209:       assertEquals(0L, solverStats0.getUpdateLBD());
210:       assertEquals(0, solverStats0.getStarts());
211:       assertEquals(0, solverStats0.getShortcuts());
212:       assertEquals(0L, solverStats0.getIgnoredclauses());
213:       assertEquals(0L, solverStats0.getDecisions());
214:       assertEquals(0L, solverStats0.getRootSimplifications());
215:       assertEquals(0L, solverStats0.getLearnedbinaryclauses());
216:       assertEquals(0, solverStats0.getImportedUnits());
217:       assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
218:       assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
219:       assertNotNull(solverStats0);
220:       
221:       UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
222:       ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
223:       String[] stringArray0 = new String[1];
224:       stringArray0[0] = "";
225:       Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7);
226:       solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0;
227:   }
228: }
RegularFileObject[/tmp/EvoSuite_61_1550376094115/org/sat4j/minisat/core/Solver_61_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sun Feb 17 04:01:34 GMT 2019
5:  */
6: 
7: package org.sat4j.minisat.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class Solver_61_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.minisat.core.Solver"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Solver_61_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.minisat.core.ConflictTimerAdapter",
84:       "org.sat4j.tools.ManyCore",
85:       "org.sat4j.specs.UnitPropagationListener",
86:       "org.sat4j.minisat.core.SizeComparator",
87:       "org.sat4j.tools.FullClauseSelectorSolver",
88:       "org.sat4j.reader.LecteurDimacs",
89:       "org.sat4j.tools.SolverDecorator",
90:       "org.sat4j.specs.Propagatable",
91:       "org.sat4j.minisat.core.Counter",
92:       "org.sat4j.minisat.learning.FixedLengthLearning",
93:       "org.sat4j.minisat.core.Undoable",
94:       "org.sat4j.ILauncherMode",
95:       "org.sat4j.minisat.constraints.cnf.Clauses",
96:       "org.sat4j.minisat.core.Pair",
97:       "org.sat4j.core.EmptyVecInt",
98:       "org.sat4j.ExitCode",
99:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
100:       "org.sat4j.specs.IVec",
101:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
102:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
103:       "org.sat4j.specs.Lbool",
104:       "org.sat4j.minisat.constraints.cnf.CBClause",
105:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
106:       "org.sat4j.AbstractLauncher$2",
107:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
108:       "org.sat4j.AbstractLauncher$1",
109:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
110:       "org.sat4j.specs.IOptimizationProblem",
111:       "org.sat4j.specs.SearchListener",
112:       "org.sat4j.minisat.core.SimplificationType",
113:       "org.sat4j.minisat.learning.MiniSATLearning",
114:       "org.sat4j.minisat.core.SearchParams",
115:       "org.sat4j.minisat.core.Heap",
116:       "org.sat4j.specs.ILogAble$1",
117:       "org.sat4j.specs.TimeoutException",
118:       "org.sat4j.specs.Constr",
119:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
120:       "org.sat4j.minisat.core.ConflictTimerContainer",
121:       "org.sat4j.specs.ISolverService",
122:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
123:       "org.sat4j.minisat.core.LearningStrategy",
124:       "org.sat4j.minisat.constraints.cnf.WLClause",
125:       "org.sat4j.specs.IGroupSolver",
126:       "org.sat4j.opt.MaxSatDecorator",
127:       "org.sat4j.DecisionMode",
128:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
129:       "org.sat4j.specs.IteratorInt",
130:       "org.sat4j.specs.ISolver",
131:       "org.sat4j.minisat.orders.RandomWalkDecorator",
132:       "org.sat4j.specs.UnitClauseProvider$1",
133:       "org.sat4j.minisat.core.CircularBuffer",
134:       "org.sat4j.minisat.learning.LimitedLearning",
135:       "org.sat4j.minisat.restarts.LubyRestarts",
136:       "org.sat4j.minisat.core.VoidTracing",
137:       "org.sat4j.minisat.core.ActivityListener",
138:       "org.sat4j.minisat.restarts.Glucose21Restarts",
139:       "org.sat4j.minisat.core.GlucoseLCDS",
140:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
141:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
142:       "org.sat4j.minisat.core.ILits",
143:       "org.sat4j.minisat.constraints.card.AtLeast",
144:       "org.sat4j.specs.ILogAble",
145:       "org.sat4j.specs.ContradictionException",
146:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
147:       "org.sat4j.reader.GroupedCNFReader",
148:       "org.sat4j.core.LiteralsUtils",
149:       "org.sat4j.minisat.learning.PercentLengthLearning",
150:       "org.sat4j.specs.IConstr",
151:       "org.sat4j.specs.IVecInt",
152:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
153:       "org.sat4j.core.ConstrGroup",
154:       "org.sat4j.tools.SolutionFoundListener",
155:       "org.sat4j.tools.xplain.MinimizationStrategy",
156:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
157:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
158:       "org.sat4j.OptimizationMode",
159:       "org.sat4j.minisat.core.Learner",
160:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
161:       "org.sat4j.minisat.core.ActivityComparator",
162:       "org.sat4j.specs.MandatoryLiteralListener",
163:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
164:       "org.sat4j.specs.IProblem",
165:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
166:       "org.sat4j.minisat.restarts.MiniSATRestarts",
167:       "org.sat4j.core.VecInt",
168:       "org.sat4j.minisat.core.Solver",
169:       "org.sat4j.tools.xplain.HighLevelXplain",
170:       "org.sat4j.minisat.constraints.cnf.Lits",
171:       "org.sat4j.minisat.core.Solver$2",
172:       "org.sat4j.minisat.core.Solver$1",
173:       "org.sat4j.specs.UnitClauseProvider",
174:       "org.sat4j.AbstractLauncher",
175:       "org.sat4j.minisat.learning.AbstractLearning",
176:       "org.sat4j.minisat.core.Solver$4",
177:       "org.sat4j.minisat.core.Solver$3",
178:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
179:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
180:       "org.sat4j.core.VecInt$1",
181:       "org.sat4j.core.ASolverFactory",
182:       "org.sat4j.core.Vec$1",
183:       "org.sat4j.reader.DimacsReader",
184:       "org.sat4j.minisat.core.DataStructureFactory",
185:       "org.sat4j.core.Vec",
186:       "org.sat4j.minisat.core.Solver$9",
187:       "org.sat4j.minisat.core.Glucose2LCDS",
188:       "org.sat4j.minisat.core.Solver$6",
189:       "org.sat4j.minisat.core.Solver$5",
190:       "org.sat4j.minisat.core.SolverStats",
191:       "org.sat4j.minisat.core.Solver$8",
192:       "org.sat4j.minisat.core.Solver$7",
193:       "org.sat4j.minisat.core.Solver$10",
194:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
195:       "org.sat4j.minisat.core.ConstrActivityListener",
196:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
197:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
198:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
199:       "org.sat4j.minisat.restarts.ArminRestarts",
200:       "org.sat4j.tools.GroupClauseSelectorSolver",
201:       "org.sat4j.specs.SearchListenerAdapter",
202:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
203:       "org.sat4j.tools.xplain.Xplain",
204:       "org.sat4j.reader.ParseFormatException",
205:       "org.sat4j.tools.AbstractClauseSelectorSolver",
206:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
207:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
208:       "org.sat4j.tools.OutcomeListener",
209:       "org.sat4j.minisat.core.ActivityLCDS",
210:       "org.sat4j.minisat.learning.ActiveLearning",
211:       "org.sat4j.MUSLauncher",
212:       "org.sat4j.minisat.orders.VarOrderHeap",
213:       "org.sat4j.minisat.orders.NaturalStaticOrder",
214:       "org.sat4j.minisat.core.ISimplifier",
215:       "org.sat4j.minisat.core.ConflictTimer",
216:       "org.sat4j.minisat.core.VarActivityListener",
217:       "org.sat4j.specs.Constr$1",
218:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
219:       "org.sat4j.specs.VarMapper",
220:       "org.sat4j.specs.RandomAccessModel",
221:       "org.sat4j.minisat.SolverFactory",
222:       "org.sat4j.minisat.core.LBDConflictTimer",
223:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
224:       "org.sat4j.minisat.orders.TabuListDecorator",
225:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
226:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
227:       "org.sat4j.minisat.orders.PureOrder",
228:       "org.sat4j.minisat.core.SizeLCDS",
229:       "org.sat4j.minisat.core.RestartStrategy",
230:       "org.sat4j.minisat.core.AgeLCDS",
231:       "org.sat4j.tools.xplain.Explainer",
232:       "org.sat4j.reader.Reader",
233:       "org.sat4j.core.ReadOnlyVecInt",
234:       "org.sat4j.minisat.core.IOrder",
235:       "org.sat4j.minisat.orders.VariableComparator",
236:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
237:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
238:       "org.sat4j.minisat.core.ICDCL",
239:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
240:       "org.sat4j.minisat.restarts.NoRestarts",
241:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
242:       "org.sat4j.minisat.core.Solver$5$1",
243:       "org.sat4j.core.EmptyVecInt$1",
244:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
245:     );
246:   } 
247:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
248:     mock(Class.forName("org.sat4j.minisat.core.ILits", false, Solver_61_tmp__ESTest_scaffolding.class.getClassLoader()));
249:     mock(Class.forName("org.sat4j.specs.UnitPropagationListener", false, Solver_61_tmp__ESTest_scaffolding.class.getClassLoader()));
250:   }
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Solver_61_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "org.sat4j.minisat.core.Solver$1",
257:       "org.sat4j.minisat.core.Solver",
258:       "org.sat4j.minisat.core.Solver$2",
259:       "org.sat4j.minisat.core.Solver$3",
260:       "org.sat4j.minisat.core.Solver$4",
261:       "org.sat4j.minisat.core.Solver$5",
262:       "org.sat4j.minisat.core.Solver$9",
263:       "org.sat4j.minisat.core.Solver$6",
264:       "org.sat4j.minisat.core.Solver$GlucoseLCDS",
265:       "org.sat4j.minisat.core.Solver$Glucose2LCDS",
266:       "org.sat4j.minisat.core.ConflictTimerAdapter",
267:       "org.sat4j.minisat.core.Solver$7",
268:       "org.sat4j.minisat.core.Solver$8",
269:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
270:       "org.sat4j.minisat.core.Solver$10",
271:       "org.sat4j.minisat.core.Solver$11",
272:       "org.sat4j.specs.ILogAble$1",
273:       "org.sat4j.specs.ILogAble",
274:       "org.sat4j.specs.UnitClauseProvider$1",
275:       "org.sat4j.specs.UnitClauseProvider",
276:       "org.sat4j.core.LiteralsUtils",
277:       "org.sat4j.specs.Lbool",
278:       "org.sat4j.core.EmptyVecInt",
279:       "org.sat4j.core.VecInt",
280:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
281:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
282:       "org.sat4j.minisat.orders.NaturalStaticOrder",
283:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
284:       "org.sat4j.minisat.learning.LimitedLearning",
285:       "org.sat4j.minisat.learning.FixedLengthLearning",
286:       "org.sat4j.minisat.learning.AbstractLearning",
287:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
288:       "org.sat4j.minisat.learning.MiniSATLearning",
289:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
290:       "org.sat4j.core.Vec",
291:       "org.sat4j.minisat.constraints.cnf.Lits",
292:       "org.sat4j.minisat.orders.VarOrderHeap",
293:       "org.sat4j.minisat.orders.RandomWalkDecorator",
294:       "org.sat4j.minisat.restarts.NoRestarts",
295:       "org.sat4j.minisat.core.ActivityComparator",
296:       "org.sat4j.specs.SearchListenerAdapter",
297:       "org.sat4j.minisat.core.VoidTracing",
298:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
299:       "org.sat4j.minisat.core.ActivityLCDS",
300:       "org.sat4j.minisat.core.LBDConflictTimer",
301:       "org.sat4j.minisat.core.GlucoseLCDS",
302:       "org.sat4j.minisat.core.Glucose2LCDS",
303:       "org.sat4j.minisat.core.AgeLCDS",
304:       "org.sat4j.minisat.core.SizeComparator",
305:       "org.sat4j.minisat.core.SizeLCDS",
306:       "org.sat4j.minisat.learning.PercentLengthLearning",
307:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
308:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
309:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
310:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
311:       "org.sat4j.minisat.restarts.ArminRestarts",
312:       "org.sat4j.minisat.orders.PureOrder",
313:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
314:       "org.sat4j.minisat.restarts.LubyRestarts",
315:       "org.sat4j.AbstractLauncher",
316:       "org.sat4j.MUSLauncher",
317:       "org.sat4j.AbstractLauncher$1",
318:       "org.sat4j.DecisionMode",
319:       "org.sat4j.ExitCode",
320:       "org.sat4j.OptimizationMode",
321:       "org.sat4j.ILauncherMode",
322:       "org.sat4j.specs.ContradictionException",
323:       "org.sat4j.minisat.orders.SubsetVarOrder",
324:       "org.sat4j.minisat.orders.TabuListDecorator",
325:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
326:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
327:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
328:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
329:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
330:       "org.sat4j.minisat.learning.ActiveLearning",
331:       "org.sat4j.minisat.constraints.cnf.Clauses",
332:       "org.sat4j.minisat.constraints.cnf.HTClause",
333:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
334:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
335:       "org.sat4j.minisat.constraints.cnf.WLClause",
336:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
337:       "org.sat4j.minisat.core.Counter",
338:       "org.sat4j.minisat.restarts.Glucose21Restarts",
339:       "org.sat4j.minisat.core.CircularBuffer",
340:       "org.sat4j.tools.AbstractOutputSolver",
341:       "org.sat4j.tools.DimacsOutputSolver",
342:       "org.sat4j.minisat.restarts.MiniSATRestarts",
343:       "org.sat4j.tools.DimacsStringSolver",
344:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
345:       "org.sat4j.core.VecInt$1",
346:       "org.sat4j.minisat.core.Heap",
347:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
348:       "org.sat4j.minisat.core.ConflictTimerContainer",
349:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
350:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
351:       "org.sat4j.tools.ManyCore",
352:       "org.sat4j.core.ConstrGroup",
353:       "org.sat4j.minisat.constraints.card.AtLeast",
354:       "org.sat4j.tools.SolverDecorator",
355:       "org.sat4j.tools.AbstractClauseSelectorSolver",
356:       "org.sat4j.tools.FullClauseSelectorSolver",
357:       "org.sat4j.tools.xplain.Xplain",
358:       "org.sat4j.core.ASolverFactory",
359:       "org.sat4j.minisat.SolverFactory",
360:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
361:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
362:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
363:       "org.sat4j.minisat.constraints.cnf.UnitClause",
364:       "org.sat4j.core.EmptyVecInt$1",
365:       "org.sat4j.tools.StatisticsSolver",
366:       "org.sat4j.core.Vec$1",
367:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
368:       "org.sat4j.minisat.core.Solver$5$1",
369:       "org.sat4j.minisat.constraints.cnf.CBClause",
370:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
371:       "org.sat4j.tools.MultiTracing",
372:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
373:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
374:       "org.sat4j.tools.encoding.Sequential",
375:       "org.sat4j.tools.AbstractMinimalModel",
376:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
377:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
378:       "org.sat4j.minisat.constraints.cnf.LearntBinaryClause",
379:       "org.sat4j.specs.FakeConstr",
380:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
381:       "org.sat4j.minisat.constraints.card.MinWatchCard",
382:       "org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy",
383:       "org.sat4j.BasicLauncher",
384:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
385:       "org.sat4j.minisat.core.SolverStats",
386:       "org.sat4j.minisat.core.Pair",
387:       "org.sat4j.minisat.core.SearchParams",
388:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
389:       "org.sat4j.specs.TimeoutException",
390:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
391:       "org.sat4j.specs.Constr$1",
392:       "org.sat4j.specs.Constr"
393:     );
394:   }
395: }

[MASTER] 05:01:34.211 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int int0 = 3;
PureOrder pureOrder0 = new PureOrder(3);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(3, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

pureOrder0.assignLiteral(3);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(3, pureOrder0.getPeriod());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 3);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(3, pureOrder0.getPeriod());
assertEquals(3.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-2097));
assertEquals((-2097), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

noRestarts0.init(searchParams0, (SolverStats) null);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

noRestarts0.onRestart();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(cardinalityDataStructure1);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure1, searchParams0, pureOrder0, noRestarts0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(3, pureOrder0.getPeriod());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(solver0);

solver0.setLogPrefix("5-GQy=wspT7tb^WB8");
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(3, pureOrder0.getPeriod());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("5-GQy=wspT7tb^WB8", solver0.getLogPrefix());
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

solver0.decayActivities();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(3, pureOrder0.getPeriod());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("5-GQy=wspT7tb^WB8", solver0.getLogPrefix());
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

SolverStats solverStats0 = solver0.getStats();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(3, pureOrder0.getPeriod());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.nVars());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("5-GQy=wspT7tb^WB8", solver0.getLogPrefix());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
assertNotNull(solverStats0);

UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
String[] stringArray0 = new String[1];
stringArray0[0] = "";
Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 7);
solverArray0[0] = (Solver<MixedDataStructureDanielHT>) solverArray0;

[MASTER] 05:02:26.308 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
[MASTER] 05:02:30.949 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.minisat.core.Solver with seed 1550375835190. Configuration id : null
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe (Write failed)
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:157) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_191]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_191]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191]
Caused by: java.net.SocketException: Broken pipe (Write failed)
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_191]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111) ~[na:1.8.0_191]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155) ~[na:1.8.0_191]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_191]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:290) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:152) ~[na:1.8.0_191]
	... 9 common frames omitted
