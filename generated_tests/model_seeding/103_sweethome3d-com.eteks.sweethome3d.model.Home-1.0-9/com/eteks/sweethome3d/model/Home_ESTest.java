/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 01:25:30 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.AspectRatio;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.Wall;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertNull(string0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Home home0 = new Home(17.8978F);
      assertNotNull(home0);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener1);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener2 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener2);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list0 = home0.getLevels();
      assertNotNull(list0);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property home_Property0 = Home.Property.PRINT;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Asia/Sakhalin", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("Asia/Sakhalin", propertyChangeListenerProxy0.getPropertyName());
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("Asia/Sakhalin", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeRoomsListener(collectionListener0);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener3 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener3);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      assertNotNull(list1);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list2 = Home.duplicate(list1);
      assertNotNull(list2);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list3 = home0.getLevels();
      assertNotNull(list3);
      assertNotSame(list3, list0);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(list3.equals((Object)list0));
      
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-236.98F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 3.1415927F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 3.1415927F;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = (-236.98F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 36.816666F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-236.98F);
      floatArray4[3] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 36.816666F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-100.0F);
      floatArray5[3] = 0.0F;
      floatArray5[4] = 36.816666F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 0.0F;
      floatArray0[5] = floatArray6;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(6, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertFalse(room1.isClockwise());
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(6, room1.getPointCount());
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertFalse(room1.isClockwise());
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(6, room1.getPointCount());
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      home0.deleteRoom(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(17.8978F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertFalse(room1.isClockwise());
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(6, room1.getPointCount());
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list1 = home0.getStoredCameras();
      assertNotNull(list1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label0 = new Label("", (-673.6F), (-673.6F));
      assertNotNull(label0);
      assertEquals((-673.6F), label0.getX(), 0.01F);
      assertEquals("", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-673.6F), label0.getY(), 0.01F);
      
      Label label1 = (Label)label0.clone();
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals((-673.6F), label0.getX(), 0.01F);
      assertEquals("", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-673.6F), label0.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-673.6F), label1.getX(), 0.01F);
      assertEquals("", label1.getText());
      assertEquals((-673.6F), label1.getY(), 0.01F);
      assertFalse(label1.equals((Object)label0));
      
      home0.deselectItem(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-673.6F), label0.getX(), 0.01F);
      assertEquals("", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-673.6F), label0.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-673.6F), label1.getX(), 0.01F);
      assertEquals("", label1.getText());
      assertEquals((-673.6F), label1.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(backgroundImage0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertNotNull(home_PropertyArray0);
      assertEquals(12, home_PropertyArray0.length);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(list1.equals((Object)list0));
      
      Collection<Label> collection0 = home0.getLabels();
      assertNotNull(collection0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      home0.setBasePlanLocked(true);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection1 = home0.getLabels();
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(collection1.equals((Object)collection0));
      
      Object object0 = home0.getVisualProperty("!h,ox)Kx{V.~b");
      assertNull(object0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.setName((String) null);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertTrue(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      
      List<Label> list3 = Home.getLabelsSubList(list2);
      assertNotNull(list3);
      assertNotSame(list1, list3);
      assertNotSame(list3, list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.equals((Object)list1));
      
      home0.setModified(true);
      assertNotSame(home0, home1);
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addFurnitureListener(collectionListener0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(level0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Label label0 = linkedList0.poll();
      assertNull(label0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertFalse(boolean0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Camera> class0 = Camera.class;
      List<Camera> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isFurnitureDescendingSorted();
      assertTrue(boolean1);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertNull(string0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Camera camera0 = new Camera(1425.24F, (-1490.6F), 1425.24F, (-1490.6F), 0.0F, 734.11914F);
      assertNotNull(camera0);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(734.11914F, camera0.getFieldOfView(), 0.01F);
      assertEquals((-1490.6F), camera0.getYaw(), 0.01F);
      assertEquals(1425.24F, camera0.getX(), 0.01F);
      assertEquals((-1490.6F), camera0.getY(), 0.01F);
      assertEquals(1425.24F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      
      Camera camera1 = camera0.clone();
      assertNotNull(camera1);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(734.11914F, camera0.getFieldOfView(), 0.01F);
      assertEquals((-1490.6F), camera0.getYaw(), 0.01F);
      assertEquals(1425.24F, camera0.getX(), 0.01F);
      assertEquals((-1490.6F), camera0.getY(), 0.01F);
      assertEquals(1425.24F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(734.11914F, camera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1425.24F, camera1.getX(), 0.01F);
      assertEquals((-1490.6F), camera1.getYaw(), 0.01F);
      assertEquals(1425.24F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getPitch(), 0.01F);
      assertNull(camera1.getName());
      assertEquals((-1490.6F), camera1.getY(), 0.01F);
      assertFalse(camera1.equals((Object)camera0));
      
      home0.setCamera(camera1);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(734.11914F, camera0.getFieldOfView(), 0.01F);
      assertEquals((-1490.6F), camera0.getYaw(), 0.01F);
      assertEquals(1425.24F, camera0.getX(), 0.01F);
      assertEquals((-1490.6F), camera0.getY(), 0.01F);
      assertEquals(1425.24F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(734.11914F, camera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1425.24F, camera1.getX(), 0.01F);
      assertEquals((-1490.6F), camera1.getYaw(), 0.01F);
      assertEquals(1425.24F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getPitch(), 0.01F);
      assertNull(camera1.getName());
      assertEquals((-1490.6F), camera1.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      
      Camera camera2 = home0.getCamera();
      assertNotNull(camera2);
      assertNotSame(camera2, camera0);
      assertSame(camera2, camera1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(734.11914F, camera2.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera2.getTime());
      assertEquals(Camera.Lens.PINHOLE, camera2.getLens());
      assertEquals(1425.24F, camera2.getZ(), 0.01F);
      assertEquals(1425.24F, camera2.getX(), 0.01F);
      assertEquals(0.0F, camera2.getPitch(), 0.01F);
      assertNull(camera2.getName());
      assertEquals((-1490.6F), camera2.getYaw(), 0.01F);
      assertEquals((-1490.6F), camera2.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(camera2.equals((Object)camera0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Home home0 = new Home(64.0F);
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      assertNotNull(list1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = 0.0F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[12];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray1[2] = 3700.0F;
      floatArray2[2] = 64.0F;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 36.816666F;
      floatArray3[1] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray0[3] = floatArray3;
      floatArray0[5] = floatArray0[2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertFalse(room1.isClockwise());
      assertEquals(1850.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      home0.addRoom(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertFalse(room1.isClockwise());
      assertEquals(1850.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(level0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList1 = new LinkedList<Label>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertNotNull(compass0);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedItems(linkedList1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(64.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      
      float float0 = home1.getWallHeight();
      assertEquals(64.0F, float0, 0.01F);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(64.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label0 = new Label("p?kAR", (-5063.4985F), (-5063.4985F));
      assertNotNull(label0);
      assertEquals("p?kAR", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-5063.4985F), label0.getY(), 0.01F);
      assertEquals((-5063.4985F), label0.getX(), 0.01F);
      
      home0.deleteLabel(label0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals("p?kAR", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-5063.4985F), label0.getY(), 0.01F);
      assertEquals((-5063.4985F), label0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addLabel(label0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals("p?kAR", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-5063.4985F), label0.getY(), 0.01F);
      assertEquals((-5063.4985F), label0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(linkedList0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Label> list2 = Home.getLabelsSubList(list0);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.getFurnitureSortedProperty();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertNotNull(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = Home.CURRENT_VERSION;
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(level0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.REVERSE_LANDSCAPE;
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 3700L, 3.1415927F, 4084.585F, 41.130554F, 4084.585F, 41.130554F, false, true, false, (Float) 0.0F, "com.eteks.sweethome3d.model.Home$4", "com.eteks.sweethome3d.model.Home$4");
      assertNotNull(homePrint0);
      assertFalse(homePrint0.isFurniturePrinted());
      assertEquals(HomePrint.PaperOrientation.REVERSE_LANDSCAPE, homePrint0.getPaperOrientation());
      assertTrue(homePrint0.isPlanPrinted());
      assertEquals(4084.585F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home$4", homePrint0.getHeaderFormat());
      assertFalse(homePrint0.isView3DPrinted());
      assertEquals(0.0F, homePrint0.getPlanScale(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals(4084.585F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(41.130554F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home$4", homePrint0.getFooterFormat());
      assertEquals(3.1415927F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals(41.130554F, homePrint0.getPaperRightMargin(), 0.01F);
      
      home0.setPrint(homePrint0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(homePrint0.isFurniturePrinted());
      assertEquals(HomePrint.PaperOrientation.REVERSE_LANDSCAPE, homePrint0.getPaperOrientation());
      assertTrue(homePrint0.isPlanPrinted());
      assertEquals(4084.585F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home$4", homePrint0.getHeaderFormat());
      assertFalse(homePrint0.isView3DPrinted());
      assertEquals(0.0F, homePrint0.getPlanScale(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals(4084.585F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(41.130554F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home$4", homePrint0.getFooterFormat());
      assertEquals(3.1415927F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals(41.130554F, homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertNull(string0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNotNull(observerCamera0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNotNull(collection0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<HomeFurnitureGroup> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Home home0 = new Home(list0);
      assertNotNull(home0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNotNull(observerCamera0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-236.98F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 3.1415927F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 3.1415927F;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = (-236.98F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 36.816666F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-236.98F);
      floatArray4[3] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = 36.816666F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-100.0F);
      floatArray5[3] = 0.0F;
      floatArray5[4] = 36.816666F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 0.0F;
      floatArray0[5] = floatArray6;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room1.isFloorVisible());
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getName());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room1.isFloorVisible());
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getName());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      home0.addRoom(room1, 0);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room1.isFloorVisible());
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getName());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(backgroundImage0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      assertNotNull(list1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("MzBZ^L55@[~Q'_", (PropertyChangeListener) null);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("MzBZ^L55@[~Q'_", propertyChangeListenerProxy0.getPropertyName());
      
      Home home2 = new Home();
      assertNotNull(home2);
      assertNull(home2.getName());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      
      home2.setModified(true);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertTrue(home2.isModified());
      assertNull(home2.getName());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      
      List<HomePieceOfFurniture> list2 = home2.getFurniture();
      assertNotNull(list2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotSame(list2, list1);
      assertTrue(home2.isModified());
      assertNull(home2.getName());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertTrue(list2.equals((Object)list1));
      
      Home home3 = new Home();
      assertNotNull(home3);
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isBasePlanLocked());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertNull(home3.getFurnitureSortedProperty());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertTrue(home3.isEmpty());
      assertFalse(home3.isModified());
      assertFalse(home3.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      
      CollectionListener<Wall> collectionListener1 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home3.removeWallsListener(collectionListener1);
      assertNotSame(home3, home2);
      assertNotSame(home3, home0);
      assertNotSame(home3, home1);
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isBasePlanLocked());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertNull(home3.getFurnitureSortedProperty());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertTrue(home3.isEmpty());
      assertFalse(home3.isModified());
      assertFalse(home3.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      
      home2.setRecovered(true);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotSame(home2, home3);
      assertTrue(home2.isModified());
      assertNull(home2.getName());
      assertTrue(home2.isEmpty());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertTrue(home2.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home3));
      
      long long0 = home1.getVersion();
      assertEquals(3700L, long0);
      assertNotSame(home0, home3);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home3);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home3));
      assertFalse(home1.equals((Object)home0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3198.852F, (-2805.16F), 3547.4F, 3198.852F, 0.0F);
      assertNotNull(dimensionLine0);
      assertEquals(3198.852F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(6014.1206F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-2805.16F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(3198.852F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3547.4F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      
      float[][] floatArray0 = new float[2][6];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 3547.4F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-2805.16F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-2805.16F);
      floatArray1[5] = 3547.4F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 3547.4F;
      dimensionLine0.setYStart(3198.852F);
      assertEquals(3198.852F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3198.852F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3547.4F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3198.852F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(348.54785F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 3547.4F;
      floatArray2[1] = 3547.4F;
      floatArray2[2] = (-2805.16F);
      floatArray2[4] = 3547.4F;
      floatArray2[5] = (-2805.16F);
      floatArray2[6] = 3198.852F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(1773.7F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3547.4F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      home0.deleteDimensionLine(dimensionLine0);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3198.852F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3198.852F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3547.4F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3198.852F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(348.54785F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list1 = home0.getSelectedItems();
      assertNotNull(list1);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureSortedProperty((HomePieceOfFurniture.SortableProperty) null);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertTrue(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNotNull(collection0);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNotNull(observerCamera0);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list1 = home0.getSelectedItems();
      assertNotNull(list1);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Room> class0 = Room.class;
      List<Room> list2 = Home.getSubList((List<? extends Selectable>) list1, class0);
      assertNotNull(list2);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertTrue(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home1.getFurnitureSortedProperty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      
      List<Level> list3 = Home.getLevelsSubList(list1);
      assertNotNull(list3);
      assertNotSame(home0, home1);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      
      Class<Object> class1 = Object.class;
      List<Object> list4 = Home.getSubList((List<? extends Selectable>) list2, class1);
      assertNotNull(list4);
      assertFalse(list4.contains(true));
      assertNotSame(home0, home1);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertNotSame(home0, home1);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<Wall> class0 = Wall.class;
      List<Wall> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Label label0 = linkedList0.poll();
      assertNull(label0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeLight> class1 = HomeLight.class;
      Class<Camera> class2 = Camera.class;
      List<Camera> list1 = Home.getSubList((List<? extends Selectable>) linkedList0, class2);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      home0.setStoredCameras(list1);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomeLight> list2 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      List<Wall> list3 = Home.getWallsSubList(list2);
      assertNotNull(list3);
      assertNotSame(list0, list3);
      assertNotSame(list3, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list3.equals((Object)list0));
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(level0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list0 = home0.getLevels();
      assertNotNull(list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Label> list3 = Home.getLabelsSubList(list2);
      assertNotNull(list3);
      assertNotSame(list1, list3);
      assertNotSame(list3, list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list3.equals((Object)list1));
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = new Level("^k{6gn ", 0.0F, (-2278.1287F), (-2278.1287F));
      assertNotNull(level0);
      assertEquals((-2278.1287F), level0.getFloorThickness(), 0.01F);
      assertEquals((-2278.1287F), level0.getHeight(), 0.01F);
      assertEquals("^k{6gn ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      float float0 = level0.getElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-2278.1287F), level0.getFloorThickness(), 0.01F);
      assertEquals((-2278.1287F), level0.getHeight(), 0.01F);
      assertEquals("^k{6gn ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      float float1 = level0.getElevation();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((-2278.1287F), level0.getFloorThickness(), 0.01F);
      assertEquals((-2278.1287F), level0.getHeight(), 0.01F);
      assertEquals("^k{6gn ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      float float2 = level0.getHeight();
      assertEquals((-2278.1287F), float2, 0.01F);
      assertEquals((-2278.1287F), level0.getFloorThickness(), 0.01F);
      assertEquals((-2278.1287F), level0.getHeight(), 0.01F);
      assertEquals("^k{6gn ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      home0.deleteLevel(level0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-2278.1287F), level0.getFloorThickness(), 0.01F);
      assertEquals((-2278.1287F), level0.getHeight(), 0.01F);
      assertEquals("^k{6gn ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      Class<HomePieceOfFurniture> class1 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class1);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<HomeDoorOrWindow> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Label> list2 = Home.getLabelsSubList(list0);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<HomePieceOfFurniture> list3 = Home.getFurnitureSubList(list1);
      assertNotNull(list3);
      assertNotSame(list0, list3);
      assertNotSame(list3, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list3.equals((Object)list0));
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.LEVEL;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertNotNull(collection0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertNull(string0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float0 = new Long(3700L);
      assertEquals(3700L, float0, 0.01F);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<Room> list0 = Home.getRoomsSubList(linkedList1);
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      home1.addSelectionListener((SelectionListener) null);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("F_Qh&~lDQ)jMuD#\"8");
      assertEquals("F_Qh&~lDQ)jMuD#\"8", home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertNotNull(compass0);
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertNull(string0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      home0.setSelectedItems(linkedList0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-455.3719F), 2083.1997F, 0.0F, 0.0F, 1114.408F, (-2.117F));
      assertNotNull(wall0);
      assertEquals(2132.3894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.117F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-455.3719F), wall0.getXStart(), 0.01F);
      assertEquals((-227.68594F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2132.3894F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1041.5999F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2083.1997F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1114.408F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getHeight();
      assertNotNull(float0);
      assertEquals((-2.117F), (float)float0, 0.01F);
      assertEquals(2132.3894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.117F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-455.3719F), wall0.getXStart(), 0.01F);
      assertEquals((-227.68594F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2132.3894F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1041.5999F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2083.1997F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1114.408F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float1 = new Float((-2.117F));
      assertNotNull(float1);
      assertEquals((-2.117F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.max(2045.1453F, (-110.96667F));
      assertEquals(2045.1453F, float2, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals(2132.3894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.117F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-455.3719F), wall0.getXStart(), 0.01F);
      assertEquals((-227.68594F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2132.3894F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1041.5999F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2083.1997F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1114.408F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      home0.addWall(wall0);
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(2132.3894F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.117F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-455.3719F), wall0.getXStart(), 0.01F);
      assertEquals((-227.68594F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2132.3894F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1041.5999F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2083.1997F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1114.408F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Label label0 = linkedList0.poll();
      assertNull(label0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerLast((Label) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Class<Camera> class0 = Camera.class;
      List<Camera> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        Home.duplicate(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture homePieceOfFurniture0 = mock(HomePieceOfFurniture.class, new ViolatedAssumptionAnswer());
      home0.deletePieceOfFurniture(homePieceOfFurniture0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertNull(string0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNotNull(observerCamera0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(backgroundImage0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertNotNull(home_PropertyArray0);
      assertEquals(12, home_PropertyArray0.length);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertNotNull(list1);
      assertNotSame(list1, list0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(list1.equals((Object)list0));
      
      Collection<Label> collection0 = home0.getLabels();
      assertNotNull(collection0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Room> list2 = Home.getRoomsSubList(linkedList0);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      home0.setBasePlanLocked(true);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection1 = home0.getLabels();
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(collection1.equals((Object)collection0));
      
      Object object0 = home0.getVisualProperty("!h,ox)Kx{V.~b");
      assertNull(object0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setCamera(camera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera1 = home0.getCamera();
      assertNotNull(camera1);
      assertSame(camera1, camera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertNull(camera1.getName());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label0 = new Label("]WZ%J[-V5PE~i6r)gH", 2.333333F, 921.4897F);
      assertNotNull(label0);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("]WZ%J[-V5PE~i6r)gH", label0.getText());
      assertEquals(921.4897F, label0.getY(), 0.01F);
      assertEquals(2.333333F, label0.getX(), 0.01F);
      
      Wall wall0 = new Wall(2.333333F, 921.4897F, 2.333333F, (-233.2F), (-233.2F));
      assertNotNull(wall0);
      assertEquals(2.333333F, wall0.getXEnd(), 0.01F);
      assertEquals(344.14484F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-233.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1154.6897F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-233.2F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.333333F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1154.6897F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(921.4897F, wall0.getYStart(), 0.01F);
      assertEquals(2.333333F, wall0.getXStart(), 0.01F);
      
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Label> linkedList1 = new LinkedList<Label>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(label0));
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList1.offerFirst(label0);
      assertTrue(linkedList1.contains(label0));
      assertTrue(boolean0);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("]WZ%J[-V5PE~i6r)gH", label0.getText());
      assertEquals(921.4897F, label0.getY(), 0.01F);
      assertEquals(2.333333F, label0.getX(), 0.01F);
      assertEquals(1, linkedList1.size());
      
      boolean boolean1 = linkedList1.offerLast(label0);
      assertTrue(linkedList1.contains(label0));
      assertTrue(boolean1);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("]WZ%J[-V5PE~i6r)gH", label0.getText());
      assertEquals(921.4897F, label0.getY(), 0.01F);
      assertEquals(2.333333F, label0.getX(), 0.01F);
      assertEquals(2, linkedList1.size());
      assertTrue(boolean1 == boolean0);
      
      List<Selectable> list0 = Home.duplicate(linkedList1);
      assertNotNull(list0);
      assertTrue(linkedList1.contains(label0));
      assertEquals(2, linkedList1.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(false);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(level0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property home_Property0 = Home.Property.PRINT;
      home0.addPropertyChangeListener(home_Property0, (PropertyChangeListener) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Home home0 = new Home(64.0F);
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Object object0 = home0.getVisualProperty("v");
      assertNull(object0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertNotNull(list1);
      assertFalse(list1.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list1);
      assertFalse(list1.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list2 = home0.getFurniture();
      assertNotNull(list2);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-236.98F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 3.1415927F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 3.1415927F;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = (-236.98F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 36.816666F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-236.98F);
      floatArray4[3] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 36.816666F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-100.0F);
      floatArray5[3] = 0.0F;
      floatArray5[4] = 36.816666F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 0.0F;
      floatArray0[5] = floatArray6;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(6, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      home0.addRoom(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals((-100.081665F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals((-100.081665F), room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(6, floatArray0.length);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(level0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertNotNull(collection0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection1 = home0.getWalls();
      assertNotNull(collection1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertNotNull(compass0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float float0 = home0.getWallHeight();
      assertEquals(64.0F, float0, 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float float1 = home0.getWallHeight();
      assertEquals(64.0F, float1, 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertEquals(64.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(float1, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }
}
