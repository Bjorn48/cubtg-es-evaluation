/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:47:16 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4InclusionModel_ESTest extends Minimal4InclusionModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(131, 0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, miniSATRestarts0, mUSLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      int[] intArray0 = solver0.findModel();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, iVecInt0, solutionFoundListener0);
      int[] intArray1 = minimal4InclusionModel0.modelWithInternalVariables();
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = (ClausalCardinalitiesDecorator<GateTranslator>) mock(ClausalCardinalitiesDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(clausalCardinalitiesDecorator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(clausalCardinalitiesDecorator0).modelWithInternalVariables();
      doReturn(1833, (-2384)).when(clausalCardinalitiesDecorator0).nVars();
      NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>>(clausalCardinalitiesDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(negationDecorator0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solutionCounter0, 0L, solutionFoundListener0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIteratorToSATAdapter0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      iSolver0.isSatisfiable();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      int[] intArray0 = minimal4InclusionModel0.model();
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = (ClausalCardinalitiesDecorator<GateTranslator>) mock(ClausalCardinalitiesDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(clausalCardinalitiesDecorator0).nVars();
      NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>>(clausalCardinalitiesDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(negationDecorator0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solutionCounter0, 0L, solutionFoundListener0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIteratorToSATAdapter0);
      VecInt vecInt0 = new VecInt(3930);
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = (ClausalCardinalitiesDecorator<GateTranslator>) mock(ClausalCardinalitiesDecorator.class, new ViolatedAssumptionAnswer());
      NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>>(clausalCardinalitiesDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(negationDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(solutionCounter0, (IVecInt) null, (SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(false, gateTranslatorArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[5];
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = (ClausalCardinalitiesDecorator<GateTranslator>) mock(ClausalCardinalitiesDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(clausalCardinalitiesDecorator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(clausalCardinalitiesDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0).when(clausalCardinalitiesDecorator0).model();
      doReturn((Object) intArray0, (Object) null).when(clausalCardinalitiesDecorator0).modelWithInternalVariables();
      doReturn(1833, 0).when(clausalCardinalitiesDecorator0).nVars();
      NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>>(clausalCardinalitiesDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(negationDecorator0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[5];
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = (ClausalCardinalitiesDecorator<GateTranslator>) mock(ClausalCardinalitiesDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(clausalCardinalitiesDecorator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(clausalCardinalitiesDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(clausalCardinalitiesDecorator0).model();
      doReturn(intArray0).when(clausalCardinalitiesDecorator0).modelWithInternalVariables();
      doReturn(1792, 0).when(clausalCardinalitiesDecorator0).nVars();
      NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>>(clausalCardinalitiesDecorator0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(negationDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(singleSolutionDetector0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(131, 0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, miniSATRestarts0, mUSLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0, iVecInt0, solutionFoundListener0);
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable(iVecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[5];
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(false, gateTranslatorArray0);
      IConstr iConstr0 = manyCore0.addExactly((IVecInt) null, 1833);
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = (ClausalCardinalitiesDecorator<GateTranslator>) mock(ClausalCardinalitiesDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(iConstr0, iConstr0).when(clausalCardinalitiesDecorator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, true).when(clausalCardinalitiesDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) null).when(clausalCardinalitiesDecorator0).model();
      doReturn((Object) intArray0, (Object) intArray0, (Object) null).when(clausalCardinalitiesDecorator0).modelWithInternalVariables();
      doReturn(1833, 0).when(clausalCardinalitiesDecorator0).nVars();
      doReturn(false).when(clausalCardinalitiesDecorator0).removeSubsumedConstr(any(org.sat4j.specs.IConstr.class));
      NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>>(clausalCardinalitiesDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(negationDecorator0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solutionCounter0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4InclusionModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[5];
      ClausalCardinalitiesDecorator<GateTranslator> clausalCardinalitiesDecorator0 = (ClausalCardinalitiesDecorator<GateTranslator>) mock(ClausalCardinalitiesDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(clausalCardinalitiesDecorator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(clausalCardinalitiesDecorator0).modelWithInternalVariables();
      doReturn(1833, (-2384)).when(clausalCardinalitiesDecorator0).nVars();
      NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<GateTranslator>>(clausalCardinalitiesDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(negationDecorator0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solutionCounter0, 0L, solutionFoundListener0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIteratorToSATAdapter0);
      int[] intArray1 = minimal4InclusionModel0.modelWithInternalVariables();
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3930);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0);
  }
}
