/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 00:24:36 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.Legend;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.model.EditableChartDataModel;
import de.progra.charting.model.ObjectChartDataModel;
import de.progra.charting.render.RowColorModel;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import javax.swing.JMenuBar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Legend_ESTest extends Legend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$v!s-;\"vl;)n=(f&(";
      stringArray0[1] = "p\"nyxP33U2p";
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, doubleArray0, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        legend0.paintDefault(graphics2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null string passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((float) 1);
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      double[] doubleArray0 = new double[2];
      String[] stringArray0 = new String[1];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(numberArray0, doubleArray0, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      RowColorModel rowColorModel1 = legend0.getRowColorModel();
      assertSame(rowColorModel0, rowColorModel1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((float) 1);
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      double[] doubleArray0 = new double[2];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bW=|`";
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(numberArray0, doubleArray0, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals(88, dimension0.width);
      assertEquals(26, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(defaultChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      legend0.inner_margin = 0;
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals(0, dimension0.height);
      assertEquals((-2147483613), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Legend legend0 = new Legend();
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      legend0.inner_margin = (-1750);
      RowColorModel rowColorModel0 = new RowColorModel(editableChartDataModel0);
      legend0.setRowColorModel(rowColorModel0);
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals(Integer.MIN_VALUE, dimension0.width);
      assertEquals((-1750), dimension0.height);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      legend0.setFont((Font) null);
      Font font0 = legend0.getFont();
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Font font0 = legend0.getFont();
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance((-1.0), 13);
      Font font1 = font0.deriveFont(13, affineTransform0);
      legend0.setFont(font1);
      assertFalse(font0.isBold());
      
      Font font2 = legend0.getFont();
      assertEquals("Helvetica", font2.getName());
      assertEquals(14, font2.getSize());
      assertEquals(1, font2.getStyle());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Legend legend0 = new Legend();
      Font font0 = legend0.getFont();
      Font font1 = font0.deriveFont(0.0F);
      legend0.font = font1;
      assertEquals(14.0F, font0.getSize2D(), 0.01F);
      
      Font font2 = legend0.getFont();
      assertEquals("Helvetica", font2.getName());
      assertFalse(font2.isBold());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      RowColorModel rowColorModel0 = RowColorModel.getInstance(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      legend0.setColorBox((Rectangle) null);
      Rectangle rectangle0 = legend0.getColorBox();
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(9, 1, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((float) 1);
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      double[] doubleArray0 = new double[2];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "bW=|`";
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(numberArray0, doubleArray0, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      legend0.paintDefault(graphics2D0);
      Rectangle rectangle0 = legend0.getColorBox();
      assertEquals(20.0, rectangle0.getMaxY(), 0.01);
      assertEquals(17.5, rectangle0.getCenterX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Legend legend0 = new Legend();
      JMenuBar jMenuBar0 = new JMenuBar();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1.0));
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0, point2D_Double0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      Rectangle rectangle1 = jMenuBar0.getBounds(rectangle0);
      legend0.setColorBox(rectangle1);
      Rectangle rectangle2 = legend0.getColorBox();
      assertEquals(0, rectangle2.width);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Legend legend0 = new Legend();
      Point2D.Double point2D_Double0 = new Point2D.Double(0.0, (-1.0));
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0, point2D_Double0);
      Rectangle rectangle0 = line2D_Double0.getBounds();
      legend0.setColorBox(rectangle0);
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals(0, rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c64p|F<";
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(doubleArray0, doubleArray0, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      legend0.inner_margin = (-1216);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      legend0.paintDefault(graphics2D0);
      Rectangle rectangle0 = legend0.getColorBox();
      assertEquals((-1201.0), rectangle0.getMaxY(), 0.01);
      assertEquals((-1191.0), rectangle0.getMaxX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Legend legend0 = new Legend();
      // Undeclared exception!
      try { 
        legend0.paintDefault((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Legend", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Legend legend0 = new Legend();
      // Undeclared exception!
      try { 
        legend0.getPreferredSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Legend", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Legend legend0 = new Legend();
      RowColorModel rowColorModel0 = legend0.getRowColorModel();
      assertNull(rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Number[][] numberArray0 = new Number[1][4];
      Number[] numberArray1 = new Number[1];
      Float float0 = new Float((float) 1);
      numberArray1[0] = (Number) float0;
      numberArray0[0] = numberArray1;
      double[] doubleArray0 = new double[2];
      String[] stringArray0 = new String[1];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(numberArray0, doubleArray0, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      // Undeclared exception!
      try { 
        legend0.getPreferredSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null string passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Dimension dimension0 = legend0.getPreferredSize();
      Rectangle rectangle0 = new Rectangle(dimension0);
      legend0.setColorBox(rectangle0);
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals(5, rectangle1.height);
      assertEquals((-2147483603), rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Legend legend0 = new Legend();
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(editableChartDataModel0);
      legend0.setRowColorModel(rowColorModel0);
      RowColorModel rowColorModel1 = legend0.getRowColorModel();
      assertSame(rowColorModel1, rowColorModel0);
  }
}
