/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 14:47:49 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.unsupervised.attribute.NumericTransform;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumericTransform_ESTest extends NumericTransform_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      numericTransform0.setAttributeIndices("AauT");
      numericTransform0.getAttributeIndices();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String[] stringArray0 = new String[1];
      try { 
        numericTransform0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      // Undeclared exception!
      try { 
        numericTransform0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      numericTransform0.setOptions((String[]) null);
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      
      numericTransform0.setClassName("Input file formats differ.\n");
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      // Undeclared exception!
      try { 
        numericTransform0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      numericTransform0.listOptions();
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      assertEquals("abs", numericTransform0.getMethodName());
      
      numericTransform0.setMethodName("#fkbtja_X?68j$>w");
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.getMethodName();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.getClassName();
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      numericTransform0.setInvertSelection(false);
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      numericTransform0.getInvertSelection();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      numericTransform0.getAttributeIndices();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      numericTransform0.setAttributeIndices("AauT");
      String[] stringArray0 = numericTransform0.getOptions();
      assertEquals(7, stringArray0.length);
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      SparseInstance sparseInstance0 = new SparseInstance(1253);
      try { 
        numericTransform0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.NumericTransform", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.getRevision();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      int[] intArray0 = new int[2];
      numericTransform0.setAttributeIndicesArray(intArray0);
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.invertSelectionTipText();
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("Whether to process the inverse of the given attribute ranges.", string0);
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.globalInfo();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("Transforms numeric attributes using a given transformation method.", string0);
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("~cR-_`}H\" cBXO", arrayList0, 93);
      // Undeclared exception!
      try { 
        numericTransform0.setInputFormat(instances0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      NumericTransform.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String[] stringArray0 = numericTransform0.getOptions();
      numericTransform0.setOptions(stringArray0);
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals(7, stringArray0.length);
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.classNameTipText();
      assertEquals("java.lang.Math", numericTransform0.getClassName());
      assertEquals("Name of the class containing the method used for the transformation.", string0);
      assertEquals("abs", numericTransform0.getMethodName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NumericTransform numericTransform0 = new NumericTransform();
      String string0 = numericTransform0.methodNameTipText();
      assertEquals("abs", numericTransform0.getMethodName());
      assertEquals("Name of the method used for the transformation.", string0);
      assertEquals("java.lang.Math", numericTransform0.getClassName());
  }
}
