* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 9853
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550518809780
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2094240837696335
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.12687585266030013
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.10666666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.25196850393700787
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2047244094488189
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1145975443383356
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[MASTER] 20:41:48.449 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielWL> canUseFunctionalMocks=false, canBeMocked: false
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 273
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.23647469458987783
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1432469304229195
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.11866666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.08270676691729323
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.29133858267716534
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12141882673942701
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 345
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.262652705061082
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.16098226466575716
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.136
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.09022556390977443
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3228346456692913
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1432469304229195
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 413
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2774869109947644
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1800818553888131
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.13733333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.10902255639097744
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.36220472440944884
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.30708661417322836
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15552523874488403
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 501
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28970331588132636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1882673942701228
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.15733333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.12030075187969924
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3543307086614173
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17462482946793997
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 572
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2931937172774869
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1937244201909959
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.12406015037593984
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.44881889763779526
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3779527559055118
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17871759890859482
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 657
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.29842931937172773
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19918144611186903
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16133333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
* Search finished after 125s and 6 generations, 12269 statements, best individual has fitness: 2995.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.29842931937172773
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19918144611186903
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16133333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.29842931937172773
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19918144611186903
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16133333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 20:43:38.992 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 31%
* Total number of goals: 1146
* Number of covered goals: 360
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 20%
* Total number of goals: 733
* Number of covered goals: 146
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 28
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 17%
* Total number of goals: 750
* Number of covered goals: 130
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 13%
* Total number of goals: 266
* Number of covered goals: 35
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 127
* Number of covered goals: 64
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 39%
* Total number of goals: 127
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 18%
* Total number of goals: 733
* Number of covered goals: 135
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.29842931937172773
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19918144611186903
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16133333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
* Generated 106 tests with total length 2424
* Resulting test suite's coverage: 35% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 20:44:35.698 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6887666666666666% of time used, but only 19/106 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 2%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.29842931937172773
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19918144611186903
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.16133333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.13157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3858267716535433
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18417462482946795
* Compiling and checking tests
[MASTER] 20:45:08.604 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 20:45:08.634 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 20:45:15.199 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 20:45:15.201 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
SearchParams searchParams0 = new SearchParams(0);
SearchParams searchParams1 = new SearchParams(0);
searchParams0.getVarDecay();
SearchParams searchParams2 = new SearchParams(0, 5);
searchParams2.getClaDecay();
LubyRestarts lubyRestarts0 = new LubyRestarts(0);
MUSLauncher mUSLauncher0 = new MUSLauncher();
String[] stringArray0 = new String[1];
stringArray0[0] = "c ";
mUSLauncher0.run(stringArray0);

[MASTER] 20:45:18.474 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 20:45:18.476 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
SearchParams searchParams0 = new SearchParams(1.0, 1.0, (-2328.61), (-2278));
searchParams0.getConflictBoundIncFactor();
searchParams0.getInitConflictBound();
searchParams0.getConflictBoundIncFactor();
searchParams0.getInitConflictBound();
VarOrderHeap varOrderHeap0 = new VarOrderHeap();
varOrderHeap0.assignLiteral(6);
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1.0);
ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
LubyRestarts lubyRestarts0 = new LubyRestarts(0);
SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
glucose21Restarts0.onRestart();
MUSLauncher mUSLauncher0 = new MUSLauncher();
mUSLauncher0.log((String) null);
mUSLauncher0.log((String) null);
Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, glucose21Restarts0, mUSLauncher0);
RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, restartStrategy0);
solver1.reduceDB();

[MASTER] 20:45:30.294 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 20:45:30.295 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
SearchParams searchParams0 = new SearchParams();
searchParams0.setClaDecay((-962.14));
FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
ArminRestarts arminRestarts0 = new ArminRestarts();
Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
VecInt vecInt0 = (VecInt)solver0.trailLim;
vecInt0.iterator();
Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
LubyRestarts lubyRestarts0 = new LubyRestarts(180);
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
glucose21Restarts0.onRestart();
Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
fixedLengthLearning1.setMaxLength(0);
SearchParams searchParams1 = new SearchParams(2366.37943315, 2366.37943315, (-918.19), Integer.MIN_VALUE);
Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, naturalStaticOrder0, glucose21Restarts0);
solver0.addConstr(constr0);
FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>(180);
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
cardinalityDataStructureYanMin0.setUnitPropagationListener(solver2);
Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning2, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
solver1.getRestartStrategy();
assertEquals(1, solver1.nVars());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning3 = new FixedLengthLearning<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
Solver<CardinalityDataStructure> solver4 = new Solver<CardinalityDataStructure>(fixedLengthLearning3, cardinalityDataStructure0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
solver4.createBlockingClauseForCurrentModel();
assertFalse(solver4.isDBSimplificationAllowed());


[MASTER] 20:45:32.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 20:45:32.163 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

pureOrder0.setVarDecay(1);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 1);
assertNotNull(tabuListDecorator0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());

solver0.dsfactory = mixedDataStructureDanielHT0;
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());

vecInt0.set(1, (-5676));
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

solver0.addParity(vecInt0, true);

[MASTER] 20:45:33.734 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 20:45:33.745 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

searchParams0.setClaDecay((-962.14));
assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(125);
assertNotNull(fixedLengthLearning0);
assertEquals(125, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder1);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder1, arminRestarts0);
assertNotNull(solver0);
assertEquals(125, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

VecInt vecInt0 = (VecInt)solver0.trailLim;
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IteratorInt iteratorInt0 = vecInt0.iterator();
assertNotNull(iteratorInt0);
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertEquals(125, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
assertNotNull(constr0);
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertEquals(125, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(constr0.learnt());
assertFalse(constr0.simplify());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertFalse(constr0.isSatisfied());
assertEquals(0, constr0.size());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.canBePropagatedMultipleTimes());
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

LubyRestarts lubyRestarts0 = new LubyRestarts(180);
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(180, lubyRestarts0.getFactor());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder1, arminRestarts0, (ILogAble) null);
assertNotNull(solver1);
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals((-962.14), searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning1);
assertEquals(3, fixedLengthLearning1.getMaxLength());

fixedLengthLearning1.setMaxLength(0);
assertEquals(0, fixedLengthLearning1.getMaxLength());

SearchParams searchParams1 = new SearchParams(2366.37943315, 2366.37943315, (-918.19), Integer.MIN_VALUE);
assertNotNull(searchParams1);
assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, naturalStaticOrder0, glucose21Restarts0);
assertNotNull(solver2);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
assertEquals(7, solver2.nVars());
assertEquals(8, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(7, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(125, fixedLengthLearning0.getMaxLength());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(solver2.equals((Object)solver0));

LearntWLClause learntWLClause0 = (LearntWLClause)solver0.addConstr(constr0);
assertNotNull(learntWLClause0);
assertSame(learntWLClause0, constr0);
assertNotSame(naturalStaticOrder1, naturalStaticOrder0);
assertNotSame(solver0, solver2);
assertSame(constr0, learntWLClause0);
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertFalse(learntWLClause0.isSatisfied());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.simplify());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, learntWLClause0.size());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertTrue(learntWLClause0.learnt());
assertEquals(125, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder1.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(9, solver0.nVars());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertTrue(constr0.learnt());
assertFalse(constr0.simplify());
assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
assertTrue(constr0.canBeSatisfiedByCountingLiterals());
assertFalse(constr0.isSatisfied());
assertEquals(0, constr0.size());
assertEquals(0.0, constr0.getActivity(), 0.01);
assertFalse(constr0.canBePropagatedMultipleTimes());
assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
assertFalse(solver0.equals((Object)solver2));

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>(180);
assertNotNull(fixedLengthLearning2);
assertEquals(180, fixedLengthLearning2.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning2, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
assertNotNull(solver3);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(Integer.MIN_VALUE, searchParams1.getInitConflictBound());
assertEquals(2366.37943315, searchParams1.getClaDecay(), 0.01);
assertEquals((-918.19), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2366.37943315, searchParams1.getVarDecay(), 0.01);
assertEquals(180, fixedLengthLearning2.getMaxLength());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isVerbose());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(searchParams1.equals((Object)searchParams0));

solver3.cancelUntil((-1585));

[MASTER] 20:45:34.134 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 20:45:34.138 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertNotNull(fixedPeriodRestarts0);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
assertNotNull(solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = (NegativeLiteralSelectionStrategy)naturalStaticOrder0.getPhaseSelectionStrategy();
assertNotNull(negativeLiteralSelectionStrategy0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());

levelBasedVarOrderHeap0.setPhaseSelectionStrategy(negativeLiteralSelectionStrategy0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) fixedPeriodRestarts0, learnedConstraintsEvaluationType0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
assertNotNull(solver1);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());

miniSATLearning0.setDataStructureFactory(cardinalityDataStructureYanMax0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-1585));
assertNotNull(percentLengthLearning0);
assertEquals((-1585), percentLengthLearning0.getLimit());

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, (SearchParams) null, naturalStaticOrder0, fixedPeriodRestarts0);
assertNotNull(solver2);
assertEquals((-1585), percentLengthLearning0.getLimit());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

ILogAble iLogAble0 = solver2.out;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(clauseOnlyLearning1, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
assertNotNull(solver3);
assertEquals((-1585), percentLengthLearning0.getLimit());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(5, solver2.nVars());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(4, solver3.nVars());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.nConstraints());
assertEquals(2147483, solver3.getTimeout());
assertEquals(5, solver3.newVar());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(4, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertFalse(solver3.equals((Object)solver2));

solver3.truthValue((-1585));

[MASTER] 20:45:38.958 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 20:45:38.960 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(298);
assertNotNull(fixedLengthLearning0);
assertEquals(298, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(298, 298);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(298, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 1000);
assertNotNull(tabuListDecorator0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

tabuListDecorator0.varDecayActivity();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

int int0 = 0;
LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertNotNull(lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(298, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(298, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(298.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(searchParams0.equals((Object)searchParams1));

solver0.undoOne();

[MASTER] 20:45:39.677 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 20:45:39.694 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams(0);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
noRestarts0.onRestart();
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

percentLengthLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
assertEquals(10, percentLengthLearning0.getLimit());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0);
assertNotNull(solver0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(searchParams0.equals((Object)searchParams1));

ILogAble iLogAble0 = solver0.getLogger();
assertNotNull(iLogAble0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(searchParams0.equals((Object)searchParams1));

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(searchParams0.equals((Object)searchParams1));

IVecInt iVecInt0 = solver1.getOutLearnt();
assertNotNull(iVecInt0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(8, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertFalse(searchParams0.equals((Object)searchParams1));

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(426);
assertNotNull(percentLengthLearning1);
assertEquals(426, percentLengthLearning1.getLimit());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

SearchParams searchParams2 = new SearchParams(2824);
assertNotNull(searchParams2);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(2824, searchParams2.getInitConflictBound());
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));

double double0 = searchParams2.getClaDecay();
assertEquals(0.999, double0, 0.01);
assertNotSame(searchParams2, searchParams0);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(2824, searchParams2.getInitConflictBound());
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, searchParams2, pureOrder0, noRestarts0);
assertNotNull(solver2);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(2824, searchParams2.getInitConflictBound());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(426, percentLengthLearning1.getLimit());
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));

int int0 = solver2.nextFreeVarId(false);
assertEquals(3, int0);
assertNotSame(searchParams2, searchParams0);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(2824, searchParams2.getInitConflictBound());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(426, percentLengthLearning1.getLimit());
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));

solver2.setExpectedNumberOfClauses(0);
assertNotSame(searchParams2, searchParams0);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(2824, searchParams2.getInitConflictBound());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(5, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(426, percentLengthLearning1.getLimit());
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax1);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(varOrderHeap0).toString();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

randomWalkDecorator0.assignLiteral((-3224));
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax1, randomWalkDecorator0, noRestarts0);
assertNotNull(solver3);
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver3.isVerbose());
assertEquals(0, solver3.nConstraints());
assertEquals(2147483, solver3.getTimeout());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.decisionLevel());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.nVars());
assertFalse(solver3.isSolverKeptHot());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertFalse(solver3.equals((Object)solver0));

solver0.sortOnActivity();
assertNotSame(searchParams0, searchParams2);
assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
assertNotSame(solver0, solver3);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(searchParams0.equals((Object)searchParams2));
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
assertFalse(solver0.equals((Object)solver3));


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
