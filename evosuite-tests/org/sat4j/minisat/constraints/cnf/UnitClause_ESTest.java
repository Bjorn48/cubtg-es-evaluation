/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:31:46 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UnitClause_ESTest extends UnitClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1486));
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(subModelIterator0).nVars();
      ClausalCardinalitiesDecorator<SubModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SubModelIterator>(subModelIterator0, (EncodingStrategyAdapter) null);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(clausalCardinalitiesDecorator0);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructure0).getVocabulary();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt1 = solver0.dimacs2internal(iVecInt0);
      unitClause0.calcReasonOnTheFly(1796, iVecInt1, iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.equals((Object)iVecInt1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      unitClause0.activity = 2612.9242101325813;
      double double0 = unitClause0.getActivity();
      assertEquals(2612.9242101325813, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-657));
      unitClause0.activity = (-992.007);
      double double0 = unitClause0.getActivity();
      assertEquals((-992.007), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      int int0 = unitClause0.get(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(181);
      int int0 = unitClause0.get(0);
      assertEquals(181, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-3652));
      // Undeclared exception!
      try { 
        unitClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, arminRestarts0);
      UnitClause unitClause0 = new UnitClause(1585);
      // Undeclared exception!
      try { 
        unitClause0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1585
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      // Undeclared exception!
      try { 
        unitClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1889);
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ASolverFactory<GroupClauseSelectorSolver<SubModelIterator>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<SubModelIterator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<SubModelIterator>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<SubModelIterator>>(aSolverFactory0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, arminRestarts0, basicLauncher0);
      // Undeclared exception!
      try { 
        unitClause0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1888
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(subModelIterator0).nVars();
      ClausalCardinalitiesDecorator<SubModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SubModelIterator>(subModelIterator0, (EncodingStrategyAdapter) null);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(clausalCardinalitiesDecorator0);
      unitClause0.calcReason((-1), iVecInt0);
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      unitClause0.calcReason((-1077), (IVecInt) null);
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1345));
      boolean boolean0 = unitClause0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ASolverFactory<GroupClauseSelectorSolver<SubModelIterator>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<SubModelIterator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<SubModelIterator>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<SubModelIterator>>(aSolverFactory0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, arminRestarts0, basicLauncher0);
      unitClause0.assertConstraint(solver0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      String string0 = unitClause0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(65535);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("");
      String string0 = unitClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("-32767", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(580);
      // Undeclared exception!
      try { 
        unitClause0.get(580);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-657));
      int int0 = unitClause0.get((-657));
      assertEquals((-657), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, arminRestarts0);
      UnitClause unitClause0 = new UnitClause(13);
      unitClause0.remove(solver0);
      assertEquals(2147483, solver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-486));
      // Undeclared exception!
      try { 
        unitClause0.calcReasonOnTheFly((-1), (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(16);
      unitClause0.setActivity(16);
      assertEquals(16.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1668);
      // Undeclared exception!
      try { 
        unitClause0.propagate((UnitPropagationListener) null, 384);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(1);
      boolean boolean0 = unitClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(5);
      unitClause0.register();
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1486));
      boolean boolean0 = unitClause0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(6009);
      // Undeclared exception!
      try { 
        unitClause0.locked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1));
      int int0 = unitClause0.getAssertionLevel((IVecInt) null, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(512);
      // Undeclared exception!
      try { 
        unitClause0.rescaleBy(512);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-253));
      boolean boolean0 = unitClause0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-1329));
      String string0 = unitClause0.toString((VarMapper) null);
      assertEquals("--665", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(10);
      // Undeclared exception!
      try { 
        unitClause0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ASolverFactory<GroupClauseSelectorSolver<SubModelIterator>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<SubModelIterator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<SubModelIterator>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<SubModelIterator>>(aSolverFactory0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, arminRestarts0, basicLauncher0);
      UnitClause unitClause0 = new UnitClause(0);
      unitClause0.assertConstraintIfNeeded(solver0);
      assertFalse(unitClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-3));
      unitClause0.forwardActivity((-1959));
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      unitClause0.incActivity(324.149);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-657));
      double double0 = unitClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(3436);
      // Undeclared exception!
      try { 
        unitClause0.propagatePi((MandatoryLiteralListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(90);
      boolean boolean0 = unitClause0.isSatisfied();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-277));
      int int0 = unitClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause((-657));
      int int0 = unitClause0.size();
      assertEquals(1, int0);
  }
}
