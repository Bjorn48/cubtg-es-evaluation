/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:21:52 GMT 2019
 */

package visu.handball.moves.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.ActionEvent;
import javax.swing.plaf.synth.SynthCheckBoxMenuItemUI;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import visu.handball.moves.actions.StartAnimationAction;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.player.Offender;
import visu.handball.moves.model.player.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StartAnimationAction_ESTest extends StartAnimationAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      StartAnimationAction startAnimationAction0 = new StartAnimationAction(handballModel0);
      SynthSpinnerUI synthSpinnerUI0 = new SynthSpinnerUI();
      startAnimationAction0.addPropertyChangeListener(synthSpinnerUI0);
      // Undeclared exception!
      try { 
        startAnimationAction0.modelChanged();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // visu.handball.moves.actions.StartAnimationAction cannot be cast to javax.swing.JSpinner
         //
         verifyException("javax.swing.plaf.synth.SynthSpinnerUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      StartAnimationAction startAnimationAction0 = new StartAnimationAction(handballModel0);
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(player0).getCurrent_x();
      doReturn(0, 0).when(player0).getCurrent_y();
      doReturn(0, 0, 0, 0).when(player0).getPlayerNumber();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-613));
      handballModel0.addMoveEvent(moveEvent0);
      ActionEvent actionEvent0 = new ActionEvent("ShortDescr{Ziption", 0, "ShortDescr{Ziption");
      // Undeclared exception!
      try { 
        startAnimationAction0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.model.MoveEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StartAnimationAction startAnimationAction0 = null;
      try {
        startAnimationAction0 = new StartAnimationAction((HandballModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.actions.StartAnimationAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      handballModel0.getFirstBallOwner();
      MoveEvent moveEvent0 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Offender) null, (Player) null).when(moveEvent0).getPlayer();
      doReturn(0, 0, 0, 0).when(moveEvent0).getSequenceNr();
      doReturn(true, false).when(moveEvent0).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent0);
      SynthCheckBoxMenuItemUI synthCheckBoxMenuItemUI0 = new SynthCheckBoxMenuItemUI();
      ActionEvent actionEvent0 = new ActionEvent(synthCheckBoxMenuItemUI0, 1, "0(]j]<D%M", 0);
      StartAnimationAction startAnimationAction0 = new StartAnimationAction(handballModel0);
      startAnimationAction0.actionPerformed(actionEvent0);
      startAnimationAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      StartAnimationAction startAnimationAction0 = new StartAnimationAction(handballModel0);
      HandballModel.State handballModel_State0 = HandballModel.State.FULL_ANIMATION_ENDED;
      handballModel0.setState(handballModel_State0);
      assertEquals(0, handballModel0.getAcutalSequenceNr());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      StartAnimationAction startAnimationAction0 = new StartAnimationAction(handballModel0);
      handballModel0.stopAnimation();
      assertEquals(HandballModel.State.ANIMATION, handballModel0.getState());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      MoveEvent moveEvent0 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null, (Player) null).when(moveEvent0).getPlayer();
      doReturn(100, 100, 0, (-1342)).when(moveEvent0).getSequenceNr();
      doReturn(false, true).when(moveEvent0).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent0);
      ActionEvent actionEvent0 = new ActionEvent("ShortDescr{Ziption", 100, (String) null);
      StartAnimationAction startAnimationAction0 = new StartAnimationAction(handballModel0);
      startAnimationAction0.actionPerformed(actionEvent0);
      startAnimationAction0.actionPerformed(actionEvent0);
      assertEquals(0L, actionEvent0.getWhen());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      StartAnimationAction startAnimationAction0 = new StartAnimationAction(handballModel0);
      // Undeclared exception!
      try { 
        startAnimationAction0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
