/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 09:11:46 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.AspectRatio;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.Wall;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Home home0 = new Home(26.54726F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-100.0F), (-1468.0F), 1500.0F, (-1468.0F), 1500.0F);
      assertEquals((-1468.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1468.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1600.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1600.0F, wall0.getLength(), 0.01F);
      assertEquals(1500.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1468.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1500.0F, wall0.getThickness(), 0.01F);
      assertEquals(700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1468.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1468.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1600.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1600.0F, wall0.getLength(), 0.01F);
      assertEquals(1500.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1468.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1500.0F, wall0.getThickness(), 0.01F);
      assertEquals(700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertEquals(1500.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1600.0F, wall1.getLength(), 0.01F);
      assertEquals((-1468.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1500.0F, wall1.getThickness(), 0.01F);
      assertEquals(700.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1468.0F), wall1.getYStart(), 0.01F);
      assertEquals(1600.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1468.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-100.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1468.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1468.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1600.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1600.0F, wall0.getLength(), 0.01F);
      assertEquals(1500.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1468.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1500.0F, wall0.getThickness(), 0.01F);
      assertEquals(700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertEquals(1500.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1600.0F, wall1.getLength(), 0.01F);
      assertEquals((-1468.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1500.0F, wall1.getThickness(), 0.01F);
      assertEquals(700.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1468.0F), wall1.getYStart(), 0.01F);
      assertEquals(1600.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1468.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-100.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      home0.addWall(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1468.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1468.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1600.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1600.0F, wall0.getLength(), 0.01F);
      assertEquals(1500.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1468.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1500.0F, wall0.getThickness(), 0.01F);
      assertEquals(700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom((Room) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(collection0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage1 = home0.getBackgroundImage();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(backgroundImage1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deselectItem((Selectable) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string1 = home0.getName();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(string1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null, 2007);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2007, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Home home0 = new Home(4320.0884F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(4320.0884F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, home0.getVersion());
      assertEquals(4320.0884F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(collection0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertEquals(4320.0884F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      boolean boolean0 = linkedList0.add(homePieceOfFurniture_SortableProperty0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(homePieceOfFurniture_SortableProperty0));
      
      Class<Label> class0 = Label.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 3700L, 48.616665F, (-1408.853F), (-1408.853F));
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1408.853F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(48.616665F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(5109.0845F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-1408.853F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      Level level0 = new Level("PY", 4098.649F, 3700L, (-2955.4F));
      assertEquals(4098.649F, level0.getElevation(), 0.01F);
      assertEquals("PY", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-2955.4F), level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(4098.649F, level0.getElevation(), 0.01F);
      assertEquals("PY", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-2955.4F), level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("PY", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-2955.4F), level1.getHeight(), 0.01F);
      assertEquals(4098.649F, level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      home0.setSelectedLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(4098.649F, level0.getElevation(), 0.01F);
      assertEquals("PY", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-2955.4F), level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("PY", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-2955.4F), level1.getHeight(), 0.01F);
      assertEquals(4098.649F, level1.getElevation(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Home home0 = new Home((-1425.6274F));
      assertEquals((-1425.6274F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertEquals((-1425.6274F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      assertEquals((-1425.6274F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setVisualProperty("com.eteks.sweethome3d.model.Home$3", "com.eteks.sweethome3d.model.Home$3");
      assertEquals((-1425.6274F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals((-1425.6274F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener1 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener1);
      assertEquals((-1425.6274F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener2 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener2);
      assertEquals((-1425.6274F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label0 = new Label("+%Xc5%)/N(o(V[:[ ", (-1021.9868F), (-1021.9868F));
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-1021.9868F), label0.getX(), 0.01F);
      assertEquals((-1021.9868F), label0.getY(), 0.01F);
      assertEquals("+%Xc5%)/N(o(V[:[ ", label0.getText());
      assertNotNull(label0);
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home1.getSelectedLevel();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener3 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addRoomsListener(collectionListener3);
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      label0.setLevel((Level) null);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-1021.9868F), label0.getX(), 0.01F);
      assertEquals((-1021.9868F), label0.getY(), 0.01F);
      assertEquals("+%Xc5%)/N(o(V[:[ ", label0.getText());
      
      home0.addLabel(label0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals((-1425.6274F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-1021.9868F), label0.getX(), 0.01F);
      assertEquals((-1021.9868F), label0.getY(), 0.01F);
      assertEquals("+%Xc5%)/N(o(V[:[ ", label0.getText());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setBackgroundImage((BackgroundImage) null);
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      System.setCurrentTimeMillis(0L);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home0 = new Home(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertEquals(0, linkedList0.size());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.REVERSE_LANDSCAPE;
      Float float0 = Float.valueOf((-82.03419F));
      assertEquals((-82.03419F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 3700L, (-2780.54F), 794.0F, (-2780.54F), 2156.8F, (-2780.54F), false, false, false, float0, "!", "");
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.REVERSE_LANDSCAPE, homePrint0.getPaperOrientation());
      assertEquals(794.0F, homePrint0.getPaperTopMargin(), 0.01F);
      assertFalse(homePrint0.isFurniturePrinted());
      assertEquals("", homePrint0.getFooterFormat());
      assertFalse(homePrint0.isPlanPrinted());
      assertFalse(homePrint0.isView3DPrinted());
      assertEquals(2156.8F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals("!", homePrint0.getHeaderFormat());
      assertEquals((-2780.54F), homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals((-2780.54F), homePrint0.getPaperHeight(), 0.01F);
      assertEquals((-82.03419F), homePrint0.getPlanScale(), 0.01F);
      assertEquals((-2780.54F), homePrint0.getPaperLeftMargin(), 0.01F);
      assertNotNull(homePrint0);
      
      home0.setPrint(homePrint0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.REVERSE_LANDSCAPE, homePrint0.getPaperOrientation());
      assertEquals(794.0F, homePrint0.getPaperTopMargin(), 0.01F);
      assertFalse(homePrint0.isFurniturePrinted());
      assertEquals("", homePrint0.getFooterFormat());
      assertFalse(homePrint0.isPlanPrinted());
      assertFalse(homePrint0.isView3DPrinted());
      assertEquals(2156.8F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals("!", homePrint0.getHeaderFormat());
      assertEquals((-2780.54F), homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals((-2780.54F), homePrint0.getPaperHeight(), 0.01F);
      assertEquals((-82.03419F), homePrint0.getPlanScale(), 0.01F);
      assertEquals((-2780.54F), homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      home0.setBasePlanLocked(true);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomeFurnitureGroup> list0 = new LinkedList<HomeFurnitureGroup>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Level> list1 = Home.getLevelsSubList(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(false);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(compass0);
      assertTrue(boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list1);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.setModified(false);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isBasePlanLocked();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Class<Label> class0 = Label.class;
      List<Label> list2 = Home.getSubList((List<? extends Selectable>) linkedList1, class0);
      assertTrue(list2.equals((Object)list0));
      assertNotSame(list2, list0);
      assertEquals(0, linkedList1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      home0.setSelectedItems(list0);
      assertTrue(list0.equals((Object)list2));
      assertNotSame(list0, list2);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean2 = home0.isEmpty();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Home home0 = new Home(2168.0327F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(2168.0327F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertEquals(3700L, home0.getVersion());
      assertEquals(2168.0327F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, home0.getVersion());
      assertEquals(2168.0327F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(camera0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(camera0);
      assertTrue(boolean0);
      assertEquals(3700L, home0.getVersion());
      assertEquals(2168.0327F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setStoredCameras(linkedList0);
      assertEquals(3700L, home0.getVersion());
      assertEquals(2168.0327F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Room> class1 = Room.class;
      List<Room> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Room> list2 = Home.getRoomsSubList(list1);
      assertTrue(list2.equals((Object)list1));
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      DimensionLine dimensionLine0 = new DimensionLine((-5701.0F), 398.206F, (-5701.0F), 398.206F, 398.206F);
      assertEquals(398.206F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(398.206F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-5701.0F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getOffset(), 0.01F);
      assertEquals((-5701.0F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getYEnd(), 0.01F);
      assertNotNull(dimensionLine1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("'}C8A", propertyChangeListener0);
      assertEquals("'}C8A", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertNotNull(compass0);
      
      compass0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals("'}C8A", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      
      Compass compass1 = linkedList0.pollLast();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass0));
      assertNull(compass1);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(compass0, "", "", "");
      assertEquals("", propertyChangeEvent0.getPropertyName());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertEquals("", string0);
      assertEquals("", propertyChangeEvent0.getPropertyName());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertNotNull(string0);
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("", string1);
      assertEquals("", propertyChangeEvent0.getPropertyName());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertNotNull(string1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeEvent0.getPropertyName());
      assertEquals("'}C8A", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      
      dimensionLine1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(398.206F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-5701.0F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getOffset(), 0.01F);
      assertEquals((-5701.0F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals("'}C8A", propertyChangeListenerProxy0.getPropertyName());
      
      home0.addDimensionLine(dimensionLine1);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(398.206F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-5701.0F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getOffset(), 0.01F);
      assertEquals((-5701.0F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(398.206F, dimensionLine1.getYEnd(), 0.01F);
      assertFalse(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass2 = home0.getCompass();
      assertFalse(compass2.equals((Object)compass0));
      assertNotSame(compass2, compass0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(0.8982628F, compass2.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass2.getX(), 0.01F);
      assertEquals(0.0F, compass2.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass2.getTimeZone());
      assertTrue(compass2.isVisible());
      assertEquals(0.0F, compass2.getLongitude(), 0.01F);
      assertEquals(100.0F, compass2.getDiameter(), 0.01F);
      assertEquals(50.0F, compass2.getY(), 0.01F);
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(compass2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.WIDTH;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (float) 3700L;
      floatArray1[4] = (float) 3700L;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (-88.25F);
      floatArray2[3] = (float) 3700L;
      floatArray2[4] = (float) 3700L;
      floatArray2[5] = (float) 3700L;
      floatArray2[6] = (float) 3700L;
      floatArray2[7] = (float) 3700L;
      floatArray2[8] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[2];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = (-88.25F);
      floatArray5[1] = (float) 3700L;
      floatArray5[2] = (float) 3700L;
      floatArray5[3] = 100.0F;
      floatArray5[4] = (float) 3700L;
      floatArray0[4] = floatArray5;
      Room room0 = new Room(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(5, floatArray0.length);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(5, room1.getPointCount());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getName());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertNotNull(room1);
      
      home0.deleteRoom(room1);
      assertEquals(5, floatArray0.length);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(5, room1.getPointCount());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getName());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deselectItem((Selectable) null);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = home0.getFurnitureSortedProperty();
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, homePieceOfFurniture_SortableProperty1);
      assertSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertTrue(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      Consumer<HomePieceOfFurniture> consumer0 = (Consumer<HomePieceOfFurniture>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      Home home0 = new Home(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeLight homeLight0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(homeLight0);
      
      List<Selectable> list3 = home0.getSelectedItems();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home1.getName();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener1 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener1);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Wall> list4 = Wall.clone((List<Wall>) linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotNull(list4);
      
      List<DimensionLine> list5 = Home.getDimensionLinesSubList(list1);
      assertTrue(list5.equals((Object)list1));
      assertNotSame(list1, list5);
      assertNotSame(list5, list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      assertNotNull(list5);
      
      List<Wall> list6 = Wall.clone((List<Wall>) linkedList1);
      assertTrue(list6.equals((Object)list4));
      assertNotSame(list6, list4);
      assertEquals(0, linkedList1.size());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      assertNotNull(list6);
      
      List<Level> list7 = Home.getLevelsSubList(list6);
      assertTrue(list6.equals((Object)list4));
      assertNotSame(list6, list4);
      assertEquals(0, linkedList1.size());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      assertTrue(list7.isEmpty());
      assertEquals(0, list7.size());
      assertNotNull(list7);
      
      Home home2 = home0.clone();
      assertTrue(list1.equals((Object)list5));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home0.equals((Object)home1));
      assertNotSame(list1, list5);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertTrue(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isRecovered());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener2 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home2.removeLevelsListener(collectionListener2);
      assertTrue(list1.equals((Object)list5));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertNotSame(list1, list5);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertTrue(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isRecovered());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setSelectedLevel((Level) null);
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener3 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeRoomsListener(collectionListener3);
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertTrue(list1.equals((Object)list5));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertNotSame(list1, list5);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setSelectedLevel((Level) null);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list1 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      home0.setFurnitureDescendingSorted(false);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 3700L, 48.616665F, (-1408.853F), (-1408.853F));
      assertEquals(48.616665F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(5109.0845F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-1408.853F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1408.853F), dimensionLine0.getYEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = new DimensionLine(0.0F, 2493.4F, 0.0F, (-2700.0F), 282.08112F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(282.08112F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-2700.0F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(5193.4F, dimensionLine1.getLength(), 0.01F);
      assertEquals(2493.4F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertNotNull(dimensionLine1);
      
      TextStyle textStyle0 = new TextStyle(0.0F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(0.0F, textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      dimensionLine1.setLengthStyle(textStyle0);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(282.08112F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-2700.0F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(5193.4F, dimensionLine1.getLength(), 0.01F);
      assertEquals(2493.4F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(0.0F, textStyle0.getFontSize(), 0.01F);
      
      boolean boolean1 = dimensionLine0.containsPoint((-1408.853F), 0.0F, (-1408.853F));
      assertFalse(boolean1);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertEquals(48.616665F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(5109.0845F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-1408.853F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1408.853F), dimensionLine0.getYEnd(), 0.01F);
      
      home0.deleteDimensionLine(dimensionLine1);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine1, dimensionLine0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(282.08112F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-2700.0F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(5193.4F, dimensionLine1.getLength(), 0.01F);
      assertEquals(2493.4F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertNotSame(home0, home1);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals("", home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Level> list1 = Home.getLevelsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Label> class0 = Label.class;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("]hDF.EwwcN", propertyChangeListener0);
      assertEquals("]hDF.EwwcN", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      camera0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals("]hDF.EwwcN", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Label> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list2 = Home.getWallsSubList(list1);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = Camera.convertTimeToTimeZone(3700L, "");
      assertEquals(1392409281320L, long0);
      
      Camera camera1 = camera0.clone();
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertNull(camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertNotNull(camera1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      camera1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals("]hDF.EwwcN", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertNull(camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setCamera(camera1);
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertNull(camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long1 = home0.getVersion();
      assertEquals(3700L, long1);
      assertFalse(long1 == long0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertEquals(2, floatArray0.length);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom(room0);
      assertEquals(2, floatArray0.length);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        Home.getDimensionLinesSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Home home0 = null;
      try {
        home0 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property home_Property0 = Home.Property.CAMERA;
      home0.removePropertyChangeListener(home_Property0, (PropertyChangeListener) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Home home0 = new Home(1314.049F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(1314.049F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(1314.049F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(1314.049F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      home1.setBasePlanLocked(true);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(1314.049F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(1314.049F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(1314.049F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Random.setNextRandom(33);
      // Undeclared exception!
      try { 
        home1.addPieceOfFurniture((HomePieceOfFurniture) null, (-699));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property home_Property0 = Home.Property.FURNITURE_VISIBLE_PROPERTIES;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.addPropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertNotNull(homeEnvironment0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.setSelectedItems(list0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<ObserverCamera> linkedList1 = new LinkedList<ObserverCamera>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      List<Room> list3 = home0.getRooms();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list4 = Home.getSubList((List<? extends Selectable>) list3, class0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertNotNull(list4);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Label> class1 = Label.class;
      List<Label> list5 = Home.getSubList((List<? extends Selectable>) list4, class1);
      assertTrue(list5.equals((Object)list0));
      assertNotSame(list5, list0);
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertNotNull(list5);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedItems(list5);
      assertTrue(list5.equals((Object)list0));
      assertNotSame(list5, list0);
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom((Room) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom((Room) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.deleteDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Home home0 = new Home(26.54726F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-100.0F), (-1468.0F), 26.54726F, (-1468.0F), 26.54726F);
      assertEquals((-1468.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(26.54726F, wall0.getThickness(), 0.01F);
      assertEquals((-1468.0F), wall0.getYStart(), 0.01F);
      assertEquals(126.54726F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1468.0F), wall0.getYEnd(), 0.01F);
      assertEquals(126.54726F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertEquals((-36.72637F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(26.54726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1468.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(26.54726F, wall0.getThickness(), 0.01F);
      assertEquals((-1468.0F), wall0.getYStart(), 0.01F);
      assertEquals(126.54726F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1468.0F), wall0.getYEnd(), 0.01F);
      assertEquals(126.54726F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertEquals((-36.72637F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(26.54726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      TextStyle textStyle0 = new TextStyle(1813.2948F);
      assertFalse(textStyle0.isItalic());
      assertEquals(1813.2948F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(26.54726F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Room> list1 = Home.getRoomsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      home1.setSelectedItems(list1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(26.54726F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home1.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(26.54726F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home(3700L);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, (-1.0F));
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = new Level("/#d*bz=I", 3700L, (-2839.255F), 59.566666F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(59.566666F, level0.getHeight(), 0.01F);
      assertEquals((-2839.255F), level0.getFloorThickness(), 0.01F);
      assertEquals("/#d*bz=I", level0.getName());
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(59.566666F, level0.getHeight(), 0.01F);
      assertEquals((-2839.255F), level0.getFloorThickness(), 0.01F);
      assertEquals("/#d*bz=I", level0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getTopCamera();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string1 = home0.getName();
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(string1);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(compass0);
      assertTrue(boolean0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list1);
      
      ObserverCamera observerCamera0 = new ObserverCamera(3700L, 0.0F, 3700L, 0.0F, 0.0F, 0.0F);
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertNotNull(observerCamera0);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertNull(observerCamera1.getName());
      assertEquals(3964.2856F, observerCamera1.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(25.0F, observerCamera1.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera1.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera1.getY(), 0.01F);
      assertEquals(0.0F, observerCamera1.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(3700.0F, observerCamera1.getX(), 0.01F);
      assertEquals(62.5F, observerCamera1.getWidth(), 0.01F);
      assertNotNull(observerCamera1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("1de[]!Exb", propertyChangeListener0);
      assertEquals("1de[]!Exb", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      compass0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals("1de[]!Exb", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = Home.CURRENT_VERSION;
      assertEquals(3700L, long0);
      
      ObserverCamera observerCamera2 = home0.getObserverCamera();
      assertFalse(observerCamera2.equals((Object)observerCamera1));
      assertFalse(observerCamera2.equals((Object)observerCamera0));
      assertNotSame(observerCamera2, observerCamera1);
      assertNotSame(observerCamera2, observerCamera0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(48.57143F, observerCamera2.getWidth(), 0.01F);
      assertEquals(19.428572F, observerCamera2.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera2.getZ(), 0.01F);
      assertEquals(182.14285F, observerCamera2.getHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera2.getLens());
      assertEquals(5.4977875F, observerCamera2.getYaw(), 0.01F);
      assertEquals(0.19634955F, observerCamera2.getPitch(), 0.01F);
      assertNull(observerCamera2.getName());
      assertEquals(1392409281320L, observerCamera2.getTime());
      assertEquals(50.0F, observerCamera2.getX(), 0.01F);
      assertEquals(50.0F, observerCamera2.getY(), 0.01F);
      assertFalse(observerCamera2.isFixedSize());
      assertEquals(1.0995575F, observerCamera2.getFieldOfView(), 0.01F);
      assertNotNull(observerCamera2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isRecovered();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Label> class0 = Label.class;
      List<Label> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list2 = Home.getWallsSubList(list1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(camera0));
      assertNotNull(linkedList0);
      
      home0.setStoredCameras(linkedList0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.getFurnitureSortedProperty();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      ObserverCamera observerCamera0 = new ObserverCamera(0.0F, 0.0F, 1000.0F, 1000.0F, 1000.0F, 1500.0F);
      assertEquals(1000.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(1071.4286F, observerCamera0.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(1500.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1000.0F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(1000.0F, observerCamera0.getYaw(), 0.01F);
      assertNotNull(observerCamera0);
      
      home0.setVisualProperty(".b1' $Pl)VlAVAEM^G", observerCamera0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(1000.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(1071.4286F, observerCamera0.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(1500.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1000.0F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(1000.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeWallsListener(collectionListener0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNotNull(collection0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list1 = home0.getRooms();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener1 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getFurnitureSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<ObserverCamera> linkedList0 = new LinkedList<ObserverCamera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Room> list0 = home0.getRooms();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.setSelectedItems((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Camera camera0 = new Camera(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 5719.4614F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(5719.4614F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.0F, camera0.getYaw(), 0.01F);
      assertEquals(0.0F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(0.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNotNull(camera0);
      
      Camera camera1 = camera0.clone();
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(5719.4614F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.0F, camera0.getYaw(), 0.01F);
      assertEquals(0.0F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(0.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(5719.4614F, camera1.getFieldOfView(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(0.0F, camera1.getYaw(), 0.01F);
      assertEquals(0.0F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getPitch(), 0.01F);
      assertEquals(0.0F, camera1.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(0.0F, camera1.getY(), 0.01F);
      assertNotNull(camera1);
      
      boolean boolean0 = linkedList0.offer(camera1);
      assertTrue(boolean0);
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertEquals(1, linkedList0.size());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(5719.4614F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.0F, camera0.getYaw(), 0.01F);
      assertEquals(0.0F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(0.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(5719.4614F, camera1.getFieldOfView(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(0.0F, camera1.getYaw(), 0.01F);
      assertEquals(0.0F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getPitch(), 0.01F);
      assertEquals(0.0F, camera1.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(0.0F, camera1.getY(), 0.01F);
      assertFalse(linkedList0.contains(camera0));
      assertTrue(linkedList0.contains(camera1));
      
      home0.setStoredCameras(linkedList0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(camera0));
      assertTrue(linkedList0.contains(camera1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera2 = home0.getCamera();
      assertFalse(camera2.equals((Object)camera0));
      assertFalse(camera2.equals((Object)camera1));
      assertNotSame(camera2, camera0);
      assertNotSame(camera2, camera1);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(1392409281320L, camera2.getTime());
      assertEquals(3.1415927F, camera2.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera2.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera2.getLens());
      assertEquals(500.0F, camera2.getX(), 0.01F);
      assertEquals(1500.0F, camera2.getY(), 0.01F);
      assertEquals(1000.0F, camera2.getZ(), 0.01F);
      assertNull(camera2.getName());
      assertEquals(0.7853982F, camera2.getPitch(), 0.01F);
      assertNotNull(camera2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 0.0F, 0.0F, 0.0F, 0.0F, 1642.4098F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1642.4098F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1850.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      home0.deleteWall(wall0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1642.4098F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1850.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera3 = home0.getTopCamera();
      assertFalse(camera3.equals((Object)camera1));
      assertFalse(camera3.equals((Object)camera0));
      assertNotSame(camera3, camera1);
      assertSame(camera3, camera2);
      assertNotSame(camera3, camera0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(1000.0F, camera3.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera3.getLens());
      assertEquals(1500.0F, camera3.getY(), 0.01F);
      assertEquals(1.0995575F, camera3.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera3.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera3.getTime());
      assertEquals(500.0F, camera3.getX(), 0.01F);
      assertEquals(0.7853982F, camera3.getPitch(), 0.01F);
      assertNull(camera3.getName());
      assertNotNull(camera3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float float0 = home0.getWallHeight();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNotNull(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = new Long(3700L);
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = new Camera(984.44F, 3700L, 3700L, (-1616.4F), 0.0F, 0.0F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(984.44F, camera0.getX(), 0.01F);
      assertEquals(3700.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.0F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3700.0F, camera0.getZ(), 0.01F);
      assertEquals((-1616.4F), camera0.getYaw(), 0.01F);
      assertNotNull(camera0);
      
      home0.setCamera(camera0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(984.44F, camera0.getX(), 0.01F);
      assertEquals(3700.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.0F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3700.0F, camera0.getZ(), 0.01F);
      assertEquals((-1616.4F), camera0.getYaw(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label0 = new Label("iW8Jm%hU$4;=", 3700L, 3700L);
      assertEquals("iW8Jm%hU$4;=", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("iW8Jm%hU$4;=", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("iW8Jm%hU$4;=", label1.getText());
      assertNotNull(label1);
      
      label1.setAngle(3700L);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("iW8Jm%hU$4;=", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(5.4870396F, label1.getAngle(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals("iW8Jm%hU$4;=", label1.getText());
      
      home0.addLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals("iW8Jm%hU$4;=", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(5.4870396F, label1.getAngle(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals("iW8Jm%hU$4;=", label1.getText());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Object object0 = home1.getVisualProperty(".EL%EBP4TWlJm*w,");
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNull(object0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Label> class0 = Label.class;
      List<Label> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list2 = Home.getWallsSubList(list1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list3 = Home.getWallsSubList(list1);
      assertTrue(list3.equals((Object)list2));
      assertNotSame(list3, list2);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener1 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      Consumer<HomePieceOfFurniture> consumer0 = (Consumer<HomePieceOfFurniture>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      Home home0 = new Home(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeLight homeLight0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(homeLight0);
      
      List<Selectable> list3 = home0.getSelectedItems();
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home1.getName();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener1 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener1);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Wall> list4 = Wall.clone((List<Wall>) linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotNull(list4);
      
      List<DimensionLine> list5 = Home.getDimensionLinesSubList(list1);
      assertTrue(list5.equals((Object)list1));
      assertNotSame(list1, list5);
      assertNotSame(list5, list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertNotNull(list5);
      
      List<Wall> list6 = Wall.clone((List<Wall>) linkedList1);
      assertTrue(list6.equals((Object)list4));
      assertNotSame(list6, list4);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list6.size());
      assertTrue(list6.isEmpty());
      assertNotNull(list6);
      
      List<Level> list7 = Home.getLevelsSubList(list6);
      assertTrue(list6.equals((Object)list4));
      assertNotSame(list6, list4);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list6.size());
      assertTrue(list6.isEmpty());
      assertTrue(list7.isEmpty());
      assertEquals(0, list7.size());
      assertNotNull(list7);
      
      List<HomePieceOfFurniture> list8 = Home.getFurnitureSubList(list3);
      assertTrue(list1.equals((Object)list5));
      assertTrue(list8.equals((Object)list2));
      assertFalse(home0.equals((Object)home1));
      assertNotSame(list1, list5);
      assertNotSame(list2, list8);
      assertNotSame(list8, list2);
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list8.size());
      assertTrue(list8.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list8);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home2 = home0.clone();
      assertTrue(list1.equals((Object)list5));
      assertTrue(list2.equals((Object)list8));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotSame(list1, list5);
      assertNotSame(list2, list8);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertTrue(home2.isModified());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isRecovered());
      assertNotNull(home2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener2 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home2.removeLevelsListener(collectionListener2);
      assertTrue(list1.equals((Object)list5));
      assertTrue(list2.equals((Object)list8));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotSame(list1, list5);
      assertNotSame(list2, list8);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertTrue(home2.isModified());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setSelectedLevel((Level) null);
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener3 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeRoomsListener(collectionListener3);
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertTrue(list1.equals((Object)list5));
      assertTrue(list2.equals((Object)list8));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertNotSame(list1, list5);
      assertNotSame(list2, list8);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertNotNull(homeEnvironment0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(collection0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Sash[] sashArray0 = new Sash[7];
      sashArray0[4] = sashArray0[1];
      Sash sash0 = new Sash((-2138.58F), 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, sash0.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(3700.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(3700.0F, sash0.getWidth(), 0.01F);
      assertEquals((-2138.58F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-0.10126579F), 0.57069755F, 0.57069755F, (-0.10126579F), (-1380.2985F));
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(0.57069755F, sash1.getYAxis(), 0.01F);
      assertEquals((-0.10126579F), sash1.getStartAngle(), 0.01F);
      assertEquals((-0.10126579F), sash1.getXAxis(), 0.01F);
      assertEquals(0.57069755F, sash1.getWidth(), 0.01F);
      assertEquals((-1380.2985F), sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      Integer integer0 = new Integer(2073);
      assertEquals(2073, (int)integer0);
      assertNotNull(integer0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.TEXTURE;
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, homePieceOfFurniture_SortableProperty0);
      
      boolean boolean0 = integer0.equals(homePieceOfFurniture_SortableProperty0);
      assertFalse(boolean0);
      
      float[][] floatArray0 = new float[8][5];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (-2138.58F);
      floatArray1[2] = (-2138.58F);
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = (-461.5593F);
      floatArray2[2] = 570.6337F;
      floatArray2[3] = (-2138.58F);
      floatArray2[4] = (-2138.58F);
      floatArray1[1] = 155.54236F;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = (-461.5593F);
      floatArray3[3] = (float) 3700L;
      floatArray3[4] = 0.0F;
      floatArray0[4] = floatArray3;
      floatArray0[3] = floatArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2073);
      assertEquals((byte)25, bigDecimal0.byteValue());
      assertEquals((short)2073, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn(sashArray0).when(doorOrWindow0).getSashes();
      doReturn((-461.5593F)).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn(integer0).when(doorOrWindow0).getColor();
      doReturn("2").when(doorOrWindow0).getCurrency();
      doReturn((float)3700L).when(doorOrWindow0).getDepth();
      doReturn("1").when(doorOrWindow0).getDescription();
      doReturn((float)3700L).when(doorOrWindow0).getElevation();
      doReturn((float)3700L).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn(floatArray0).when(doorOrWindow0).getModelRotation();
      doReturn("").when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn(bigDecimal0).when(doorOrWindow0).getPrice();
      doReturn("1").when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertEquals(7, sashArray0.length);
      assertEquals(8, floatArray0.length);
      assertEquals((byte)25, bigDecimal0.byteValue());
      assertEquals((short)2073, bigDecimal0.shortValue());
      assertEquals(3700.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals("1", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-461.5593F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2073, (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("1", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("2", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1850.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNotNull(homeDoorOrWindow0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addPieceOfFurniture((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(7, sashArray0.length);
      assertEquals(8, floatArray0.length);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals((byte)25, bigDecimal0.byteValue());
      assertEquals((short)2073, bigDecimal0.shortValue());
      assertEquals(3700.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals("1", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-461.5593F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2073, (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("1", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("2", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1850.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = home0.isEmpty();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      compass0.setVisible(false);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(compass0);
      assertTrue(boolean0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list1);
      
      ObserverCamera observerCamera0 = new ObserverCamera(0.0F, 0.0F, 14.604167F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(15.647322F, observerCamera0.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera0.getZ(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNotNull(observerCamera0);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(15.647322F, observerCamera0.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera0.getZ(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(0.0F, observerCamera1.getX(), 0.01F);
      assertEquals(0.0F, observerCamera1.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera1.getY(), 0.01F);
      assertEquals(0.0F, observerCamera1.getYaw(), 0.01F);
      assertEquals(14.604167F, observerCamera1.getZ(), 0.01F);
      assertEquals(15.647322F, observerCamera1.getHeight(), 0.01F);
      assertEquals(8.0F, observerCamera1.getDepth(), 0.01F);
      assertNull(observerCamera1.getName());
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(20.0F, observerCamera1.getWidth(), 0.01F);
      assertNotNull(observerCamera1);
      
      long long0 = Camera.convertTimeToTimeZone(3700L, "BASE_PLAN_LOCKED");
      assertEquals(1392409281320L, long0);
      
      ObserverCamera observerCamera2 = (ObserverCamera)observerCamera0.clone();
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera2.equals((Object)observerCamera0));
      assertFalse(observerCamera2.equals((Object)observerCamera1));
      assertNotSame(observerCamera0, observerCamera2);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera2, observerCamera0);
      assertNotSame(observerCamera2, observerCamera1);
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(15.647322F, observerCamera0.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera0.getZ(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(Camera.Lens.PINHOLE, observerCamera2.getLens());
      assertEquals(8.0F, observerCamera2.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera2.getPitch(), 0.01F);
      assertNull(observerCamera2.getName());
      assertEquals(0.0F, observerCamera2.getYaw(), 0.01F);
      assertEquals(0.0F, observerCamera2.getY(), 0.01F);
      assertEquals(0.0F, observerCamera2.getX(), 0.01F);
      assertEquals(15.647322F, observerCamera2.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera2.getTime());
      assertFalse(observerCamera2.isFixedSize());
      assertEquals(0.0F, observerCamera2.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera2.getZ(), 0.01F);
      assertEquals(20.0F, observerCamera2.getWidth(), 0.01F);
      assertNotNull(observerCamera2);
      
      home0.setRecovered(true);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setStoredCameras(linkedList0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Home home0 = new Home(1000.0F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(1000.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(1000.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1000.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[3][9];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1407.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1407.0F;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 1407.0F;
      floatArray3[1] = 0.0F;
      floatArray3[3] = 1407.0F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = (-2380.0F);
      floatArray3[6] = 1407.0F;
      floatArray3[7] = 0.0F;
      floatArray3[8] = 1407.0F;
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(703.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(703.5F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(3, floatArray0.length);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(703.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(703.5F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(703.5F, room1.getXCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(703.5F, room1.getYCenter(), 0.01F);
      assertNotNull(room1);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(room1));
      assertNotNull(linkedList0);
      
      Class<ObserverCamera> class0 = ObserverCamera.class;
      float float0 = home1.getWallHeight();
      assertEquals(1000.0F, float0, 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(1000.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1000.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<ObserverCamera> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(room1));
      assertNotNull(list0);
      
      Class<Compass> class1 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(linkedList0.contains(room1));
      assertNotNull(list1);
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(linkedList0.contains(room1));
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Home home0 = new Home(1000.0F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(1000.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(1000.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(1000.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[3][9];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1407.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1407.0F;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 1407.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1407.0F;
      floatArray3[3] = 1407.0F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = (-2380.0F);
      floatArray3[6] = 1407.0F;
      floatArray3[7] = 0.0F;
      floatArray3[8] = 1407.0F;
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertEquals(3, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(703.5F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(3, room0.getPointCount());
      assertEquals(703.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(3, floatArray0.length);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(703.5F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(3, room0.getPointCount());
      assertEquals(703.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getName());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(703.5F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(3, room1.getPointCount());
      assertEquals(703.5F, room1.getXCenter(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNotNull(room1);
      
      // Undeclared exception!
      try { 
        room0.setPoint(0.0F, (-1662.5646F), (-560));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -560
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertNotNull(homeEnvironment0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.deleteLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float float0 = home1.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Home home0 = new Home(26.54726F);
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-100.0F), (-1468.0F), 26.54726F, (-1468.0F), 26.54726F);
      assertEquals((-1468.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1468.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-36.72637F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(126.54726F, wall0.getLength(), 0.01F);
      assertEquals(26.54726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(126.54726F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(26.54726F, wall0.getThickness(), 0.01F);
      assertEquals((-1468.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals((-1468.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1468.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-36.72637F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(126.54726F, wall0.getLength(), 0.01F);
      assertEquals(26.54726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(126.54726F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(26.54726F, wall0.getThickness(), 0.01F);
      assertEquals((-1468.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 26.54726F, (-100.0F), 0.0F, 0.0F);
      assertEquals((-100.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(26.54726F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(103.4638F, dimensionLine0.getLength(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = new DimensionLine(0.0F, 0.0F, (-1408.853F), (-1408.853F), 0.0F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-1408.853F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(1992.4191F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-1408.853F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertNotNull(dimensionLine1);
      
      boolean boolean0 = dimensionLine1.containsEndExtensionLineAt(26.54726F, (-678.96576F), 0.0F);
      assertFalse(boolean0);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-1408.853F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(1992.4191F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-1408.853F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      
      TextStyle textStyle0 = new TextStyle(3215.9172F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(3215.9172F, textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      dimensionLine0.setLengthStyle(textStyle0);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertEquals((-100.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(26.54726F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(103.4638F, dimensionLine0.getLength(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(3215.9172F, textStyle0.getFontSize(), 0.01F);
      
      boolean boolean1 = dimensionLine0.containsPoint((-100.0F), 26.54726F, 3700L);
      assertTrue(boolean1);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertEquals((-100.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(26.54726F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(103.4638F, dimensionLine0.getLength(), 0.01F);
      
      home0.deleteDimensionLine(dimensionLine1);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-1408.853F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(1992.4191F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-1408.853F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertEquals(26.54726F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("l<]E }eU[/%8{xD");
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(26.54726F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals("l<]E }eU[/%8{xD", home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash(3700L, 3700L, (-461.5593F), 3700L, 3700L);
      assertEquals(3700.0F, sash0.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-461.5593F), sash0.getWidth(), 0.01F);
      assertEquals(3700.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(3700.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(3700L, (-461.5593F), 0.0F, 0.0F, 0.0F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(0.0F, sash1.getWidth(), 0.01F);
      assertEquals((-461.5593F), sash1.getYAxis(), 0.01F);
      assertEquals(0.0F, sash1.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash1.getStartAngle(), 0.01F);
      assertEquals(3700.0F, sash1.getXAxis(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 3700L, (-2698.629F), (-461.5593F), 903.468F);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertEquals(0.0F, sash2.getXAxis(), 0.01F);
      assertEquals(903.468F, sash2.getEndAngle(), 0.01F);
      assertEquals((-2698.629F), sash2.getWidth(), 0.01F);
      assertEquals(3700.0F, sash2.getYAxis(), 0.01F);
      assertEquals((-461.5593F), sash2.getStartAngle(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(3700L, (-461.5593F), (-325.6F), 0.0F, (-461.5593F));
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash1));
      assertEquals((-461.5593F), sash3.getEndAngle(), 0.01F);
      assertEquals(3700.0F, sash3.getXAxis(), 0.01F);
      assertEquals(0.0F, sash3.getStartAngle(), 0.01F);
      assertEquals((-325.6F), sash3.getWidth(), 0.01F);
      assertEquals((-461.5593F), sash3.getYAxis(), 0.01F);
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(1162.3413F, 0.0F, (-1621.32F), 570.6337F, 0.0F);
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash0));
      assertEquals(0.0F, sash4.getEndAngle(), 0.01F);
      assertEquals((-1621.32F), sash4.getWidth(), 0.01F);
      assertEquals(0.0F, sash4.getYAxis(), 0.01F);
      assertEquals(570.6337F, sash4.getStartAngle(), 0.01F);
      assertEquals(1162.3413F, sash4.getXAxis(), 0.01F);
      assertNotNull(sash4);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-1621.32F), (-33.3F), (-1201.0F), 3700L, 0.0F);
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash0));
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash4));
      assertEquals(3700.0F, sash5.getStartAngle(), 0.01F);
      assertEquals((-1621.32F), sash5.getXAxis(), 0.01F);
      assertEquals((-1201.0F), sash5.getWidth(), 0.01F);
      assertEquals((-33.3F), sash5.getYAxis(), 0.01F);
      assertEquals(0.0F, sash5.getEndAngle(), 0.01F);
      assertNotNull(sash5);
      
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(0.0F, 1262.35F, 1262.35F, 0.0F, (-1380.2985F));
      assertFalse(sash6.equals((Object)sash0));
      assertFalse(sash6.equals((Object)sash4));
      assertFalse(sash6.equals((Object)sash2));
      assertFalse(sash6.equals((Object)sash3));
      assertFalse(sash6.equals((Object)sash5));
      assertFalse(sash6.equals((Object)sash1));
      assertEquals(1262.35F, sash6.getWidth(), 0.01F);
      assertEquals(0.0F, sash6.getStartAngle(), 0.01F);
      assertEquals(1262.35F, sash6.getYAxis(), 0.01F);
      assertEquals(0.0F, sash6.getXAxis(), 0.01F);
      assertEquals((-1380.2985F), sash6.getEndAngle(), 0.01F);
      assertNotNull(sash6);
      
      sashArray0[6] = sash6;
      Integer integer0 = new Integer(2090);
      assertEquals(2090, (int)integer0);
      assertNotNull(integer0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.TEXTURE;
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, homePieceOfFurniture_SortableProperty0);
      
      boolean boolean0 = integer0.equals(homePieceOfFurniture_SortableProperty0);
      assertFalse(boolean0);
      
      float[][] floatArray0 = new float[8][5];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-325.6F);
      floatArray1[1] = (-1621.32F);
      floatArray1[2] = (-1201.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = (-2698.629F);
      floatArray2[2] = 570.6337F;
      floatArray2[3] = (-1201.0F);
      floatArray2[4] = (-2698.629F);
      floatArray2[5] = (-3544.479F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[1];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 155.54236F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 142.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-1201.0F);
      floatArray4[3] = (-325.6F);
      floatArray4[4] = (float) 2090;
      floatArray4[5] = (-1108.8F);
      floatArray4[6] = (-461.5593F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = (-461.5593F);
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-1201.0F);
      floatArray5[3] = (float) 3700L;
      floatArray5[4] = 1162.3413F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = 1262.35F;
      floatArray6[1] = 142.0F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 1162.3413F;
      floatArray6[4] = (float) 3700L;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray5));
      
      floatArray7[0] = (-1380.2985F);
      floatArray7[1] = (float) 2090;
      floatArray7[2] = 0.0F;
      floatArray7[3] = (-1621.32F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[2];
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray5));
      
      floatArray8[0] = (-1380.2985F);
      floatArray8[1] = 0.0F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = new BigDecimal(2539);
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertEquals((short)2539, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn(sashArray0).when(doorOrWindow0).getSashes();
      doReturn((-1201.0F)).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn(integer0).when(doorOrWindow0).getColor();
      doReturn("x9f,$Od").when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn("1").when(doorOrWindow0).getDescription();
      doReturn(903.468F).when(doorOrWindow0).getElevation();
      doReturn((float)3700L).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn(floatArray0).when(doorOrWindow0).getModelRotation();
      doReturn("").when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn(bigDecimal0).when(doorOrWindow0).getPrice();
      doReturn("1").when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(1162.3413F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(true).when(doorOrWindow0).isDoorOrWindow();
      doReturn(true).when(doorOrWindow0).isMovable();
      doReturn(true).when(doorOrWindow0).isResizable();
      doReturn(true).when(doorOrWindow0).isTexturable();
      List<HomePieceOfFurniture.SortableProperty> list0 = home1.getFurnitureVisibleProperties();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureVisibleProperties(list0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertEquals(7, sashArray0.length);
      assertEquals(8, floatArray0.length);
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertEquals((short)2539, bigDecimal0.shortValue());
      assertEquals(903.468F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1201.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("x9f,$Od", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1162.3413F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("1", homeDoorOrWindow0.getDescription());
      assertEquals(2090, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("1", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(903.468F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(581.17065F, homeDoorOrWindow0.getX(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home1.getFurnitureVisibleProperties();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(list1, list0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(list1.isEmpty());
      assertEquals(5, list1.size());
      assertFalse(list1.contains(homePieceOfFurniture_SortableProperty0));
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      homeDoorOrWindow0.setHeight(3700L);
      assertEquals(7, sashArray0.length);
      assertEquals(8, floatArray0.length);
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertEquals((short)2539, bigDecimal0.shortValue());
      assertEquals(903.468F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1201.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("x9f,$Od", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1162.3413F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("1", homeDoorOrWindow0.getDescription());
      assertEquals(2090, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("1", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(903.468F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(581.17065F, homeDoorOrWindow0.getX(), 0.01F);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, (-39.49F), 3700L, (-983.4F));
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3739.49F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-983.4F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-39.49F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      Wall wall0 = new Wall(3700L, 1848.861F, 2242.281F, 3700L, 663.0F, (-3260.2278F));
      assertEquals(2774.4304F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2356.1963F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1848.861F, wall0.getYStart(), 0.01F);
      assertEquals(2356.1963F, wall0.getLength(), 0.01F);
      assertEquals(2971.1406F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2242.281F, wall0.getXEnd(), 0.01F);
      assertEquals(663.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3260.2278F), wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(2774.4304F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2356.1963F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1848.861F, wall0.getYStart(), 0.01F);
      assertEquals(2356.1963F, wall0.getLength(), 0.01F);
      assertEquals(2971.1406F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2242.281F, wall0.getXEnd(), 0.01F);
      assertEquals(663.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3260.2278F), wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(level0);
      
      dimensionLine0.setLevel((Level) null);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3739.49F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-983.4F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-39.49F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      
      home1.addDimensionLine(dimensionLine0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3739.49F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-983.4F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-39.49F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(7, sashArray0.length);
      assertEquals(8, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(903.468F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(903.468F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("1", homeDoorOrWindow1.getDescription());
      assertEquals(581.17065F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(2090, (int)homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1162.3413F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("1", homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3700.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("x9f,$Od", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1201.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertEquals((short)2539, bigDecimal0.shortValue());
      assertEquals(903.468F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1201.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("x9f,$Od", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1162.3413F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("1", homeDoorOrWindow0.getDescription());
      assertEquals(2090, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("1", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(903.468F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(581.17065F, homeDoorOrWindow0.getX(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      
      home1.addPieceOfFurniture((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(7, sashArray0.length);
      assertEquals(8, floatArray0.length);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(903.468F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(903.468F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("1", homeDoorOrWindow1.getDescription());
      assertEquals(581.17065F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(2090, (int)homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1162.3413F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("1", homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3700.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("x9f,$Od", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1201.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertEquals((short)2539, bigDecimal0.shortValue());
      assertEquals(903.468F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1201.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("x9f,$Od", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1162.3413F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("1", homeDoorOrWindow0.getDescription());
      assertEquals(2090, (int)homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("1", homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(903.468F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(581.17065F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(homePieceOfFurniture_SortableProperty1.equals((Object)homePieceOfFurniture_SortableProperty0));
      assertNotSame(home0, home1);
      assertNotSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spliterator<HomeLight> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      Class<DimensionLine> class0 = DimensionLine.class;
      List<DimensionLine> list2 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(list2.contains(dimensionLine0));
      assertNotNull(list2);
      
      home1.setSelectedItems(list2);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(list2.contains(dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home1.isEmpty();
      assertFalse(boolean1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine((-2700.0F), (-2700.0F), (-2700.0F), (-2700.0F), (-2700.0F));
      assertEquals((-2700.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-2700.0F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-2700.0F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-2700.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-2700.0F), dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      TextStyle textStyle0 = new TextStyle(3700L);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals(3700.0F, textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals("", home1.getName());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass1 = home0.getCompass();
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertSame(compass1, compass0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(100.0F, compass1.getDiameter(), 0.01F);
      assertEquals(50.0F, compass1.getY(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals((-100.0F), compass1.getX(), 0.01F);
      assertTrue(compass1.isVisible());
      assertNotNull(compass1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float float0 = 3116.2937F;
      Home home0 = new Home(3116.2937F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3116.2937F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3116.2937F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3116.2937F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home1 = new Home(list0);
      assertFalse(home1.equals((Object)home0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list1 = home1.getFurniture();
      assertFalse(home1.equals((Object)home0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(home1, home0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list1, "y8\"5ZUD");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      Consumer<HomePieceOfFurniture> consumer0 = (Consumer<HomePieceOfFurniture>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      Compass compass0 = new Compass((-3.6833334F), (-858.9104F), 26.0F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-858.9104F), compass0.getY(), 0.01F);
      assertEquals(26.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-3.6833334F), compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setVisible(false);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-858.9104F), compass0.getY(), 0.01F);
      assertEquals(26.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-3.6833334F), compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertFalse(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      
      LinkedList<Compass> linkedList1 = new LinkedList<Compass>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(compass0));
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add(compass0);
      assertTrue(boolean0);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-858.9104F), compass0.getY(), 0.01F);
      assertEquals(26.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-3.6833334F), compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertFalse(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.contains(compass0));
      
      List<Label> list3 = Home.getLabelsSubList(list1);
      assertTrue(list3.equals((Object)list0));
      assertNotSame(list0, list3);
      assertNotSame(list3, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      
      List<Selectable> list4 = Home.duplicate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotNull(list4);
      
      ObserverCamera observerCamera0 = new ObserverCamera((-2847.98F), 26.0F, 79.3F, (-1770.1362F), (-858.9104F), 55.466667F);
      assertEquals(55.466667F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals((-2847.98F), observerCamera0.getX(), 0.01F);
      assertEquals(79.3F, observerCamera0.getZ(), 0.01F);
      assertEquals(26.0F, observerCamera0.getY(), 0.01F);
      assertEquals(9.062858F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals((-858.9104F), observerCamera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(84.96429F, observerCamera0.getHeight(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(22.657145F, observerCamera0.getWidth(), 0.01F);
      assertEquals((-1770.1362F), observerCamera0.getYaw(), 0.01F);
      assertNotNull(observerCamera0);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(55.466667F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals((-2847.98F), observerCamera0.getX(), 0.01F);
      assertEquals(79.3F, observerCamera0.getZ(), 0.01F);
      assertEquals(26.0F, observerCamera0.getY(), 0.01F);
      assertEquals(9.062858F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals((-858.9104F), observerCamera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(84.96429F, observerCamera0.getHeight(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(22.657145F, observerCamera0.getWidth(), 0.01F);
      assertEquals((-1770.1362F), observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(79.3F, observerCamera1.getZ(), 0.01F);
      assertNull(observerCamera1.getName());
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals((-2847.98F), observerCamera1.getX(), 0.01F);
      assertEquals(84.96429F, observerCamera1.getHeight(), 0.01F);
      assertEquals(26.0F, observerCamera1.getY(), 0.01F);
      assertEquals(9.062858F, observerCamera1.getDepth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals((-858.9104F), observerCamera1.getPitch(), 0.01F);
      assertEquals((-1770.1362F), observerCamera1.getYaw(), 0.01F);
      assertEquals(22.657145F, observerCamera1.getWidth(), 0.01F);
      assertEquals(55.466667F, observerCamera1.getFieldOfView(), 0.01F);
      assertNotNull(observerCamera1);
      
      long long0 = Camera.convertTimeToTimeZone(0L, "");
      assertEquals(1392409281320L, long0);
      
      ObserverCamera observerCamera2 = (ObserverCamera)observerCamera0.clone();
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera2.equals((Object)observerCamera0));
      assertFalse(observerCamera2.equals((Object)observerCamera1));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera0, observerCamera2);
      assertNotSame(observerCamera2, observerCamera0);
      assertNotSame(observerCamera2, observerCamera1);
      assertEquals(55.466667F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals((-2847.98F), observerCamera0.getX(), 0.01F);
      assertEquals(79.3F, observerCamera0.getZ(), 0.01F);
      assertEquals(26.0F, observerCamera0.getY(), 0.01F);
      assertEquals(9.062858F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals((-858.9104F), observerCamera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(84.96429F, observerCamera0.getHeight(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(22.657145F, observerCamera0.getWidth(), 0.01F);
      assertEquals((-1770.1362F), observerCamera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera2.getTime());
      assertFalse(observerCamera2.isFixedSize());
      assertNull(observerCamera2.getName());
      assertEquals(79.3F, observerCamera2.getZ(), 0.01F);
      assertEquals((-2847.98F), observerCamera2.getX(), 0.01F);
      assertEquals(26.0F, observerCamera2.getY(), 0.01F);
      assertEquals(9.062858F, observerCamera2.getDepth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera2.getLens());
      assertEquals((-858.9104F), observerCamera2.getPitch(), 0.01F);
      assertEquals((-1770.1362F), observerCamera2.getYaw(), 0.01F);
      assertEquals(84.96429F, observerCamera2.getHeight(), 0.01F);
      assertEquals(22.657145F, observerCamera2.getWidth(), 0.01F);
      assertEquals(55.466667F, observerCamera2.getFieldOfView(), 0.01F);
      assertNotNull(observerCamera2);
      
      Home home0 = new Home(0.0F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera1 = camera0.clone();
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertNotNull(camera1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      camera1.setName("");
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals("", camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera2 = camera1.clone();
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertFalse(camera2.equals((Object)camera0));
      assertFalse(camera2.equals((Object)camera1));
      assertNotSame(camera0, camera2);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertNotSame(camera1, camera2);
      assertNotSame(camera2, camera0);
      assertNotSame(camera2, camera1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals("", camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(0.7853982F, camera2.getPitch(), 0.01F);
      assertEquals(1500.0F, camera2.getY(), 0.01F);
      assertEquals(3.1415927F, camera2.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera2.getTime());
      assertEquals("", camera2.getName());
      assertEquals(1000.0F, camera2.getZ(), 0.01F);
      assertEquals(1.0995575F, camera2.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera2.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera2.getLens());
      assertNotNull(camera2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera3 = camera2.clone();
      assertFalse(camera0.equals((Object)camera2));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertFalse(camera1.equals((Object)camera2));
      assertFalse(camera2.equals((Object)camera0));
      assertFalse(camera2.equals((Object)camera1));
      assertFalse(camera3.equals((Object)camera2));
      assertFalse(camera3.equals((Object)camera0));
      assertFalse(camera3.equals((Object)camera1));
      assertNotSame(camera0, camera2);
      assertNotSame(camera0, camera1);
      assertNotSame(camera0, camera3);
      assertNotSame(camera1, camera0);
      assertNotSame(camera1, camera3);
      assertNotSame(camera1, camera2);
      assertNotSame(camera2, camera3);
      assertNotSame(camera2, camera0);
      assertNotSame(camera2, camera1);
      assertNotSame(camera3, camera2);
      assertNotSame(camera3, camera0);
      assertNotSame(camera3, camera1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals("", camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(0.7853982F, camera2.getPitch(), 0.01F);
      assertEquals(1500.0F, camera2.getY(), 0.01F);
      assertEquals(3.1415927F, camera2.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera2.getTime());
      assertEquals("", camera2.getName());
      assertEquals(1000.0F, camera2.getZ(), 0.01F);
      assertEquals(1.0995575F, camera2.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera2.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera2.getLens());
      assertEquals(0.7853982F, camera3.getPitch(), 0.01F);
      assertEquals(1500.0F, camera3.getY(), 0.01F);
      assertEquals("", camera3.getName());
      assertEquals(1000.0F, camera3.getZ(), 0.01F);
      assertEquals(1392409281320L, camera3.getTime());
      assertEquals(500.0F, camera3.getX(), 0.01F);
      assertEquals(3.1415927F, camera3.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera3.getLens());
      assertEquals(1.0995575F, camera3.getFieldOfView(), 0.01F);
      assertNotNull(camera3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setCamera(camera2);
      assertFalse(camera0.equals((Object)camera2));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera0.equals((Object)camera3));
      assertFalse(camera1.equals((Object)camera0));
      assertFalse(camera1.equals((Object)camera3));
      assertFalse(camera1.equals((Object)camera2));
      assertFalse(camera2.equals((Object)camera3));
      assertFalse(camera2.equals((Object)camera0));
      assertFalse(camera2.equals((Object)camera1));
      assertNotSame(camera0, camera2);
      assertNotSame(camera0, camera1);
      assertNotSame(camera0, camera3);
      assertNotSame(camera1, camera0);
      assertNotSame(camera1, camera3);
      assertNotSame(camera1, camera2);
      assertNotSame(camera2, camera3);
      assertNotSame(camera2, camera0);
      assertNotSame(camera2, camera1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals("", camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(0.7853982F, camera2.getPitch(), 0.01F);
      assertEquals(1500.0F, camera2.getY(), 0.01F);
      assertEquals(3.1415927F, camera2.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera2.getTime());
      assertEquals("", camera2.getName());
      assertEquals(1000.0F, camera2.getZ(), 0.01F);
      assertEquals(1.0995575F, camera2.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera2.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera2.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList2 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      home0.setFurnitureVisibleProperties(linkedList2);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, linkedList2.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list5 = Home.getLevelsSubList(list2);
      assertTrue(list0.equals((Object)list3));
      assertNotSame(list0, list3);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertNotNull(list5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Home home0 = new Home(170.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Compass> linkedList1 = new LinkedList<Compass>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      home0.setRecovered(true);
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = linkedList0.retainAll(linkedList1);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      home0.setFurnitureVisibleProperties(linkedList0);
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Object object0 = home0.getVisualProperty("{}>n");
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(object0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Random.setNextRandom(744);
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isModified());
      assertEquals(170.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertTrue(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.removeLevelsListener((CollectionListener<Level>) null);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isModified());
      assertEquals(170.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertTrue(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertEquals(12, home_PropertyArray0.length);
      assertNotNull(home_PropertyArray0);
      
      List<Level> list1 = home0.getLevels();
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(170.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = new Level("[3z3wG%", 2332.0674F, (-1190.378F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(2332.0674F, level0.getElevation(), 0.01F);
      assertEquals((-1190.378F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("[3z3wG%", level0.getName());
      assertNotNull(level0);
      
      home0.setSelectedLevel(level0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(2332.0674F, level0.getElevation(), 0.01F);
      assertEquals((-1190.378F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("[3z3wG%", level0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertTrue(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<HomeLight> class0 = HomeLight.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = null;
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeSelectionListener((SelectionListener) null);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isEmpty();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(collection0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertTrue(home1.isBasePlanLocked());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list1 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_fG$L]dQs]~wD");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DimensionLine dimensionLine0 = new DimensionLine((-5701.0F), 398.206F, (-5701.0F), 398.206F, 398.206F);
      assertEquals((-5701.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      Level level0 = dimensionLine0.getLevel();
      assertEquals((-5701.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXStart(), 0.01F);
      assertNull(level0);
      
      home0.setSelectedLevel((Level) null);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean2 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deselectItem(compass0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isEmpty();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Level> list1 = Home.getLevelsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash(3700L, 3700L, (-461.5593F), 3700L, 3700L);
      assertEquals(3700.0F, sash0.getXAxis(), 0.01F);
      assertEquals(3700.0F, sash0.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(3700.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-461.5593F), sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(3700L, (-461.5593F), 3700L, 0.0F, 0.0F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-461.5593F), sash1.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash1.getWidth(), 0.01F);
      assertEquals(0.0F, sash1.getStartAngle(), 0.01F);
      assertEquals(3700.0F, sash1.getXAxis(), 0.01F);
      assertEquals(0.0F, sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-21.600845F), 3700L, (-2698.629F), (-461.5593F), 903.468F);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertEquals(903.468F, sash2.getEndAngle(), 0.01F);
      assertEquals((-461.5593F), sash2.getStartAngle(), 0.01F);
      assertEquals(3700.0F, sash2.getYAxis(), 0.01F);
      assertEquals((-2698.629F), sash2.getWidth(), 0.01F);
      assertEquals((-21.600845F), sash2.getXAxis(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(3700L, (-461.5593F), (-325.6F), 0.0F, (-461.5593F));
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash1));
      assertEquals((-325.6F), sash3.getWidth(), 0.01F);
      assertEquals((-461.5593F), sash3.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash3.getXAxis(), 0.01F);
      assertEquals((-461.5593F), sash3.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash3.getStartAngle(), 0.01F);
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(1162.3413F, 3700L, (-2138.58F), 570.6337F, 3700L);
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash3));
      assertEquals((-2138.58F), sash4.getWidth(), 0.01F);
      assertEquals(3700.0F, sash4.getYAxis(), 0.01F);
      assertEquals(570.6337F, sash4.getStartAngle(), 0.01F);
      assertEquals(1162.3413F, sash4.getXAxis(), 0.01F);
      assertEquals(3700.0F, sash4.getEndAngle(), 0.01F);
      assertNotNull(sash4);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-2138.58F), (-33.3F), (-1201.0F), 3700L, 0.0F);
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash0));
      assertEquals(0.0F, sash5.getEndAngle(), 0.01F);
      assertEquals(3700.0F, sash5.getStartAngle(), 0.01F);
      assertEquals((-2138.58F), sash5.getXAxis(), 0.01F);
      assertEquals((-1201.0F), sash5.getWidth(), 0.01F);
      assertEquals((-33.3F), sash5.getYAxis(), 0.01F);
      assertNotNull(sash5);
      
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-21.600845F), 1262.35F, 1262.35F, 0.0F, (-1380.2985F));
      assertFalse(sash6.equals((Object)sash1));
      assertFalse(sash6.equals((Object)sash4));
      assertFalse(sash6.equals((Object)sash2));
      assertFalse(sash6.equals((Object)sash5));
      assertFalse(sash6.equals((Object)sash0));
      assertFalse(sash6.equals((Object)sash3));
      assertEquals(0.0F, sash6.getStartAngle(), 0.01F);
      assertEquals(1262.35F, sash6.getYAxis(), 0.01F);
      assertEquals((-21.600845F), sash6.getXAxis(), 0.01F);
      assertEquals((-1380.2985F), sash6.getEndAngle(), 0.01F);
      assertEquals(1262.35F, sash6.getWidth(), 0.01F);
      assertNotNull(sash6);
      
      sashArray0[6] = sash6;
      Integer integer0 = new Integer(2090);
      assertEquals(2090, (int)integer0);
      assertNotNull(integer0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.TEXTURE;
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, homePieceOfFurniture_SortableProperty0);
      
      boolean boolean0 = integer0.equals(homePieceOfFurniture_SortableProperty0);
      assertFalse(boolean0);
      
      float[][] floatArray0 = new float[8][5];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-325.6F);
      floatArray1[2] = (-1201.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (-2698.629F);
      floatArray2[2] = 570.6337F;
      floatArray2[3] = (-1201.0F);
      floatArray2[4] = (-2698.629F);
      floatArray2[5] = (-3544.479F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[2];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 155.54236F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 142.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-1201.0F);
      floatArray4[3] = (-325.6F);
      floatArray4[4] = (float) 2090;
      floatArray4[5] = (-1108.8F);
      floatArray4[6] = (-461.5593F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = (-461.5593F);
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-1201.0F);
      floatArray5[3] = (float) 3700L;
      floatArray5[4] = 1162.3413F;
      floatArray0[4] = floatArray5;
      floatArray0[5] = floatArray2;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = (-1380.2985F);
      floatArray6[1] = (float) 2090;
      floatArray6[2] = (-461.5593F);
      floatArray6[3] = (-2138.58F);
      floatArray0[6] = floatArray6;
      float[] floatArray7 = new float[2];
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray5));
      
      floatArray7[0] = (-1380.2985F);
      floatArray7[1] = 0.0F;
      floatArray0[7] = floatArray7;
      BigDecimal bigDecimal0 = new BigDecimal(2539);
      assertEquals((short)2539, bigDecimal0.shortValue());
      assertEquals((byte) (-21), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home1.getFurnitureVisibleProperties();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureVisibleProperties(list0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home1.getFurnitureVisibleProperties();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(list1, list0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list1.contains(homePieceOfFurniture_SortableProperty0));
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, (-39.49F), 3700L, (-983.4F));
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3739.49F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-39.49F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-983.4F), dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      Wall wall0 = new Wall((-325.6F), (-3260.2278F), (-21.600845F), (-3544.479F), (-2138.58F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3260.2278F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3544.479F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-21.600845F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3402.3535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(416.19016F, wall0.getLength(), 0.01F);
      assertEquals((-325.6F), wall0.getXStart(), 0.01F);
      assertEquals((-173.60043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2138.58F), wall0.getThickness(), 0.01F);
      assertEquals(416.19016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3260.2278F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3544.479F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-21.600845F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3402.3535F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(416.19016F, wall0.getLength(), 0.01F);
      assertEquals((-325.6F), wall0.getXStart(), 0.01F);
      assertEquals((-173.60043F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2138.58F), wall0.getThickness(), 0.01F);
      assertEquals(416.19016F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(level0);
      
      dimensionLine0.setLevel((Level) null);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3739.49F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-39.49F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-983.4F), dimensionLine0.getOffset(), 0.01F);
      
      home1.addDimensionLine(dimensionLine0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3739.49F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-39.49F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-983.4F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(homePieceOfFurniture_SortableProperty1.equals((Object)homePieceOfFurniture_SortableProperty0));
      assertNotSame(home0, home1);
      assertNotSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spliterator<HomeLight> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      Class<DimensionLine> class0 = DimensionLine.class;
      List<DimensionLine> list2 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(list2.contains(dimensionLine0));
      assertNotNull(list2);
      
      home1.setSelectedItems(list2);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(list2.contains(dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home1.isEmpty();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine((-5701.0F), 398.206F, (-5701.0F), 398.206F, 398.206F);
      assertEquals(398.206F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.deleteDimensionLine(dimensionLine0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(398.206F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(398.206F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-5701.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home0 = new Home(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(0, linkedList0.size());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      List<Level> list1 = Home.getLevelsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Camera.Lens camera_Lens0 = Camera.Lens.SPHERICAL;
      Camera camera0 = new Camera(0.0F, 0.0F, (-126.91609F), 996.73F, 2693.6265F, 5.4977875F, 0L, camera_Lens0);
      assertEquals(5.4977875F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(0.0F, camera0.getY(), 0.01F);
      assertEquals(0L, camera0.getTime());
      assertEquals((-126.91609F), camera0.getZ(), 0.01F);
      assertEquals(2693.6265F, camera0.getPitch(), 0.01F);
      assertEquals(996.73F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      assertNotNull(camera0);
      
      camera0.setTime(1L);
      assertEquals(1L, camera0.getTime());
      assertEquals(5.4977875F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(0.0F, camera0.getY(), 0.01F);
      assertEquals((-126.91609F), camera0.getZ(), 0.01F);
      assertEquals(2693.6265F, camera0.getPitch(), 0.01F);
      assertEquals(996.73F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      
      camera0.setY(1L);
      assertEquals(1L, camera0.getTime());
      assertEquals(5.4977875F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(1.0F, camera0.getY(), 0.01F);
      assertEquals((-126.91609F), camera0.getZ(), 0.01F);
      assertEquals(2693.6265F, camera0.getPitch(), 0.01F);
      assertEquals(996.73F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      
      Camera camera1 = camera0.clone();
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertEquals(1L, camera0.getTime());
      assertEquals(5.4977875F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(1.0F, camera0.getY(), 0.01F);
      assertEquals((-126.91609F), camera0.getZ(), 0.01F);
      assertEquals(2693.6265F, camera0.getPitch(), 0.01F);
      assertEquals(996.73F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      assertNull(camera1.getName());
      assertEquals(996.73F, camera1.getYaw(), 0.01F);
      assertEquals(Camera.Lens.SPHERICAL, camera1.getLens());
      assertEquals((-126.91609F), camera1.getZ(), 0.01F);
      assertEquals(1L, camera1.getTime());
      assertEquals(5.4977875F, camera1.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera1.getX(), 0.01F);
      assertEquals(1.0F, camera1.getY(), 0.01F);
      assertEquals(2693.6265F, camera1.getPitch(), 0.01F);
      assertNotNull(camera1);
      
      home0.setCamera(camera1);
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(1L, camera0.getTime());
      assertEquals(5.4977875F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(1.0F, camera0.getY(), 0.01F);
      assertEquals((-126.91609F), camera0.getZ(), 0.01F);
      assertEquals(2693.6265F, camera0.getPitch(), 0.01F);
      assertEquals(996.73F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      assertNull(camera1.getName());
      assertEquals(996.73F, camera1.getYaw(), 0.01F);
      assertEquals(Camera.Lens.SPHERICAL, camera1.getLens());
      assertEquals((-126.91609F), camera1.getZ(), 0.01F);
      assertEquals(1L, camera1.getTime());
      assertEquals(5.4977875F, camera1.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera1.getX(), 0.01F);
      assertEquals(1.0F, camera1.getY(), 0.01F);
      assertEquals(2693.6265F, camera1.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = new Compass(3700L, 1.0F, 1.0F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(1.0F, compass0.getDiameter(), 0.01F);
      assertEquals(1.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertNotNull(compass0);
      
      compass0.setLongitude(3700L);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(1.0F, compass0.getDiameter(), 0.01F);
      assertEquals(1.0F, compass0.getY(), 0.01F);
      assertEquals(3700.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      
      home0.deselectItem(compass0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(1.0F, compass0.getDiameter(), 0.01F);
      assertEquals(1.0F, compass0.getY(), 0.01F);
      assertEquals(3700.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertFalse(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list2);
      
      String string0 = home0.getName();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("vqEmVAMy:x,}W0o");
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals("vqEmVAMy:x,}W0o", home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list3 = home0.getStoredCameras();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals("vqEmVAMy:x,}W0o", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertFalse(list3.contains(camera1));
      assertNotNull(list3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string1 = home0.getName();
      assertEquals("vqEmVAMy:x,}W0o", string1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals("vqEmVAMy:x,}W0o", home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(string1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list4 = home0.getFurnitureVisibleProperties();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals("vqEmVAMy:x,}W0o", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(5, list4.size());
      assertFalse(list4.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list4);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list4);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals("vqEmVAMy:x,}W0o", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(5, list4.size());
      assertFalse(list4.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list5 = Home.getWallsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list5);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      Consumer<HomePieceOfFurniture> consumer0 = (Consumer<HomePieceOfFurniture>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      Home home0 = new Home(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeLight homeLight0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(homeLight0);
      
      List<Selectable> list3 = home0.getSelectedItems();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home1.getName();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener1 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Label> collectionListener2 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener2);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home1.getObserverCamera();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list4 = home1.getSelectedItems();
      assertTrue(list4.equals((Object)list3));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(list4, list3);
      assertNotSame(home1, home0);
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(list4);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(true);
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3.1415927F, 1621.4791F, 3700L, 0.0F, 1621.4791F);
      assertEquals(1621.4791F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3.1415927F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1621.4791F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(4036.825F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      Label label0 = new Label("g6D9QAV", 0.0F, (-1.0F));
      assertEquals((-1.0F), label0.getY(), 0.01F);
      assertEquals("g6D9QAV", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      home1.deleteLabel(label0);
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertEquals((-1.0F), label0.getY(), 0.01F);
      assertEquals("g6D9QAV", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(list0.contains(label0));
      assertFalse(list1.contains(dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home1.getSelectedLevel();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertNull(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(list0.contains(label0));
      assertFalse(list1.contains(dimensionLine0));
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(list0.contains(label0));
      assertFalse(list1.contains(dimensionLine0));
      assertNotNull(collection0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home2 = home0.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertTrue(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertFalse(list0.contains(label0));
      assertFalse(list1.contains(dimensionLine0));
      assertNotNull(home2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = new Compass(3042.548F, 0.0F, 3700L);
      assertEquals(3042.548F, compass0.getX(), 0.01F);
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setVisible(true);
      assertEquals(3042.548F, compass0.getX(), 0.01F);
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      
      ObserverCamera observerCamera0 = new ObserverCamera(3042.548F, 0.0F, 0.0F, 3042.548F, 3042.548F, 3700L);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera0.getHeight(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3042.548F, observerCamera0.getPitch(), 0.01F);
      assertEquals(3042.548F, observerCamera0.getX(), 0.01F);
      assertEquals(0.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNull(observerCamera0.getName());
      assertEquals(3042.548F, observerCamera0.getYaw(), 0.01F);
      assertNotNull(observerCamera0);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera0.getHeight(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3042.548F, observerCamera0.getPitch(), 0.01F);
      assertEquals(3042.548F, observerCamera0.getX(), 0.01F);
      assertEquals(0.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNull(observerCamera0.getName());
      assertEquals(3042.548F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3042.548F, observerCamera1.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(3042.548F, observerCamera1.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(0.0F, observerCamera1.getHeight(), 0.01F);
      assertNull(observerCamera1.getName());
      assertEquals(3042.548F, observerCamera1.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(8.0F, observerCamera1.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera1.getY(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(20.0F, observerCamera1.getWidth(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertNotNull(observerCamera1);
      
      long long0 = Camera.convertTimeToTimeZone(3700L, "");
      assertEquals(1392409281320L, long0);
      
      ObserverCamera observerCamera2 = (ObserverCamera)observerCamera0.clone();
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera2.equals((Object)observerCamera1));
      assertFalse(observerCamera2.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera2);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera2, observerCamera1);
      assertNotSame(observerCamera2, observerCamera0);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera0.getHeight(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3042.548F, observerCamera0.getPitch(), 0.01F);
      assertEquals(3042.548F, observerCamera0.getX(), 0.01F);
      assertEquals(0.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNull(observerCamera0.getName());
      assertEquals(3042.548F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.0F, observerCamera2.getY(), 0.01F);
      assertEquals(0.0F, observerCamera2.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera2.getFieldOfView(), 0.01F);
      assertEquals(3042.548F, observerCamera2.getPitch(), 0.01F);
      assertEquals(8.0F, observerCamera2.getDepth(), 0.01F);
      assertFalse(observerCamera2.isFixedSize());
      assertEquals(3042.548F, observerCamera2.getYaw(), 0.01F);
      assertNull(observerCamera2.getName());
      assertEquals(20.0F, observerCamera2.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera2.getTime());
      assertEquals(3042.548F, observerCamera2.getX(), 0.01F);
      assertEquals(0.0F, observerCamera2.getHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera2.getLens());
      assertNotNull(observerCamera2);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera1 = camera0.clone();
      assertFalse(camera1.equals((Object)camera0));
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertNull(camera1.getName());
      assertNotNull(camera1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setCamera(camera0);
      assertFalse(camera0.equals((Object)camera1));
      assertNotSame(camera0, camera1);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertNotNull(compass0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(linkedList0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("]hDF.EwwcN", propertyChangeListener0);
      assertEquals("]hDF.EwwcN", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("]hDF.EwwcN", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("]hDF.EwwcN", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("]hDF.EwwcN", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      Camera camera0 = home0.getCamera();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      camera0.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("]hDF.EwwcN", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("]hDF.EwwcN", propertyChangeListenerProxy1.getPropertyName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list0);
      
      home0.setSelectedItems(linkedList0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList1 = new LinkedList<Camera>();
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(camera0));
      assertNotNull(linkedList1);
      
      home0.setStoredCameras(linkedList1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera1 = home0.getCamera();
      assertSame(camera1, camera0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertNotNull(camera1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNull(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(observerCamera0.getName());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNotNull(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      Consumer<HomePieceOfFurniture> consumer0 = (Consumer<HomePieceOfFurniture>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      Home home0 = new Home(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeLight homeLight0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(homeLight0);
      
      List<Selectable> list3 = home0.getSelectedItems();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home1.getName();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertNull(string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener1 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener1);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Wall> list4 = Wall.clone((List<Wall>) linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertNotNull(list4);
      
      List<DimensionLine> list5 = Home.getDimensionLinesSubList(list1);
      assertTrue(list5.equals((Object)list1));
      assertNotSame(list1, list5);
      assertNotSame(list5, list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      assertNotNull(list5);
      
      boolean boolean1 = linkedList1.retainAll(list0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Wall> list6 = Wall.clone((List<Wall>) linkedList1);
      assertTrue(list6.equals((Object)list4));
      assertNotSame(list6, list4);
      assertEquals(0, linkedList1.size());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      assertNotNull(list6);
      
      List<Level> list7 = Home.getLevelsSubList(list6);
      assertTrue(list6.equals((Object)list4));
      assertNotSame(list6, list4);
      assertEquals(0, linkedList1.size());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      assertEquals(0, list7.size());
      assertTrue(list7.isEmpty());
      assertNotNull(list7);
      
      Home home2 = home0.clone();
      assertTrue(list1.equals((Object)list5));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotSame(list1, list5);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertTrue(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertNotNull(home2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener2 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home2.removeLevelsListener(collectionListener2);
      assertTrue(list1.equals((Object)list5));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotSame(list1, list5);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertTrue(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setSelectedLevel((Level) null);
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener3 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeRoomsListener(collectionListener3);
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list8 = home0.getLevels();
      assertTrue(list1.equals((Object)list5));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertTrue(list8.equals((Object)list7));
      assertNotSame(list1, list5);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(list8.isEmpty());
      assertEquals(0, list8.size());
      assertNotNull(list8);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertFalse(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Home home0 = new Home((-2048.73F));
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-2048.73F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list0 = home0.getLevels();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-2048.73F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = new Compass(3042.548F, 0.0F, 3700L);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3042.548F, compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setVisible(true);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3042.548F, compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(compass0);
      assertTrue(boolean0);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3042.548F, compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(compass0));
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list1);
      
      ObserverCamera observerCamera0 = new ObserverCamera(0.0F, 0.0F, 14.604167F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(15.647322F, observerCamera0.getHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNull(observerCamera0.getName());
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertNotNull(observerCamera0);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(15.647322F, observerCamera0.getHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNull(observerCamera0.getName());
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera1.getX(), 0.01F);
      assertEquals(0.0F, observerCamera1.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera1.getY(), 0.01F);
      assertEquals(14.604167F, observerCamera1.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera1.getYaw(), 0.01F);
      assertEquals(8.0F, observerCamera1.getDepth(), 0.01F);
      assertNull(observerCamera1.getName());
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(20.0F, observerCamera1.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(15.647322F, observerCamera1.getHeight(), 0.01F);
      assertNotNull(observerCamera1);
      
      long long0 = Camera.convertTimeToTimeZone(3700L, "BASE_PLAN_LOCKED");
      assertEquals(1392409281320L, long0);
      
      ObserverCamera observerCamera2 = (ObserverCamera)observerCamera0.clone();
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera2.equals((Object)observerCamera0));
      assertFalse(observerCamera2.equals((Object)observerCamera1));
      assertNotSame(observerCamera0, observerCamera2);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera2, observerCamera0);
      assertNotSame(observerCamera2, observerCamera1);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(15.647322F, observerCamera0.getHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNull(observerCamera0.getName());
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera2.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera2.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera2.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera2.getY(), 0.01F);
      assertEquals(0.0F, observerCamera2.getX(), 0.01F);
      assertNull(observerCamera2.getName());
      assertEquals(15.647322F, observerCamera2.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera2.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera2.getLens());
      assertFalse(observerCamera2.isFixedSize());
      assertEquals(1392409281320L, observerCamera2.getTime());
      assertEquals(20.0F, observerCamera2.getWidth(), 0.01F);
      assertEquals(8.0F, observerCamera2.getDepth(), 0.01F);
      assertNotNull(observerCamera2);
      
      ObserverCamera observerCamera3 = (ObserverCamera)observerCamera0.clone();
      assertFalse(observerCamera0.equals((Object)observerCamera2));
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera3.equals((Object)observerCamera1));
      assertFalse(observerCamera3.equals((Object)observerCamera2));
      assertFalse(observerCamera3.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera3);
      assertNotSame(observerCamera0, observerCamera2);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera3, observerCamera1);
      assertNotSame(observerCamera3, observerCamera2);
      assertNotSame(observerCamera3, observerCamera0);
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(15.647322F, observerCamera0.getHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNull(observerCamera0.getName());
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera3.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera3.getPitch(), 0.01F);
      assertEquals(14.604167F, observerCamera3.getZ(), 0.01F);
      assertNull(observerCamera3.getName());
      assertEquals(0.0F, observerCamera3.getYaw(), 0.01F);
      assertEquals(8.0F, observerCamera3.getDepth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera3.getLens());
      assertFalse(observerCamera3.isFixedSize());
      assertEquals(20.0F, observerCamera3.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera3.getTime());
      assertEquals(15.647322F, observerCamera3.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera3.getY(), 0.01F);
      assertEquals(0.0F, observerCamera3.getX(), 0.01F);
      assertNotNull(observerCamera3);
      
      home0.setCamera(observerCamera3);
      assertFalse(observerCamera0.equals((Object)observerCamera3));
      assertFalse(observerCamera0.equals((Object)observerCamera2));
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera3.equals((Object)observerCamera1));
      assertFalse(observerCamera3.equals((Object)observerCamera2));
      assertFalse(observerCamera3.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera3);
      assertNotSame(observerCamera0, observerCamera2);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera3, observerCamera1);
      assertNotSame(observerCamera3, observerCamera2);
      assertNotSame(observerCamera3, observerCamera0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(14.604167F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(0.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(15.647322F, observerCamera0.getHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertNull(observerCamera0.getName());
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.0F, observerCamera3.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera3.getPitch(), 0.01F);
      assertEquals(14.604167F, observerCamera3.getZ(), 0.01F);
      assertNull(observerCamera3.getName());
      assertEquals(0.0F, observerCamera3.getYaw(), 0.01F);
      assertEquals(8.0F, observerCamera3.getDepth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera3.getLens());
      assertFalse(observerCamera3.isFixedSize());
      assertEquals(20.0F, observerCamera3.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera3.getTime());
      assertEquals(15.647322F, observerCamera3.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera3.getY(), 0.01F);
      assertEquals(0.0F, observerCamera3.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNotNull(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Wall> class0 = Wall.class;
      List<Wall> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(list2.equals((Object)list1));
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<DimensionLine> list3 = Home.getDimensionLinesSubList(list0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list4 = Wall.clone(list1);
      assertTrue(list1.equals((Object)list2));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list1));
      assertNotSame(list1, list2);
      assertNotSame(list1, list4);
      assertNotSame(list4, list2);
      assertNotSame(list4, list1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotNull(list4);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list5 = Home.getLevelsSubList(list1);
      assertTrue(list1.equals((Object)list4));
      assertTrue(list1.equals((Object)list2));
      assertNotSame(list1, list2);
      assertNotSame(list1, list4);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      assertNotNull(list5);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(true);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener1 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener1);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home1.getObserverCamera();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertNotNull(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setRecovered(false);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("$2A");
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("$2A", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("$2A", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("$2A", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertEquals("", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals("", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals("", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals("", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals("", home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (float) 3700L;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = (float) 3700L;
      floatArray1[7] = (float) 3700L;
      floatArray1[8] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = 0.0F;
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      assertEquals("", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      floatArray3[2] = (float) 3700L;
      floatArray0[2] = floatArray3;
      CollectionListener<DimensionLine> collectionListener1 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addDimensionLinesListener(collectionListener1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals("", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals("", home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[] floatArray4 = new float[2];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (float) 3700L;
      floatArray4[1] = (float) 3700L;
      floatArray0[3] = floatArray4;
      Room room0 = new Room(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3700.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home0 = new Home(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertEquals(0, linkedList0.size());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 0.0F, (-1087.8348F), 3700L, (-1087.8348F));
      assertEquals((-1087.8348F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-1087.8348F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(6050.8975F, dimensionLine0.getLength(), 0.01F);
      assertNotNull(dimensionLine0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      // Undeclared exception!
      try { 
        home0.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNotNull(home1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      List<HomePieceOfFurniture.SortableProperty> list0 = home1.getFurnitureVisibleProperties();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureVisibleProperties(list0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      float float0 = (-39.49F);
      List<HomePieceOfFurniture.SortableProperty> list1 = home1.getFurnitureVisibleProperties();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(list1, list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float float1 = (-983.4F);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setHeight(3700L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }
}
