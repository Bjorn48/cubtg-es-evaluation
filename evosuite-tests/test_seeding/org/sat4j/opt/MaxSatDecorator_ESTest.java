/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:09:31 GMT 2019
 */

package org.sat4j.opt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MaxSatDecorator_ESTest extends MaxSatDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(solver0).createBlockingClauseForCurrentModel();
      doReturn(true).when(solver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) null, (Object) null, (Object) null, (Object) intArray0, (Object) null).when(solver0).modelWithInternalVariables();
      doReturn(0, 0, 0, 0, 0).when(solver0).nVars();
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      fullClauseSelectorSolver0.model();
      gateTranslator0.model();
      fullClauseSelectorSolver0.model();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution(iVecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(solver0).createBlockingClauseForCurrentModel();
      doReturn(true).when(solver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) null, (Object) null, (Object) null, (Object) intArray0, (Object) null).when(solver0).modelWithInternalVariables();
      doReturn(0, 0).when(solver0).nVars();
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      fullClauseSelectorSolver0.model();
      gateTranslator0.model();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      singleSolutionDetector0.model();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0);
      maxSatDecorator0.admitABetterSolution(iVecInt0);
      maxSatDecorator0.calculateObjectiveValue();
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, true);
      maxSatDecorator0.reset();
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt();
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause(unitPropagationListener0, iLits0, vecInt0);
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(originalBinaryClause0).when(solver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, true);
      maxSatDecorator0.discard();
      assertFalse(maxSatDecorator0.isSolutionOptimal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(solver0).createBlockingClauseForCurrentModel();
      doReturn(true).when(solver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) null, (Object) null, (Object) null, (Object) intArray0, (Object) null).when(solver0).modelWithInternalVariables();
      doReturn(0, 0).when(solver0).nVars();
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      fullClauseSelectorSolver0.model();
      gateTranslator0.model();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      singleSolutionDetector0.model();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0);
      maxSatDecorator0.admitABetterSolution(iVecInt0);
      Number number0 = maxSatDecorator0.calculateObjective();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, (RestartStrategy) null, iLogAble0);
      ClausalCardinalitiesDecorator<Solver<ClausalDataStructureWL>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Solver<ClausalDataStructureWL>>(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(clausalCardinalitiesDecorator0, false);
      Number number0 = maxSatDecorator0.getObjectiveValue();
      // Undeclared exception!
      try { 
        maxSatDecorator0.forceObjectiveValueTo(number0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.forceObjectiveValueTo((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.MaxSatDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(solver0).nVars();
      NegationDecorator<Solver<ClausalDataStructureWL>> negationDecorator0 = new NegationDecorator<Solver<ClausalDataStructureWL>>(solver0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(negationDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discardCurrentSolution();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discardCurrentSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, false);
      // Undeclared exception!
      try { 
        maxSatDecorator0.calculateObjectiveValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.MaxSatDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(solver0).createBlockingClauseForCurrentModel();
      doReturn(true, true).when(solver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((Object) null, (Object) null, (Object) null, (Object) intArray0, (Object) null).when(solver0).modelWithInternalVariables();
      doReturn(0, 0, (-2384), 18, (-2384)).when(solver0).nVars();
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, true);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      fullClauseSelectorSolver0.model();
      gateTranslator0.model();
      fullClauseSelectorSolver0.model();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0);
      maxSatDecorator0.admitABetterSolution(iVecInt0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, true);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      iVecInt0.pop();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.admitABetterSolution(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(solver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, true);
      IVecInt iVecInt0 = VecInt.EMPTY;
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(solver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      iVecInt0.insertFirst((-306));
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(solver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(2318);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-480), 6).when(iVecInt0).get(anyInt());
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause(unitPropagationListener0, iLits0, iVecInt0);
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(originalBinaryClause0).when(solver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(false).when(solver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(true).when(solver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      IVecInt iVecInt1 = fullClauseSelectorSolver0.getLastClause();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, true);
      maxSatDecorator0.discardCurrentSolution();
      boolean boolean0 = maxSatDecorator0.admitABetterSolution(iVecInt1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(solver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, true);
      boolean boolean0 = maxSatDecorator0.admitABetterSolution(iVecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-480), 6).when(iVecInt0).get(anyInt());
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause(unitPropagationListener0, iLits0, iVecInt0);
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(originalBinaryClause0, (IConstr) null).when(solver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(false).when(solver0).removeSubsumedConstr(any(org.sat4j.specs.IConstr.class));
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, true);
      maxSatDecorator0.discardCurrentSolution();
      maxSatDecorator0.discardCurrentSolution();
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iVecInt0).get(anyInt());
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause(unitPropagationListener0, iLits0, iVecInt0);
      originalBinaryClause0.get(5129);
      HashMap<String, Number> hashMap0 = new HashMap<String, Number>();
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, originalBinaryClause0, (IConstr) null).when(solver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 1675).when(solver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      IVecInt iVecInt1 = fullClauseSelectorSolver0.getLastClause();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      singleSolutionDetector0.addClause(iVecInt1);
      fullClauseSelectorSolver0.addControlableClause(iVecInt1);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(iVecInt1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(solver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, true);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0);
      maxSatDecorator0.addClause(iVecInt0);
      assertEquals(0, iVecInt0.last());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      maxSatDecorator0.setExpectedNumberOfClauses(4490);
      assertEquals(4490, maxSatDecorator0.getExpectedNumberOfClauses());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(solver0).nVars();
      NegationDecorator<Solver<ClausalDataStructureWL>> negationDecorator0 = new NegationDecorator<Solver<ClausalDataStructureWL>>(solver0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(negationDecorator0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.discard();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.setTimeoutForFindingBetterSolution(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No implemented yet
         //
         verifyException("org.sat4j.opt.MaxSatDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(singleSolutionDetector0, true);
      // Undeclared exception!
      try { 
        maxSatDecorator0.calculateObjective();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.MaxSatDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      boolean boolean0 = maxSatDecorator0.hasNoObjectiveFunction();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        maxSatDecorator0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      Number number0 = maxSatDecorator0.getObjectiveValue();
      maxSatDecorator0.forceObjectiveValueTo(number0);
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Solver<ClausalDataStructureWL>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Solver<ClausalDataStructureWL>>(solver0, false);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0);
      boolean boolean0 = maxSatDecorator0.nonOptimalMeansSatisfiable();
      assertFalse(boolean0);
  }
}
