/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:25:13 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LearntHTClause_ESTest extends LearntHTClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-1379));
      vecInt0.push((-1379));
      LearntHTClause learntHTClause0 = new LearntHTClause(iVecInt0, (ILits) null);
      learntHTClause0.head = 1;
      // Undeclared exception!
      try { 
        learntHTClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.LearntHTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause((IVecInt) null, (ILits) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-388));
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause(iVecInt0, (ILits) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LearntHTClause learntHTClause0 = null;
      try {
        learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(1670, 1670);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.LearntHTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(3, 3);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.forwardActivity(3);
      assertTrue(learntHTClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(1670, 1670);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.setLearnt();
      assertFalse(learntHTClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(1670, 1670);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntHTClause0.propagatePI((MandatoryLiteralListener) null, 2994);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.LearntHTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(1671, 1671);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.incActivity(1671);
      assertEquals(1671.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(1670, 1670);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      learntHTClause0.setActivity(1670);
      assertEquals(1670.0, learntHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(1670, 1670);
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, (ILits) null);
      boolean boolean0 = learntHTClause0.learnt();
      assertTrue(boolean0);
  }
}
