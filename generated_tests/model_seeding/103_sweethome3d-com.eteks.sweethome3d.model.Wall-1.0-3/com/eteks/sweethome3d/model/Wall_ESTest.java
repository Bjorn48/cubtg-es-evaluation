/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 18:21:30 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.01F, 0.01F, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.01F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 59.50408F, (-64.0F), 0.0F);
      assertEquals(59.50408F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(59.50408F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertEquals(59.50408F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level0.clone();
      assertEquals(59.50408F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(59.50408F, level2.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      wall0.setLevel(level2);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(59.50408F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(59.50408F, level2.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-32.0F), float2, 0.01F);
      
      int int0 = Integer.sum(0, (-1903));
      assertEquals((-1903), int0);
      
      Integer integer0 = Integer.valueOf(0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer1);
      
      Integer integer2 = Integer.getInteger("] =[2H'l", 12);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(12, (int)integer2);
      
      Integer integer3 = Integer.getInteger("", integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(12, (int)integer3);
      
      boolean boolean0 = integer3.equals("] =[2H'l");
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer3);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      float float3 = wall0.getLength();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(64.0F, float3, 0.01F);
      
      wall0.setYStart(0.1F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.00006F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.00006F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.00006F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.00006F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer4 = wall0.getRightSideColor();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.00006F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.00006F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(12, (int)integer4);
      
      float float4 = wall0.getXEnd();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(64.00006F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.00006F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-64.0F), float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1034.0F), 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float0);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setHeightAtEnd((Float) null);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      wall1.setLeftSideShininess(0.0F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      float float2 = Float.max(1.0F, 0.0F);
      assertEquals(1.0F, float2, 0.01F);
      
      wall1.setHeight(float1);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      Wall wall2 = wall0.clone();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-517.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-1034.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1034.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1034.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float3 = wall2.getLeftSideShininess();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-517.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-1034.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1034.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1034.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2.596036F), 0.0F, 0.0F, (-2.596036F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      
      int int0 = Float.compare(3829.803F, 3829.803F);
      assertEquals(0, int0);
      
      wall0.setArcExtent((Float) 3829.803F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.13124175F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(4996.499F, wall0.getLength(), 0.01F);
      assertEquals(3829.803F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.13124175F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(4996.499F, wall0.getLength(), 0.01F);
      assertEquals(3829.803F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(14, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("{:)E)SV&[G9{cE", 0.0F, 0.0F, 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertEquals(0.01F, level2.getHeight(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-32.0F), float0, 0.01F);
      
      Integer integer0 = new Integer((-1301));
      assertNotNull(integer0);
      assertEquals((-1301), (int)integer0);
      
      int int0 = Integer.sum(854, 854);
      assertEquals(1708, int0);
      
      Integer integer1 = Integer.valueOf(1708);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1708, (int)integer1);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(integer2);
      
      Integer integer3 = Integer.getInteger("Ks=bN3Fp2Hh?*q1%", (-3288));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      assertEquals((-3288), (int)integer3);
      
      Integer integer4 = Integer.getInteger("Ks=bN3Fp2Hh?*q1%", (Integer) null);
      assertNull(integer4);
      
      Integer integer5 = Integer.valueOf(13);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertNotNull(integer5);
      assertEquals(13, (int)integer5);
      
      Integer integer6 = Integer.valueOf(13);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertNotNull(integer6);
      assertEquals(13, (int)integer6);
      
      boolean boolean0 = integer6.equals(integer0);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer6));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1708, (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(integer1.equals((Object)integer3));
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer6));
      
      Level level3 = new Level("d.gH3?ANEM')M-", 1708, 0.0F, 1.0F);
      assertEquals(1708.0F, level3.getElevation(), 0.01F);
      assertEquals("d.gH3?ANEM')M-", level3.getName());
      assertTrue(level3.isVisible());
      assertEquals(0.0F, level3.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level3.getHeight(), 0.01F);
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level2));
      assertNotNull(level3);
      
      Level level4 = level0.clone();
      assertEquals(0.0F, level4.getElevation(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level4.getName());
      assertEquals(0.01F, level4.getHeight(), 0.01F);
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level3));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertNotNull(level4);
      assertNotSame(level4, level0);
      assertNotSame(level4, level2);
      assertNotSame(level4, level1);
      assertNotSame(level4, level3);
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      
      Level level5 = level0.clone();
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level5.getElevation(), 0.01F);
      assertEquals(0.01F, level5.getHeight(), 0.01F);
      assertEquals(0.0F, level5.getFloorThickness(), 0.01F);
      assertTrue(level5.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level5.getName());
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level5.equals((Object)level3));
      assertFalse(level5.equals((Object)level4));
      assertFalse(level5.equals((Object)level2));
      assertFalse(level5.equals((Object)level1));
      assertFalse(level5.equals((Object)level0));
      assertNotNull(level5);
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level0, level5);
      assertNotSame(level0, level1);
      assertNotSame(level5, level3);
      assertNotSame(level5, level4);
      assertNotSame(level5, level2);
      assertNotSame(level5, level1);
      assertNotSame(level5, level0);
      
      boolean boolean1 = wall0.isAtLevel(level3);
      assertEquals(1708.0F, level3.getElevation(), 0.01F);
      assertEquals("d.gH3?ANEM')M-", level3.getName());
      assertTrue(level3.isVisible());
      assertEquals(0.0F, level3.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level3.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1708, (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level4));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level5));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level3, level1);
      assertNotSame(level3, level0);
      assertNotSame(level3, level4);
      assertNotSame(level3, level2);
      assertNotSame(level3, level5);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1708, (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(64.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1844.3F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1844.3F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1844.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(922.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1844.3F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Class<Wall> class0 = Wall.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", "z=&-!/-Q${V\"D", resourceURLContent0, 0.0F, 0.0F, "");
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("z=&-!/-Q${V\"D", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertNotNull(catalogTexture0);
      
      String string0 = catalogTexture0.getName();
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("z=&-!/-Q${V\"D", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertNotNull(string0);
      assertEquals("z=&-!/-Q${V\"D", string0);
      
      ResourceURLContent resourceURLContent1 = (ResourceURLContent)catalogTexture0.getImage();
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("z=&-!/-Q${V\"D", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertTrue(resourceURLContent1.isMultiPartResource());
      assertTrue(resourceURLContent1.isJAREntry());
      assertNotNull(resourceURLContent1);
      assertSame(resourceURLContent0, resourceURLContent1);
      assertSame(resourceURLContent1, resourceURLContent0);
      
      float float0 = catalogTexture0.getWidth();
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("z=&-!/-Q${V\"D", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertEquals(0.0F, float0, 0.01F);
      assertSame(resourceURLContent0, resourceURLContent1);
      
      float float1 = catalogTexture0.getHeight();
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("z=&-!/-Q${V\"D", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertSame(resourceURLContent0, resourceURLContent1);
      
      wall0.setPattern(catalogTexture0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1844.3F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1844.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(922.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1844.3F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("z=&-!/-Q${V\"D", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getId());
      assertSame(resourceURLContent0, resourceURLContent1);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1844.3F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1844.3F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(922.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1844.3F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-3678.07F), 3130.0F, 496.604F, 496.604F, 1259.751F);
      assertEquals(5217.7393F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals((-3678.07F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5217.7393F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1590.733F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 0.01F, 697.9244F, 496.604F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertEquals(697.9244F, level2.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level2.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals(496.604F, level2.getHeight(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      wall0.setLevel(level0);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1565.0F, float1, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.sum(0, 0);
      assertEquals(0, int0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(1565.0F, float2, 0.01F);
      
      float float3 = wall0.getThickness();
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(496.604F, float3, 0.01F);
      
      wall0.setRightSideShininess((-3322.756F));
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-3322.756F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(7.897583F);
      assertNotNull(float0);
      assertEquals(7.897583F, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setHeight(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1033.8953F), 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1033.8953F), wall1.getYEnd(), 0.01F);
      assertEquals((-516.94763F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1033.8953F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1033.8953F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Level level0 = new Level("LEFT_SIDE_SHININESS", 697.9244F, 697.9244F, 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals("LEFT_SIDE_SHININESS", level0.getName());
      assertEquals(697.9244F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals("LEFT_SIDE_SHININESS", level0.getName());
      assertEquals(697.9244F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(697.9244F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertEquals("LEFT_SIDE_SHININESS", level1.getName());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level0.clone();
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals("LEFT_SIDE_SHININESS", level0.getName());
      assertEquals(697.9244F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(697.9244F, level2.getFloorThickness(), 0.01F);
      assertEquals("LEFT_SIDE_SHININESS", level2.getName());
      assertEquals(697.9244F, level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      wall0.setLevel(level1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals("LEFT_SIDE_SHININESS", level0.getName());
      assertEquals(697.9244F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(697.9244F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertEquals("LEFT_SIDE_SHININESS", level1.getName());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      
      float float0 = wall0.getLeftSideShininess();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsWallEndAt(1499.4537F, 0.0F, (-279.65176F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals("LEFT_SIDE_SHININESS", level0.getName());
      assertEquals(697.9244F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.01F, 0.01F, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.01F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 1.0F, (-64.0F), 0.0F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level0.clone();
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level2.isVisible());
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals(1.0F, level2.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      wall0.setLevel(level2);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level2.isVisible());
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals(1.0F, level2.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-32.0F), float2, 0.01F);
      
      Integer integer0 = new Integer((-1301));
      assertNotNull(integer0);
      assertEquals((-1301), (int)integer0);
      
      int int0 = Integer.sum(0, 0);
      assertEquals(0, int0);
      
      Integer integer1 = Integer.valueOf(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(integer2);
      
      boolean boolean0 = integer0.equals((Object) null);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      Integer integer3 = Integer.getInteger("] =[2H'l", 12);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(12, (int)integer3);
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      assertEquals(12, (int)integer4);
      
      boolean boolean1 = integer4.equals("] =[2H'l");
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setRightSideColor(integer4);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      
      Level level3 = new Level("PATTERN", (-2372.5708F), 0.0F, (-64.0F));
      assertEquals(0.0F, level3.getFloorThickness(), 0.01F);
      assertEquals("PATTERN", level3.getName());
      assertTrue(level3.isVisible());
      assertEquals((-2372.5708F), level3.getElevation(), 0.01F);
      assertEquals((-64.0F), level3.getHeight(), 0.01F);
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertNotNull(level3);
      
      Level level4 = level2.clone();
      assertEquals(0.0F, level4.getHeight(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals((-64.0F), level4.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level4.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level4.getName());
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level2.isVisible());
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals(1.0F, level2.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level3));
      assertNotNull(level4);
      assertNotSame(level4, level3);
      assertNotSame(level4, level1);
      assertNotSame(level4, level0);
      assertNotSame(level4, level2);
      assertNotSame(level0, level4);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level3);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level4);
      assertNotSame(level2, level3);
      
      Level level5 = level3.clone();
      assertEquals(0.0F, level3.getFloorThickness(), 0.01F);
      assertEquals("PATTERN", level3.getName());
      assertTrue(level3.isVisible());
      assertEquals((-2372.5708F), level3.getElevation(), 0.01F);
      assertEquals((-64.0F), level3.getHeight(), 0.01F);
      assertTrue(level5.isVisible());
      assertEquals(0.0F, level5.getFloorThickness(), 0.01F);
      assertEquals((-2372.5708F), level5.getElevation(), 0.01F);
      assertEquals((-64.0F), level5.getHeight(), 0.01F);
      assertEquals("PATTERN", level5.getName());
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level4));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level5.equals((Object)level0));
      assertFalse(level5.equals((Object)level3));
      assertFalse(level5.equals((Object)level1));
      assertFalse(level5.equals((Object)level4));
      assertFalse(level5.equals((Object)level2));
      assertNotNull(level5);
      assertNotSame(level3, level5);
      assertNotSame(level3, level2);
      assertNotSame(level3, level4);
      assertNotSame(level3, level0);
      assertNotSame(level3, level1);
      assertNotSame(level5, level0);
      assertNotSame(level5, level3);
      assertNotSame(level5, level1);
      assertNotSame(level5, level4);
      assertNotSame(level5, level2);
      
      boolean boolean2 = wall0.isAtLevel(level4);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, level4.getHeight(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals((-64.0F), level4.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level4.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level4.getName());
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level2.isVisible());
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals(1.0F, level2.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level5));
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level5));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level3));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level4));
      assertFalse(level2.equals((Object)level3));
      assertFalse(level2.equals((Object)level5));
      assertTrue(boolean2);
      assertNotSame(level4, level3);
      assertNotSame(level4, level1);
      assertNotSame(level4, level0);
      assertNotSame(level4, level2);
      assertNotSame(level4, level5);
      assertNotSame(level0, level4);
      assertNotSame(level0, level1);
      assertNotSame(level0, level5);
      assertNotSame(level0, level2);
      assertNotSame(level0, level3);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level4);
      assertNotSame(level2, level3);
      assertNotSame(level2, level5);
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(64.0F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 2303.0583F, 2303.0583F, 429.303F, 0.0F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(429.303F, 2303.0583F, (-128.65648F), 2303.0583F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      Float float2 = new Float((double) 2176.6F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(2176.6F, (float)float2, 0.01F);
      
      float float3 = Float.min(0.0F, (-586.4385F));
      assertEquals((-586.4385F), float3, 0.01F);
      
      Float float4 = new Float((-838.4495F));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-838.4495F), (float)float4, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float4.equals(object0);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeight(float4);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      float float5 = wall0.getYEnd();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      float float6 = wall0.getYStart();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(float6, float5, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      
      boolean boolean1 = wall0.isAtLevel((Level) null);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf((-4019));
      assertNotNull(integer0);
      assertEquals((-4019), (int)integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals((-4019), (int)wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setPattern((TextureImage) null);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals((-4019), (int)wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float(7.897583F);
      assertNotNull(float0);
      assertEquals(7.897583F, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals((-4019), (int)wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals((-4019), (int)wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals((-4019), (int)wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1034.0F), 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float0);
      assertNotSame(wall1, wall0);
      
      wall1.setHeightAtEnd((Float) null);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      float float1 = Float.max(92.72152F, 1.0F);
      assertEquals(92.72152F, float1, 0.01F);
      
      wall1.setHeight((Float) null);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = Float.compare((-4242.8F), 43.4F);
      assertEquals((-1), int0);
      
      wall0.setArcExtent((Float) 43.4F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1725.27F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(43.4F, wall0.getArcExtent(), 0.01F);
      assertEquals(78166.35F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1725.27F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(43.4F, wall0.getArcExtent(), 0.01F);
      assertEquals(78166.35F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(562, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      
      float float2 = wall1.getXArcCircleCenter();
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(47.36076F, float2, 0.01F);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare((-4242.8F), 0.0F);
      assertEquals((-1), int0);
      
      Float float0 = new Float((float) (-1));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-3678.07F), 3130.0F, 496.604F, 496.604F, 1259.751F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1590.733F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5217.7393F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYStart(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5217.7393F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(0.01F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, float0, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 0.01F, 697.9244F, 496.604F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals(0.01F, level2.getElevation(), 0.01F);
      assertEquals(697.9244F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(496.604F, level2.getHeight(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      wall0.setLevel(level0);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1565.0F, float1, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.sum(0, 0);
      assertEquals(0, int0);
      
      Integer integer1 = Integer.valueOf(0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = integer0.equals(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(boolean0);
      
      wall0.setRightSideColor(integer1);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, (-64.0F), 0.0F, 0.0F, (-64.0F), 0.01F);
      assertEquals((-64.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-64.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-64.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float((-2437.9373F));
      assertNotNull(float0);
      assertEquals((-2437.9373F), (float)float0, 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertEquals((-64.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals((-64.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      wall0.setArcExtent(float0);
      assertEquals((-64.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2543365.8F, wall0.getLength(), 0.01F);
      assertEquals(1042.759F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-31.83707F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray2 = wall0.getPoints();
      assertEquals((-64.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2543365.8F, wall0.getLength(), 0.01F);
      assertEquals(1042.759F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-31.83707F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertEquals(3144, floatArray2.length);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      
      Float float1 = new Float((-64.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-64.0F), (float)float1, 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals((-64.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2543365.8F, wall0.getLength(), 0.01F);
      assertEquals(1042.759F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-31.83707F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = Float.min((-2436.0F), 126.328514F);
      assertEquals((-2436.0F), float1, 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Float float2 = wall0.getHeightAtEnd();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.01F, 0.01F, 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(float0);
      assertEquals(0.01F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 59.50408F, (-64.0F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(59.50408F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(59.50408F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertEquals(59.50408F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level0.clone();
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(59.50408F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertEquals(59.50408F, level2.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      wall0.setLevel(level2);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(59.50408F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertEquals(59.50408F, level2.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), float2, 0.01F);
      
      Integer integer0 = new Integer((-1301));
      assertNotNull(integer0);
      assertEquals((-1301), (int)integer0);
      
      int int0 = Integer.sum(0, (-1903));
      assertEquals((-1903), int0);
      
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(integer2);
      
      boolean boolean0 = integer0.equals((Object) null);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(boolean0);
      
      Integer integer3 = Integer.getInteger("] =[2H'l", 12);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals(12, (int)integer3);
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertNotNull(integer4);
      assertEquals(12, (int)integer4);
      
      boolean boolean1 = integer4.equals("] =[2H'l");
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setRightSideColor(integer4);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      
      float float3 = wall0.getLength();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(64.0F, float3, 0.01F);
      
      wall0.setYStart(0.1F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(64.00006F, wall0.getLength(), 0.01F);
      assertEquals(0.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.00006F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(12, (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(64.00006F, wall0.getLength(), 0.01F);
      assertEquals(0.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(64.00006F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = Float.min((-2436.0F), 126.328514F);
      assertEquals((-2436.0F), float0, 0.01F);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float1 = new Float(2.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      float float2 = Float.max((-2436.0F), 1984.4326F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1984.4326F, float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(integer0);
      
      float float4 = wall0.getXEnd();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall((-1.6119415F), (-1.6119415F), (-64.0F), (-1.6119415F), (-1.6119415F));
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      Wall wall1 = new Wall(785.604F, 785.604F, 785.604F, 785.604F, (-1.6119415F), 2.0F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(785.604F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float1 = new Float((-64.0F));
      assertNotNull(float1);
      assertEquals((-64.0F), (float)float1, 0.01F);
      
      wall1.setHeight(float1);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(785.604F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(785.604F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight(float1);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(785.604F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(785.604F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(785.604F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall((-3282.86F), (-3282.86F), (-3282.86F), (-3282.86F), (-3282.86F), (-3282.86F));
      assertEquals((-3282.86F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3282.86F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3282.86F), wall0.getXEnd(), 0.01F);
      assertEquals((-3282.86F), wall0.getYEnd(), 0.01F);
      assertEquals((-3282.86F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3282.86F), wall0.getThickness(), 0.01F);
      assertEquals((-3282.86F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3282.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("Kd#br:", (-3282.86F), (-3282.86F), (-3282.86F));
      assertEquals((-3282.86F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("Kd#br:", level0.getName());
      assertEquals((-3282.86F), level0.getElevation(), 0.01F);
      assertEquals((-3282.86F), level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals((-3282.86F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3282.86F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3282.86F), wall0.getXEnd(), 0.01F);
      assertEquals((-3282.86F), wall0.getYEnd(), 0.01F);
      assertEquals((-3282.86F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3282.86F), wall0.getThickness(), 0.01F);
      assertEquals((-3282.86F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3282.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3282.86F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("Kd#br:", level0.getName());
      assertEquals((-3282.86F), level0.getElevation(), 0.01F);
      assertEquals((-3282.86F), level0.getHeight(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals((-3282.86F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3282.86F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3282.86F), wall0.getXEnd(), 0.01F);
      assertEquals((-3282.86F), wall0.getYEnd(), 0.01F);
      assertEquals((-3282.86F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3282.86F), wall0.getThickness(), 0.01F);
      assertEquals((-3282.86F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3282.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2.596036F), 0.0F, 0.0F, (-2.596036F), 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-2437.9373F));
      assertNotNull(float0);
      assertEquals((-2437.9373F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(103166.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(42.2973F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(103166.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(42.2973F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(636, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      
      float float1 = Float.min((-2436.0F), 126.328514F);
      assertEquals((-2436.0F), float1, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float2 = Float.max(0.01F, 126.328514F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(126.328514F, float2, 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      Float float3 = wall0.getHeightAtEnd();
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(float3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2.596036F), 0.0F, 0.0F, (-2.596036F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-64.0F), (-64.0F), 0.01F, 0.01F, (-773.159F), 785.604F);
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0);
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotNull(propertyChangeListenerProxy1);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float0);
      assertNotSame(wall1, wall0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      wall1.setHeight(float1);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      wall1.setLeftSideShininess((-708.0F));
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals((-708.0F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      Float float2 = new Float((-996.828301));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-996.8283F), (float)float2, 0.01F);
      
      float float3 = Float.max(2.0F, 449.69714F);
      assertEquals(449.69714F, float3, 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals((-708.0F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      Wall wall2 = wall0.clone();
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertEquals((-31.995F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-773.159F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-31.995F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(90.52381F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(90.52381F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-64.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float4 = wall2.getLeftSideShininess();
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertEquals((-31.995F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-773.159F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-31.995F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(90.52381F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(90.52381F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-64.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall1.setYEnd(0.0F);
      assertEquals(155.52905F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals((-708.0F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(155.52905F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(63.164257F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertEquals(155.52905F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals((-708.0F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(155.52905F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(63.164257F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float float5 = wall2.getXStart();
      assertEquals((-64.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(90.52381F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getYStart(), 0.01F);
      assertEquals((-31.995F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-773.159F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-31.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(90.52381F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getXEnd(), 0.01F);
      assertEquals((-31.995F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-773.159F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-31.995F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(90.52381F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(90.52381F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-64.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals((-64.0F), float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(2506.35F, (-325.68784F), (-325.68784F), (-325.68784F), 2506.35F);
      assertEquals((-325.68784F), wall0.getYEnd(), 0.01F);
      assertEquals((-325.68784F), wall0.getXEnd(), 0.01F);
      assertEquals(2832.0378F, wall0.getLength(), 0.01F);
      assertEquals(2506.35F, wall0.getXStart(), 0.01F);
      assertEquals((-325.68784F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.3312F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2832.0378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-325.68784F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2506.35F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-325.68784F), wall0.getYEnd(), 0.01F);
      assertEquals((-325.68784F), wall0.getXEnd(), 0.01F);
      assertEquals(2832.0378F, wall0.getLength(), 0.01F);
      assertEquals(2506.35F, wall0.getXStart(), 0.01F);
      assertEquals((-325.68784F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1090.3312F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2832.0378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-325.68784F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2506.35F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Level level0 = new Level("Kd#br:", 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits((-2923.0F));
      assertFalse(int1 == int0);
      assertEquals((-986271744), int1);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float0);
      assertNotSame(wall1, wall0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      wall1.setHeight(float1);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setHeightAtEnd((Float) (-2923.0F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      Integer integer0 = new Integer(1415);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      assertEquals(1415, (int)integer0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotSame(wall0, wall1);
      
      Level level1 = level0.clone();
      assertEquals("Kd#br:", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertEquals("Kd#br:", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertFalse(boolean0);
      assertNotSame(level1, level0);
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      
      float float2 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertNull(integer1);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      float float2 = Float.sum(1.0F, (-64.0F));
      assertEquals((-63.0F), float2, 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1862.622F), 0.083157174F, 0.1F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5.22599663E17F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5.22599663E17F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(level0);
      
      Float float3 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-5.22599663E17F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(0.0F, (float)float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float0 = Float.min((-2436.0F), 126.328514F);
      assertEquals((-2436.0F), float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float1 = new Float(93.87531705546651);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(93.87532F, (float)float1, 0.01F);
      
      boolean boolean0 = float1.equals("java.version");
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(93.87532F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(857.8F, 857.8F, (-3771.6125F));
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(93.87532F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Float float2 = wall0.getHeightAtEnd();
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(93.87532F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(93.87532F, (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 1433.6F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      float float0 = wall0.getYStart();
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float(2233.33502);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2233.335F, (float)float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1433.6F);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float float2 = Float.min(0.0F, 112.637F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      boolean boolean1 = float1.equals(object0);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setHeight(float1);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float3 = new Float((-838.4495F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals((-838.4495F), (float)float3, 0.01F);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      float float4 = Float.min((-55.974613F), 0.0F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-55.974613F), float4, 0.01F);
      
      float float5 = Float.max((-838.4495F), 0.0F);
      assertEquals(float5, float0, 0.01F);
      assertEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      boolean boolean2 = float3.equals(object1);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(object1, object0);
      
      wall0.setHeightAtEnd(float3);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      
      boolean boolean3 = wall0.containsPoint(0.0F, (-1589.9246F), (-1085.16F));
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Wall wall1 = wall0.clone();
      assertEquals(1433.6F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2233.335F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-838.4495F), wall1.getHeightAtEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall0, wall1);
      
      boolean boolean4 = wall0.intersectsRectangle(1.0F, (-284.0F), 0.0F, (-838.4495F));
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertNotSame(wall0, wall1);
      
      wall0.move((-1.0F), (-55.974613F));
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-55.974613F), wall0.getYStart(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-55.974613F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-55.974613F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      wall0.setYStart(643.6F);
      assertEquals(699.5746F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(643.6F, wall0.getYStart(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(293.81268F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(699.5746F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-55.974613F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      boolean boolean5 = wall1.containsWallStartAt(112.637F, (-2804.4163F), (-55.974613F));
      assertEquals(1433.6F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2233.335F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-838.4495F), wall1.getHeightAtEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(699.5746F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(643.6F, wall0.getYStart(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(293.81268F, wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(699.5746F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-55.974613F), wall0.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      assertNotSame(wall1, wall0);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(8.961035F, 8.961035F, 8.961035F, 8.961035F, 8.961035F);
      assertEquals(8.961035F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(8.961035F, wall0.getYEnd(), 0.01F);
      assertEquals(8.961035F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8.961035F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.961035F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8.961035F, wall0.getYStart(), 0.01F);
      assertEquals(8.961035F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(8.961035F, 8.961035F, 0.0F);
      assertEquals(8.961035F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(8.961035F, wall0.getYEnd(), 0.01F);
      assertEquals(8.961035F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8.961035F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.961035F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8.961035F, wall0.getYStart(), 0.01F);
      assertEquals(8.961035F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      Float float0 = wall0.getHeightAtEnd();
      assertEquals(8.961035F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(8.961035F, wall0.getYEnd(), 0.01F);
      assertEquals(8.961035F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(8.961035F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(8.961035F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(8.961035F, wall0.getYStart(), 0.01F);
      assertEquals(8.961035F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = Float.valueOf(0.01F);
      assertNotNull(float0);
      assertEquals(0.01F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float1 = wall0.getLength();
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(1089.0F, 982.7344F, (-1183.9F), (-1183.9F), (-1183.9F), (-1.0F));
      assertEquals(3140.124F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-100.582825F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1183.9F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-47.450012F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1183.9F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1183.9F), wall0.getThickness(), 0.01F);
      assertEquals(1089.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(982.7344F, wall0.getYStart(), 0.01F);
      assertEquals(3140.124F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(3140.124F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-100.582825F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1183.9F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-47.450012F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1183.9F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1183.9F), wall0.getThickness(), 0.01F);
      assertEquals(1089.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(982.7344F, wall0.getYStart(), 0.01F);
      assertEquals(3140.124F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-3678.07F), 3130.0F, (-3678.07F), (-3678.07F), 1259.751F);
      assertEquals((-3678.07F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3130.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3678.07F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(3130.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals((-3678.07F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3130.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3678.07F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(3130.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYStart(), 0.01F);
      assertNull(level0);
      
      wall0.setLeftSideShininess(1.6636496F);
      assertEquals((-3678.07F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3130.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.6636496F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3678.07F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(3130.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall((-90.61931F), (-90.61931F), (-90.61931F), (-90.61931F), (-90.61931F), (-90.61931F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-90.61931F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-90.61931F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-90.61931F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-90.61931F), wall0.getXEnd(), 0.01F);
      assertEquals((-90.61931F), wall0.getYEnd(), 0.01F);
      assertEquals((-90.61931F), wall0.getYStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getThickness(), 0.01F);
      assertEquals((-90.61931F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-90.61931F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-90.61931F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-90.61931F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-90.61931F), wall0.getXEnd(), 0.01F);
      assertEquals((-90.61931F), wall0.getYEnd(), 0.01F);
      assertEquals((-90.61931F), wall0.getYStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getThickness(), 0.01F);
      assertEquals((-90.61931F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1326.167F), 0.0F, 1465.6743F, 4.3067455F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.3067455F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.3067455F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      Wall wall1 = new Wall(0.0F, (-2560.6648F), 4.3067455F, 4.3067455F, 134.22636F, 0.0F);
      assertEquals((-1278.1791F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2.1533728F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2564.975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2564.975F, wall1.getLength(), 0.01F);
      assertEquals(4.3067455F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(4.3067455F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      wall1.setHeight((Float) null);
      assertEquals((-1278.1791F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2.1533728F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2564.975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2564.975F, wall1.getLength(), 0.01F);
      assertEquals(4.3067455F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(4.3067455F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.3067455F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertEquals((-1278.1791F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2.1533728F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2564.975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2564.975F, wall1.getLength(), 0.01F);
      assertEquals(4.3067455F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(4.3067455F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float2 = new Float((-2012.9F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-2012.9F), (float)float2, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4.3067455F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertEquals((-1278.1791F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2.1533728F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2564.975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2564.975F, wall1.getLength(), 0.01F);
      assertEquals(4.3067455F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(4.3067455F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals((-1278.1791F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2.1533728F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2564.975F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2564.975F, wall1.getLength(), 0.01F);
      assertEquals(4.3067455F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(4.3067455F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 2347.9812F, 2347.9812F, (-1195.5054F), (-1103.2539F), 2347.9812F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4250.8013F, wall0.getLength(), 0.01F);
      assertEquals(2347.9812F, wall0.getYStart(), 0.01F);
      assertEquals(2347.9812F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(576.2379F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1103.2539F), wall0.getThickness(), 0.01F);
      assertEquals(2347.9812F, wall0.getHeight(), 0.01F);
      assertEquals(4250.8013F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.9906F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1195.5054F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4250.8013F, wall0.getLength(), 0.01F);
      assertEquals(2347.9812F, wall0.getYStart(), 0.01F);
      assertEquals(2347.9812F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(576.2379F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1103.2539F), wall0.getThickness(), 0.01F);
      assertEquals(2347.9812F, wall0.getHeight(), 0.01F);
      assertEquals(4250.8013F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.9906F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1195.5054F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      
      int int0 = 2;
      Integer integer0 = Integer.valueOf(0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(4250.8013F, wall0.getLength(), 0.01F);
      assertEquals(2347.9812F, wall0.getYStart(), 0.01F);
      assertEquals(2347.9812F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(576.2379F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1103.2539F), wall0.getThickness(), 0.01F);
      assertEquals(2347.9812F, wall0.getHeight(), 0.01F);
      assertEquals(4250.8013F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.9906F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1195.5054F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(integer0.equals((Object)int0));
      
      wall0.setXEnd((-1694.7113F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(2347.9812F, wall0.getYStart(), 0.01F);
      assertEquals((-847.35565F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3927.893F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3927.893F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(576.2379F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1103.2539F), wall0.getThickness(), 0.01F);
      assertEquals(2347.9812F, wall0.getHeight(), 0.01F);
      assertEquals((-1694.7113F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1195.5054F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      
      Integer integer1 = new Integer(2);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      String string0 = "Q|F8R";
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(2347.9812F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(576.2379F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1103.2539F), wall0.getThickness(), 0.01F);
      assertEquals(3543.4866F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2347.9812F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1195.5054F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3543.4866F, wall0.getLength(), 0.01F);
      
      int int1 = 413;
      int int2 = (-2145540669);
      int int3 = (-1320);
      try { 
        Integer.parseUnsignedInt("Q|F8R", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("{:)E)SV&[G9{cE", 0.0F, 0.0F, 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level1.getName());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.01F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level1.getName());
      assertEquals(0.01F, level2.getHeight(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level2.getName());
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-32.0F), float0, 0.01F);
      
      Integer integer0 = new Integer((-1301));
      assertNotNull(integer0);
      assertEquals((-1301), (int)integer0);
      
      int int0 = Integer.sum(854, 854);
      assertEquals(1708, int0);
      
      Integer integer1 = Integer.valueOf(1708);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1708, (int)integer1);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(integer2);
      
      Integer integer3 = Integer.getInteger("Ks=bN3Fp2Hh?*q1%", (-3288));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-3288), (int)integer3);
      
      Integer integer4 = Integer.getInteger("Ks=bN3Fp2Hh?*q1%", (Integer) null);
      assertNull(integer4);
      
      Integer integer5 = Integer.valueOf(13);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      assertEquals(13, (int)integer5);
      
      Integer integer6 = Integer.valueOf(13);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      assertEquals(13, (int)integer6);
      
      boolean boolean0 = integer6.equals(integer0);
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer6));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1708, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer5));
      assertFalse(integer1.equals((Object)integer6));
      
      Level level3 = new Level("d.gH3?ANEM')M-", 1708, 0.0F, 1.0F);
      assertEquals(1708.0F, level3.getElevation(), 0.01F);
      assertEquals("d.gH3?ANEM')M-", level3.getName());
      assertEquals(0.0F, level3.getFloorThickness(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(1.0F, level3.getHeight(), 0.01F);
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertNotNull(level3);
      
      Level level4 = wall0.getLevel();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1708, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level4.getName());
      assertEquals(0.0F, level4.getElevation(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(0.01F, level4.getHeight(), 0.01F);
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level3));
      assertNotNull(level4);
      assertNotSame(level4, level1);
      assertNotSame(level4, level2);
      assertSame(level4, level0);
      assertNotSame(level4, level3);
      
      Level level5 = level0.clone();
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.01F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("{:)E)SV&[G9{cE", level0.getName());
      assertEquals(0.01F, level5.getHeight(), 0.01F);
      assertTrue(level5.isVisible());
      assertEquals(0.0F, level5.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level5.getElevation(), 0.01F);
      assertEquals("{:)E)SV&[G9{cE", level5.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level5.equals((Object)level2));
      assertFalse(level5.equals((Object)level3));
      assertFalse(level5.equals((Object)level4));
      assertFalse(level5.equals((Object)level0));
      assertFalse(level5.equals((Object)level1));
      assertNotNull(level5);
      assertNotSame(level0, level2);
      assertSame(level0, level4);
      assertNotSame(level0, level5);
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertNotSame(level5, level2);
      assertNotSame(level5, level3);
      assertNotSame(level5, level4);
      assertNotSame(level5, level0);
      assertNotSame(level5, level1);
      
      boolean boolean1 = wall0.isAtLevel(level3);
      assertEquals(1708.0F, level3.getElevation(), 0.01F);
      assertEquals("d.gH3?ANEM')M-", level3.getName());
      assertEquals(0.0F, level3.getFloorThickness(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(1.0F, level3.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1708, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level4));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level5));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level3, level0);
      assertNotSame(level3, level4);
      assertNotSame(level3, level2);
      assertNotSame(level3, level1);
      assertNotSame(level3, level5);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1708, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(64.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      float float2 = Float.min(2176.6F, 126.328514F);
      assertEquals(126.328514F, float2, 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), (-2436.0F), (-1194.0F));
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeight(float1);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setArcExtent(float1);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      
      float float3 = wall0.getThickness();
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.01F, float3, 0.01F);
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-309.82175F), float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall((-1861.1215F), (-2.5190067F), (-1861.1215F), (-674.7783F), (-2180.5F), (-2180.5F));
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(672.25934F, wall0.getLength(), 0.01F);
      assertEquals((-338.64865F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-674.7783F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(672.25934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd((-1861.1215F));
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(672.25934F, wall0.getLength(), 0.01F);
      assertEquals((-338.64865F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-674.7783F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(672.25934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setYEnd((-2.5190067F));
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float0);
      
      wall0.setLeftSideShininess((-2.5190067F));
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.5190067F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("(D[C_Z* \"+UTun$lx7%", "", temporaryURLContent0, (-2180.5F), (-2180.5F), (String) null);
      assertEquals((-2180.5F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals("(D[C_Z* \"+UTun$lx7%", catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-2180.5F), catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNotNull(catalogTexture0);
      
      wall0.setHeight((Float) null);
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2.5190067F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.5190067F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2.5190067F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.5190067F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2.5190067F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.5190067F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2180.5F), wall1.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXEnd(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.5190067F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2.5190067F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall1.getLeftSideShininess();
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2.5190067F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.5190067F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2180.5F), wall1.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXEnd(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.5190067F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2.5190067F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2.5190067F), float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getXEnd();
      assertEquals((-1861.1215F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-2.5190067F), wall0.getYEnd(), 0.01F);
      assertEquals((-1861.1215F), wall0.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2.5190067F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1861.1215F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2180.5F), wall1.getThickness(), 0.01F);
      assertEquals((-2.5190067F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXEnd(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.5190067F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1861.1215F), wall1.getXStart(), 0.01F);
      assertEquals((-2.5190067F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2.5190067F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1861.1215F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getThickness();
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(92.72152F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      String string0 = "lC)Nb)<Ug<G`";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader1, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource 
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.0F, 0.0F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 1.0F, (-64.0F), 0.0F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      wall0.setLevel(level1);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-32.0F), float2, 0.01F);
      
      Integer integer0 = new Integer((-1337));
      assertNotNull(integer0);
      assertEquals((-1337), (int)integer0);
      
      int int0 = Integer.sum((-27), (-27));
      assertEquals((-54), int0);
      
      Integer integer1 = Integer.valueOf((-27));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-27), (int)integer1);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(integer2);
      
      Float float3 = new Float(0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(0.01F, (float)float3, 0.01F);
      
      wall0.setArcExtent(float3);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-6399.947F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.00027F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-6399.947F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.00027F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(18, floatArray0.length);
      
      Float float4 = new Float((-1.0F));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotNull(float4);
      assertEquals((-1.0F), (float)float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1033.8953F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      int int0 = Float.compare(1499.4537F, 0.0F);
      assertEquals(1, int0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(1.0F, float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(946.2663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(1078.2646F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(946.2663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(1078.2646F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
      assertEquals(68, floatArray0.length);
      
      Float float3 = new Float(1.0F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(1.0F, (float)float3, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(1.0F, (-1.0F), 0.2F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(946.2663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(1078.2646F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(boolean0);
      
      Float float4 = wall0.getHeightAtEnd();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(946.2663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(1078.2646F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall((-1850.3623F), (-2.5190067F), (-1850.3623F), (-674.7783F), (-2180.5F), (-2180.5F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(672.25934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(672.25934F, wall0.getLength(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals((-338.64865F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.7783F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setXEnd((-1850.3623F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(672.25934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(672.25934F, wall0.getLength(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals((-338.64865F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.7783F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setYEnd((-674.7783F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(672.25934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(672.25934F, wall0.getLength(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals((-338.64865F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.7783F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getArcExtent();
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(672.25934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(672.25934F, wall0.getLength(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals((-338.64865F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.7783F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2.5190067F), wall0.getYStart(), 0.01F);
      assertEquals(672.25934F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(672.25934F, wall0.getLength(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals((-338.64865F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-674.7783F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(level0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.contains(wall0));
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(list0);
      assertNotSame(linkedList1, linkedList0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 2233.335F, 0.1F, 2233.335F);
      assertEquals(2233.335F, wall0.getThickness(), 0.01F);
      assertEquals(2233.2349F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1116.7175F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2233.2349F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2233.335F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = wall0.containsWallStartAt(2233.335F, 0.1F, 2233.335F);
      assertEquals(2233.335F, wall0.getThickness(), 0.01F);
      assertEquals(2233.2349F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1116.7175F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2233.2349F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2233.335F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Level level0 = new Level("", 0.1F, (-684.9807F), 0.0F);
      assertEquals("", level0.getName());
      assertEquals((-684.9807F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.1F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Wall wall0 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      
      wall0.setLevel(level0);
      assertEquals("", level0.getName());
      assertEquals((-684.9807F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.1F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      
      Integer integer0 = new Integer(42107524);
      assertNotNull(integer0);
      assertEquals(42107524, (int)integer0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.contains(wall0));
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotNull(list0);
      assertNotSame(linkedList0, linkedList1);
      
      wall0.setRightSideColor(integer0);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(42107524, (int)wall0.getRightSideColor());
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      
      Level level1 = level0.clone();
      assertEquals("", level0.getName());
      assertEquals((-684.9807F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.1F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-684.9807F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.1F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      level1.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals("", level0.getName());
      assertEquals((-684.9807F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.1F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-684.9807F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.1F, level1.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertEquals("", level0.getName());
      assertEquals((-684.9807F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.1F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(42107524, (int)wall0.getRightSideColor());
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals((-684.9807F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.1F, level1.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(42107524, (int)wall0.getRightSideColor());
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(42107524, (int)wall0.getRightSideColor());
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(42107524, (int)wall0.getRightSideColor());
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float(7.897583F);
      assertNotNull(float0);
      assertEquals(7.897583F, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness(7.897583F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float1 = wall0.getLength();
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-5985.6636F), 0.0F, 1022.9797F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((double) 126.328514F);
      assertNotNull(float1);
      assertEquals(126.328514F, (float)float1, 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), 126.328514F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(8.828793F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(664.59174F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(50.775154F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float2 = wall1.getHeight();
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(664.59174F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(50.775154F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float2);
      assertNotSame(wall1, wall0);
      
      Float float3 = new Float((double) 785.604F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      assertEquals(785.604F, (float)float3, 0.01F);
      
      wall1.setHeight(float3);
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(664.59174F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(50.775154F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(664.59174F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(50.775154F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setLeftSideColor((Integer) null);
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(664.59174F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(50.775154F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      
      wall1.setArcExtent(float1);
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(577.47485F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals((-904.10675F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(128643.39F, wall1.getLength(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(126.328514F, wall1.getArcExtent(), 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall1.setPattern((TextureImage) null);
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(577.47485F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals((-904.10675F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(128643.39F, wall1.getLength(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(126.328514F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      float float4 = wall1.getThickness();
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(577.47485F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals((-904.10675F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(128643.39F, wall1.getLength(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(126.328514F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(92.72152F, float4, 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(8.828793F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(577.47485F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals((-904.10675F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(128643.39F, wall1.getLength(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(664.59174F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(126.328514F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall(1259.751F, 496.604F, (-3678.07F), (-3678.07F), 496.604F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(6466.064F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1590.733F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getYStart(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(6466.064F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setYStart(0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6157.138F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1839.03F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6157.138F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(1259.751F);
      assertNotNull(float0);
      assertEquals(1259.751F, (float)float0, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.sum((-1301), 0);
      assertEquals((-1301), int0);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(1, (int)integer1);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6157.138F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1839.03F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6157.138F, wall0.getLength(), 0.01F);
      assertNull(integer2);
      
      Integer integer3 = Integer.valueOf((-2805));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-2805), (int)integer3);
      
      boolean boolean0 = integer3.equals("`o/y7qjwv ");
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(boolean0);
      
      int int1 = Integer.compare(0, 1758);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Integer integer4 = Integer.getInteger("THICKNESS", 1);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int1));
      assertNotNull(integer4);
      assertEquals(1, (int)integer4);
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals((-1839.035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6157.1323F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6157.1323F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer5 = Integer.getInteger("] =[2H'l", integer3);
      assertFalse(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      assertEquals((-2805), (int)integer5);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = integer0.equals(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer6 = Integer.valueOf(99);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      assertEquals(99, (int)integer6);
      
      Integer integer7 = Integer.valueOf(10);
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertNotNull(integer7);
      assertEquals(10, (int)integer7);
      
      wall0.setRightSideColor(integer7);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals((-1839.035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10, (int)wall0.getRightSideColor());
      assertEquals(6157.1323F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6157.1323F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      
      float float1 = wall0.getLength();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals((-1839.035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10, (int)wall0.getRightSideColor());
      assertEquals(6157.1323F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6157.1323F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6157.1323F, float1, 0.01F);
      
      wall0.setYStart((-854.72F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-854.72F), wall0.getYStart(), 0.01F);
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10, (int)wall0.getRightSideColor());
      assertEquals(5688.0034F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2266.395F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5688.0034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-854.72F), wall0.getYStart(), 0.01F);
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10, (int)wall0.getRightSideColor());
      assertEquals(5688.0034F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2266.395F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5688.0034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      float float2 = wall0.getXStart();
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-854.72F), wall0.getYStart(), 0.01F);
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10, (int)wall0.getRightSideColor());
      assertEquals(5688.0034F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2266.395F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5688.0034F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1259.751F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 1487.183F, 1487.183F, (-1104.2539F), 1553.951F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1487.183F, wall1.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(743.6415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall1.getHeight(), 0.01F);
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(743.6415F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float0 = new Float((double) 1553.951F);
      assertNotNull(float0);
      assertEquals(1553.951F, (float)float0, 0.01F);
      
      Float float1 = new Float((-2274.16F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-2274.16F), (float)float1, 0.01F);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2274.16F), float2, 0.01F);
      
      wall1.setHeight((Float) (-2274.16F));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2274.16F), wall1.getHeight(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1487.183F, wall1.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(743.6415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(743.6415F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2274.16F), wall1.getHeight(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1487.183F, wall1.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(743.6415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(743.6415F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float3 = Float.valueOf(0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(0.01F, (float)float3, 0.01F);
      
      wall1.setHeightAtEnd(float3);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-2274.16F), wall1.getHeight(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1487.183F, wall1.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(743.6415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(743.6415F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      wall1.setLeftSideShininess(1957.6753F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-2274.16F), wall1.getHeight(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1957.6753F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1487.183F, wall1.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(743.6415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(743.6415F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float4 = new Float(1989.6);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      assertEquals(1989.6F, (float)float4, 0.01F);
      
      float float5 = Float.max(1706.7966F, (-279.65176F));
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(1706.7966F, float5, 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float5, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-2274.16F), wall1.getHeight(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1957.6753F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1487.183F, wall1.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(743.6415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(743.6415F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(list0.contains(wall1));
      assertFalse(linkedList0.contains(wall1));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(list1.contains(wall1));
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list1, list0);
      
      Wall wall2 = wall1.clone();
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-2274.16F), wall1.getHeight(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1957.6753F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1487.183F, wall1.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(743.6415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(743.6415F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(2103.053F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(743.6415F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(1487.183F, wall2.getXEnd(), 0.01F);
      assertEquals((-1104.2539F), wall2.getThickness(), 0.01F);
      assertEquals(1487.183F, wall2.getYEnd(), 0.01F);
      assertEquals(2103.053F, wall2.getLength(), 0.01F);
      assertEquals(743.6415F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1957.6753F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-2274.16F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertTrue(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.01F, wall2.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float float6 = wall0.getLeftSideShininess();
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("anqa[pa2+h%9ez>F", "eq*A7]Tf_dyZY9d<s", temporaryURLContent0, (-413.6798F), (-1.0F), "eq*A7]Tf_dyZY9d<s");
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertNotNull(homeTexture0);
      
      boolean boolean0 = homeTexture0.equals(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setLeftSideTexture(homeTexture0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      wall0.setRightSideColor((Integer) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float1 = wall1.getHeight();
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float1);
      assertNotSame(wall1, wall0);
      
      Float float2 = new Float((double) 785.604F);
      assertNotNull(float2);
      assertEquals(785.604F, (float)float2, 0.01F);
      
      wall1.setHeight(float2);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float3 = Float.min((-2436.0F), 126.328514F);
      assertEquals((-2436.0F), float3, 0.01F);
      
      float float4 = Float.min((-2437.9373F), (-2436.0F));
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-2437.9373F), float4, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      float float5 = Float.max((-64.0F), 126.328514F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(126.328514F, float5, 0.01F);
      
      wall0.setHeight((Float) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      
      Float float6 = wall0.getHeightAtEnd();
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float6);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 1.0F, 302.3F, 1.0F, (-793.8924F));
      assertEquals(302.3F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-793.8924F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(300.30167F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(152.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(300.30167F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(4622.21F);
      assertEquals(302.3F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4622.21F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-793.8924F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4319.91F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2462.255F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4319.91F, wall0.getLength(), 0.01F);
      assertEquals(1.5F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.move(0.0F, 333.3F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-793.8924F), wall0.getHeight(), 0.01F);
      assertEquals(2795.555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4955.51F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4319.9097F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(635.6F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4319.9097F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-586.4385F), 0.1F, 0.1F, 1074.12F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = Float.min((-586.4385F), 0.0F);
      assertEquals((-586.4385F), float0, 0.01F);
      
      float float1 = Float.sum((-231.75543F), (-2274.16F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2505.9153F), float1, 0.01F);
      
      float float2 = Float.max((-1317.0F), 1193.496F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1193.496F, float2, 0.01F);
      
      wall0.setXStart((-128.65648F));
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(textureImage0);
      
      float float3 = wall0.getLeftSideShininess();
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      Level level0 = wall0.getLevel();
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(level0);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float4 = wall1.getHeight();
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float4);
      assertNotSame(wall1, wall0);
      
      Float float5 = new Float((double) 785.604F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotNull(float5);
      assertEquals(785.604F, (float)float5, 0.01F);
      
      wall1.setHeight(float5);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight(float5);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      
      float float6 = wall0.getYEnd();
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertEquals(0.1F, float6, 0.01F);
      assertNotSame(wall0, wall1);
      
      float float7 = wall0.getYStart();
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertEquals(float7, float0, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertEquals((-586.4385F), float7, 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.01F, 0.01F, 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.01F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 1.0F, (-64.0F), 0.0F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level0.clone();
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level2.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      wall0.setLevel(level2);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level2.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-32.0F), float2, 0.01F);
      
      Integer integer0 = new Integer((-1301));
      assertNotNull(integer0);
      assertEquals((-1301), (int)integer0);
      
      int int0 = Integer.sum(0, 0);
      assertEquals(0, int0);
      
      Integer integer1 = Integer.valueOf(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(integer2);
      
      boolean boolean0 = integer0.equals((Object) null);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, "`o/y7qjwv ", temporaryURLContent0, 0, (-32.0F), "");
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals("`o/y7qjwv ", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals((-32.0F), catalogTexture0.getHeight(), 0.01F);
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals("`o/y7qjwv ", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals((-32.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals("`o/y7qjwv ", homeTexture0.getName());
      assertEquals((-32.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNotNull(homeTexture0);
      
      boolean boolean1 = homeTexture0.equals(level0);
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals("`o/y7qjwv ", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals((-32.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals("`o/y7qjwv ", homeTexture0.getName());
      assertEquals((-32.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertTrue(boolean1 == boolean0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(boolean1);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      
      wall0.setLeftSideTexture(homeTexture0);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals("`o/y7qjwv ", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals((-32.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals("`o/y7qjwv ", homeTexture0.getName());
      assertEquals((-32.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      
      Level level3 = wall0.getLevel();
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals((-64.0F), level3.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level3.getName());
      assertEquals(1.0F, level3.getElevation(), 0.01F);
      assertEquals(0.0F, level3.getHeight(), 0.01F);
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertNotNull(level3);
      assertNotSame(level3, level0);
      assertSame(level3, level2);
      assertNotSame(level3, level1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertNull(textureImage0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-64.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.005F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getHeight(), 0.01F);
      assertEquals(64.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.1F, (float)float0, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", (-1050.7F), (-1050.7F), (-1050.7F));
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = new Level("`o/y7qjwv ", (-1050.7F), (-1050.7F), (-1050.7F));
      assertTrue(level1.isVisible());
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      Level level2 = level1.clone();
      assertTrue(level1.isVisible());
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals((-1050.7F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1050.7F), level2.getHeight(), 0.01F);
      assertEquals((-1050.7F), level2.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      boolean boolean0 = wall0.isAtLevel(level2);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals((-1050.7F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1050.7F), level2.getHeight(), 0.01F);
      assertEquals((-1050.7F), level2.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(boolean0);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1259.751F, 496.604F, (-3678.07F), (-3678.07F), 496.604F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(6466.064F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1590.733F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(6466.064F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.604F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setYStart(0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1839.03F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(6157.138F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6157.138F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float(1259.751F);
      assertNotNull(float0);
      assertEquals(1259.751F, (float)float0, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setYEnd((-1192.0F));
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1192.0F), wall0.getYEnd(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals((-595.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5079.6616F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(5079.6616F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.HomeTexture", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1192.0F), wall0.getYEnd(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals((-595.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5079.6616F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(5079.6616F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", propertyChangeListenerProxy0.getPropertyName());
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1192.0F), wall0.getYEnd(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals((-595.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5079.6616F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(5079.6616F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1209.1595F), float1, 0.01F);
      
      float float2 = wall0.getThickness();
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1192.0F), wall0.getYEnd(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals((-595.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5079.6616F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(5079.6616F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(496.604F, float2, 0.01F);
      
      wall0.setRightSideShininess(3130.0F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1192.0F), wall0.getYEnd(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(3130.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-595.995F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5079.6616F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(5079.6616F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-3678.07F), 3130.0F, 496.604F, 496.604F, 1259.751F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5217.7393F, wall0.getLength(), 0.01F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5217.7393F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1590.733F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals((-3678.07F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      
      wall0.move(333.3F, (-3678.07F));
      assertEquals((-3181.466F), wall0.getYEnd(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(3169.1492F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1898.3F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3169.1492F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(333.3F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3678.06F), wall0.getYStart(), 0.01F);
      assertEquals(3463.3F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3429.7632F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 2303.0583F, 2303.0583F, 429.303F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = wall0.intersectsRectangle(429.303F, 2303.0583F, (-128.65648F), 2303.0583F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setArcExtent((Float) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1366.1807F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1155.478F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(2303.0583F, wall0.getXEnd(), 0.01F);
      assertEquals(2303.0583F, wall0.getYStart(), 0.01F);
      assertEquals(2962.8909F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2962.8909F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(429.303F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall((-1850.3623F), 0.0F, (-1850.3623F), (-673.0F), (-2180.5F), (-2180.5F));
      assertEquals((-673.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-336.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(673.0F, wall0.getLength(), 0.01F);
      assertEquals(673.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXEnd((-1850.3623F));
      assertEquals((-673.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-336.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(673.0F, wall0.getLength(), 0.01F);
      assertEquals(673.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Wall wall1 = new Wall(1291.87F, 1291.87F, (-3326.115F), 785.614F, (-1850.3623F));
      assertNull(wall1.getHeight());
      assertEquals(785.614F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1291.87F, wall1.getXStart(), 0.01F);
      assertEquals((-1017.1225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1291.87F, wall1.getYStart(), 0.01F);
      assertEquals(1038.742F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall1.getThickness(), 0.01F);
      assertEquals(4645.652F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4645.652F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3326.115F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Wall wall2 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      Float float0 = wall2.getHeight();
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(float0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      wall2.setHeight(float1);
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Float float2 = wall2.getHeight();
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(float2);
      assertEquals(785.604F, (float)float2, 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setHeightAtEnd(float1);
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(785.604F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-673.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-336.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(673.0F, wall0.getLength(), 0.01F);
      assertEquals(673.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      wall1.setLeftSideShininess((-673.0F));
      assertNull(wall1.getHeight());
      assertEquals(785.614F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1291.87F, wall1.getXStart(), 0.01F);
      assertEquals((-1017.1225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-673.0F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1291.87F, wall1.getYStart(), 0.01F);
      assertEquals(1038.742F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall1.getThickness(), 0.01F);
      assertEquals(4645.652F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4645.652F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3326.115F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      Float float3 = new Float(0.0);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals(0.0F, (float)float3, 0.01F);
      
      float float4 = Float.max((-2705.6F), 92.72152F);
      assertEquals(92.72152F, float4, 0.01F);
      
      wall2.setHeight(float1);
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(785.604F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setWallAtEnd(wall0);
      assertEquals((-673.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-336.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(673.0F, wall0.getLength(), 0.01F);
      assertEquals(673.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(785.604F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.removeFirstOccurrence(float3);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertFalse(boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      Wall wall3 = wall2.clone();
      assertEquals(785.604F, wall3.getYEnd(), 0.01F);
      assertEquals(455.96625F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(126.328514F, wall3.getYStart(), 0.01F);
      assertEquals(92.72152F, wall3.getThickness(), 0.01F);
      assertEquals(47.36076F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(92.72152F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(785.604F, wall3.getHeightAtEnd(), 0.01F);
      assertEquals(665.4882F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(785.604F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      
      float float5 = wall1.getLeftSideShininess();
      assertNull(wall1.getHeight());
      assertEquals(785.614F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1291.87F, wall1.getXStart(), 0.01F);
      assertEquals((-1017.1225F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-673.0F), wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1291.87F, wall1.getYStart(), 0.01F);
      assertEquals(1038.742F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1850.3623F), wall1.getThickness(), 0.01F);
      assertEquals(4645.652F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4645.652F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3326.115F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertNotEquals(float5, float4, 0.01F);
      assertEquals((-673.0F), float5, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      
      HomeTexture homeTexture0 = wall2.getLeftSideTexture();
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(785.604F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(homeTexture0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall((-1850.3623F), 0.0F, (-1850.3623F), (-673.0F), (-2180.5F), (-2180.5F));
      assertEquals((-336.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(673.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(673.0F, wall0.getLength(), 0.01F);
      assertEquals((-673.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setXEnd((-1850.3623F));
      assertEquals((-336.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(673.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(673.0F, wall0.getLength(), 0.01F);
      assertEquals((-673.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-336.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(673.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(673.0F, wall0.getLength(), 0.01F);
      assertEquals((-673.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-336.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(673.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(673.0F, wall0.getLength(), 0.01F);
      assertEquals((-673.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListener1);
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotNull(propertyChangeListenerProxy1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "$CN3aDm_", "$CN3aDm_", "$CN3aDm_");
      assertEquals("$CN3aDm_", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.toString();
      assertEquals("$CN3aDm_", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      propertyChangeEvent0.setPropagationId("");
      assertEquals("$CN3aDm_", propertyChangeEvent0.getPropertyName());
      
      String string1 = propertyChangeEvent0.getPropertyName();
      assertEquals("$CN3aDm_", propertyChangeEvent0.getPropertyName());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$CN3aDm_", string1);
      
      propertyChangeListenerProxy1.propertyChange(propertyChangeEvent0);
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("$CN3aDm_", propertyChangeEvent0.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("com.eteks.sweethome3d.model.TexturesCategory", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1850.3623F), float0, 0.01F);
      
      float float1 = wall0.getThickness();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2180.5F), float1, 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2180.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1850.3623F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1850.3623F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1850.3623F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2180.5F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(7.897583F);
      assertNotNull(float0);
      assertEquals(7.897583F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      
      wall0.setThickness(7.897583F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Wall wall1 = new Wall(0, 0, 0, 0.0F, 0.0F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getArcExtent(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      float float1 = wall1.getLength();
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getArcExtent(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = new Float((-1291.0));
      assertNotNull(float0);
      assertEquals((-1291.0F), (float)float0, 0.01F);
      
      Wall wall0 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float1 = wall0.getHeight();
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float((double) 785.604F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(785.604F, (float)float2, 0.01F);
      
      wall0.setHeight(float2);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsPoint(2090.15F, (-803.0F), 3046.0F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      
      Float float3 = new Float((-1745.2403456123159));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-1745.2404F), (float)float3, 0.01F);
      
      float float4 = float3.floatValue();
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1745.2404F), float4, 0.01F);
      
      Float float5 = new Float(1.0F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals(1.0F, (float)float5, 0.01F);
      
      float float6 = float5.floatValue();
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertEquals(1.0F, float6, 0.01F);
      
      wall0.setArcExtent((Float) 1.0F);
      assertEquals(538.99854F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-556.03705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(694.0475F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      
      float float7 = new Float(126.328514F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertEquals(126.328514F, float7, 0.01F);
      
      float float8 = wall0.getYArcCircleCenter();
      assertEquals(538.99854F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-556.03705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(694.0475F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertEquals(538.99854F, float8, 0.01F);
      
      wall0.setYStart(126.328514F);
      assertEquals(538.99854F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-556.03705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(694.0475F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(1259.751F, 496.604F, (-3678.07F), (-3678.07F), 496.604F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(496.604F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6466.064F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(6466.064F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1590.733F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setYStart((-0.6018201F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1839.3359F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6156.7725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.6018201F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(6156.7725F, wall0.getLength(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float(1259.751F);
      assertNotNull(float0);
      assertEquals(1259.751F, (float)float0, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", (-0.6018201F), 697.9244F, 496.604F);
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals((-0.6018201F), level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals((-0.6018201F), level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertEquals((-0.6018201F), level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals((-0.6018201F), level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertEquals((-0.6018201F), level1.getElevation(), 0.01F);
      assertEquals((-0.6018201F), level2.getElevation(), 0.01F);
      assertEquals(697.9244F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(496.604F, level2.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      wall0.setLevel(level0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1839.3359F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6156.7725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.6018201F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(6156.7725F, wall0.getLength(), 0.01F);
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertEquals((-0.6018201F), level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertTrue(level0.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      
      wall0.move(697.9244F, (-4775.327F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6614.663F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-8453.397F), wall0.getYEnd(), 0.01F);
      assertEquals((-511.23523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6156.7725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4775.929F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1957.6753F, wall0.getXStart(), 0.01F);
      assertEquals(6156.7725F, wall0.getLength(), 0.01F);
      assertEquals((-2980.1458F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = wall0.getRightSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6614.663F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-8453.397F), wall0.getYEnd(), 0.01F);
      assertEquals((-511.23523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6156.7725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4775.929F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1957.6753F, wall0.getXStart(), 0.01F);
      assertEquals(6156.7725F, wall0.getLength(), 0.01F);
      assertEquals((-2980.1458F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(integer0);
      
      Float float1 = wall0.getHeight();
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6614.663F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-8453.397F), wall0.getYEnd(), 0.01F);
      assertEquals((-511.23523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6156.7725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4775.929F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1957.6753F, wall0.getXStart(), 0.01F);
      assertEquals(6156.7725F, wall0.getLength(), 0.01F);
      assertEquals((-2980.1458F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(float1);
      
      Float float2 = new Float((double) 1259.751F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(1259.751F, (float)float2, 0.01F);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-8453.397F), wall0.getYEnd(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6156.7725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4775.929F), wall0.getYStart(), 0.01F);
      assertEquals(1259.751F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1957.6753F, wall0.getXStart(), 0.01F);
      assertEquals((-485.7878F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2980.1458F), wall0.getXEnd(), 0.01F);
      assertEquals((-6648.832F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3878371.5F, wall0.getLength(), 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      
      Level level3 = wall0.getLevel();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-8453.397F), wall0.getYEnd(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6156.7725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4775.929F), wall0.getYStart(), 0.01F);
      assertEquals(1259.751F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1957.6753F, wall0.getXStart(), 0.01F);
      assertEquals((-485.7878F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2980.1458F), wall0.getXEnd(), 0.01F);
      assertEquals((-6648.832F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3878371.5F, wall0.getLength(), 0.01F);
      assertEquals((-0.6018201F), level3.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level3.getName());
      assertTrue(level3.isVisible());
      assertEquals(496.604F, level3.getHeight(), 0.01F);
      assertEquals(697.9244F, level3.getFloorThickness(), 0.01F);
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertNotNull(level3);
      assertNotSame(level3, level2);
      assertSame(level3, level0);
      assertNotSame(level3, level1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall((-0.02734137F), (-0.02734137F), (-0.02734137F), (-0.02734137F), (-0.02734137F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.02734137F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.02734137F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-0.02734137F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYStart(), 0.01F);
      assertEquals((-0.02734137F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-0.02734137F));
      assertNotNull(float0);
      assertEquals((-0.02734137F), (float)float0, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.02734137F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.02734137F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-0.02734137F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYStart(), 0.01F);
      assertEquals((-0.02734137F), wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.02734137F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.02734137F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-0.02734137F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.02734137F), wall0.getYStart(), 0.01F);
      assertEquals((-0.02734137F), wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("Kd#br:", 0.0F, 0.0F, 0.0F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      
      Integer integer0 = new Integer(1415);
      assertNotNull(integer0);
      assertEquals(1415, (int)integer0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.contains(wall0));
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(list0);
      assertNotSame(linkedList1, linkedList0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("Kd#br:", level1.getName());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("Kd#br:", level1.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(list1, list0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Level level2 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertEquals("Kd#br:", level2.getName());
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall((-1145.4F), (-1145.4F), (-1145.4F), (-1145.4F), 2.0F, 100.0819F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1145.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-1145.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(100.0819F, wall0.getHeight(), 0.01F);
      assertEquals((-1145.4F), wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1145.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1145.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1145.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1145.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-1145.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(100.0819F, wall0.getHeight(), 0.01F);
      assertEquals((-1145.4F), wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1145.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1145.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1145.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1145.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-1145.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(100.0819F, wall0.getHeight(), 0.01F);
      assertEquals((-1145.4F), wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1145.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1145.4F), wall0.getXStart(), 0.01F);
      assertEquals((-1145.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level0);
      
      wall0.setYStart((-2381.4827F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1145.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-1145.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(100.0819F, wall0.getHeight(), 0.01F);
      assertEquals((-1145.4F), wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1236.0826F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1145.4F), wall0.getXStart(), 0.01F);
      assertEquals(1236.0826F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2381.4827F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1763.4414F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall((-3282.86F), (-3282.86F), (-3282.86F), (-3282.86F), (-3282.86F), (-3282.86F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3282.86F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3282.86F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3282.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3282.86F), wall0.getXStart(), 0.01F);
      assertEquals((-3282.86F), wall0.getHeight(), 0.01F);
      assertEquals((-3282.86F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3282.86F), wall0.getThickness(), 0.01F);
      assertEquals((-3282.86F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("Kd#br:", (-3282.86F), (-3282.86F), (-3282.86F));
      assertTrue(level0.isVisible());
      assertEquals((-3282.86F), level0.getHeight(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertEquals((-3282.86F), level0.getElevation(), 0.01F);
      assertEquals((-3282.86F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3282.86F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3282.86F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3282.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3282.86F), wall0.getXStart(), 0.01F);
      assertEquals((-3282.86F), wall0.getHeight(), 0.01F);
      assertEquals((-3282.86F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3282.86F), wall0.getThickness(), 0.01F);
      assertEquals((-3282.86F), wall0.getYStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-3282.86F), level0.getHeight(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertEquals((-3282.86F), level0.getElevation(), 0.01F);
      assertEquals((-3282.86F), level0.getFloorThickness(), 0.01F);
      
      Integer integer0 = new Integer(1415);
      assertNotNull(integer0);
      assertEquals(1415, (int)integer0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals((-3282.86F), level0.getHeight(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertEquals((-3282.86F), level0.getElevation(), 0.01F);
      assertEquals((-3282.86F), level0.getFloorThickness(), 0.01F);
      assertEquals((-3282.86F), level1.getHeight(), 0.01F);
      assertEquals("Kd#br:", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-3282.86F), level1.getFloorThickness(), 0.01F);
      assertEquals((-3282.86F), level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3282.86F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3282.86F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3282.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3282.86F), wall0.getXStart(), 0.01F);
      assertEquals((-3282.86F), wall0.getHeight(), 0.01F);
      assertEquals((-3282.86F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3282.86F), wall0.getThickness(), 0.01F);
      assertEquals((-3282.86F), wall0.getYStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-3282.86F), level0.getHeight(), 0.01F);
      assertEquals("Kd#br:", level0.getName());
      assertEquals((-3282.86F), level0.getElevation(), 0.01F);
      assertEquals((-3282.86F), level0.getFloorThickness(), 0.01F);
      assertEquals((-3282.86F), level1.getHeight(), 0.01F);
      assertEquals("Kd#br:", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-3282.86F), level1.getFloorThickness(), 0.01F);
      assertEquals((-3282.86F), level1.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3282.86F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3282.86F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3282.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3282.86F), wall0.getXStart(), 0.01F);
      assertEquals((-3282.86F), wall0.getHeight(), 0.01F);
      assertEquals((-3282.86F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3282.86F), wall0.getThickness(), 0.01F);
      assertEquals((-3282.86F), wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3282.86F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1415, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3282.86F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3282.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3282.86F), wall0.getXStart(), 0.01F);
      assertEquals((-3282.86F), wall0.getHeight(), 0.01F);
      assertEquals((-3282.86F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3282.86F), wall0.getThickness(), 0.01F);
      assertEquals((-3282.86F), wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(455.668F, 455.668F, 1356.815F, 455.668F, (-572.6854F), 1356.815F);
      assertEquals((-572.6854F), wall0.getThickness(), 0.01F);
      assertEquals(906.24146F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(455.668F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(901.147F, wall0.getLength(), 0.01F);
      assertEquals(455.668F, wall0.getXStart(), 0.01F);
      assertEquals(901.147F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1356.815F, wall0.getHeight(), 0.01F);
      assertEquals(455.668F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1356.815F, wall0.getXEnd(), 0.01F);
      assertEquals(455.668F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals((-572.6854F), wall0.getThickness(), 0.01F);
      assertEquals(906.24146F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(455.668F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(901.147F, wall0.getLength(), 0.01F);
      assertEquals(455.668F, wall0.getXStart(), 0.01F);
      assertEquals(901.147F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1356.815F, wall0.getHeight(), 0.01F);
      assertEquals(455.668F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1356.815F, wall0.getXEnd(), 0.01F);
      assertEquals(455.668F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1033.8953F), 0.0F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      Float float0 = new Float(2309.63F);
      assertNotNull(float0);
      assertEquals(2309.63F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(2309.63F, float1, 0.01F);
      
      Float float2 = new Float((-2274.16F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-2274.16F), (float)float2, 0.01F);
      
      float float3 = float2.floatValue();
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-2274.16F), float3, 0.01F);
      
      float float4 = ((Float)(-2274.16F)).floatValue();
      assertEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals((-2274.16F), float4, 0.01F);
      
      wall0.setArcExtent(float2);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2896.9878F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2274.16F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6692282.5F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float4, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2896.9878F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2274.16F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(6692282.5F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(5176, floatArray0.length);
      
      Float float5 = new Float(1548.6377F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals(1548.6377F, (float)float5, 0.01F);
      
      // Undeclared exception!
      wall0.containsWallEndAt((-2274.16F), (-1033.8953F), 0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2.596036F), 0.0F, 0.0F, (-2.596036F), 0.0F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((-2437.9373F));
      assertNotNull(float0);
      assertEquals((-2437.9373F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103166.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(42.2973F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setThickness((-2437.9373F));
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(103166.7F, wall0.getLength(), 0.01F);
      assertEquals((-2437.9373F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(42.2973F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      // Undeclared exception!
      try { 
        wall0.containsWallEndAt((-2437.9373F), (-2.596036F), (-2.596036F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.01F, 0.01F, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(float0);
      assertEquals(0.01F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 1.0F, (-64.0F), 0.0F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals(1.0F, level2.getElevation(), 0.01F);
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      Level level3 = new Level("`o/y7qjwv ", (-2336.3098F), 1.0F, (-3265.0F));
      assertEquals((-3265.0F), level3.getHeight(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(1.0F, level3.getFloorThickness(), 0.01F);
      assertEquals((-2336.3098F), level3.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level3.getName());
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertNotNull(level3);
      
      Level level4 = level3.clone();
      assertEquals((-3265.0F), level3.getHeight(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(1.0F, level3.getFloorThickness(), 0.01F);
      assertEquals((-2336.3098F), level3.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level3.getName());
      assertEquals((-3265.0F), level4.getHeight(), 0.01F);
      assertEquals(1.0F, level4.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level4.getName());
      assertEquals((-2336.3098F), level4.getElevation(), 0.01F);
      assertTrue(level4.isVisible());
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level1));
      assertNotNull(level4);
      assertNotSame(level3, level4);
      assertNotSame(level3, level2);
      assertNotSame(level3, level0);
      assertNotSame(level3, level1);
      assertNotSame(level4, level2);
      assertNotSame(level4, level0);
      assertNotSame(level4, level3);
      assertNotSame(level4, level1);
      
      Level level5 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-64.0F), level5.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level5.getElevation(), 0.01F);
      assertEquals(0.0F, level5.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level5.getName());
      assertTrue(level5.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level5.equals((Object)level0));
      assertFalse(level5.equals((Object)level3));
      assertFalse(level5.equals((Object)level2));
      assertFalse(level5.equals((Object)level1));
      assertFalse(level5.equals((Object)level4));
      assertNotNull(level5);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level5);
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level5, level0);
      assertNotSame(level5, level3);
      assertNotSame(level5, level2);
      assertNotSame(level5, level1);
      assertNotSame(level5, level4);
      
      wall0.setLevel(level2);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals(1.0F, level2.getElevation(), 0.01F);
      assertEquals((-64.0F), level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level5));
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level2.equals((Object)level5));
      assertFalse(level2.equals((Object)level4));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level3));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level5);
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level2, level5);
      assertNotSame(level2, level4);
      assertNotSame(level2, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      
      float float2 = new Float((-64.0F));
      assertEquals((-64.0F), float2, 0.01F);
      
      Integer integer0 = new Integer((-491));
      assertNotNull(integer0);
      assertEquals((-491), (int)integer0);
      
      int int0 = Integer.sum(1751, 0);
      assertEquals(1751, int0);
      
      Integer integer1 = new Integer((-14));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-14), (int)integer1);
      
      Integer integer2 = Integer.valueOf((-14));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals((-14), (int)integer2);
      
      boolean boolean0 = integer1.equals(integer2);
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(boolean0);
      
      boolean boolean1 = integer2.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(boolean1);
      
      Integer integer3 = new Integer((-148));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertNotNull(integer3);
      assertEquals((-148), (int)integer3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = integer3.equals(object0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      wall0.setRightSideColor(integer3);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-148), (int)wall0.getRightSideColor());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      
      Integer integer4 = Integer.valueOf((-2805));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      assertEquals((-2805), (int)integer4);
      
      wall0.setRightSideColor(integer4);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2805), (int)wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      boolean boolean3 = wall0.isAtLevel(level4);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2805), (int)wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3265.0F), level3.getHeight(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(1.0F, level3.getFloorThickness(), 0.01F);
      assertEquals((-2336.3098F), level3.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level3.getName());
      assertEquals((-3265.0F), level4.getHeight(), 0.01F);
      assertEquals(1.0F, level4.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level4.getName());
      assertEquals((-2336.3098F), level4.getElevation(), 0.01F);
      assertTrue(level4.isVisible());
      assertFalse(level3.equals((Object)level4));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level5));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level5));
      assertFalse(level4.equals((Object)level1));
      assertFalse(boolean3);
      assertNotSame(level3, level4);
      assertNotSame(level3, level2);
      assertNotSame(level3, level5);
      assertNotSame(level3, level0);
      assertNotSame(level3, level1);
      assertNotSame(level4, level2);
      assertNotSame(level4, level0);
      assertNotSame(level4, level3);
      assertNotSame(level4, level5);
      assertNotSame(level4, level1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1326.167F), 0.0F, 1465.6743F, 3.6589158F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      Wall wall1 = new Wall(2737.2F, (-2560.6648F), 3.6589158F, 3.6589158F, 134.22636F, 2737.2F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(2737.2F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(2737.2F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits((-2923.0F));
      assertFalse(int1 == int0);
      assertEquals((-986271744), int1);
      
      wall0.setHeight((Float) (-2923.0F));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(2737.2F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      Float float1 = Float.valueOf((-1765.6136F));
      assertNotNull(float1);
      assertEquals((-1765.6136F), (float)float1, 0.01F);
      
      wall1.setHeight(float1);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertEquals((-1765.6136F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2923.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float0);
      assertNotSame(wall1, wall0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      boolean boolean0 = wall1.containsPoint((-1.0F), (-2436.0F), (-1194.0F));
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight(float1);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall2.setPattern((TextureImage) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float float2 = wall2.getThickness();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(785.604F, wall2.getHeight(), 0.01F);
      assertEquals(92.72152F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals(665.4882F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(455.96625F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(126.328514F, wall2.getYStart(), 0.01F);
      assertEquals(47.36076F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(785.604F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall2.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall2.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(92.72152F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      float float2 = Float.min((-2436.0F), 126.328514F);
      assertEquals((-2436.0F), float2, 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), (-2436.0F), (-1194.0F));
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      wall0.setHeight(float1);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setArcExtent(float1);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getThickness();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.01F, float3, 0.01F);
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-309.82175F), float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-1104.2539F), 1553.951F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      float float0 = Float.min(0.1F, 1200.7034F);
      assertEquals(0.1F, float0, 0.01F);
      
      float float1 = Float.sum(0.0F, 0.1F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.1F, float1, 0.01F);
      
      float float2 = Float.max(0.1F, 624.51F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(624.51F, float2, 0.01F);
      
      wall0.setXStart(0.1F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(textureImage0);
      
      float float3 = wall0.getLeftSideShininess();
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(float4);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      String string0 = "";
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", temporaryURLContent0, (-128.65648F), 0.1F, "");
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals("", catalogTexture0.getId());
      assertEquals(0.1F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((-128.65648F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("7w{", (Content) null, 500.242F, 2.0F, true);
      assertEquals(2.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(500.242F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getId());
      assertEquals("7w{", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      String string0 = catalogTexture0.getName();
      assertEquals(2.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(500.242F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getId());
      assertEquals("7w{", catalogTexture0.getName());
      assertNotNull(string0);
      assertEquals("7w{", string0);
      
      wall0.setPattern(catalogTexture0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(500.242F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getId());
      assertEquals("7w{", catalogTexture0.getName());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(float0);
      assertEquals(0.1F, (float)float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall(757.8F, (-3351.0F), 0.0F, 1403.7262F, 1403.7262F, 2093.4375F);
      assertEquals(4814.736F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(757.8F, wall0.getXStart(), 0.01F);
      assertEquals(2093.4375F, wall0.getHeight(), 0.01F);
      assertEquals((-973.6369F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3351.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1403.7262F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(378.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4814.736F, wall0.getLength(), 0.01F);
      assertEquals(1403.7262F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      float float1 = Float.min(0.0F, 0.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(2093.4375F);
      assertTrue(boolean0);
      
      boolean boolean1 = float0.equals(">Wr.ldtEsLf");
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(4814.736F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(757.8F, wall0.getXStart(), 0.01F);
      assertEquals(2093.4375F, wall0.getHeight(), 0.01F);
      assertEquals((-973.6369F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3351.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1403.7262F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(378.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4814.736F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1403.7262F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(4814.736F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(757.8F, wall0.getXStart(), 0.01F);
      assertEquals(2093.4375F, wall0.getHeight(), 0.01F);
      assertEquals((-973.6369F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3351.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1403.7262F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(378.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4814.736F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1403.7262F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setThickness(1403.7262F);
      assertEquals(4814.736F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(757.8F, wall0.getXStart(), 0.01F);
      assertEquals(2093.4375F, wall0.getHeight(), 0.01F);
      assertEquals((-973.6369F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3351.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1403.7262F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(378.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4814.736F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1403.7262F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float2 = wall0.getHeightAtEnd();
      assertEquals(4814.736F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(757.8F, wall0.getXStart(), 0.01F);
      assertEquals(2093.4375F, wall0.getHeight(), 0.01F);
      assertEquals((-973.6369F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3351.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1403.7262F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(378.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4814.736F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1403.7262F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Integer integer0 = new Integer((-148));
      assertNotNull(integer0);
      assertEquals((-148), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-148), (int)wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideColor(integer0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-148), (int)wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-148), (int)wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(197.181F, 0.01F, (-773.159F), 312.311F, 312.311F);
      assertEquals(1019.35846F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1019.35846F, wall0.getLength(), 0.01F);
      assertEquals((-287.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(312.311F, wall0.getThickness(), 0.01F);
      assertEquals(197.181F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-773.159F), wall0.getXEnd(), 0.01F);
      assertEquals(312.311F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(156.1605F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1019.35846F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1019.35846F, wall0.getLength(), 0.01F);
      assertEquals((-287.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(312.311F, wall0.getThickness(), 0.01F);
      assertEquals(197.181F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-773.159F), wall0.getXEnd(), 0.01F);
      assertEquals(312.311F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(156.1605F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((-1291.0));
      assertNotNull(float1);
      assertEquals((-1291.0F), (float)float1, 0.01F);
      
      float float2 = Float.min((-1.0F), 197.181F);
      assertEquals((-1.0F), float2, 0.01F);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float3 = wall1.getHeight();
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float3);
      assertNotSame(wall1, wall0);
      
      Float float4 = new Float((double) 785.604F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(785.604F, (float)float4, 0.01F);
      
      wall1.setHeight(float4);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint(849.362F, (-803.0F), 3046.0F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight(float1);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1291.0F), wall1.getHeight(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(1019.35846F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1019.35846F, wall0.getLength(), 0.01F);
      assertEquals((-287.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(312.311F, wall0.getThickness(), 0.01F);
      assertEquals(197.181F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-773.159F), wall0.getXEnd(), 0.01F);
      assertEquals(312.311F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(156.1605F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      Float float5 = new Float((-1745.2403456123159));
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      assertEquals((-1745.2404F), (float)float5, 0.01F);
      
      float float6 = float5.floatValue();
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertEquals((-1745.2404F), float6, 0.01F);
      
      Float float7 = new Float(1.0F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotNull(float7);
      assertEquals(1.0F, (float)float7, 0.01F);
      
      float float8 = float7.floatValue();
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertEquals(1.0F, float8, 0.01F);
      
      wall1.setArcExtent((Float) 1.0F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1291.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-556.03705F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(538.99854F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(694.0475F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      float float9 = wall1.getThickness();
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1291.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-556.03705F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(538.99854F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(694.0475F, wall1.getLength(), 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(92.72152F, float9, 0.01F);
      assertNotSame(wall1, wall0);
      
      float float10 = wall1.getYArcCircleCenter();
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1291.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-556.03705F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(538.99854F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(694.0475F, wall1.getLength(), 0.01F);
      assertNotEquals(float10, float9, 0.01F);
      assertNotEquals(float10, float2, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      assertNotEquals(float10, float6, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(538.99854F, float10, 0.01F);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 1433.6F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYStart();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Float float1 = new Float(2233.33502);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(2233.335F, (float)float1, 0.01F);
      
      boolean boolean0 = Float.isFinite(1433.6F);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      float float2 = Float.min(0.0F, 112.637F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      boolean boolean1 = float1.equals(object0);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float3 = new Float((-838.4495F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-838.4495F), (float)float3, 0.01F);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      float float4 = Float.min((-55.974613F), 0.0F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-55.974613F), float4, 0.01F);
      
      float float5 = Float.max((-838.4495F), 0.0F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float0, 0.01F);
      assertEquals(float5, float2, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      boolean boolean2 = float3.equals(object1);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(object1, object0);
      
      wall0.setHeightAtEnd(float3);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      
      boolean boolean3 = wall0.containsPoint(0.0F, (-1589.9246F), (-1085.16F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Wall wall1 = wall0.clone();
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-838.4495F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1433.6F, wall1.getThickness(), 0.01F);
      assertEquals(2233.335F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall0, wall1);
      
      boolean boolean4 = wall0.intersectsRectangle(1.0F, (-284.0F), 0.0F, (-838.4495F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      assertNotSame(wall0, wall1);
      
      float float6 = wall0.getRightSideShininess();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float4, 0.01F);
      assertEquals(float6, float2, 0.01F);
      assertEquals(float6, float0, 0.01F);
      assertEquals(float6, float5, 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(wall0, wall1);
      
      Level level0 = new Level("`o/y7qjwv ", (-1050.7F), (-1050.7F), (-1050.7F));
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals((-1050.7F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1050.7F), level2.getHeight(), 0.01F);
      assertEquals((-1050.7F), level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      wall0.setLevel(level2);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals((-1050.7F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1050.7F), level2.getHeight(), 0.01F);
      assertEquals((-1050.7F), level2.getFloorThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      float float7 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1433.6F, wall0.getThickness(), 0.01F);
      assertEquals((-838.4495F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2233.335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float7, float5, 0.01F);
      assertEquals(float7, float0, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertEquals(float7, float6, 0.01F);
      assertEquals(float7, float2, 0.01F);
      assertEquals(0.0F, float7, 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 1.0F, (-64.0F), 0.0F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      wall0.setLevel(level1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-64.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-64.0F), level1.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertTrue(level1.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      float float2 = wall0.getXArcCircleCenter();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-32.0F), float2, 0.01F);
      
      Integer integer0 = new Integer((-1301));
      assertNotNull(integer0);
      assertEquals((-1301), (int)integer0);
      
      int int0 = Integer.sum(0, 0);
      assertEquals(0, int0);
      
      Integer integer1 = Integer.valueOf(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(integer2);
      
      Integer integer3 = new Integer((-1301));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      assertEquals((-1301), (int)integer3);
      
      boolean boolean0 = integer0.equals("");
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer1);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer0));
      
      Level level2 = new Level("PATTERN", (-2372.5708F), 0.0F, (-64.0F));
      assertEquals((-64.0F), level2.getHeight(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-2372.5708F), level2.getElevation(), 0.01F);
      assertEquals("PATTERN", level2.getName());
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      
      Level level3 = level2.clone();
      assertEquals((-64.0F), level2.getHeight(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-2372.5708F), level2.getElevation(), 0.01F);
      assertEquals("PATTERN", level2.getName());
      assertEquals((-2372.5708F), level3.getElevation(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(0.0F, level3.getFloorThickness(), 0.01F);
      assertEquals("PATTERN", level3.getName());
      assertEquals((-64.0F), level3.getHeight(), 0.01F);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertNotNull(level3);
      assertNotSame(level2, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      assertNotSame(level3, level1);
      assertNotSame(level3, level2);
      assertNotSame(level3, level0);
      
      boolean boolean1 = wall0.isAtLevel(level2);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), level2.getHeight(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-2372.5708F), level2.getElevation(), 0.01F);
      assertEquals("PATTERN", level2.getName());
      assertTrue(boolean1 == boolean0);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level3));
      assertFalse(level2.equals((Object)level1));
      assertFalse(boolean1);
      assertNotSame(level2, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(64.0F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1326.167F), 0.0F, 1465.6743F, 3.6589158F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertNull(float0);
      
      Wall wall1 = new Wall(2737.2F, (-2560.6648F), 3.6589158F, 3.6589158F, 134.22636F, 2737.2F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2737.2F, wall1.getHeight(), 0.01F);
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      wall1.setHeight((Float) null);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float2 = new Float((-2012.9F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals((-2012.9F), (float)float2, 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1465.6743F, wall0.getYEnd(), 0.01F);
      assertEquals(2791.8413F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6589158F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2791.8413F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(69.75366F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1326.167F), wall0.getYStart(), 0.01F);
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(134.22636F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3748.0664F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1278.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2737.2F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6589158F, wall1.getYEnd(), 0.01F);
      assertEquals(3748.0664F, wall1.getLength(), 0.01F);
      assertEquals(3.6589158F, wall1.getXEnd(), 0.01F);
      assertEquals(1370.4294F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2560.6648F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1033.8953F), 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(1499.4537F, 0.0F);
      assertEquals(1, int0);
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(1.0F, float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 1.0F, 785.604F, 1.0F);
      assertEquals(659.27625F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(659.27625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float3 = wall1.getHeight();
      assertEquals(659.27625F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(659.27625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float3);
      assertNotSame(wall1, wall0);
      
      Float float4 = new Float((double) 785.604F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      assertEquals(785.604F, (float)float4, 0.01F);
      
      wall1.setHeight(float4);
      assertEquals(659.27625F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(659.27625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(659.27625F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(659.27625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      Float float5 = wall1.getHeightAtEnd();
      assertEquals(659.27625F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertEquals(659.27625F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float5);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1033.8953F), wall0.getYEnd(), 0.01F);
      assertEquals(1033.8953F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1033.8953F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-516.94763F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), 0.0F, (-1194.0F));
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean0);
      
      wall0.setHeight(float1);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(homeTexture0);
      
      wall0.setArcExtent(float1);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float2 = wall0.getThickness();
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, float2, 0.01F);
      
      float float3 = wall0.getXStart();
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      Wall wall1 = wall0.clone();
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7.897583F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall1.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(7.897583F, wall1.getYStart(), 0.01F);
      assertEquals(7.897583F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2.596036F), 0.0F, 0.0F, (-2.596036F), 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = new Float((-2437.9373F));
      assertNotNull(float0);
      assertEquals((-2437.9373F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(42.2973F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(103166.7F, wall0.getLength(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setXEnd((-4058.681F));
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4058.681F), wall0.getXEnd(), 0.01F);
      assertEquals(4058.6816F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(1.61292384E8F, wall0.getLength(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(66126.92F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1987.0432F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float0);
      assertNotSame(wall0, wall1);
      
      Float float1 = new Float((double) 2.0F);
      assertNotNull(float1);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      wall1.setHeight((Float) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(2.0F, 786.15106F, (-2438.9473F), (-1.0F), 734.8F);
      assertEquals(2564.728F, wall1.getLength(), 0.01F);
      assertEquals((-1218.4736F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2438.9473F), wall1.getXEnd(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2564.728F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(392.57553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(734.8F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(734.8F);
      assertNotNull(float0);
      assertEquals(734.8F, (float)float0, 0.01F);
      
      Float float1 = new Float((-1185.4546F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1185.4546F), (float)float1, 0.01F);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1185.4546F), float2, 0.01F);
      
      wall1.setHeight((Float) (-1185.4546F));
      assertEquals(2564.728F, wall1.getLength(), 0.01F);
      assertEquals((-1218.4736F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1185.4546F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2438.9473F), wall1.getXEnd(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2564.728F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(392.57553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(734.8F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2564.728F, wall1.getLength(), 0.01F);
      assertEquals((-1218.4736F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1185.4546F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2438.9473F), wall1.getXEnd(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2564.728F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(392.57553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(734.8F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight(float1);
      assertEquals(2564.728F, wall1.getLength(), 0.01F);
      assertEquals((-1218.4736F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1185.4546F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2438.9473F), wall1.getXEnd(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2564.728F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(392.57553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(734.8F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2564.728F, wall1.getLength(), 0.01F);
      assertEquals((-1218.4736F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1185.4546F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2438.9473F), wall1.getXEnd(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2564.728F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(392.57553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(734.8F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(2564.728F, wall1.getLength(), 0.01F);
      assertEquals((-1218.4736F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1185.4546F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2438.9473F), wall1.getXEnd(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2564.728F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(392.57553F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(734.8F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      
      wall0.setHeight(float1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1185.4546F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setHeightAtEnd(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1185.4546F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(734.8F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1185.4546F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(734.8F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(392.57553F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1218.4736F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2564.728F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1185.4546F), wall2.getHeight(), 0.01F);
      assertEquals(2564.728F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2438.9473F), wall2.getXEnd(), 0.01F);
      assertEquals(734.8F, wall2.getThickness(), 0.01F);
      assertEquals(786.15106F, wall2.getYStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 785.604F);
      assertNotNull(float0);
      assertEquals(785.604F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(785.604F, float1, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(0.0F, (float)float2, 0.01F);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float0.equals((Object) null);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(boolean0);
      
      wall0.setArcExtent(float2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      wall0.setYStart(1.0F);
      assertEquals(8.1656197E15F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertEquals(8.1656197E15F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(8.1656197E15F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float((-2436.0F));
      assertNotNull(float0);
      assertEquals((-2436.0F), (float)float0, 0.01F);
      
      Float float1 = new Float(0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(1.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(1.0F, (float)float2, 0.01F);
      
      Wall wall0 = new Wall(2584.5378F, (-3765.0F), (-2436.0F), (-3765.0F), (-3765.0F), 1.0F);
      assertEquals((-2436.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2584.5378F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5020.538F, wall0.getLength(), 0.01F);
      assertEquals((-3765.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3765.0F), wall0.getThickness(), 0.01F);
      assertEquals(74.26892F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3765.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3765.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5020.538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("anqa[pa2+h%9ez>F", "eq*A7]Tf_dyZY9d<s", temporaryURLContent0, (-413.6798F), (-1.0F), "eq*A7]Tf_dyZY9d<s");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertNotNull(homeTexture0);
      
      boolean boolean0 = homeTexture0.equals(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setRightSideTexture(homeTexture0);
      assertEquals((-2436.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2584.5378F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5020.538F, wall0.getLength(), 0.01F);
      assertEquals((-3765.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3765.0F), wall0.getThickness(), 0.01F);
      assertEquals(74.26892F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3765.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3765.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5020.538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals((-2436.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2584.5378F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5020.538F, wall0.getLength(), 0.01F);
      assertEquals((-3765.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3765.0F), wall0.getThickness(), 0.01F);
      assertEquals(74.26892F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3765.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3765.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5020.538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2584.5378F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2436.0F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3765.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5020.538F, wall1.getLength(), 0.01F);
      assertEquals((-3765.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3765.0F), wall1.getThickness(), 0.01F);
      assertEquals(74.26892F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3765.0F), wall1.getYEnd(), 0.01F);
      assertEquals(5020.538F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 1487.183F, 1487.183F, (-1104.2539F), 1553.951F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(743.6415F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1487.183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1487.183F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(1553.951F, wall1.getHeight(), 0.01F);
      assertEquals(743.6415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.move((-1104.2539F), 2090.15F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2090.25F, wall1.getYStart(), 0.01F);
      assertEquals(382.92908F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(1553.951F, wall1.getHeight(), 0.01F);
      assertEquals(3577.333F, wall1.getYEnd(), 0.01F);
      assertEquals(2833.7915F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-360.61243F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1104.1539F), wall1.getXStart(), 0.01F);
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.clone();
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(1487.183F, wall2.getYEnd(), 0.01F);
      assertEquals(1487.183F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(743.6415F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall2.getHeight(), 0.01F);
      assertEquals(2103.053F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2103.053F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(743.6415F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.2539F), wall2.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      boolean boolean0 = wall0.containsPoint(0.01F, 1487.183F, 300.3971F);
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall1.clone();
      assertEquals(1487.183F, wall0.getXEnd(), 0.01F);
      assertEquals((-1104.2539F), wall0.getThickness(), 0.01F);
      assertEquals(1487.183F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(743.6415F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2103.053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(743.6415F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1553.951F, wall0.getHeight(), 0.01F);
      assertEquals(2103.053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2090.25F, wall1.getYStart(), 0.01F);
      assertEquals(382.92908F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2103.053F, wall1.getLength(), 0.01F);
      assertEquals(1553.951F, wall1.getHeight(), 0.01F);
      assertEquals(3577.333F, wall1.getYEnd(), 0.01F);
      assertEquals(2833.7915F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-360.61243F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1104.1539F), wall1.getXStart(), 0.01F);
      assertEquals((-1104.2539F), wall1.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-360.61243F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-1104.1539F), wall3.getXStart(), 0.01F);
      assertEquals(3577.333F, wall3.getYEnd(), 0.01F);
      assertEquals(2833.7915F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2103.053F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1104.2539F), wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(382.92908F, wall3.getXEnd(), 0.01F);
      assertEquals(2103.053F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2090.25F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(1553.951F, wall3.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertNotNull(wall3);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float((-1291.0));
      assertNotNull(float0);
      assertEquals((-1291.0F), (float)float0, 0.01F);
      
      Wall wall0 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float1 = wall0.getHeight();
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertNull(float1);
      
      Float float2 = new Float((double) 785.604F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      assertEquals(785.604F, (float)float2, 0.01F);
      
      wall0.setHeight(float2);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsPoint(2090.15F, (-803.0F), 3046.0F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertTrue(boolean0);
      
      wall0.setHeight(float0);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(455.96625F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertEquals(47.36076F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(665.4882F, wall0.getLength(), 0.01F);
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      
      Float float3 = new Float((-1745.2403456123159));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      assertEquals((-1745.2404F), (float)float3, 0.01F);
      
      float float4 = float3.floatValue();
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1745.2404F), float4, 0.01F);
      
      Float float5 = new Float(1.0F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      assertEquals(1.0F, (float)float5, 0.01F);
      
      float float6 = float5.floatValue();
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertEquals(1.0F, float6, 0.01F);
      
      wall0.setArcExtent((Float) 1.0F);
      assertEquals((-556.03705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(694.0475F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(538.99854F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      
      float float7 = wall0.getLength();
      assertEquals((-556.03705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(694.0475F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(538.99854F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(126.328514F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(665.4882F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertEquals(694.0475F, float7, 0.01F);
      
      wall0.setYStart((-1745.2404F));
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-396.78586F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals((-2268.979F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(2641.1504F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2532.47F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1745.2404F), wall0.getYStart(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-396.78586F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(92.72152F, wall0.getThickness(), 0.01F);
      assertEquals((-2268.979F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1291.0F), wall0.getHeight(), 0.01F);
      assertEquals(92.72152F, wall0.getXEnd(), 0.01F);
      assertEquals(2641.1504F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2532.47F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1745.2404F), wall0.getYStart(), 0.01F);
      assertEquals(785.604F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(0.030303031F, 0.030303031F, 0.030303031F, 0.030303031F, 1460.4299F, (-1.0F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.030303031F, wall0.getXEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getYEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.030303031F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.030303031F, wall0.getYStart(), 0.01F);
      assertEquals(0.030303031F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1460.4299F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.030303031F, wall0.getXEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getYEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.030303031F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.030303031F, wall0.getYStart(), 0.01F);
      assertEquals(0.030303031F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1460.4299F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      int int0 = (-1038);
      Integer integer0 = Integer.valueOf((-1038));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1038), (int)integer0);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.030303031F, wall0.getXEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getYEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.030303031F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1038), (int)wall0.getLeftSideColor());
      assertEquals(0.030303031F, wall0.getYStart(), 0.01F);
      assertEquals(0.030303031F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1460.4299F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(integer0.equals((Object)int0));
      
      float[][] floatArray1 = wall0.getPoints();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.030303031F, wall0.getXEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getYEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.030303031F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1038), (int)wall0.getLeftSideColor());
      assertEquals(0.030303031F, wall0.getYStart(), 0.01F);
      assertEquals(0.030303031F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1460.4299F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      int int1 = 6;
      Random.setNextRandom(6);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.030303031F, wall0.getXEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getYEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.030303031F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1038), (int)wall0.getLeftSideColor());
      assertEquals(0.030303031F, wall0.getYStart(), 0.01F);
      assertEquals(0.030303031F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1460.4299F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Integer integer1 = wall0.getLeftSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.030303031F, wall0.getXEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getYEnd(), 0.01F);
      assertEquals(0.030303031F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.030303031F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1038), (int)wall0.getLeftSideColor());
      assertEquals(0.030303031F, wall0.getYStart(), 0.01F);
      assertEquals(0.030303031F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1460.4299F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(integer1.equals((Object)int1));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals((-1038), (int)integer1);
      
      int int2 = Integer.max((-1038), (-2732));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1038), int2);
      
      // Undeclared exception!
      try { 
        Integer.divideUnsigned((-1038), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(boolean0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-586.4385F), 0.1F, 0.1F, 1074.12F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = Float.min((-586.4385F), 0.0F);
      assertEquals((-586.4385F), float0, 0.01F);
      
      float float1 = Float.sum((-231.75543F), (-2274.16F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2505.9153F), float1, 0.01F);
      
      float float2 = Float.max((-1317.0F), 1193.496F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1193.496F, float2, 0.01F);
      
      wall0.setXStart((-128.65648F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertNull(textureImage0);
      
      float float3 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertNull(float4);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("anqa[pa2+h%9ez>F", "eq*A7]Tf_dyZY9d<s", temporaryURLContent0, (-413.6798F), (-1.0F), "eq*A7]Tf_dyZY9d<s");
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertNotNull(homeTexture0);
      
      boolean boolean0 = homeTexture0.equals(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertFalse(boolean0);
      
      wall0.setLeftSideTexture(homeTexture0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertNull(level0);
      
      boolean boolean1 = wall0.containsPoint((-1317.0F), (-833.0F), 1193.496F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float float5 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt((-3030.555F), (-587.4385F), (-53.81058F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = wall0.isAtLevel((Level) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(600.50446F, wall0.getLength(), 0.01F);
      assertEquals(600.50446F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-128.65648F), wall0.getXStart(), 0.01F);
      assertEquals((-64.27824F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, (-3537.0F), (-3537.0F), 7.897583F, (-3537.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5013.242F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals((-1764.5513F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3537.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1764.5513F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3537.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3537.0F), wall0.getXEnd(), 0.01F);
      assertEquals(5013.242F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("anqa[pa2+h%9ez>F", "eq*A7]Tf_dyZY9d<s", temporaryURLContent0, (-413.6798F), (-1.0F), "eq*A7]Tf_dyZY9d<s");
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNotNull(homeTexture0);
      
      boolean boolean0 = homeTexture0.equals(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertFalse(boolean0);
      
      wall0.setRightSideTexture(homeTexture0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5013.242F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals((-1764.5513F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3537.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1764.5513F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3537.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3537.0F), wall0.getXEnd(), 0.01F);
      assertEquals(5013.242F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("anqa[pa2+h%9ez>F", catalogTexture0.getId());
      assertEquals((-413.6798F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("eq*A7]Tf_dyZY9d<s", catalogTexture0.getName());
      assertEquals("eq*A7]Tf_dyZY9d<s", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-413.6798F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(7.897583F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setThickness(7.897583F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float1 = wall0.getLength();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getHeight(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2.596036F), 0.0F, 0.0F, (-2.596036F), 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.11982427E16F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.11982427E16F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.11982427E16F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.11982427E16F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.596036F, float1, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.596036F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.11982427E16F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.298018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.596036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Level level0 = wall0.getLevel();
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1034.0F), 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(2.0F, 126.328514F, 92.72152F, 785.604F, 92.72152F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float0);
      assertNotSame(wall1, wall0);
      
      wall1.setHeightAtEnd((Float) null);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      wall1.setLeftSideShininess(0.0F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      float float2 = Float.max(1.0F, 0.0F);
      assertEquals(1.0F, float2, 0.01F);
      
      wall1.setHeight(float1);
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(785.604F, wall1.getHeight(), 0.01F);
      assertEquals(92.72152F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(92.72152F, wall1.getXEnd(), 0.01F);
      assertEquals(665.4882F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(47.36076F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(455.96625F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(665.4882F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(126.328514F, wall1.getYStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      Wall wall2 = wall0.clone();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1034.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1034.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-517.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1034.0F), wall2.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float float3 = wall2.getLeftSideShininess();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1034.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1034.0F, wall0.getLength(), 0.01F);
      assertEquals((-1034.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-517.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1034.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1034.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-517.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1034.0F), wall2.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-1.6119415F), (-1.6119415F), (-64.0F), (-1.6119415F), (-1.6119415F));
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 2.0F, 1.2544928F, 785.604F, (-64.0F), (-1.6119415F));
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(393.802F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.6272464F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(783.605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.2544928F, wall1.getXEnd(), 0.01F);
      assertEquals(783.605F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float1 = new Float((-64.0F));
      assertNotNull(float1);
      assertEquals((-64.0F), (float)float1, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(393.802F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.6272464F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(783.605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.2544928F, wall1.getXEnd(), 0.01F);
      assertEquals(783.605F, wall1.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = Float.min((-893.96F), (-3282.86F));
      assertEquals((-3282.86F), float2, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtEnd(wall0);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals((-64.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(393.802F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.6272464F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(783.605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.2544928F, wall1.getXEnd(), 0.01F);
      assertEquals(783.605F, wall1.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray1 = wall1.getPoints();
      assertEquals(785.604F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(393.802F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-64.0F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.6272464F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(783.605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.2544928F, wall1.getXEnd(), 0.01F);
      assertEquals(783.605F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-586.4385F), 0.1F, 0.1F, 1074.12F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-586.4385F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1074.12F, wall1.getThickness(), 0.01F);
      assertEquals((-293.16925F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(586.53845F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(586.53845F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-586.4385F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1074.12F, wall1.getThickness(), 0.01F);
      assertEquals((-293.16925F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(586.53845F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(586.53845F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-293.16925F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeight());
      assertEquals(586.53845F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(586.53845F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-586.4385F), wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(1074.12F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall1.move(1089.9377F, (-1.0F));
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1090.0377F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(1090.0377F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1074.12F, wall1.getThickness(), 0.01F);
      assertEquals(1090.0377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(586.53845F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-587.4385F), wall1.getYStart(), 0.01F);
      assertEquals(586.53845F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-294.16925F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1090.0377F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(1090.0377F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1074.12F, wall1.getThickness(), 0.01F);
      assertEquals(1090.0377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(586.53845F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-587.4385F), wall1.getYStart(), 0.01F);
      assertEquals(586.53845F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-294.16925F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNull(integer0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Float float0 = wall1.getHeight();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1090.0377F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(1090.0377F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1074.12F, wall1.getThickness(), 0.01F);
      assertEquals(1090.0377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(586.53845F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-587.4385F), wall1.getYStart(), 0.01F);
      assertEquals(586.53845F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-294.16925F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNull(float0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Float float1 = new Float((double) (-1318.391F));
      assertNotNull(float1);
      assertEquals((-1318.391F), (float)float1, 0.01F);
      
      float float2 = Float.min(1.6636496F, 1193.496F);
      assertEquals(1.6636496F, float2, 0.01F);
      
      wall1.setHeight((Float) null);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1090.0377F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(1090.0377F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1074.12F, wall1.getThickness(), 0.01F);
      assertEquals(1090.0377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(586.53845F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-587.4385F), wall1.getYStart(), 0.01F);
      assertEquals(586.53845F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-294.16925F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      float float3 = wall1.getYEnd();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-586.4385F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(586.53845F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(586.53845F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1074.12F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-293.16925F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1090.0377F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(1090.0377F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1074.12F, wall1.getThickness(), 0.01F);
      assertEquals(1090.0377F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(586.53845F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-587.4385F), wall1.getYStart(), 0.01F);
      assertEquals(586.53845F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-294.16925F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-0.9F), float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 1.0F, 302.3F, 1.0F, (-793.8924F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(302.3F, wall0.getYEnd(), 0.01F);
      assertEquals(152.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-793.8924F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(300.30167F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(300.30167F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(302.3F, wall0.getYEnd(), 0.01F);
      assertEquals(152.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-793.8924F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(300.30167F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(300.30167F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(level0);
      
      wall0.setLeftSideShininess((-2476.0F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2476.0F), wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(302.3F, wall0.getYEnd(), 0.01F);
      assertEquals(152.15F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-793.8924F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(300.30167F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(300.30167F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float float0 = (-4895.525F);
      Wall wall0 = new Wall((-4895.525F), (-1199.652F), (-1199.652F), (-1199.652F), (-4895.525F), (-4895.525F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3695.873F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1199.652F), wall0.getYEnd(), 0.01F);
      assertEquals((-1199.652F), wall0.getXEnd(), 0.01F);
      assertEquals((-4895.525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4895.525F), wall0.getHeight(), 0.01F);
      assertEquals((-1199.652F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1199.652F), wall0.getYStart(), 0.01F);
      assertEquals(3695.873F, wall0.getLength(), 0.01F);
      assertEquals((-3047.5884F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4895.525F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("8dGQ.mVD7hr8l1", propertyChangeListener0);
      assertEquals("8dGQ.mVD7hr8l1", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3695.873F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1199.652F), wall0.getYEnd(), 0.01F);
      assertEquals((-1199.652F), wall0.getXEnd(), 0.01F);
      assertEquals((-4895.525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4895.525F), wall0.getHeight(), 0.01F);
      assertEquals((-1199.652F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1199.652F), wall0.getYStart(), 0.01F);
      assertEquals(3695.873F, wall0.getLength(), 0.01F);
      assertEquals((-3047.5884F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4895.525F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals("8dGQ.mVD7hr8l1", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("D!Wb\"d,<Q`&t", propertyChangeListener1);
      assertEquals("D!Wb\"d,<Q`&t", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotNull(propertyChangeListenerProxy1);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3695.873F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1199.652F), wall0.getYEnd(), 0.01F);
      assertEquals((-1199.652F), wall0.getXEnd(), 0.01F);
      assertEquals((-4895.525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4895.525F), wall0.getHeight(), 0.01F);
      assertEquals((-1199.652F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1199.652F), wall0.getYStart(), 0.01F);
      assertEquals(3695.873F, wall0.getLength(), 0.01F);
      assertEquals((-3047.5884F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4895.525F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals("D!Wb\"d,<Q`&t", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      
      Integer integer0 = new Integer(559);
      assertNotNull(integer0);
      assertEquals(559, (int)integer0);
      
      int int0 = Integer.sum(559, 3);
      assertEquals(562, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer1 = Integer.getInteger(">tUe!PU3 C:V&#}>r5");
      assertNull(integer1);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3695.873F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1199.652F), wall0.getYEnd(), 0.01F);
      assertEquals((-1199.652F), wall0.getXEnd(), 0.01F);
      assertEquals((-4895.525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(559, (int)wall0.getLeftSideColor());
      assertEquals((-4895.525F), wall0.getHeight(), 0.01F);
      assertEquals((-1199.652F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1199.652F), wall0.getYStart(), 0.01F);
      assertEquals(3695.873F, wall0.getLength(), 0.01F);
      assertEquals((-3047.5884F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4895.525F), wall0.getThickness(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3695.873F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1199.652F), wall0.getYEnd(), 0.01F);
      assertEquals((-1199.652F), wall0.getXEnd(), 0.01F);
      assertEquals((-4895.525F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(559, (int)wall0.getLeftSideColor());
      assertEquals((-4895.525F), wall0.getHeight(), 0.01F);
      assertEquals((-1199.652F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1199.652F), wall0.getYStart(), 0.01F);
      assertEquals(3695.873F, wall0.getLength(), 0.01F);
      assertEquals((-3047.5884F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4895.525F), wall0.getThickness(), 0.01F);
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      assertEquals(559, (int)integer2);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      UnaryOperator<Wall> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        linkedList0.add(559, wall0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 559, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-1.6119415F), (-1.6119415F), (-64.0F), (-1.6119415F), (-1.6119415F));
      assertNull(wall0.getHeight());
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getHeight());
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
      
      Wall wall1 = new Wall((-1.6119415F), 786.15106F, (-1.6119415F), (-1.6119415F), 2.0F);
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float1 = new Float((-64.0F));
      assertNotNull(float1);
      assertEquals((-64.0F), (float)float1, 0.01F);
      
      wall1.setHeight(float1);
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertNull(wall0.getHeight());
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight(float1);
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertNull(wall0.getHeight());
      assertEquals((-1.6119415F), wall0.getYEnd(), 0.01F);
      assertEquals(62.388058F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-32.80597F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.6119415F), wall0.getXStart(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.6119415F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.6119415F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(62.388058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.6119415F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertEquals((-64.0F), wall1.getHeight(), 0.01F);
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNotSame(wall1, wall0);
      
      wall1.setHeight((Float) null);
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      wall1.setHeightAtEnd(float1);
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertEquals((-64.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertEquals(392.26956F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1.6119415F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(787.763F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.6119415F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(786.15106F, wall1.getYStart(), 0.01F);
      assertEquals((-64.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.6119415F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(787.763F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((-2436.0F));
      assertNotNull(float0);
      assertEquals((-2436.0F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-23.471485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2436.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(96673.01F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      
      float[][] floatArray1 = wall0.getPoints();
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-23.471485F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2436.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(96673.01F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(624, floatArray1.length);
      assertNotSame(floatArray1, floatArray0);
      
      Float float1 = new Float(3046.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(3046.0F, (float)float1, 0.01F);
      
      Float float2 = new Float(126.328514F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(126.328514F, (float)float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.move(0.1F, 0.1F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.1F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall((-2399.367F), (-2399.367F), (-2399.367F), (-2399.367F), (-2399.367F));
      assertEquals((-2399.367F), wall0.getYEnd(), 0.01F);
      assertEquals((-2399.367F), wall0.getXEnd(), 0.01F);
      assertEquals((-2399.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2399.367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2399.367F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2399.367F), wall0.getThickness(), 0.01F);
      assertEquals((-2399.367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-2399.367F), wall0.getYEnd(), 0.01F);
      assertEquals((-2399.367F), wall0.getXEnd(), 0.01F);
      assertEquals((-2399.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2399.367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2399.367F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2399.367F), wall0.getThickness(), 0.01F);
      assertEquals((-2399.367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals((-2399.367F), wall0.getYEnd(), 0.01F);
      assertEquals((-2399.367F), wall0.getXEnd(), 0.01F);
      assertEquals((-2399.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2399.367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2399.367F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2399.367F), wall0.getThickness(), 0.01F);
      assertEquals((-2399.367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals((-2399.367F), wall0.getYEnd(), 0.01F);
      assertEquals((-2399.367F), wall0.getXEnd(), 0.01F);
      assertEquals((-2399.367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2399.367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2399.367F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2399.367F), wall0.getThickness(), 0.01F);
      assertEquals((-2399.367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt(7.897583F, 7.897583F, 7.897583F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertTrue(boolean0);
      
      float float0 = wall0.getYEnd();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7.897583F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-3678.07F), 3130.0F, 496.604F, 496.604F, 1259.751F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1590.733F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYStart(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(5217.7393F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5217.7393F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(0.01F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 0.01F, 697.9244F, 496.604F);
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.01F, level2.getElevation(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals(496.604F, level2.getHeight(), 0.01F);
      assertEquals(697.9244F, level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      wall0.setLevel(level0);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      
      boolean boolean0 = wall0.intersectsRectangle((-1.0F), 179.2F, 179.2F, (-3678.07F));
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(248.307F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(1565.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(boolean0);
      
      int int0 = Float.floatToIntBits(1322.0F);
      assertEquals(1151680512, int0);
      
      int int1 = Float.floatToIntBits(1151680512);
      assertFalse(int1 == int0);
      assertEquals(1317620352, int1);
      
      int int2 = Float.floatToIntBits((-469.0F));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1008041984), int2);
      
      int int3 = Float.floatToIntBits(1.0F);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1065353216, int3);
      
      int int4 = Float.floatToIntBits(1322.0F);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(1151680512, int4);
      
      int int5 = Float.floatToIntBits(1151680512);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertEquals(1317620352, int5);
      
      int int6 = Float.floatToIntBits((-1008041984));
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertEquals((-831498752), int6);
      
      int int7 = Float.floatToIntBits(0.0F);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertEquals(0, int7);
      
      int int8 = Float.floatToIntBits(1065353216);
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int3);
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertEquals(1316880384, int8);
      
      int int9 = Float.floatToIntBits(1322.0F);
      assertFalse(int9 == int7);
      assertFalse(int9 == int3);
      assertTrue(int9 == int0);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertTrue(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int1);
      assertEquals(1151680512, int9);
      
      int int10 = Float.floatToIntBits((-1008041984));
      assertFalse(int10 == int5);
      assertFalse(int10 == int9);
      assertFalse(int10 == int8);
      assertFalse(int10 == int1);
      assertFalse(int10 == int2);
      assertFalse(int10 == int4);
      assertFalse(int10 == int7);
      assertTrue(int10 == int6);
      assertFalse(int10 == int0);
      assertFalse(int10 == int3);
      assertEquals((-831498752), int10);
      
      int int11 = Float.floatToIntBits(0.0F);
      assertTrue(int11 == int7);
      assertFalse(int11 == int4);
      assertFalse(int11 == int5);
      assertFalse(int11 == int10);
      assertFalse(int11 == int8);
      assertFalse(int11 == int0);
      assertFalse(int11 == int2);
      assertFalse(int11 == int3);
      assertFalse(int11 == int6);
      assertFalse(int11 == int9);
      assertFalse(int11 == int1);
      assertEquals(0, int11);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.555839E19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.05499778E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Level level3 = wall0.getLevel();
      assertEquals(3130.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3169.149F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.555839E19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1259.751F, wall0.getHeight(), 0.01F);
      assertEquals(496.604F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3169.149F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4.05499778E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals("`o/y7qjwv ", level3.getName());
      assertEquals(697.9244F, level3.getFloorThickness(), 0.01F);
      assertEquals(496.604F, level3.getHeight(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(0.01F, level3.getElevation(), 0.01F);
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertNotNull(level3);
      assertNotSame(level3, level2);
      assertNotSame(level3, level1);
      assertSame(level3, level0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setYEnd(7.897583F);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(1259.751F, 496.604F, (-3678.07F), (-3678.07F), 496.604F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertEquals(6466.064F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1590.733F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6466.064F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(496.604F, wall0.getYStart(), 0.01F);
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setYStart(0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals((-1839.03F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float(1259.751F);
      assertNotNull(float0);
      assertEquals(1259.751F, (float)float0, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", 0.01F, 697.9244F, 496.604F);
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals(496.604F, level1.getHeight(), 0.01F);
      assertEquals(697.9244F, level1.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals(0.01F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertTrue(level2.isVisible());
      assertEquals(496.604F, level2.getHeight(), 0.01F);
      assertEquals(697.9244F, level2.getFloorThickness(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals(0.01F, level2.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      wall0.setLevel(level0);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals((-1839.03F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, level0.getElevation(), 0.01F);
      assertEquals(697.9244F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(496.604F, level0.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      
      float float1 = wall0.getXArcCircleCenter();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals((-1839.03F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1209.1595F), float1, 0.01F);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.sum(0, 0);
      assertEquals(0, int0);
      
      Integer integer1 = Integer.valueOf(0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      boolean boolean0 = integer0.equals(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      
      wall0.setRightSideColor(integer1);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals((-1839.03F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      float float2 = wall0.getLength();
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals((-3678.07F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3678.07F), wall0.getXEnd(), 0.01F);
      assertEquals((-1839.03F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(496.604F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1259.751F, wall0.getXStart(), 0.01F);
      assertEquals((-1209.1595F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6157.138F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(6157.138F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(0.2F, (-2.596036F), 0.2F, 0.2F, (-2.596036F), 0.2F);
      assertEquals(0.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getHeight(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.796036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals((-1.198018F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.796036F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getHeight(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.796036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals((-1.198018F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.796036F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = new Float((-2437.9373F));
      assertNotNull(float0);
      assertEquals((-2437.9373F), (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getHeight(), 0.01F);
      assertEquals(45.755905F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2.596036F), wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.796036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals((-1.198018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(111114.72F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setThickness((-2437.9373F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getHeight(), 0.01F);
      assertEquals(45.755905F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2437.9373F), wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.796036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals((-1.198018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(111114.72F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getHeight(), 0.01F);
      assertEquals(45.755905F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2437.9373F), wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.796036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals((-1.198018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(111114.72F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float1 = wall0.getLength();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getHeight(), 0.01F);
      assertEquals(45.755905F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2437.9373F), wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertEquals((-2.596036F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.796036F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2437.9373F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals((-1.198018F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(111114.72F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(111114.72F, float1, 0.01F);
      
      // Undeclared exception!
      try { 
        wall0.intersectsRectangle(111114.72F, (-2437.9373F), (-2437.9373F), 3206.7393F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall((-90.61931F), (-90.61931F), (-90.61931F), (-90.61931F), (-90.61931F), (-90.61931F));
      assertEquals((-90.61931F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-90.61931F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-90.61931F), wall0.getXStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-90.61931F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-90.61931F), wall0.getYStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-90.61931F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-90.61931F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-90.61931F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-90.61931F), wall0.getXStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-90.61931F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-90.61931F), wall0.getYStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-90.61931F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-90.61931F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-90.61931F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-90.61931F), wall0.getXStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-90.61931F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-90.61931F), wall0.getYStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-90.61931F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals((-90.61931F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-90.61931F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-90.61931F), wall0.getXStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-90.61931F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-90.61931F), wall0.getYStart(), 0.01F);
      assertEquals((-90.61931F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-90.61931F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-64.0F), 0.0F, 0.01F);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(float0);
      
      Float float1 = new Float((double) 785.604F);
      assertNotNull(float1);
      assertEquals(785.604F, (float)float1, 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float2 = Float.min((-2436.0F), 126.328514F);
      assertEquals((-2436.0F), float2, 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), (-2436.0F), (-1194.0F));
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeight(float1);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertEquals(64.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      float float3 = wall0.getThickness();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.01F, float3, 0.01F);
      
      float float4 = wall0.getYArcCircleCenter();
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-309.82175F), float4, 0.01F);
      
      Level level0 = new Level("`o/y7qjwv ", (-1050.7F), (-1050.7F), (-1050.7F));
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Level level2 = level1.clone();
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals((-1050.7F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1050.7F), level2.getHeight(), 0.01F);
      assertEquals((-1050.7F), level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      boolean boolean1 = wall0.isAtLevel(level2);
      assertEquals((-64.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-309.82175F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(244692.03F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-32.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(64.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.604F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals("`o/y7qjwv ", level0.getName());
      assertEquals((-1050.7F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1050.7F), level0.getHeight(), 0.01F);
      assertEquals((-1050.7F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1050.7F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("`o/y7qjwv ", level1.getName());
      assertEquals((-1050.7F), level1.getHeight(), 0.01F);
      assertEquals("`o/y7qjwv ", level2.getName());
      assertEquals((-1050.7F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1050.7F), level2.getHeight(), 0.01F);
      assertEquals((-1050.7F), level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(7.897583F, 7.897583F, 7.897583F, 7.897583F, 7.897583F);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess((-3064.642F));
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals((-3064.642F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(7.897583F, wall0.getXStart(), 0.01F);
      assertEquals((-3064.642F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(7.897583F, wall0.getThickness(), 0.01F);
      assertEquals(7.897583F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(7.897583F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7.897583F, wall0.getXEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYEnd(), 0.01F);
      assertEquals(7.897583F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(0.1F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      
      wall0.move(0.1F, 0.1F);
      assertEquals(0.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
      assertNotNull(float0);
      assertEquals(0.1F, (float)float0, 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.2F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.2F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.2F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.2F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.2F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-5985.6636F), 0.0F, 1022.9797F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(0.0F, 126.328514F, 4008.9F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(boolean0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(level0);
      
      wall0.setThickness((-607.3F));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-607.3F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getYEnd();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-607.3F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1022.9797F, float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-607.3F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7008.643F, wall1.getLength(), 0.01F);
      assertEquals((-5985.6636F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1022.9797F, wall1.getYEnd(), 0.01F);
      assertEquals((-607.3F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2481.342F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7008.643F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean1 = wall1.containsPoint(4008.9F, 785.604F, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-607.3F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7008.643F, wall1.getLength(), 0.01F);
      assertEquals((-5985.6636F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1022.9797F, wall1.getYEnd(), 0.01F);
      assertEquals((-607.3F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2481.342F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7008.643F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean2 = wall1.containsPoint(0.01F, (-2570.052F), (-2570.052F));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-607.3F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7008.643F, wall1.getLength(), 0.01F);
      assertEquals((-5985.6636F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1022.9797F, wall1.getYEnd(), 0.01F);
      assertEquals((-607.3F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2481.342F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7008.643F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-607.3F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7008.643F, wall1.getLength(), 0.01F);
      assertEquals((-5985.6636F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1022.9797F, wall1.getYEnd(), 0.01F);
      assertEquals((-607.3F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2481.342F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7008.643F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1022.9797F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-5985.6636F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7008.643F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-607.3F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(7008.643F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2481.342F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(7008.643F, wall1.getLength(), 0.01F);
      assertEquals((-5985.6636F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1022.9797F, wall1.getYEnd(), 0.01F);
      assertEquals((-607.3F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2481.342F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(7008.643F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-607.3F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2481.342F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7008.643F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(7008.643F, wall2.getLength(), 0.01F);
      assertEquals((-5985.6636F), wall2.getYStart(), 0.01F);
      assertEquals(1022.9797F, wall2.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }
}
