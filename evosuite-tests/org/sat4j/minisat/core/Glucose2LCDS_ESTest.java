/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:29:12 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.LBDConflictTimer;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Glucose2LCDS_ESTest extends Glucose2LCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>((Solver<MixedDataStructureDanielWLConciseBinary>) null, lubyRestarts0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      constr0.incActivity(2);
      glucose2LCDS0.onPropagation(constr0);
      assertFalse(constr0.locked());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>((Solver<MixedDataStructureDanielWLConciseBinary>) null, lubyRestarts0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      constr0.incActivity(32);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onPropagation(constr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Glucose2LCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer((Solver<? extends DataStructureFactory>) null, 4449);
      Lits lits0 = new Lits();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, lits0);
      learntWLClause0.incActivity(964);
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-1.0));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, randomWalkDecorator0, lubyRestarts0);
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>(solver0, lBDConflictTimer0);
      glucose2LCDS0.onPropagation(learntWLClause0);
      assertEquals(1.0, learntWLClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer((Solver<? extends DataStructureFactory>) null, 4449);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      constr0.incActivity(964);
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-1.0));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0.0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, randomWalkDecorator0, lubyRestarts0);
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>(solver0, lBDConflictTimer0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onPropagation(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>((Solver<MixedDataStructureDanielWL>) null, (ConflictTimer) null);
      String string0 = glucose2LCDS0.toString();
      assertEquals("Glucose 2 learned constraints deletion strategy (LBD updated on propagation) with timer null", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>((Solver<MixedDataStructureDanielWLConciseBinary>) null, lubyRestarts0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      glucose2LCDS0.onPropagation(constr0);
      assertEquals(6, constr0.size());
  }
}
