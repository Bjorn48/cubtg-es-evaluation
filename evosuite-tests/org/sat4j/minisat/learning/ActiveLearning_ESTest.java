/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:05:15 GMT 2019
 */

package org.sat4j.minisat.learning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.FullClauseSelectorSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActiveLearning_ESTest extends ActiveLearning_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      iVecInt0.push(0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, miniSATRestarts0);
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      boolean boolean0 = activeLearning0.learningCondition(learntWLClause0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-2102.0808913), 0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, miniSATRestarts0, mUSLauncher0);
      activeLearning0.setSolver(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      activeLearning0.setLimit(3655);
      int int0 = activeLearning0.getLimit();
      assertEquals(3655, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      activeLearning0.setLimit((-1877066601));
      int int0 = activeLearning0.getLimit();
      assertEquals((-1877066601), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1145.728);
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(1145.728, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      // Undeclared exception!
      try { 
        activeLearning0.setSolver((Solver<MixedDataStructureDanielHT>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>((AbstractMinimalModel) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      UnitClauses unitClauses0 = new UnitClauses(iVecInt0);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-15));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, miniSATRestarts0);
      LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(learntWLClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-1.0));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1579));
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 32);
      boolean boolean0 = activeLearning0.learningCondition(minWatchCard0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-1.0));
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 32);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(minWatchCard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      int int0 = activeLearning0.getLimit();
      assertEquals(0, int0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      String string0 = activeLearning0.toString();
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-1.0));
      double double0 = activeLearning0.getActivityPercent();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      activeLearning0.setOrder(levelBasedVarOrderHeap0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-1.0));
      activeLearning0.setActivityPercent(402.92439);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1579));
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 32);
      boolean boolean0 = activeLearning0.learningCondition(minWatchCard0);
      assertEquals(402.92439, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(boolean0);
  }
}
