/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 21:40:22 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Util;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Util_ESTest extends Util_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-1311));
      vector0.add(integer0);
      boolean boolean0 = Util.VectorEqualsUnordered((Vector) null, vector0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Util.StringCompareIgnCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Util.StringCompareIgnCase("", "Hj");
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Util.StringCompare("0.0", "");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = Util.StringCompare("Hj", "]2");
      assertEquals((-21), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Util.NormalizeString("+-");
      assertEquals("+-", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      Vector<Object> vector1 = new Vector<Object>(683);
      vector1.addElement((Object) null);
      // Undeclared exception!
      try { 
        Util.VectorEqualsUnordered(vector1, vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Util.NormalizeString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = Util.DoubleMaxString(1.7976931348623157E308);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Util.DoubleMaxString(884.5594824);
      assertEquals("884.5594824", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Util.IntMaxString(Integer.MAX_VALUE);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Util.IntMaxString(1736);
      assertEquals("1736", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      vector0.add("WN%LV");
      Vector<Object> vector1 = new Vector<Object>(1);
      vector1.addElement("WN%LV");
      boolean boolean0 = Util.VectorEqualsUnordered(vector1, vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "884.5594824");
      vector0.add((Object) "");
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer0 = new Integer(1736);
      vector1.add(integer0);
      vector1.add(integer0);
      boolean boolean0 = Util.VectorEqualsUnordered(vector0, vector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      boolean boolean0 = Util.VectorEqualsUnordered(vector0, (Vector) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      boolean boolean0 = Util.VectorEqualsUnordered(vector0, vector0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "884.5594824");
      Vector<Integer> vector1 = new Vector<Integer>();
      boolean boolean0 = Util.VectorEqualsUnordered(vector0, vector1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = Util.NormalizeString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Util.StringIsEmpty("cR!>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = Util.StringIsEmpty("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Util.StringIsEmpty((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = Util.StringCompare("com.ib.client.Util", "com.ib.client.Util");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = Util.StringCompareIgnCase("com.ib.client.Util", "3,.3mr$c)a-ydJl");
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Util util0 = new Util();
  }
}
