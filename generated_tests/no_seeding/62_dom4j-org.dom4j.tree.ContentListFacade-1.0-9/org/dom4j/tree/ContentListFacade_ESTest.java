/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 23:01:21 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.tree.AbstractBranch;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.ContentListFacade;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContentListFacade_ESTest extends ContentListFacade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      boolean boolean0 = contentListFacade0.addAll(2800, (Collection<? extends Namespace>) linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultElement defaultElement0 = new DefaultElement("", namespace0);
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      Node[] nodeArray0 = new Node[0];
      Node[] nodeArray1 = contentListFacade0.toArray(nodeArray0);
      assertEquals(0, nodeArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMDocument0, linkedList0);
      int int0 = contentListFacade0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      DOMNamespace dOMNamespace0 = new DOMNamespace("ioz6}X<:", "org.dom4j.tree.ContentListFacade");
      BeanElement beanElement0 = new BeanElement("#!", dOMNamespace0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      int int0 = contentListFacade0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultElement defaultElement0 = new DefaultElement("", namespace0);
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      contentListFacade0.add(namespace0);
      Namespace namespace1 = contentListFacade0.set(0, namespace0);
      assertEquals("", namespace1.getText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      contentListFacade0.add(namespace0);
      boolean boolean0 = contentListFacade0.remove(namespace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultElement defaultElement0 = new DefaultElement("", namespace0);
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      contentListFacade0.add(namespace0);
      int int0 = contentListFacade0.indexOf(namespace0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      Namespace namespace0 = new Namespace((String) null, (String) null);
      int int0 = contentListFacade0.indexOf(namespace0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultElement defaultElement0 = new DefaultElement("", namespace0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(defaultElement0, (List<DOMNamespace>) null);
      List<DOMNamespace> list0 = contentListFacade0.getBackingList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultElement defaultElement0 = new DefaultElement("", namespace0);
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      ContentListFacade<Namespace> contentListFacade1 = new ContentListFacade<Namespace>(defaultElement0, contentListFacade0);
      List<Namespace> list1 = contentListFacade1.getBackingList();
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("");
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "zNi)s8>^");
      QName qName0 = QName.get("", (Namespace) dOMNamespace0);
      BeanElement beanElement0 = new BeanElement(qName0);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMDocument0, beanAttributeList0);
      UserDataElement userDataElement0 = new UserDataElement("");
      ContentListFacade<Namespace> contentListFacade1 = new ContentListFacade<Namespace>(userDataElement0, contentListFacade0);
      List<Namespace> list0 = contentListFacade1.getBackingList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMDocument0, linkedList0);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      contentListFacade0.add(0, namespace0);
      Namespace namespace1 = contentListFacade0.get(0);
      assertTrue(linkedList0.contains(namespace1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.toArray((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QName qName0 = QName.get("'");
      BeanElement beanElement0 = new BeanElement(qName0, "'");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement((String) null, (Namespace) null);
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement((String) null, (Namespace) null, object0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.set(565, (Namespace) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set(int,Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument("xN80c#");
      LinkedList<DOMNamespace> linkedList0 = new LinkedList<DOMNamespace>();
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(dOMDocument0, linkedList0);
      DOMNamespace dOMNamespace0 = new DOMNamespace("xN80c#", "xN80c#");
      // Undeclared exception!
      try { 
        contentListFacade0.set(3051, dOMNamespace0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3051, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      List<Namespace> list0 = indexedElement0.additionalNamespaces();
      Namespace namespace0 = Namespace.get("");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.set(387, namespace0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 387
         //
         verifyException("org.dom4j.tree.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("gIjxT?,Cm*hF-@_k", "gIjxT?,Cm*hF-@_k");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      contentListFacade0.removeAll(beanAttributeList0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove((Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument((Element) null);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.remove((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      List<Namespace> list0 = indexedElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("org.dom4j.tree.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Namespace> class0 = Namespace.class;
      BeanElement beanElement0 = new BeanElement("org.dom4j.tree.ContentListFacade", class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(7);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.dom4j.Node
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("X@Iv");
      BeanElement beanElement0 = new BeanElement("X@Iv", "X@Iv");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(nonLazyElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(2120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>((AbstractBranch) null, (List<DOMNamespace>) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace("Sz.r", "Sz.r");
      // Undeclared exception!
      try { 
        contentListFacade0.lastIndexOf(dOMNamespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.get(47);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 47, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("z%R[>'b--~|\"><-F&g", "z%R[>'b--~|\"><-F&g");
      List<Namespace> list0 = beanElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.get(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.dom4j.tree.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.contains(namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      List<Namespace> list0 = indexedElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      QName qName0 = QName.get("");
      BeanElement beanElement0 = new BeanElement(qName0, "");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((Collection<? extends Namespace>) beanAttributeList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The node \"org.dom4j.bean.BeanAttribute@0000000016\" could not be added to the element \"\" because: The Node already has an existing parent of \"\"
         //
         verifyException("org.dom4j.tree.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      contentListFacade0.add(namespace0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((Collection<? extends Namespace>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.LazyList$LazyListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("gIjxT?,Cm*hF-@_k", "gIjxT?,Cm*hF-@_k");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((Collection<? extends Namespace>) beanAttributeList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add(Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMDocument0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((Collection<? extends Namespace>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("");
      List<Namespace> list0 = indexedElement0.additionalNamespaces();
      Namespace namespace0 = new Namespace((String) null, (String) null);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      contentListFacade0.add(namespace0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(1, (Collection<? extends Namespace>) list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.LazyList$LazyListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("gIjxT?,Cm*hF-@_k", "gIjxT?,Cm*hF-@_k");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(501, (Collection<? extends Namespace>) beanAttributeList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add(int,Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(1, (Collection<? extends Namespace>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      DOMDocument dOMDocument0 = new DOMDocument();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMDocument0, linkedList0);
      linkedList0.add((Namespace) null);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(16, (Collection<? extends Namespace>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("y");
      List<Namespace> list0 = indexedElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      Namespace namespace0 = new Namespace("d{^\":nA\"T", "d{^\":nA\"T");
      contentListFacade0.add(namespace0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((-11), (Collection<? extends Namespace>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index value: -11 is less than zero
         //
         verifyException("org.dom4j.tree.BackedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("6nY.Q\"~K[(AHv?\"");
      List<Namespace> list0 = indexedElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      DOMNamespace dOMNamespace0 = new DOMNamespace("6nY.Q\"~K[(AHv?\"", "6nY.Q\"~K[(AHv?\"");
      // Undeclared exception!
      try { 
        contentListFacade0.add((Namespace) dOMNamespace0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The node \"org.dom4j.dom.DOMNamespace@0000000010\" could not be added to the element \"6nY.Q\"~K[(AHv?\"\" because: The Node already has an existing parent of \"6nY.Q\"~K[(AHv?\"\"
         //
         verifyException("org.dom4j.tree.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanElement beanElement0 = new BeanElement("j", "j");
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      // Undeclared exception!
      try { 
        contentListFacade0.add(namespace0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add(Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.add(namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement((String) null, object0);
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(beanElement0, "+-M2K", "+-M2K");
      // Undeclared exception!
      try { 
        contentListFacade0.add(47, (Namespace) dOMNamespace0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add(int,Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.add(29, (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement((QName) null, 687);
      List<Namespace> list0 = defaultElement0.additionalNamespaces("org.dom4j.tree.ContentListFacade");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      DOMNamespace dOMNamespace0 = new DOMNamespace("Lg8xIjL*", "org.dom4j.tree.ContentListFacade");
      // Undeclared exception!
      try { 
        contentListFacade0.add(969, (Namespace) dOMNamespace0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index value: 969 cannot be greater than the size: 0
         //
         verifyException("org.dom4j.tree.BackedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(" @eS");
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(baseElement0, (List<DOMNamespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.get((-3225));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      boolean boolean0 = contentListFacade0.containsAll(contentListFacade0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("", (Namespace) null);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = QName.get("");
      BeanElement beanElement0 = new BeanElement(qName0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(dOMElement0, beanAttributeList0);
      BeanAttributeList beanAttributeList1 = new BeanAttributeList(beanElement0, beanMetaData0);
      boolean boolean0 = contentListFacade0.containsAll(beanAttributeList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      contentListFacade0.add(namespace0);
      boolean boolean0 = contentListFacade0.contains(namespace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      boolean boolean0 = contentListFacade0.contains(namespace0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      boolean boolean0 = contentListFacade0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      assertTrue(contentListFacade0.isEmpty());
      
      contentListFacade0.add(namespace0);
      boolean boolean0 = contentListFacade0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      boolean boolean0 = linkedList0.add((Namespace) null);
      boolean boolean1 = contentListFacade0.removeAll(linkedList0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      boolean boolean0 = contentListFacade0.removeAll(contentListFacade0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanElement beanElement0 = new BeanElement("j", "j");
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("j");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, beanAttributeList0);
      contentListFacade0.clear();
      assertEquals(1, contentListFacade0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      contentListFacade0.add(namespace0);
      // Undeclared exception!
      contentListFacade0.addAll((Collection<? extends Namespace>) contentListFacade0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      boolean boolean0 = contentListFacade0.addAll((Collection<? extends Namespace>) list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Namespace> class0 = Namespace.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanElement beanElement0 = new BeanElement("org.dom4j.tree.ContentListFacade", beanMetaData0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(beanElement0, beanAttributeList0);
      DOMNamespace dOMNamespace0 = contentListFacade0.remove(7);
      assertNull(dOMNamespace0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.set(1, (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>((AbstractBranch) null, (List<DOMNamespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.indexOf((DOMNamespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DefaultElement defaultElement0 = new DefaultElement("", namespace0);
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      Node[] nodeArray0 = new Node[5];
      Node[] nodeArray1 = contentListFacade0.toArray(nodeArray0);
      assertSame(nodeArray0, nodeArray1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      boolean boolean0 = contentListFacade0.remove(namespace0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      int int0 = contentListFacade0.lastIndexOf(namespace0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("y", namespace0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      contentListFacade0.add(namespace0);
      // Undeclared exception!
      contentListFacade0.addAll(1, (Collection<? extends Namespace>) contentListFacade0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Ljava.lang.Object; cannot be cast to [Lorg.dom4j.Node;
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }
}
