/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 15:51:10 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 0.9784496F, (-1.0F), 0.9784496F);
      Wall wall1 = new Wall((-1.0F), (-1.0F), (-1.0F), 1090.35F, (-1.0F));
      wall1.setYEnd((-1.0F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXEnd(1.0F);
      wall1.getPoints();
      wall0.containsPoint((-1.0F), 0.9784496F, (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F));
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3163.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float((-3163.0F));
      Float.isFinite((-3163.0F));
      wall0.setArcExtent(float0);
      wall1.setWallAtEnd(wall0);
      wall0.setYStart(1.0F);
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall1.getPoints();
      Wall wall2 = wall1.getWallAtEnd();
      wall2.setThickness(0.01F);
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level0.getElevation();
      level0.getHeight();
      wall2.setLevel(level0);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("RIGHT_SIDE_TEXTURE", (PropertyChangeListener) null);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall2.getXStart();
      Float float1 = new Float((double) 1.0F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall((-3163.0F), (-3163.0F), (-1805.4F), (-3163.0F), (-1805.4F), (-3163.0F));
      Float.floatToIntBits((-3163.0F));
      wall0.intersectsRectangle((-82.3628F), 807.06F, 807.06F, 0.0F);
      Float.floatToIntBits((-1.0F));
      wall0.getHeightAtEnd();
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      wall0.getYArcCircleCenter();
      wall0.getLeftSideTexture();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.containsPoint(1525.638F, 0.0F, 1628.7F);
      Level level0 = new Level("", 0.0F, 1966.35F, 1628.7F);
      Level level1 = level0.clone();
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall((-3156.6978F), (-3156.6978F), (-3156.6978F), (-3156.6978F), (-3156.6978F));
      Float.isFinite((-3156.6978F));
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.containsPoint(1630.33F, 1630.33F, 1630.33F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 1.0F, (-23.871628F), 1.0F);
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.setXEnd((-709.0F));
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt(1.0F, 1.0F, 1090.35F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      wall0.setXEnd((-1.0F));
      wall0.setWallAtStart(wall0);
      Float.valueOf((-1.0F));
      Wall wall1 = new Wall((-1.0F), (-953.64F), (-953.64F), (-1058.7F), (-271.82535F));
      wall1.setThickness((-953.64F));
      wall1.getThickness();
      wall0.setWallAtStart(wall1);
      Float float0 = new Float((-1058.7F));
      wall1.getLength();
      wall0.getXStart();
      Wall.Property.values();
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(788.6402F, (-1.0F), 788.6402F, (-1.0F), (-1.0F));
      wall0.setXEnd((-1.0F));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall((-3388.0F), (-330.688F), (-624.96F), (-330.688F), (-3388.0F), (-3388.0F));
      Wall wall1 = new Wall(1875.0F, (-330.688F), 1875.0F, (-624.96F), 2.0F, (-624.96F));
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.containsPoint((-3388.0F), (-330.688F), (-3388.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      wall0.setXEnd((-1.0F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.setWallAtStart(wall0);
      wall1.containsPoint((-1.0F), (-1.0F), (-1.0F));
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level0.clone();
      level0.setFloorThickness(1049.0F);
      level0.setFloorThickness((-1329.59F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("OHg z^Iku{<vs", propertyChangeListener0);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      level0.getElevation();
      level0.getHeight();
      wall0.setLevel(level0);
      wall1.addPropertyChangeListener((PropertyChangeListener) null);
      Integer.valueOf(0);
      Integer.valueOf((-51));
      Integer.valueOf(0);
      // Undeclared exception!
      try { 
        Integer.remainderUnsigned(32, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall(0.48959953F, 0.0F, (-3259.9F), 0.48959953F, 0.48959953F);
      wall0.containsWallStartAt(0.48959953F, 0.0F, 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Float float0 = new Float((double) 1.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      Float float1 = new Float(1.0F);
      wall0.setArcExtent(float1);
      wall0.getLevel();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F);
      Float float0 = new Float(0.68707967F);
      Integer integer0 = Integer.valueOf(15);
      wall0.setLeftSideColor(integer0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall((-0.13274981F), (-0.13274981F), (-0.13274981F), (-0.13274981F), (-0.13274981F));
      wall0.getLeftSideColor();
      wall0.setLeftSideColor((Integer) null);
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1089.547F, (-2370.8198F), 1089.547F, 1089.547F);
      wall0.getLeftSideTexture();
      wall0.setRightSideColor((Integer) null);
      wall0.setXStart(0.01F);
      wall0.getLevel();
      wall0.getHeight();
      wall0.getThickness();
      wall0.setHeightAtEnd((Float) null);
      wall0.getXArcCircleCenter();
      wall0.getXStart();
      wall0.getLeftSideTexture();
      wall0.containsWallEndAt(1089.547F, (-2317.245F), (-2370.8198F));
      wall0.getArcExtent();
      wall0.setYEnd(1089.547F);
      wall0.getLength();
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 0.0F, 665.5F);
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess((-2078.5083F));
      Float float0 = wall1.getHeight();
      wall1.getThickness();
      Float.isFinite((-780.224F));
      wall1.setHeight(float0);
      wall1.setLeftSideShininess((-1.0F));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), 1.0F, (-1.0F), 0.0F, (-557.435F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      Float float0 = new Float(0.0F);
      Float.isFinite((-557.435F));
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits((-4880.6343F));
      Float.floatToIntBits(0.0F);
      wall1.setArcExtent((Float) (-4880.6343F));
      wall1.getPoints();
      wall0.containsPoint(3219.6125F, 2003.0F, 133.65295F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall2 = wall1.getWallAtStart();
      wall2.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), (-709.0F), (-709.0F), (-709.0F), (-285.98456F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.setRightSideShininess(0.0F);
      wall1.getHeight();
      wall0.getWallAtStart();
      Float float0 = new Float((-111.0F));
      Float.isFinite((-2078.5083F));
      Float float1 = new Float((-1.0));
      wall0.setHeight(float1);
      wall1.getThickness();
      wall0.move((-2333.3433F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.setRightSideShininess(1630.33F);
      Float.max(1630.33F, 1630.33F);
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      wall0.setWallAtEnd(wall0);
      wall0.setThickness((-709.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level0.getElevation();
      level0.getHeight();
      wall0.setThickness(0.0F);
      Float float0 = new Float(1265.96F);
      wall0.setWallAtStart(wall0);
      wall0.containsPoint(0.0F, 0.0F, (-3388.0F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall((-0.13274981F), (-0.13274981F), (-0.13274981F), (-0.13274981F), (-0.13274981F));
      wall0.setThickness(790.8F);
      wall0.getLeftSideColor();
      wall0.setLeftSideColor((Integer) null);
      wall0.setRightSideColor((Integer) null);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall((-1749.2F), 0.0F, 1630.33F, 1630.33F, 665.5F);
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess((-2078.5083F));
      wall1.getHeight();
      wall1.getThickness();
      Float.isFinite((-780.224F));
      wall0.containsWallEndAt(63.23F, (-1749.2F), 0.0F);
      wall0.setXEnd((-1.1990956F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), (-709.0F), (-709.0F), (-709.0F), (-709.0F));
      wall0.setThickness((-709.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Level level0 = new Level("K 95Y!,@B)IDn", 2.0F, 2.0F, 2.0F);
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      wall0.setYStart((-709.0F));
      wall0.getRightSideShininess();
      wall0.getPoints();
      wall0.getXStart();
      Float float0 = new Float((double) (-709.0F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 665.5F);
      Wall wall1 = wall0.clone();
      wall1.setLeftSideColor((Integer) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 786.83F, 0.0F);
      Float float0 = new Float(3670.16758081624);
      Float float1 = new Float((double) (-1.0F));
      wall0.setArcExtent(float1);
      Float.valueOf(0.0F);
      Float float2 = new Float((double) (-1.0F));
      float float3 = new Float(0.0F);
      Float.min(987.2145F, 0.0F);
      Float.max(1307.2819F, 0.0F);
      Wall wall1 = new Wall(1307.2819F, 2.0F, (-1.0F), 0.0F, 281.6F);
      wall1.getPoints();
      wall1.setHeightAtEnd(float2);
      wall0.getXEnd();
      wall1.getXEnd();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 786.83F, 0.0F);
      Float float0 = new Float(3670.16758081624);
      Float float1 = new Float((double) (-1.0F));
      wall0.setArcExtent(float1);
      Float.valueOf(0.0F);
      Float.valueOf(786.83F);
      Float.valueOf((-2640.3F));
      Float.valueOf(786.83F);
      Float.valueOf(786.83F);
      Float.valueOf(786.83F);
      Float.valueOf(39.30153F);
      wall0.setLeftSideShininess((-1.0F));
      Wall wall1 = new Wall((-1233.86F), 665.5F, (-2640.3F), 786.83F, (-3192.0F));
      wall0.getLength();
      Float float2 = new Float((-1.0F));
      Wall.Property.values();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.9784496F, 1.0F, 1.0F, (-265.3059F));
      wall0.setYEnd(3.1415927F);
      Wall wall1 = new Wall((-1.0F), (-265.3059F), (-265.3059F), 1090.35F, (-265.3059F));
      wall1.setYEnd((-12.24441F));
      wall1.containsWallEndAt(12.13208F, 0.49999997F, 12.13208F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXEnd(1.0F);
      wall1.getPoints();
      wall0.containsPoint((-12.24441F), 0.9784496F, 1.0F);
      Wall.Property.values();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.0F), (-684.0F), 0.0F);
      wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn("{$K8>yS}y.t4UN`KzV").when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      wall0.getPoints();
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), (-684.0F), 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = Integer.valueOf(0);
      integer0.equals("U8F}");
      wall0.setRightSideColor(integer0);
      wall1.setRightSideShininess(0.1F);
      wall1.setWallAtEnd(wall0);
      wall0.setPattern((TextureImage) null);
      wall0.setWallAtEnd(wall1);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      doReturn(2.0F).when(level0).getElevation();
      wall1.setLevel(level0);
      wall1.containsPoint((-684.0F), 0.0F, 0.0F);
      wall1.setYStart(1.0F);
      wall0.getRightSideTexture();
      wall1.getThickness();
      wall1.move(742.0F, (-684.0F));
      Level level1 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level1.getElevation();
      level1.getHeight();
      wall1.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 252.111F, 3165.2F, 2687.1748F);
      Float.floatToIntBits(0.0F);
      wall0.intersectsRectangle(2687.1748F, 0, 2687.1748F, 807.06F);
      Float.floatToIntBits((-1.0F));
      wall0.setArcExtent((Float) (-1.0F));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 252.111F, 400.123F, 2687.1748F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.clone();
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.setYEnd(1199.25F);
      wall0.setWallAtEnd(wall0);
      Float float0 = new Float((double) 0.1F);
      Float.max(1199.25F, (-900.26F));
      wall0.setHeightAtEnd(float0);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      Wall wall1 = new Wall(1630.33F, 2.0F, 1630.33F, 1630.33F, 1630.33F, 2.0F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.setYEnd((-1957.0F));
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setXEnd(2.0F);
      wall0.getPoints();
      wall0.containsPoint(1630.33F, 1.0F, 133.65295F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1630.33F, 2521.2083F, (-1937.178F), (-1749.2F));
      Float float0 = new Float(2158.0);
      wall0.setArcExtent(float0);
      Float.valueOf((-1749.2F));
      Float.valueOf((-1999.099F));
      Float.valueOf((-2640.3F));
      Float.valueOf((-1233.86F));
      Float.valueOf(0.0F);
      Float.valueOf((-2640.3F));
      Float.min(0.0F, 3037.1829F);
      Float float1 = Float.valueOf((-4573.0F));
      wall0.setHeightAtEnd(float1);
      wall0.getXArcCircleCenter();
      wall0.getXStart();
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.containsWallEndAt(786.83F, 2.0F, (-4573.0F));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level0.getElevation();
      level0.getHeight();
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K 95Y!,@B)IDn", propertyChangeListener0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level1.removePropertyChangeListener(propertyChangeListenerProxy0);
      level1.setHeight(0.0F);
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setLevel(level1);
      wall0.setThickness((-285.98456F));
      wall0.setYStart(0.0F);
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall0.getPoints();
      wall0.setLevel(level1);
      wall0.setThickness(0.0F);
      wall0.getRightSideColor();
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.0F), 0.0F, 2.0F);
      wall0.getLeftSideShininess();
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1.0F, 1.0F);
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      Float float0 = new Float(201.52);
      Float.min(1.0F, (-1.0F));
      wall0.setHeight(float0);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.setXEnd((-709.0F));
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall1.setHeightAtEnd((Float) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      Wall wall1 = new Wall(2.0F, (-4741.9175F), 1630.33F, 0.0F, 0.0F, 3392.5393F);
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      wall0.containsPoint(2.0F, 655.94F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(29.381277F, 788.64F, 29.381277F, 29.381277F, 788.64F, 788.64F);
      wall0.setYEnd(29.381277F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.containsWallStartAt(788.64F, (-158.3457F), 29.381277F);
      wall1.setWallAtEnd(wall0);
      wall0.setXEnd(788.64F);
      wall0.containsPoint(788.64F, 29.381277F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall((-3388.0F), 0.01F, 0.01F, 0.01F, 0.01F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Float.valueOf(0.01F);
      Integer integer0 = new Integer(0);
      wall0.setRightSideColor(integer0);
      Wall wall1 = wall0.clone();
      wall1.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      Float.valueOf(0.0F);
      Float.valueOf((-1073.37F));
      Float.valueOf(0.0F);
      Float.valueOf(0.0F);
      Float.valueOf((-1.0F));
      Wall wall1 = new Wall((-598.6443F), 1.0F, (-460.66F), (-1104.2007F), (-953.64F));
      wall1.getThickness();
      Float float1 = new Float(3607.602F);
      wall0.getLength();
      wall1.getXStart();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1.0F), (-1.0F), 1.0F, (-23.871628F), 1.0F);
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.containsWallEndAt(1090.35F, (-1.0F), 1.0F);
      wall1.getRightSideTexture();
      wall1.setLeftSideTexture((HomeTexture) null);
      wall0.getThickness();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall1.containsPoint(1090.35F, (-1.0F), 1090.35F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(1616.9113F, 1616.9113F, 1616.9113F, 1616.9113F, 1616.9113F);
      wall0.setThickness(1616.9113F);
      wall0.containsPoint(1616.9113F, 1616.9113F, 1616.9113F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Float.valueOf(2.0F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall((-3163.0F), (-3163.0F), (-1805.4F), (-3163.0F), (-1805.4F), (-3163.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Wall wall1 = wall0.clone();
      wall0.getYStart();
      wall1.getWallAtStart();
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1.0F), (-1.0F), 1.0F, (-23.871628F), 1.0F);
      Wall wall1 = new Wall((-23.871628F), (-23.871628F), (-23.871628F), 1090.35F, (-1.0F), (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.containsWallEndAt(1090.35F, (-1.0F), 1.0F);
      wall1.getRightSideTexture();
      wall1.setLeftSideTexture((HomeTexture) null);
      wall0.getThickness();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall1);
      wall1.containsPoint((-23.871628F), (-3794.8716F), (-23.871628F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(1639.1482F, 1639.1482F, 1639.1482F, 1639.1482F, 1639.1482F, 1639.1482F);
      Float float0 = new Float(1639.1482F);
      wall0.setHeightAtEnd(float0);
      wall0.setXEnd(1639.1482F);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.getHeight();
      Float.max(1630.33F, 1630.33F);
      wall0.getThickness();
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.setRightSideShininess(1630.33F);
      Float float0 = new Float(1630.33F);
      Float.max(1630.33F, 1630.33F);
      wall0.getThickness();
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      wall0.setWallAtEnd(wall0);
      wall0.setThickness((-709.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Level level0 = new Level("K 95Y!,@B)IDn", 2.0F, 3163.781F, (-733.0F));
      level0.getElevation();
      level0.getHeight();
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("s", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("LEVEL", propertyChangeListenerProxy0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.setHeight((-733.0F));
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setLevel(level1);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setThickness((-709.0F));
      wall0.setYStart(3163.781F);
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall0.getPoints();
      wall0.setLevel(level1);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getXStart();
      Float float0 = new Float((-1067.9787));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 786.83F, 0.0F);
      Float float0 = new Float(3670.16758081624);
      Float float1 = new Float((double) (-1.0F));
      wall0.setArcExtent(float1);
      Float.valueOf(0.0F);
      Float.valueOf(786.83F);
      Float.valueOf((-2640.3F));
      Float.valueOf(786.83F);
      Float.valueOf(786.83F);
      Float.valueOf(786.83F);
      Float.valueOf(39.30153F);
      wall0.setLeftSideShininess((-1.0F));
      Wall wall1 = new Wall((-1233.86F), 665.5F, (-2640.3F), 786.83F, (-3192.0F));
      wall0.getLength();
      float float2 = new Float((-1.0F));
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F);
      Float.valueOf(0.68707967F);
      wall0.getWallAtEnd();
      wall0.setWallAtEnd((Wall) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall(211.032F, 211.032F, 1.0F, 1.0F, 1.0F);
      Float float0 = new Float((-999.2655));
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(1089.547F, 0.0F, 0.0F, 1698.975F, 0.0F, 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setRightSideColor((Integer) null);
      wall0.getLevel();
      wall0.containsPoint(0.0F, (-1.0F), 1089.547F);
      Level level0 = new Level("\"ZH2myI", 1698.975F, 2407.1548F, (-2370.8198F));
      level0.clone();
      Wall wall1 = wall0.clone();
      wall1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.containsWallEndAt(1630.33F, 1630.33F, 1630.33F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.0F), 4027.1191F, 0.0F);
      wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn("{$K8>yS}y.t4UN`KzV").when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      wall0.getPoints();
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      wall1.setRightSideShininess(0.0F);
      wall0.setPattern((TextureImage) null);
      wall1.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.setWallAtEnd(wall1);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall1.setLevel(level0);
      wall1.containsPoint((-684.0F), 0.0F, 0.0F);
      wall1.setYStart(1.0F);
      wall0.getRightSideTexture();
      wall1.containsWallEndAt((-1.0F), (-1749.2F), 0.0F);
      wall1.setXEnd((-1663.3918F));
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 1.0F, (-23.871628F), 1.0F);
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      wall1.setYEnd(2.0F);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXEnd(1.0F);
      wall0.containsPoint((-709.0F), (-1.0F), 0.0F);
      Float float0 = new Float((double) 1.0F);
      Float.isFinite((-1126.2635F));
      wall1.setHeightAtEnd(float0);
      wall1.getPoints();
      Float float1 = new Float((double) (-709.0F));
      wall0.setHeightAtEnd(float1);
      wall1.getPoints();
      wall1.getRightSideColor();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall((-2068.9363F), 0.0F, 786.83F, (-1025.9F), (-1025.9F), (-3388.0F));
      Wall wall1 = new Wall(0.0F, (-2068.9363F), 786.83F, 786.83F, (-3388.0F), 0.0F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      wall1.getPoints();
      PropertyChangeListenerProxy propertyChangeListenerProxy3 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy2);
      wall0.containsPoint((-118.869995F), (-238.0F), (-624.96F));
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall((-326.3F), (-326.3F), (-326.3F), (-3477.0F), 1.0F, (-326.3F));
      Wall wall1 = new Wall(1.0F, 1630.0233F, (-326.3F), 1130.2245F, 2991.5308F);
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtStart(wall0);
      wall1.setWallAtEnd(wall0);
      wall0.setXEnd((-3477.0F));
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.setHeightAtEnd((Float) null);
      wall0.getPoints();
      Float.valueOf(1630.0233F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F);
      Float float0 = new Float((double) (-1.0F));
      Float.valueOf(0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setPattern((TextureImage) null);
      wall0.setWallAtEnd((Wall) null);
      wall0.setWallAtEnd(wall0);
      Float.valueOf((-1366.935F));
      wall0.containsPoint(559.0F, 559.0F, 0.0F);
      wall0.containsPoint((-2907.1375F), 559.0F, (-4639.108F));
      wall0.getWallAtEnd();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.containsPoint(1630.33F, 1630.33F, 1630.33F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Level level0 = new Level("", 1630.33F, 1630.33F, 2658.0F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 1.0F, (-23.871628F), 1.0F);
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      Float.isFinite(1.0F);
      Float.compare(0.67594105F, 0.67594105F);
      Float.compare(0, 863.8008F);
      Float.compare((-1), 0);
      wall0.setArcExtent((Float) 863.8008F);
      // Undeclared exception!
      try { 
        wall0.containsPoint(2679.57F, (-298.0F), (-298.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float float0 = (-2830.1F);
      float float1 = 1886.415F;
      Wall wall0 = new Wall((-2830.1F), (-2830.1F), (-2830.1F), 0.0F, (-2830.1F), 1886.415F);
      Wall wall1 = wall0.clone();
      wall1.getWallAtEnd();
      String string0 = "Qml?MbWoM'f/+";
      Class<String> class0 = String.class;
      String string1 = "";
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource 
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, 0.0F);
      wall0.setThickness((-709.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList2 = new LinkedList<Wall>();
      Level level0 = new Level("K 95Y!,@B)IDn", 2.0F, 2.0F, 2.0F);
      level0.getHeight();
      Level level1 = level0.clone();
      level1.setElevation(815.1649F);
      wall0.setLevel(level1);
      wall0.setThickness((-709.0F));
      wall0.setYStart(0.0F);
      wall0.getRightSideShininess();
      level0.setName("$VALUES");
      wall0.getPoints();
      wall0.getXStart();
      Float float0 = new Float((double) (-709.0F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall(1219.0F, (-1207.4863F), 410.32803F, (-1207.4863F), 1219.0F, (-276.903F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F);
      Float float0 = Float.valueOf(0.68707967F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      wall0.setLeftSideShininess((-1.0F));
      wall0.setXEnd((-1.0F));
      wall0.setWallAtStart(wall0);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.0F, 1089.547F, (-2370.8198F), 1698.975F, 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setRightSideColor((Integer) null);
      wall0.getLevel();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.i
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall(0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F);
      wall0.setYEnd(0.68707967F);
      Float.valueOf(0.68707967F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F);
      wall0.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 786.83F, 0.0F);
      Float float0 = new Float(3670.16758081624);
      Float float1 = new Float((double) (-1.0F));
      wall0.setArcExtent(float1);
      Float.valueOf(0.0F);
      Float.valueOf(786.83F);
      Float.valueOf((-2640.3F));
      Float.valueOf((-1.0F));
      Float.valueOf(0.0F);
      wall0.setThickness(786.83F);
      Float.valueOf((-1233.86F));
      wall0.getHeight();
      Float.max(0.0F, (-0.028571429F));
      wall0.getThickness();
      Float.valueOf((-1808.2F));
      Float.valueOf((-1808.2F));
      Float.valueOf((-1208.1F));
      Float.valueOf((-1208.1F));
      Float.valueOf(0.01F);
      Float.valueOf((-1808.2F));
      Float float2 = Float.valueOf(0.0F);
      wall0.setHeight(float2);
      Float float3 = new Float(1.2731563F);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtEnd(wall1);
      wall0.containsPoint((-3528.27F), (-3056.4863F), (-709.0F));
      Float float0 = new Float(101.30262246);
      wall0.setHeightAtEnd(float0);
      wall0.getPoints();
      Float.floatToIntBits(1.0F);
      Float.floatToIntBits(516.62445F);
      wall0.setHeightAtEnd((Float) 516.62445F);
      wall1.getRightSideColor();
      wall1.getLevel();
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, 0.0F);
      wall0.setThickness((-709.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList2 = new LinkedList<Wall>();
      Level level0 = new Level("K 95Y!,@B)IDn", 2.0F, 2.0F, 2.0F);
      level0.getHeight();
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      wall0.setThickness((-709.0F));
      wall0.setYStart(0.0F);
      wall0.getRightSideShininess();
      wall0.getPoints();
      wall0.getXStart();
      Float float0 = new Float((-1067.9787));
      wall0.isAtLevel(level0);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 3402.52F, 3402.52F, 0.14210838F, (-23.871628F), 0.14210838F);
      Wall wall1 = new Wall(3402.52F, (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.containsWallEndAt(1090.35F, 3402.52F, 1.0F);
      wall1.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getThickness();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.containsPoint((-1703.0F), (-709.0F), 3402.52F);
      Float float0 = new Float((double) 2.9902F);
      wall1.setHeightAtEnd(float0);
      wall0.getPoints();
      Float float1 = new Float((-3763.421));
      wall0.setHeightAtEnd(float0);
      wall0.getPoints();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall((-2068.9363F), 0.0F, 786.83F, (-1025.9F), (-1025.9F), (-3388.0F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      Float float0 = new Float(560.0F);
      Float.compare((-792.3148F), 0.0F);
      wall0.setHeightAtEnd((Float) 0.0F);
      wall0.setXEnd(0.0F);
      wall1.setWallAtStart(wall0);
      wall0.containsPoint((-1.0F), 786.83F, (-1275.377F));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall((-2079.5393F), 0.0F, 786.83F, (-2079.5393F), (-2079.5393F), (-3388.0F));
      Wall wall1 = new Wall(0.0F, (-2079.5393F), 786.83F, 786.83F, (-3388.0F), 0.0F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float(786.83F);
      Float float1 = new Float(1.7297934E7);
      Float float2 = new Float(4.5914176E7);
      float2.floatValue();
      wall1.clone();
      Float float3 = new Float(786.83F);
      Float float4 = new Float((-3388.0F));
      wall0.setArcExtent(float4);
      Float float5 = new Float(0.0);
      Wall wall2 = wall0.getWallAtStart();
      wall2.setArcExtent(float2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall((-1749.2F), 1630.33F, 2521.2083F, (-1937.178F), (-1749.2F));
      Float float0 = new Float(2158.0);
      wall0.setArcExtent(float0);
      Float.valueOf((-1749.2F));
      Float.valueOf((-1999.099F));
      Float.valueOf((-2640.3F));
      Float.valueOf((-1233.86F));
      Float.valueOf(0.0F);
      wall0.setThickness(1348.71F);
      wall0.getThickness();
      Float.isFinite(1.0F);
      Float float1 = new Float((-1750.2F));
      wall0.getLength();
      wall0.getXStart();
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
      wall0.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall((-0.51439834F), 0.0F, 0.0F, 0.0F, (-2370.8198F), (-2370.8198F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setRightSideColor((Integer) null);
      wall0.getLevel();
      wall0.setRightSideShininess((-0.51439834F));
      wall0.getHeight();
      wall0.getThickness();
      wall0.isTrapezoidal();
      Float float0 = new Float((-0.51439834F));
      wall0.setArcExtent(float0);
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      wall0.setXEnd((-1.0F));
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart(wall0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("OHg z^Iku{<vs", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy2);
      wall0.containsPoint(786.83F, 2.0F, (-1338.0F));
      wall0.containsWallEndAt(2.0F, (-1.0F), (-1.0F));
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 1.0F);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.containsPoint(1525.638F, 0.0F, 0.0F);
      Level level0 = new Level("", 0.0F, 1966.35F, 0.0F);
      Level level1 = level0.clone();
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, 665.5F);
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess((-2078.5083F));
      wall1.getHeight();
      wall1.getThickness();
      Float.isFinite((-780.224F));
      Float float0 = new Float((-1437.1));
      float0.floatValue();
      wall0.setHeightAtEnd((Float) (-1437.1F));
      wall1.getXArcCircleCenter();
      wall1.getXStart();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.2011F), 4027.1191F, 0.0F);
      wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      wall0.getPoints();
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      wall1.setRightSideShininess(0.0F);
      wall0.setWallAtEnd(wall1);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall1.setLevel(level0);
      wall1.containsPoint((-684.2011F), 0.0F, 0.0F);
      wall1.setYStart(1.0F);
      wall0.getRightSideTexture();
      wall1.setXEnd((-1663.3918F));
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall((-2068.9363F), 0.0F, 786.83F, (-1025.9F), (-1025.9F), (-3388.0F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      wall1.getPoints();
      PropertyChangeListenerProxy propertyChangeListenerProxy3 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy2);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy2);
      wall0.containsPoint((-118.869995F), (-238.0F), (-624.96F));
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 2.0F, 2.0F, 2.0F, 2.0F);
      wall0.getLeftSideShininess();
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.setRightSideShininess(1.0F);
      Float float0 = wall1.getHeight();
      wall0.getThickness();
      Float.isFinite(0.0F);
      Float float1 = new Float(1524.325207950909);
      float0.floatValue();
      wall0.setHeightAtEnd(float0);
      wall1.getXArcCircleCenter();
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, 665.5F);
      Wall wall1 = wall0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("OU.j6yy5", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall1.setRightSideShininess((-2078.5083F));
      wall1.getHeight();
      wall1.getWallAtStart();
      Float float0 = new Float(0.0F);
      Float.isFinite((-780.224F));
      wall1.setHeight(float0);
      wall1.getThickness();
      wall1.move((-1749.2F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 665.5F);
      Wall wall1 = wall0.clone();
      wall1.setLeftSideColor((Integer) null);
      wall1.setRightSideShininess(1114.384F);
      Float float0 = wall0.getHeight();
      wall1.getThickness();
      Float.isFinite(1630.33F);
      Float float1 = new Float((double) (-2078.5083F));
      float0.floatValue();
      Float float2 = new Float((double) 1630.33F);
      wall1.setHeightAtEnd(float2);
      wall0.getXArcCircleCenter();
      wall0.getXStart();
      wall1.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 2494.8926F, (-1.0281775F), 2524.0F, 564.67535F, 1.0F);
      Wall wall1 = new Wall((-1212.5106F), 564.67535F, 1.0F, 1090.35F, (-1212.5106F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.containsWallEndAt(1.0F, 1.0F, 1.0F);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall1.getThickness();
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.setWallAtEnd(wall0);
      wall1.containsPoint(564.67535F, 1.0F, 1.5707964F);
      wall0.getPoints();
      Wall.Property.values();
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall((-3163.0F), (-3163.0F), (-1805.4F), (-3163.0F), (-1805.4F), (-3163.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = new Wall((-1805.4F), 1.0F, 278.778F, (-225.03098F), (-225.03098F));
      linkedList0.add(wall1);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Wall wall2 = wall0.clone();
      wall0.setArcExtent((Float) null);
      wall2.getThickness();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.0F), 4027.1191F, 0.0F);
      wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn("{$K8>yS}y.t4UN`KzV").when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      wall0.getPoints();
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("{$K8>yS}y.t4UN`KzV", propertyChangeListener0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      Integer integer0 = Integer.valueOf(0);
      integer0.equals("U8F}");
      wall0.setRightSideColor(integer0);
      wall1.setRightSideShininess(0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setPattern((TextureImage) null);
      wall0.setWallAtEnd(wall1);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall1.setLevel(level0);
      wall1.containsPoint((-684.0F), 0.0F, 0.0F);
      wall1.setYStart(1.0F);
      wall0.getRightSideTexture();
      wall1.getThickness();
      wall1.move(742.0F, (-684.0F));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      Wall wall1 = new Wall(1630.33F, 2.0F, 1630.33F, 1630.33F, 1630.33F, 2.0F);
      wall1.getPoints();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart((Wall) null);
      wall1.getPoints();
      wall0.containsPoint(1630.33F, 2.0F, 1.0F);
      wall0.getPattern();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.setRightSideShininess(1630.33F);
      wall0.getHeight();
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(741.9765F, 741.9765F, 0.0F, 0.0F, 1628.7F, 0.0F);
      wall0.clone();
      wall0.setRightSideShininess(777.46826F);
      wall0.getHeight();
      Float.isFinite(0.01F);
      Float.floatToIntBits(1.0F);
      wall0.setHeight((Float) 1.0F);
      float float0 = new Integer(1065353216);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("com.eteks.sweethome3d.model.CatalogTexture");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.com.eteks.sweethome3d.model.CatalogTexture
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall((-1.0281775F), (-1.0281775F), (-1.0281775F), (-1.0281775F), (-1.0281775F));
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("Grux\"_\")ye%vAg[", resourceURLContent0, 1131.73F, (-136.07396F));
      catalogTexture0.getName();
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level0.getElevation();
      level0.getHeight();
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K 95Y!,@B)IDn", propertyChangeListener0);
      level1.removePropertyChangeListener(propertyChangeListenerProxy0);
      level1.setHeight(0.0F);
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setLevel(level1);
      wall0.setThickness((-285.98456F));
      wall0.setYStart(0.0F);
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall0.getPoints();
      wall0.setLevel(level1);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.containsPoint(2.0F, 0.0F, (-1322.612F));
      wall0.getYEnd();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("K 95Y!,@B)IDn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.K 95Y!,@B)IDn
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(29.381277F, 788.64F, 29.381277F, 29.381277F, 788.64F, 788.64F);
      wall0.setYEnd(29.381277F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.containsWallStartAt(788.64F, (-158.3457F), 29.381277F);
      wall0.setWallAtEnd(wall0);
      wall0.setXEnd(788.64F);
      wall0.getPoints();
      wall0.containsPoint(788.64F, 29.381277F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall((-3388.0F), (-3388.0F), (-0.17740573F), (-3388.0F), (-3388.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float((double) (-0.17740573F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(706.2769F, 706.2769F, 706.2769F, 1.0F, 1.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall1.getXEnd();
      Integer integer0 = new Integer(2);
      wall1.setLeftSideColor(integer0);
      wall0.getXArcCircleCenter();
      wall0.setLeftSideShininess(741.9765F);
      Integer integer1 = Integer.valueOf(33);
      wall1.setLeftSideColor(integer1);
      wall0.getRightSideTexture();
      wall1.getYEnd();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1.0F), (-1.0F), 1.0F, (-23.8716F), 1.0F);
      Wall wall1 = new Wall((-1.0F), (-23.8716F), (-23.8716F), 1090.35F, (-23.8716F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.containsWallEndAt(1090.35F, (-1.0F), 1.0F);
      wall0.getThickness();
      wall1.setWallAtStart(wall0);
      wall1.move((-23.8716F), (-23.8716F));
      wall0.setWallAtEnd(wall1);
      wall1.containsPoint((-1703.4757F), (-1703.4757F), (-1.0F));
      Float float0 = new Float((double) 2.9902458F);
      wall1.setHeightAtEnd(float0);
      wall1.setHeightAtEnd(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      wall0.setWallAtEnd(wall0);
      wall0.setThickness((-709.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Level level0 = new Level("K 95Y!,@B)IDn", 2.0F, 3163.781F, (-733.0F));
      level0.getElevation();
      level0.getHeight();
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("ndhKj)&_n=U", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("LEVEL", propertyChangeListenerProxy0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.setHeight((-733.0F));
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setLevel(level1);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getWallAtEnd();
      Integer integer0 = Integer.valueOf(14);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, (-1749.2F));
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess((-2078.5083F));
      wall1.getHeight();
      wall1.getWallAtStart();
      Float float0 = new Float(0.0F);
      Float.isFinite((-780.224F));
      wall1.setHeight(float0);
      wall1.getThickness();
      wall1.move((-1749.2F), 1.0F);
      URL uRL0 = MockURL.getFileExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("<uM;AVb;#", temporaryURLContent0, 0.0F, 0.0F, false);
      catalogTexture0.getName();
      wall0.setPattern(catalogTexture0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall((-0.13274981F), (-0.13274981F), (-0.13274981F), (-0.13274981F), (-0.13274981F));
      Level level0 = new Level("", 1821.0F, (-23.871628F), 2.0F);
      level0.getHeight();
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      wall0.setYStart(0.0F);
      wall0.getRightSideShininess();
      wall0.getPoints();
      wall0.getXStart();
      Float float0 = new Float((double) (-0.13274981F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.getLength();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      wall0.setWallAtEnd(wall0);
      wall0.setThickness((-709.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Level level0 = new Level("K 95Y!,@B)IDn", 2.0F, 3163.781F, (-733.0F));
      level0.getElevation();
      level0.getHeight();
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("ndhKj)&_n=U", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("LEVEL", propertyChangeListenerProxy0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.setHeight((-733.0F));
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setLevel(level1);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setThickness((-709.0F));
      wall0.setYStart(3163.781F);
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall0.getPoints();
      wall0.setLevel(level1);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getXStart();
      Float float0 = new Float((-1067.9787));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, 665.5F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      
      wall1.setRightSideShininess((-2078.5083F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      
      Float float0 = wall1.getHeight();
      assertEquals(665.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      
      float float1 = wall1.getThickness();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      
      boolean boolean0 = Float.isFinite((-780.224F));
      assertTrue(boolean0);
      
      wall1.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      
      float float2 = wall1.getXArcCircleCenter();
      assertEquals(1630.33F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      Wall wall1 = new Wall(1630.33F, 1.0F, 1630.33F, 1630.33F, 1630.33F, (-3540.0F));
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      wall0.containsPoint(1630.33F, 0.0F, (-1051.02F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Float.valueOf(1630.33F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 788.6402F, (-1.0F), (-1.0F), 788.6402F, 788.6402F);
      Float float0 = new Float(788.6402F);
      Float float1 = new Float(129.29583458837163);
      float1.equals("/>bNC");
      wall0.setHeightAtEnd(float1);
      Wall wall1 = new Wall(788.6402F, (-3533.0F), 1892.5F, (-684.0F), 1892.5F);
      wall0.setWallAtEnd(wall1);
      wall1.setXEnd(1123.49F);
      wall1.setWallAtStart(wall0);
      wall1.containsPoint((-709.0F), (-709.0F), (-1.0F));
      wall1.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      Float float0 = new Float(0.0);
      Float.isFinite(0.0F);
      wall0.setArcExtent(float0);
      Float.valueOf(0.0F);
      Float.valueOf((-1073.37F));
      Float.valueOf(0.0F);
      Float.valueOf(0.0F);
      Float.max((-1073.37F), (-1073.37F));
      wall0.getPoints();
      Float.floatToIntBits(0.0F);
      wall0.setHeightAtEnd((Float) 0.0F);
      wall0.getLeftSideTexture();
      wall0.getXEnd();
      wall0.getXEnd();
      wall0.isTrapezoidal();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall((-2068.9363F), 0.0F, 786.83F, (-2068.9363F), (-2068.9363F), (-3388.0F));
      wall0.setWallAtStart(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.containsPoint(0.0F, (-238.0F), (-624.96F));
      Float float0 = new Float((double) (-238.0F));
      wall0.setArcExtent(float0);
      wall0.containsPoint((-3388.0F), (-624.96F), (-624.96F));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F));
      wall0.clone();
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      Wall wall1 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      wall0.containsPoint(1630.33F, 1630.33F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 786.83F, 0.0F);
      Float float0 = new Float(1.0);
      Float float1 = new Float(3670.16758081624);
      Float.sum((-1.0F), 0.0F);
      Float float2 = new Float(1.0E-6);
      float2.floatValue();
      float2.floatValue();
      wall0.setArcExtent((Float) 1.0E-6F);
      Float.valueOf(0.1F);
      Float float3 = new Float(1.0);
      Float float4 = new Float((-1602.167F));
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Float float5 = new Float((double) 1.0E-6F);
      wall0.containsWallEndAt((-1.0F), (-914.1F), (-1602.167F));
      Float float6 = new Float(1.0F);
      wall0.getXStart();
      Float float7 = new Float(3670.16758081624);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall((-3388.0F), (-3388.0F), (-0.17740573F), (-3388.0F), (-3388.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall((-1538.458F), (-2996.0F), (-1538.458F), (-2996.0F), (-2996.0F), 218.37662F);
      wall0.getRightSideColor();
      wall0.setXEnd((-1538.458F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Float float0 = new Float((-2868.0F));
      Float.sum((-1.0F), 3.2257F);
      Object object0 = new Object();
      float0.equals(object0);
      wall0.setHeight(float0);
      wall0.getRightSideTexture();
      wall0.getPattern();
      Integer integer0 = new Integer((-22));
      wall0.setRightSideColor(integer0);
      Wall wall1 = wall0.clone();
      wall1.setLeftSideColor((Integer) null);
      wall1.move((-2500.6892F), (-3606.106F));
      wall0.getRightSideColor();
      wall0.getRightSideTexture();
      wall0.getWallAtStart();
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.0F), (-684.0F), 0.0F);
      wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn("{$K8>yS}y.t4UN`KzV").when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      wall0.getPoints();
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), (-684.0F), 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("{$K8>yS}y.t4UN`KzV", propertyChangeListener0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      Integer integer0 = Integer.valueOf(0);
      integer0.equals("U8F}");
      wall0.setRightSideColor(integer0);
      wall1.setRightSideShininess(0.1F);
      wall1.setWallAtEnd(wall0);
      wall0.setPattern((TextureImage) null);
      wall0.setWallAtEnd(wall1);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F, 1710.362F).when(level0).getElevation();
      wall1.setLevel(level0);
      wall1.containsPoint((-684.0F), 0.0F, 0.0F);
      wall1.setYStart(1.0F);
      wall0.getRightSideTexture();
      wall1.getThickness();
      wall1.move(753.0712F, (-684.0F));
      Level level1 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level1.getElevation();
      level1.getHeight();
      wall1.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall((-691.3387F), 0.8829546F, 0.8829546F, 0.8829546F, 0.8829546F);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.move((-1345.47F), (-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Integer integer0 = Integer.valueOf(15);
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float((double) 0.0F);
      wall0.getLeftSideColor();
      try { 
        Integer.parseUnsignedInt("", 659);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1.0F, (-1.0F), 1.0F, (-23.871628F), 1.0F);
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float((-1.0F));
      wall1.setWallAtEnd(wall0);
      wall1.setXEnd(1.0F);
      wall1.setWallAtStart(wall0);
      wall0.move(758.35F, (-23.871628F));
      wall1.setWallAtEnd(wall0);
      wall1.containsPoint((-23.871628F), 1956.925F, (-1439.375F));
      wall1.setHeightAtEnd((Float) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F);
      Float float0 = new Float(3670.16758081624);
      Float float1 = new Float((double) (-1.0F));
      wall0.setArcExtent(float1);
      Float.valueOf(0.0F);
      Float.valueOf(0.0F);
      wall0.getYArcCircleCenter();
      wall0.getLeftSideTexture();
      wall0.containsPoint((-1.0F), (-1.0F), (-0.5F));
      Level level0 = new Level("", (-1.0F), 1966.35F, 1966.35F);
      Level level1 = level0.clone();
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 786.83F, 0.0F);
      assertNotNull(wall0);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float(3670.16758081624);
      assertEquals(3670.1675F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float2 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = Float.valueOf(786.83F);
      assertEquals(786.83F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Float float4 = Float.valueOf((-2640.3F));
      assertEquals((-2640.3F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      Float float5 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      Float float6 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      
      wall0.setThickness(786.83F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float7 = Float.valueOf((-1233.86F));
      assertEquals((-1233.86F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      
      float float8 = Float.min((-980.543F), (-2025.0F));
      assertEquals((-2025.0F), float8, 0.01F);
      
      Float float9 = Float.valueOf(426.19244F);
      assertEquals(426.19244F, (float)float9, 0.01F);
      assertNotNull(float9);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      
      float float10 = Float.max((-2025.0F), 1348.71F);
      assertEquals(1348.71F, float10, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      
      wall0.setHeightAtEnd(float4);
      assertNotEquals((float)float4, (float)float9, 0.01F);
      assertNotEquals((float)float4, (float)float6, 0.01F);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      assertNotEquals((float)float4, (float)float7, 0.01F);
      assertNotEquals((float)float4, (float)float10, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float8, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float11 = wall0.getXArcCircleCenter();
      assertEquals((-0.084756136F), float11, 0.01F);
      assertNotEquals(float11, float8, 0.01F);
      assertNotEquals(float11, float10, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float12 = wall0.getXStart();
      assertEquals((-1.0F), float12, 0.01F);
      assertNotEquals(float12, float10, 0.01F);
      assertNotEquals(float12, float11, 0.01F);
      assertNotEquals(float12, float8, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(1.0F, 1698.975F, 1348.71F);
      assertFalse(boolean0);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float13 = wall0.getArcExtent();
      assertEquals((-1.0F), (float)float13, 0.01F);
      assertNotNull(float13);
      assertNotEquals((float)float13, (float)float10, 0.01F);
      assertNotEquals((float)float13, (float)float11, 0.01F);
      assertNotEquals((float)float13, (float)float8, 0.01F);
      assertNotEquals((float)float13, (float)float4, 0.01F);
      assertNotEquals((float)float13, (float)float9, 0.01F);
      assertNotEquals((float)float13, (float)float3, 0.01F);
      assertNotEquals((float)float13, (float)float6, 0.01F);
      assertNotEquals((float)float13, (float)float7, 0.01F);
      assertNotEquals((float)float13, (float)float0, 0.01F);
      assertEquals((float)float13, (float)float12, 0.01F);
      assertNotEquals((float)float13, (float)float2, 0.01F);
      assertEquals((float)float13, (float)float5, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.containsWallStartAt((-980.543F), (-1.0F), 1698.975F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall((-1864.4192F), (-1113.1F), (-1864.4192F), (-605.0F), 1.0F);
      Wall wall1 = wall0.clone();
      wall1.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      wall0.setRightSideShininess(0.0F);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall0.setLevel(level0);
      wall0.containsPoint((-684.2011F), 0.0F, 0.0F);
      wall0.setYStart(1.0F);
      wall0.setXEnd((-1663.3918F));
      wall0.getPoints();
      wall0.setLeftSideShininess(0.0F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-0.51439834F), (-1256.689F), (-0.72447675F), (-1419.01F), 0.0F, 1.0F);
      Wall wall1 = new Wall(0.0F, (-3163.0F), 1090.35F, (-1419.01F), (-1570.776F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float(347.66F);
      wall0.setHeightAtEnd((Float) null);
      wall1.setWallAtEnd(wall0);
      wall1.setXEnd(Float.NEGATIVE_INFINITY);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.containsPoint(Float.NEGATIVE_INFINITY, 1.0F, 0.0F);
      Float float1 = new Float(4577.439237812294);
      wall0.setHeightAtEnd(float1);
      wall0.getHeightAtEnd();
      wall1.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall((-0.13274981F), (-0.13274981F), (-0.13274981F), (-0.13274981F), (-0.13274981F));
      wall0.getLeftSideColor();
      wall0.setLeftSideColor((Integer) null);
      wall0.setPattern((TextureImage) null);
      wall0.setRightSideColor((Integer) null);
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(1608.46F, 1608.46F, 1608.46F, 1608.46F, 1608.46F, 1608.46F);
      Float float0 = new Float((double) 1608.46F);
      Float.isFinite(2.0F);
      Float.max((-1073.37F), (-1073.37F));
      Float.min((-1073.37F), 2.0F);
      Float.max(2.0F, 1735.6F);
      wall0.getPoints();
      Float.compare(0.0F, 0.0F);
      wall0.setHeightAtEnd((Float) 0.0F);
      Wall wall1 = wall0.clone();
      wall1.getLeftSideTexture();
      wall0.getXEnd();
      wall0.getXEnd();
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.intersectsRectangle(1630.33F, 1630.33F, 656.5925F, 1630.33F);
      wall0.containsPoint(1630.33F, 1630.33F, 1630.33F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall((-1.0281775F), (-1.0281775F), (-1.0281775F), (-1.0281775F), (-1.0281775F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("jar:", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), (-709.0F), (-709.0F), (-709.0F), (-709.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setYStart((-709.0F));
      wall0.getRightSideShininess();
      wall0.getPoints();
      wall0.getXStart();
      Float float0 = new Float((double) (-709.0F));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.containsWallStartAt(1630.33F, 1630.33F, 1630.33F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-684.2011F), 4027.1191F, 0.0F);
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      wall0.getPoints();
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      wall1.setRightSideShininess(0.0F);
      wall0.setWallAtEnd(wall1);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall1.setLevel(level0);
      wall1.containsPoint((-684.2011F), 0.0F, 0.0F);
      wall1.setYStart(1.0F);
      Float.isFinite(0.0F);
      wall1.setHeight((Float) null);
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 2.0F, 1478.886F);
      Wall wall1 = new Wall(0.0F, 0.0F, 2.0F, 1478.886F, (-1128.44F));
      wall0.setWallAtEnd(wall1);
      wall0.getWallAtEnd();
      Float float0 = new Float(0.1F);
      float0.floatValue();
      float0.floatValue();
      wall1.setHeight((Float) 0.1F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.9784496F, 1.0F, 1.0F, (-266.41934F));
      wall0.setYEnd(0.9784496F);
      Wall wall1 = new Wall((-1.0F), (-266.41934F), (-266.41934F), 1.0F, (-266.41934F));
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXEnd(1.0F);
      wall1.getPoints();
      wall0.getRightSideTexture();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall((-958.1F), 786.83F, 0.0F, (-1964.965F), (-501.95163F));
      wall0.getYArcCircleCenter();
      wall0.getLeftSideTexture();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("t8C)TMU_TG4(", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("t8C)TMU_TG4(", propertyChangeListenerProxy0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy1);
      wall0.containsPoint(786.83F, 2135.9F, 1630.33F);
      wall0.containsWallStartAt(0.1F, (-1964.965F), 1630.33F);
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      Float float0 = new Float(1.0F);
      Float.isFinite(1.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.containsPoint((-88.0F), (-1.0F), 1.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.getPoints();
      wall0.getPoints();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall((-3388.0F), (-3388.0F), (-0.17740573F), (-3388.0F), (-3388.0F));
      Float float0 = new Float(189.00697698600885);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 0.9784496F, (-265.3059F), 0.9784496F);
      Wall wall1 = new Wall((-1.0F), (-265.3059F), (-265.3059F), 1090.35F, (-265.3059F));
      wall1.setYEnd(2.0F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXEnd(1.0F);
      wall1.getPoints();
      wall0.containsPoint(2.0F, 0.9784496F, 1.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall((-1.2477789F), (-1.2477789F), (-1.2477789F), (-1.2477789F), (-1.2477789F), (-1.2477789F));
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      Float float0 = new Float((-1.2477789F));
      wall0.intersectsRectangle((-1.2477789F), (-1.2477789F), (-1.2477789F), (-1.2477789F));
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      
      level0.setFloorThickness(1049.0F);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(1049.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      level0.setFloorThickness((-1329.59F));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1329.59F), level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("OHg z^Iku{<vs", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1329.59F), level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      
      float float0 = level0.getElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1329.59F), level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      float float1 = level0.getHeight();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(level0, level1);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1329.59F), level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      wall0.setLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1329.59F), level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      wall1.addPropertyChangeListener((PropertyChangeListener) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(3);
      assertEquals(3, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.valueOf(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      // Undeclared exception!
      try { 
        Integer.remainderUnsigned(32, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), (-684.2011F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-684.2011F), wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-684.2011F), wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-684.2011F), wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-684.2011F), wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      wall0.setYStart((-1720.9F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1720.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1719.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-860.95F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-684.2011F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1719.9F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNull(homeTexture1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1720.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1719.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-860.95F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-684.2011F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1719.9F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1720.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1719.9F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-860.95F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-684.2011F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1719.9F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(741.9765F, 741.9765F, 741.9765F, 741.9765F, 1.0F, (-2295.155F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(741.9765F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(741.9765F, wall0.getYEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall0.getYStart(), 0.01F);
      assertEquals(741.9765F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(741.9765F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(741.9765F, wall0.getYEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall0.getYStart(), 0.01F);
      assertEquals(741.9765F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(741.9765F, wall1.getXStart(), 0.01F);
      assertEquals(741.9765F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2295.155F), wall1.getHeight(), 0.01F);
      assertEquals(741.9765F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(741.9765F, wall1.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setXStart(1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(741.9765F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(741.9765F, wall0.getYEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall0.getYStart(), 0.01F);
      assertEquals(741.9765F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(741.9765F, wall1.getYStart(), 0.01F);
      assertEquals(740.9765F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2295.155F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(741.9765F, wall1.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(371.48825F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(740.9765F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall2 = new Wall(1631.33F, 1.0F, 186.4241F, 2.0F, 1, 1923.8005F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(186.4241F, wall2.getXEnd(), 0.01F);
      assertEquals(1.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(908.877F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1631.33F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1923.8005F, wall2.getHeight(), 0.01F);
      assertEquals(1444.9062F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1444.9062F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      
      wall2.setRightSideShininess(741.9765F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2.0F, wall2.getYEnd(), 0.01F);
      assertEquals(186.4241F, wall2.getXEnd(), 0.01F);
      assertEquals(1.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(908.877F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1631.33F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1923.8005F, wall2.getHeight(), 0.01F);
      assertEquals(1444.9062F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1444.9062F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(741.9765F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      
      Float float0 = new Float(2.0F);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall1.getThickness();
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(741.9765F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(741.9765F, wall0.getYEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall0.getYStart(), 0.01F);
      assertEquals(741.9765F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(741.9765F, wall1.getYStart(), 0.01F);
      assertEquals(740.9765F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2295.155F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(741.9765F, wall1.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(371.48825F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(740.9765F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean0 = Float.isFinite((-1480.38F));
      assertTrue(boolean0);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = wall1.getLength();
      assertEquals(740.9765F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals(float3, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(741.9765F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(741.9765F, wall0.getYEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall0.getYStart(), 0.01F);
      assertEquals(741.9765F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(741.9765F, wall1.getYStart(), 0.01F);
      assertEquals(740.9765F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(741.9765F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2295.155F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(741.9765F, wall1.getXEnd(), 0.01F);
      assertEquals(741.9765F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(371.48825F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(740.9765F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.2011F), 4027.1191F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      wall0.setRightSideTexture(homeTexture0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      wall1.setRightSideShininess(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall1.setLevel(level0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall1.containsPoint((-684.2011F), 0.0F, 0.0F);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      wall0.setXEnd(2.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.0195F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4027.0195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      
      float[][] floatArray1 = wall1.getPoints();
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.0195F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4027.0195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint(1630.33F, 2.0F, 1.0F);
      assertFalse(boolean0);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = Float.valueOf((-1073.37F));
      assertEquals((-1073.37F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = Float.valueOf(236.33F);
      assertEquals(236.33F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Float float4 = Float.valueOf(236.33F);
      assertEquals(236.33F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      Float float5 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      Float float6 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      float float7 = Float.min((-1.0F), (-598.6443F));
      assertEquals((-598.6443F), float7, 0.01F);
      
      wall0.setHeightAtEnd(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float6, 0.01F);
      assertNotEquals((float)float3, (float)float7, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(236.33F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float8 = wall0.getXArcCircleCenter();
      assertEquals((-1.3299344E19F), float8, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(236.33F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float9 = wall0.getXStart();
      assertEquals(0.0F, float9, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(236.33F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(236.33F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      wall0.setPattern((TextureImage) null);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(236.33F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      boolean boolean0 = wall0.containsWallEndAt(1.0F, (-1.0F), 786.83F);
      assertFalse(boolean0);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(236.33F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 0.0F, 665.5F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = Float.isFinite(43.0F);
      assertTrue(boolean0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      Float float1 = wall1.getHeight();
      assertEquals(665.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      Float float2 = new Float(665.5F);
      assertEquals(665.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      Float float3 = Float.valueOf((-675.0F));
      assertEquals((-675.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      Float float5 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float0, 0.01F);
      
      Float float6 = Float.valueOf((-2020.0F));
      assertEquals((-2020.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      
      Float float7 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      
      Float float8 = Float.valueOf((-675.0F));
      assertEquals((-675.0F), (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      
      float float9 = Float.min((-675.0F), 0.0F);
      assertEquals((-675.0F), float9, 0.01F);
      assertNotEquals(float9, float0, 0.01F);
      
      wall1.setHeightAtEnd(float8);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals((float)float8, (float)float9, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-675.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      float float10 = wall0.getXArcCircleCenter();
      assertEquals(1630.33F, float10, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float10, float9, 0.01F);
      assertNotEquals(float10, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float11 = wall0.getXStart();
      assertEquals(1630.33F, float11, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float11, float10, 0.01F);
      assertNotEquals(float11, float9, 0.01F);
      assertNotEquals(float11, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-675.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall((-1.0281775F), (-1.0281775F), (-1.0281775F), (-1.0281775F), (-1.0281775F));
      assertNotNull(wall0);
      assertEquals((-1.0281775F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0281775F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0281775F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-1.0281775F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0281775F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0281775F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertEquals((-1.0281775F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0281775F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0281775F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall((-3388.0F), (-1.0F), (-3388.0F), 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-3388.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), (-3388.0F), (-3388.0F), (-2130.5F), 48.71632F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3612.904F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2130.5F), wall1.getYEnd(), 0.01F);
      assertEquals((-1694.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3388.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3388.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-2759.25F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(48.71632F, wall1.getThickness(), 0.01F);
      assertEquals(3612.904F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-3388.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(3612.904F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2130.5F), wall1.getYEnd(), 0.01F);
      assertEquals((-1694.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3388.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3388.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-2759.25F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(48.71632F, wall1.getThickness(), 0.01F);
      assertEquals(3612.904F, wall1.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-3388.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(1639.1482F, 1639.1482F, 1639.1482F, 1639.1482F, 1639.1482F);
      assertNotNull(wall0);
      assertEquals(1639.1482F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1639.1482F, wall0.getYStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1639.1482F, wall0.getXStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1639.1482F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1639.1482F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float(1639.1482F);
      assertEquals(1639.1482F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1639.1482F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1639.1482F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1639.1482F, wall0.getYStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1639.1482F, wall0.getXStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1639.1482F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1639.1482F, wall0.getYEnd(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(1639.1482F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1639.1482F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1639.1482F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1639.1482F, wall0.getYStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1639.1482F, wall0.getXStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1639.1482F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1639.1482F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = new Level("PATTERN", 917.0F, 2.0F, 2237.9507F);
      assertNotNull(level0);
      assertEquals(917.0F, level0.getElevation(), 0.01F);
      assertEquals("PATTERN", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2237.9507F, level0.getHeight(), 0.01F);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
      
      float float0 = level0.getHeight();
      assertEquals(2237.9507F, float0, 0.01F);
      assertEquals(917.0F, level0.getElevation(), 0.01F);
      assertEquals("PATTERN", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2237.9507F, level0.getHeight(), 0.01F);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(917.0F, level0.getElevation(), 0.01F);
      assertEquals("PATTERN", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2237.9507F, level0.getHeight(), 0.01F);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2237.9507F, level1.getHeight(), 0.01F);
      assertEquals(2.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("PATTERN", level1.getName());
      assertEquals(917.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(917.0F, level0.getElevation(), 0.01F);
      assertEquals("PATTERN", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2237.9507F, level0.getHeight(), 0.01F);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2237.9507F, level1.getHeight(), 0.01F);
      assertEquals(2.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("PATTERN", level1.getName());
      assertEquals(917.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      
      wall0.setYStart(917.0F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(713.32996F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1273.665F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(713.32996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(917.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getRightSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(713.32996F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1273.665F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(713.32996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(917.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(713.32996F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1273.665F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(713.32996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(917.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float2 = wall0.getXStart();
      assertEquals(1630.33F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(713.32996F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1273.665F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(713.32996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(917.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float3 = new Float(1.0E-5);
      assertEquals(1.0E-5F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertTrue(boolean0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(713.32996F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1273.665F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(713.32996F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(917.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(917.0F, level0.getElevation(), 0.01F);
      assertEquals("PATTERN", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(2237.9507F, level0.getHeight(), 0.01F);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.0F), 4027.1191F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn("{$K8>yS}y.t4UN`KzV").when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      wall1.setRightSideShininess(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall1.setLevel(level0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall1.containsPoint((-684.0F), 0.0F, 0.0F);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      
      wall1.setYStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNotNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(homeTexture1, homeTexture0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertFalse(homeTexture1.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture1.getWidth(), 0.01F);
      assertEquals(0.0F, homeTexture1.getHeight(), 0.01F);
      assertNull(homeTexture1.getName());
      
      boolean boolean2 = wall1.containsWallEndAt((-1.0F), (-1749.2F), 0.0F);
      assertFalse(boolean2);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      
      wall1.setXEnd((-1663.3918F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals((-831.6959F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1663.3918F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1663.3931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1663.3931F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      
      float[][] floatArray1 = wall1.getPoints();
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals((-831.6959F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1663.3918F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1663.3931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1663.3931F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(211.032F, 211.032F, 1.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(297.0301F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(211.032F, wall0.getYStart(), 0.01F);
      assertEquals(211.032F, wall0.getXStart(), 0.01F);
      assertEquals(106.016F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(297.0301F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(106.016F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float((-999.2655));
      assertEquals((-999.2655F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-999.2655F), float1, 0.01F);
      
      wall0.setArcExtent((Float) (-999.2655F));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(297.0301F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(211.032F, wall0.getYStart(), 0.01F);
      assertEquals(211.032F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1244649.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(980.4795F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-999.2655F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-768.44745F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F);
      assertNotNull(wall0);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float(3670.16758081624);
      assertEquals(3670.1675F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.max((-1.0F), (-113.804F));
      assertEquals((-1.0F), float2, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float3 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      float float4 = Float.sum(0.0F, (-1.0F));
      assertEquals((-1.0F), float4, 0.01F);
      assertEquals(float4, float2, 0.01F);
      
      wall0.setRightSideShininess(559.0F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setThickness((-1.0F));
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float5 = wall0.getHeight();
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      
      float float6 = wall0.getThickness();
      assertEquals((-1.0F), float6, 0.01F);
      assertEquals(float6, float2, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float6, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float5, 0.01F);
      assertNotEquals((float)float3, (float)float4, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      
      float float7 = wall0.getXArcCircleCenter();
      assertEquals((-0.084756136F), float7, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      Float float0 = new Float(3670.16758081624);
      assertEquals(3670.1675F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      
      Float float2 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setRightSideShininess(559.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-1.0F), 5442.615F, (-3231.0F), (-2907.1375F), (-1366.935F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(6328.899F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2907.1375F), wall1.getThickness(), 0.01F);
      assertEquals((-1616.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5442.615F, wall1.getXEnd(), 0.01F);
      assertEquals((-3231.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1366.935F), wall1.getHeight(), 0.01F);
      assertEquals(6328.899F, wall1.getLength(), 0.01F);
      assertEquals(2721.3076F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(6328.899F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2907.1375F), wall1.getThickness(), 0.01F);
      assertEquals((-1616.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5442.615F, wall1.getXEnd(), 0.01F);
      assertEquals((-3231.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1366.935F), wall1.getHeight(), 0.01F);
      assertEquals(6328.899F, wall1.getLength(), 0.01F);
      assertEquals(2721.3076F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(6328.899F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2907.1375F), wall1.getThickness(), 0.01F);
      assertEquals((-1616.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5442.615F, wall1.getXEnd(), 0.01F);
      assertEquals((-3231.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1366.935F), wall1.getHeight(), 0.01F);
      assertEquals(6328.899F, wall1.getLength(), 0.01F);
      assertEquals(2721.3076F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.setPattern((TextureImage) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(6328.899F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2907.1375F), wall1.getThickness(), 0.01F);
      assertEquals((-1616.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5442.615F, wall1.getXEnd(), 0.01F);
      assertEquals((-3231.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1366.935F), wall1.getHeight(), 0.01F);
      assertEquals(6328.899F, wall1.getLength(), 0.01F);
      assertEquals(2721.3076F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(6328.899F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2907.1375F), wall1.getThickness(), 0.01F);
      assertEquals((-1616.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5442.615F, wall1.getXEnd(), 0.01F);
      assertEquals((-3231.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1366.935F), wall1.getHeight(), 0.01F);
      assertEquals(6328.899F, wall1.getLength(), 0.01F);
      assertEquals(2721.3076F, wall1.getXArcCircleCenter(), 0.01F);
      
      Float float3 = Float.valueOf((-1366.935F));
      assertEquals((-1366.935F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsPoint(559.0F, 559.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(559.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall(2265.3193F, 2265.3193F, 2265.3193F, 2265.3193F, (-1246.0F), (-1246.0F));
      assertNotNull(wall0);
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger("", integer1);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      
      wall0.setLeftSideColor(integer0);
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2265.3193F, wall1.getYStart(), 0.01F);
      assertEquals(2265.3193F, wall1.getXEnd(), 0.01F);
      assertEquals(2265.3193F, wall1.getYEnd(), 0.01F);
      assertEquals(2265.3193F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1246.0F), wall1.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall1.getXStart(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2265.3193F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1246.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float0 = wall0.getYEnd();
      assertEquals(2265.3193F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXStart(2265.3193F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2265.3193F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.0F), wall0.getThickness(), 0.01F);
      assertEquals(2265.3193F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2265.3193F, wall0.getYEnd(), 0.01F);
      assertEquals((-1246.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2265.3193F, wall0.getXStart(), 0.01F);
      assertEquals(2265.3193F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2265.3193F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerLast((Wall) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Spliterator<Wall> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(788.6402F, (-1.0F), 788.6402F, (-1.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(788.6402F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(788.6402F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(788.6402F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(788.6402F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXEnd((-1.0F));
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(393.8201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(789.6402F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(789.6402F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(393.8201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(789.6402F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(789.6402F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint((-1.0F), (-1.0F), (-1.0F));
      assertFalse(boolean0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(393.8201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(789.6402F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(789.6402F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.getWallAtStart();
      assertNotNull(wall1);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(393.8201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(789.6402F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(789.6402F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(789.6402F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(788.6402F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(789.6402F, wall1.getLength(), 0.01F);
      assertEquals(393.8201F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(393.8201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(789.6402F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(789.6402F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(789.6402F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(788.6402F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(789.6402F, wall1.getLength(), 0.01F);
      assertEquals(393.8201F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertNull(homeTexture1);
      assertSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(393.8201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(789.6402F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(789.6402F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(393.8201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(789.6402F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(789.6402F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(393.8201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(789.6402F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(789.6402F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(788.6402F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(1630.33F, 2.0F, 1630.33F, 1630.33F, 1630.33F, 2.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = new Float(3670.16758081624);
      assertEquals(3670.1675F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float2 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = new Float(786.83F);
      assertEquals(786.83F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = Float.valueOf((-2640.3F));
      assertEquals((-2640.3F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      Float float5 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      Float float6 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setRightSideShininess(0.8656238F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.8656238F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float7 = wall0.getHeight();
      assertEquals((-1.0F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      assertEquals((float)float7, (float)float1, 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.8656238F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float8 = wall0.getThickness();
      assertEquals(786.83F, float8, 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.8656238F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      boolean boolean0 = Float.isFinite((-2247.0F));
      assertTrue(boolean0);
      
      Float float9 = new Float((-1233.86F));
      assertEquals((-1233.86F), (float)float9, 0.01F);
      assertNotNull(float9);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      
      wall0.setArcExtent(float9);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.8656238F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1233.86F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float10 = wall0.getRightSideShininess();
      assertEquals(0.8656238F, float10, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.8656238F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1233.86F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.8656238F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1233.86F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.8656238F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1233.86F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 0.9784496F, (-265.3059F), 0.9784496F);
      assertNotNull(wall0);
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.000116F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(2.000116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall((-1.0F), (-265.3059F), (-265.3059F), 1090.35F, (-265.3059F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-133.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertEquals(412.52203F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(1381.1808F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1381.1808F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setYEnd(2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-133.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(375.9123F, wall1.getLength(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(375.9123F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.000116F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(2.000116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-133.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(375.9123F, wall1.getLength(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(375.9123F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.000116F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(2.000116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-133.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(375.9123F, wall1.getLength(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(375.9123F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.000116F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(2.000116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-133.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(375.9123F, wall1.getLength(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(375.9123F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.000116F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(2.000116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-133.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(375.9123F, wall1.getLength(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(375.9123F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setXEnd(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(267.3134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(267.3134F, wall1.getLength(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(267.3134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(267.3134F, wall1.getLength(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(2.0F, 0.9784496F, 1.0F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.000116F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(2.000116F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1630.33F, 2521.2083F, (-1937.178F), (-1749.2F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals((-153.42401F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1260.6091F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(4368.4727F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(2158.0);
      assertEquals(2158.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      
      Float float1 = Float.valueOf((-1749.2F));
      assertEquals((-1749.2F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = Float.valueOf((-1999.099F));
      assertEquals((-1999.099F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = Float.valueOf((-2640.3F));
      assertEquals((-2640.3F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Float float4 = Float.valueOf((-1233.86F));
      assertEquals((-1233.86F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      Float float5 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      Float float6 = Float.valueOf((-2640.3F));
      assertEquals((-2640.3F), (float)float6, 0.01F);
      assertNotNull(float6);
      assertEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      
      float float7 = Float.min(0.0F, 3037.1829F);
      assertEquals(0.0F, float7, 0.01F);
      
      Float float8 = Float.valueOf((-4573.0F));
      assertEquals((-4573.0F), (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      
      wall0.setHeightAtEnd(float8);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      
      float float9 = wall0.getXArcCircleCenter();
      assertEquals(1506.663F, float9, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      
      float float10 = wall0.getXStart();
      assertEquals(0.01F, float10, 0.01F);
      assertEquals(float10, float7, 0.01F);
      assertNotEquals(float10, float9, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd(2883.94F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(2815.6667F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals(2431.024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.1467F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3066872.5F, wall0.getLength(), 0.01F);
      assertEquals(2883.94F, wall0.getYEnd(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(2815.6667F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals(2431.024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.1467F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3066872.5F, wall0.getLength(), 0.01F);
      assertEquals(2883.94F, wall0.getYEnd(), 0.01F);
      
      float float11 = wall0.getYArcCircleCenter();
      assertEquals(2431.024F, float11, 0.01F);
      assertNotEquals(float11, float10, 0.01F);
      assertNotEquals(float11, float9, 0.01F);
      assertNotEquals(float11, float7, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(2815.6667F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals(2431.024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.1467F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3066872.5F, wall0.getLength(), 0.01F);
      assertEquals(2883.94F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(814.35F, float0, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.containsPoint(742.0F, 0.0F, 1628.7F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Wall> list1 = Wall.clone(list0);
      assertNotNull(list1);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Wall> list2 = Wall.clone(list1);
      assertNotNull(list2);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      List<Wall> list3 = Wall.clone(list2);
      assertNotNull(list3);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list3.contains(wall0));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertNotSame(list0, list3);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(1639.1482F, 1639.1482F, 1639.1482F, 1639.1482F, 1639.1482F, 1639.1482F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1639.1482F, wall0.getXStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getYStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1639.1482F, wall0.getYEnd(), 0.01F);
      assertEquals(1639.1482F, wall0.getXEnd(), 0.01F);
      assertEquals(1639.1482F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1639.1482F, wall0.getHeight(), 0.01F);
      assertEquals(1639.1482F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(1639.1482F);
      assertEquals(1639.1482F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1639.1482F, wall0.getXStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getYStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1639.1482F, wall0.getYEnd(), 0.01F);
      assertEquals(1639.1482F, wall0.getXEnd(), 0.01F);
      assertEquals(1639.1482F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1639.1482F, wall0.getHeight(), 0.01F);
      assertEquals(1639.1482F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1639.1482F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1639.1482F, wall0.getXStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getYStart(), 0.01F);
      assertEquals(1639.1482F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1639.1482F, wall0.getYEnd(), 0.01F);
      assertEquals(1639.1482F, wall0.getXEnd(), 0.01F);
      assertEquals(1639.1482F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1639.1482F, wall0.getHeight(), 0.01F);
      assertEquals(1639.1482F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1639.1482F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 1631.33F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1631.33F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1631.33F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1631.33F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1631.33F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("C", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("C", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("FLOOR_THICKNESS", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("C", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("FLOOR_THICKNESS", propertyChangeListenerProxy1.getPropertyName());
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1631.33F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      assertNotNull(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertEquals("C", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("FLOOR_THICKNESS", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(wall0, wall1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy0);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy1);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals("C", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("FLOOR_THICKNESS", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      
      boolean boolean1 = wall1.containsPoint((-118.869995F), 186.099F, 3804.9402F);
      assertTrue(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1631.33F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1631.33F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), (-709.0F), (-709.0F), (-709.0F), (-285.98456F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getThickness(), 0.01F);
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      assertEquals((-709.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getThickness(), 0.01F);
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      assertEquals((-709.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getThickness(), 0.01F);
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      assertEquals((-709.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      
      float float0 = Float.min(5.462314F, (-709.0F));
      assertEquals((-709.0F), float0, 0.01F);
      
      Float float1 = new Float((-1663.3918F));
      assertEquals((-1663.3918F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = new Float(0.0);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      wall1.setHeightAtEnd(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getThickness(), 0.01F);
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      assertEquals((-709.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      
      Float float4 = new Float((-917.20092));
      assertEquals((-917.2009F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      wall0.setHeightAtEnd(float4);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals((-917.2009F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer0 = Integer.valueOf(1717012837);
      assertEquals(1717012837, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals((-917.2009F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1717012837, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float5 = wall1.getHeightAtEnd();
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals((-917.2009F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1717012837, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getThickness(), 0.01F);
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      assertEquals((-709.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall(1630.33F, 2.0F, 1630.33F, 1630.33F, 1630.33F, 2.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(1630.33F, 2.0F, 1.0F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall((-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F));
      assertNotNull(wall0);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = Float.valueOf(796.0F);
      assertEquals(796.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-3163.0F));
      assertEquals((-3163.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setThickness(140.50963F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(140.50963F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float2 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = Float.min((-1233.86F), 50.9F);
      assertEquals((-1233.86F), float3, 0.01F);
      
      Float float4 = Float.valueOf((-3052.962F));
      assertEquals((-3052.962F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      float float5 = Float.max((-1793.2F), (-3163.0F));
      assertEquals((-1793.2F), float5, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      
      wall0.setHeightAtEnd(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-3052.962F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(140.50963F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      
      wall0.setHeightAtEnd(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((-3052.962F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(140.50963F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(140.50963F, 0.1F, (-1.0F));
      assertFalse(boolean0);
      assertEquals((-3052.962F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(140.50963F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      
      float float6 = wall0.getRightSideShininess();
      assertEquals(0.0F, float6, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertEquals((-3052.962F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(140.50963F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      
      Float float7 = new Float((-1233.86F));
      assertEquals((-1233.86F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      
      wall0.setArcExtent(float7);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertEquals((float)float7, (float)float3, 0.01F);
      assertEquals((-3052.962F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(140.50963F, wall0.getThickness(), 0.01F);
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1233.86F), wall0.getArcExtent(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 1.0F, (-23.871628F), 1.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeightAtEnd((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setXEnd((-709.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      boolean boolean0 = wall1.containsPoint(1.0F, 1956.925F, (-1439.375F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setHeightAtEnd((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, 665.5F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      
      Level level0 = new Level("EyT3GH|JSE&1H4g#cV^", 665.5F, 3722.0F, (-1749.2F));
      assertNotNull(level0);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      
      float float0 = level0.getElevation();
      assertEquals(665.5F, float0, 0.01F);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      
      float float1 = level0.getHeight();
      assertEquals((-1749.2F), float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3722.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level1.getName());
      assertEquals(665.5F, level1.getElevation(), 0.01F);
      assertEquals((-1749.2F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("EyT3GH|JSE&1H4g#cV^", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("EyT3GH|JSE&1H4g#cV^", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("EyT3GH|JSE&1H4g#cV^", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("EyT3GH|JSE&1H4g#cV^", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("EyT3GH|JSE&1H4g#cV^", propertyChangeListenerProxy1.getPropertyName());
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(level0, level1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("EyT3GH|JSE&1H4g#cV^", propertyChangeListenerProxy1.getPropertyName());
      
      level1.setHeight(0.0F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3722.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level1.getName());
      assertEquals(665.5F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      
      level1.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3722.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level1.getName());
      assertEquals(665.5F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("EyT3GH|JSE&1H4g#cV^", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("EyT3GH|JSE&1H4g#cV^", propertyChangeListenerProxy1.getPropertyName());
      
      wall0.setLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      
      wall1.setThickness(665.5F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.5F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      
      wall0.setYStart(4546.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float2 = wall1.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.5F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      
      float float3 = wall0.getYStart();
      assertEquals(4546.0F, float3, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.5F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      
      wall0.setLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(665.5F, level0.getElevation(), 0.01F);
      assertEquals((-1749.2F), level0.getHeight(), 0.01F);
      assertEquals("EyT3GH|JSE&1H4g#cV^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3722.0F, level0.getFloorThickness(), 0.01F);
      
      wall1.setThickness(665.5F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.5F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float4 = wall1.getYStart();
      assertEquals(1630.33F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(665.5F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      
      wall1.setThickness(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(6295.2F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(1398.4F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4546.0F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6295.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(29.381277F, 788.64F, 29.381277F, 29.381277F, 788.64F, 788.64F);
      assertNotNull(wall0);
      assertEquals(788.64F, wall0.getHeight(), 0.01F);
      assertEquals(409.01065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(29.381277F, wall0.getYEnd(), 0.01F);
      assertEquals(29.381277F, wall0.getXEnd(), 0.01F);
      assertEquals(788.64F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(759.2587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(788.64F, wall0.getYStart(), 0.01F);
      assertEquals(29.381277F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(759.2587F, wall0.getLength(), 0.01F);
      assertEquals(29.381277F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setYEnd(29.381277F);
      assertEquals(788.64F, wall0.getHeight(), 0.01F);
      assertEquals(409.01065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(29.381277F, wall0.getYEnd(), 0.01F);
      assertEquals(29.381277F, wall0.getXEnd(), 0.01F);
      assertEquals(788.64F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(759.2587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(788.64F, wall0.getYStart(), 0.01F);
      assertEquals(29.381277F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(759.2587F, wall0.getLength(), 0.01F);
      assertEquals(29.381277F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(788.64F, wall0.getHeight(), 0.01F);
      assertEquals(409.01065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(29.381277F, wall0.getYEnd(), 0.01F);
      assertEquals(29.381277F, wall0.getXEnd(), 0.01F);
      assertEquals(788.64F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(759.2587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(788.64F, wall0.getYStart(), 0.01F);
      assertEquals(29.381277F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(759.2587F, wall0.getLength(), 0.01F);
      assertEquals(29.381277F, wall0.getXArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(788.64F, wall0.getHeight(), 0.01F);
      assertEquals(409.01065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(29.381277F, wall0.getYEnd(), 0.01F);
      assertEquals(29.381277F, wall0.getXEnd(), 0.01F);
      assertEquals(788.64F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(759.2587F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(788.64F, wall0.getYStart(), 0.01F);
      assertEquals(29.381277F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(759.2587F, wall0.getLength(), 0.01F);
      assertEquals(29.381277F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Float float0 = Float.valueOf(2335.5F);
      assertEquals(2335.5F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      level0.setFloorThickness(1049.0F);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(1049.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      
      level0.setFloorThickness((-1329.59F));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-1329.59F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("OHg z^Iku{<vs", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy0);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy1);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      
      boolean boolean0 = wall0.containsPoint(786.83F, 2.0F, (-1338.0F));
      assertFalse(boolean0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1.0F), (-1.0F), 1.0F, (-23.871628F), 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = wall1.containsWallEndAt(1090.35F, (-1.0F), 1.0F);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float0 = wall0.getThickness();
      assertEquals((-23.871628F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean1 = wall1.containsPoint((-1703.4757F), (-709.0F), (-1.0F));
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Float float1 = new Float((double) (-23.871628F));
      assertEquals((-23.871628F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean2 = wall0.containsPoint(0.48959953F, 0.48959953F, 1090.35F);
      assertTrue(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall2 = wall1.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(2.828427F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2.828427F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-23.871628F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertNotNull(wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(2.828427F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2.828427F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-23.871628F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall3.getThickness(), 0.01F);
      assertEquals(533.2392F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-23.871628F), wall3.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getLeftSideColor());
      assertEquals(1114.4563F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1114.4563F, wall3.getLength(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-1.0F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-12.435814F), wall3.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F);
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Float float0 = new Float(3670.16758081624);
      assertEquals(3670.1675F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Float float2 = wall0.getHeight();
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      wall0.setRightSideShininess((-733.0F));
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-733.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 6290.9766F, 1.0F, (-1.0F), (-1.0F), (-2008.966F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(6291.9766F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(3144.9883F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6290.9766F, wall1.getYStart(), 0.01F);
      assertEquals((-2008.966F), wall1.getHeight(), 0.01F);
      assertEquals(6291.9766F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-733.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(6291.9766F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(3144.9883F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6290.9766F, wall1.getYStart(), 0.01F);
      assertEquals((-2008.966F), wall1.getHeight(), 0.01F);
      assertEquals(6291.9766F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-733.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(6291.9766F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(3144.9883F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6290.9766F, wall1.getYStart(), 0.01F);
      assertEquals((-2008.966F), wall1.getHeight(), 0.01F);
      assertEquals(6291.9766F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-733.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0429149F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-0.084756136F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-733.0F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      
      wall2.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-733.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0429149F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-0.084756136F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-733.0F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      
      wall1.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-733.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(6291.9766F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(3144.9883F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(6290.9766F, wall1.getYStart(), 0.01F);
      assertEquals((-2008.966F), wall1.getHeight(), 0.01F);
      assertEquals(6291.9766F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0429149F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-0.084756136F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-733.0F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      
      Float float3 = Float.valueOf((-1188.06F));
      assertEquals((-1188.06F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean0 = wall2.containsPoint(0.0F, 559.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-733.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0429149F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-0.084756136F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-733.0F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.68707967F, 1.0F, 1.0F, (-1.0F), (-836.4471F), 0.68707967F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.84353983F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-836.4471F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0243318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.0243318F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.68707967F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.6740274F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.1112056F, wall0.getLength(), 0.01F);
      assertEquals((-836.4471F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0243318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.68707967F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.2863984F, wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.6740274F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.1112056F, wall0.getLength(), 0.01F);
      assertEquals((-836.4471F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0243318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.68707967F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.2863984F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, (-2723.0F), (-2723.0F), 1630.33F, (-2723.0F));
      assertNotNull(wall0);
      assertEquals((-2723.0F), wall0.getYStart(), 0.01F);
      assertEquals((-546.335F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2723.0F), wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6156.538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6156.538F, wall0.getLength(), 0.01F);
      assertEquals((-546.335F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2723.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(1630.33F, 0.0F, 0.0F, 0.0F, (-2723.0F), 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(815.165F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2723.0F), wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-2723.0F), wall0.getYStart(), 0.01F);
      assertEquals((-546.335F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2723.0F), wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6156.538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6156.538F, wall0.getLength(), 0.01F);
      assertEquals((-546.335F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2723.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(815.165F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2723.0F), wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-2723.0F), wall0.getYStart(), 0.01F);
      assertEquals((-546.335F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2723.0F), wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6156.538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6156.538F, wall0.getLength(), 0.01F);
      assertEquals((-546.335F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2723.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(815.165F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2723.0F), wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-2723.0F), wall0.getYStart(), 0.01F);
      assertEquals((-546.335F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2723.0F), wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6156.538F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(6156.538F, wall0.getLength(), 0.01F);
      assertEquals((-546.335F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2723.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall1.containsPoint(566.17F, (-2723.0F), 1630.33F);
      assertTrue(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(815.165F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2723.0F), wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("some", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.toString());
      
      URLContent uRLContent0 = new URLContent(uRL1);
      assertNotNull(uRLContent0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("some", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", uRLContent0, 0.0F, 0.0F, false);
      assertNotNull(catalogTexture0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("some", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      
      wall0.setPattern(catalogTexture0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("some", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall(1.0F, (-39.716095F), (-39.716095F), 1.0F, 1.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-39.716095F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(57.581253F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.716095F), wall1.getXEnd(), 0.01F);
      assertEquals((-19.358047F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.358047F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(57.581253F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.716095F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(57.581253F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.716095F), wall1.getXEnd(), 0.01F);
      assertEquals((-19.358047F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.358047F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(57.581253F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-39.716095F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(57.581253F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.716095F), wall1.getXEnd(), 0.01F);
      assertEquals((-19.358047F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-19.358047F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(57.581253F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float((-39.716095F));
      assertEquals((-39.716095F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite((-54.307F));
      assertTrue(boolean0);
      
      wall1.setArcExtent(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-39.716095F), wall1.getYStart(), 0.01F);
      assertEquals((-6.5291214F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1351.5515F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.5291214F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.716095F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.716095F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(57.581253F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall1.containsPoint((-1.0F), (-1.0F), (-54.307F));
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals((-39.716095F), wall1.getYStart(), 0.01F);
      assertEquals((-6.5291214F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1351.5515F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-6.5291214F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.716095F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.716095F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(57.581253F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), (-1.0F), (-1.0F), 1090.35F, (-1.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1091.35F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1091.35F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1091.35F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1091.35F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1091.35F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1091.35F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeightAtEnd((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1091.35F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1091.35F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1091.35F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1091.35F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setXEnd((-709.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1300.8877F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1300.8877F, wall1.getLength(), 0.01F);
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1300.8877F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1300.8877F, wall1.getLength(), 0.01F);
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1300.8877F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1300.8877F, wall1.getLength(), 0.01F);
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean0 = wall1.containsPoint(1.0F, 1956.925F, (-1439.375F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1300.8877F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1300.8877F, wall1.getLength(), 0.01F);
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setHeightAtEnd((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1300.8877F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1300.8877F, wall1.getLength(), 0.01F);
      assertEquals(544.675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.0F), 4027.1191F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn("{$K8>yS}y.t4UN`KzV").when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setRightSideShininess(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall1.setLevel(level0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      boolean boolean1 = wall1.containsPoint((-684.0F), 0.0F, 0.0F);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setYStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNotNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(homeTexture1, homeTexture0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4084.6958F, wall0.getLength(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4084.6958F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-342.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, homeTexture1.getHeight(), 0.01F);
      assertNull(homeTexture1.getName());
      assertFalse(homeTexture1.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture1.getWidth(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(128.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(2.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall2.setHeight(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(128.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(2.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      assertNotNull(wall0);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(709.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall1.getLength(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(709.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall1.getLength(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      float float0 = level0.getElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      float float1 = level0.getHeight();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K 95Y!,@B)IDn", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("K 95Y!,@B)IDn", propertyChangeListenerProxy0.getPropertyName());
      
      level1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", propertyChangeListenerProxy0.getPropertyName());
      
      level1.setHeight(0.0F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setLevel(level1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      wall0.setThickness((-285.98456F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float3 = wall0.getYStart();
      assertEquals(0.0F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setLevel(level1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float4 = wall0.getYStart();
      assertEquals(0.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(float4, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall1.move(0.0F, 2072.8953F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(709.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertEquals(1363.8953F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(709.0F, wall1.getLength(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1363.8953F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1363.8953F, wall1.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall(1630.33F, 2.0F, 1630.33F, 1630.33F, 1630.33F, 2.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      
      boolean boolean0 = wall0.containsPoint(1630.33F, 2.0F, 1.0F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 2494.8926F, (-1.0281775F), 2524.0F, 564.67535F, 571.2F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2524.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2509.4463F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(29.177998F, wall0.getLength(), 0.01F);
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(29.177998F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall((-1212.5106F), 564.67535F, 571.2F, 1090.35F, (-1212.5106F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(827.5127F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1859.5583F, wall1.getLength(), 0.01F);
      assertEquals((-1212.5106F), wall1.getThickness(), 0.01F);
      assertEquals(564.67535F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(571.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1212.5106F), wall1.getXStart(), 0.01F);
      assertEquals((-320.6553F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1859.5583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = wall0.containsWallEndAt((-11.140127F), 1.0F, 1.0F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2524.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2509.4463F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(29.177998F, wall0.getLength(), 0.01F);
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(29.177998F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2524.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2509.4463F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(29.177998F, wall0.getLength(), 0.01F);
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(29.177998F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float0 = wall1.getThickness();
      assertEquals((-1212.5106F), float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(827.5127F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1859.5583F, wall1.getLength(), 0.01F);
      assertEquals((-1212.5106F), wall1.getThickness(), 0.01F);
      assertEquals(564.67535F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(571.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1212.5106F), wall1.getXStart(), 0.01F);
      assertEquals((-320.6553F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1859.5583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2524.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2509.4463F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(29.177998F, wall0.getLength(), 0.01F);
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(29.177998F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(827.5127F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1859.5583F, wall1.getLength(), 0.01F);
      assertEquals((-1212.5106F), wall1.getThickness(), 0.01F);
      assertEquals(564.67535F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(571.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1212.5106F), wall1.getXStart(), 0.01F);
      assertEquals((-320.6553F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1859.5583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2524.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2509.4463F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(29.177998F, wall0.getLength(), 0.01F);
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(29.177998F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(827.5127F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1859.5583F, wall1.getLength(), 0.01F);
      assertEquals((-1212.5106F), wall1.getThickness(), 0.01F);
      assertEquals(564.67535F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(571.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1212.5106F), wall1.getXStart(), 0.01F);
      assertEquals((-320.6553F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1859.5583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2524.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2509.4463F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(29.177998F, wall0.getLength(), 0.01F);
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(29.177998F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(827.5127F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1859.5583F, wall1.getLength(), 0.01F);
      assertEquals((-1212.5106F), wall1.getThickness(), 0.01F);
      assertEquals(564.67535F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(571.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1212.5106F), wall1.getXStart(), 0.01F);
      assertEquals((-320.6553F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1859.5583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setYEnd((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2495.8933F, wall0.getLength(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(1246.9463F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2495.8933F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall1.containsPoint(564.67535F, 1.0F, 1.5707964F);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(827.5127F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1859.5583F, wall1.getLength(), 0.01F);
      assertEquals((-1212.5106F), wall1.getThickness(), 0.01F);
      assertEquals(564.67535F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(571.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals((-1212.5106F), wall1.getXStart(), 0.01F);
      assertEquals((-320.6553F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1859.5583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2495.8933F, wall0.getLength(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(1246.9463F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2495.8933F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2495.8933F, wall0.getLength(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(1246.9463F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(571.2F, wall0.getHeight(), 0.01F);
      assertEquals(2494.8926F, wall0.getYStart(), 0.01F);
      assertEquals((-0.01408875F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(564.67535F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2495.8933F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float float2 = wall0.getLength();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, 665.5F);
      assertNotNull(wall0);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      
      wall1.setRightSideShininess((-2078.5083F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      
      Float float0 = wall1.getHeight();
      assertEquals(665.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      
      float float1 = wall1.getThickness();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      
      boolean boolean0 = Float.isFinite((-780.224F));
      assertTrue(boolean0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      
      Float float2 = new Float((-1437.1));
      assertEquals((-1437.1F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      float float3 = float2.floatValue();
      assertEquals((-1437.1F), float3, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      wall0.setHeightAtEnd((Float) (-1437.1F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-1437.1F), wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      
      float float4 = wall1.getXArcCircleCenter();
      assertEquals(1630.33F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-1437.1F), wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      
      float float5 = wall1.getXStart();
      assertEquals(1630.33F, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(float5, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-1437.1F), wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 665.5F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setRightSideShininess((-2078.5083F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      
      Float float0 = new Float(1630.33F);
      assertEquals(1630.33F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall1.getThickness();
      assertEquals(1630.33F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      
      boolean boolean0 = Float.isFinite((-780.224F));
      assertTrue(boolean0);
      
      float float2 = new Float(1630.33F);
      assertEquals(1630.33F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      float float3 = wall1.getLength();
      assertEquals(0.0F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      wall0.setLevel((Level) null);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall((-3388.0F), (-3388.0F), (-0.17740573F), (-3388.0F), (-3388.0F));
      assertNotNull(wall0);
      assertEquals(3387.8225F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3388.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3388.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3388.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1694.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3387.8225F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.17740573F), wall0.getXEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getYEnd(), 0.01F);
      
      Level level0 = new Level("LEVEL", (-1.0F), 571.0504F, (-0.17740573F));
      assertNotNull(level0);
      assertEquals((-0.17740573F), level0.getHeight(), 0.01F);
      assertEquals("LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(571.0504F, level0.getFloorThickness(), 0.01F);
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-0.17740573F), level0.getHeight(), 0.01F);
      assertEquals("LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(571.0504F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-0.17740573F), level1.getHeight(), 0.01F);
      assertEquals("LEVEL", level1.getName());
      assertEquals(571.0504F, level1.getFloorThickness(), 0.01F);
      
      float float0 = level1.getHeight();
      assertEquals((-0.17740573F), float0, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-0.17740573F), level0.getHeight(), 0.01F);
      assertEquals("LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(571.0504F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-0.17740573F), level1.getHeight(), 0.01F);
      assertEquals("LEVEL", level1.getName());
      assertEquals(571.0504F, level1.getFloorThickness(), 0.01F);
      
      Level level2 = level1.clone();
      assertNotNull(level2);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertEquals((-0.17740573F), level0.getHeight(), 0.01F);
      assertEquals("LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(571.0504F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-0.17740573F), level1.getHeight(), 0.01F);
      assertEquals("LEVEL", level1.getName());
      assertEquals(571.0504F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("LEVEL", level2.getName());
      assertEquals((-0.17740573F), level2.getHeight(), 0.01F);
      assertEquals(571.0504F, level2.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level2.getElevation(), 0.01F);
      
      Level level3 = level2.clone();
      assertNotNull(level3);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level2, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      assertNotSame(level3, level2);
      assertNotSame(level3, level0);
      assertNotSame(level3, level1);
      assertEquals((-0.17740573F), level0.getHeight(), 0.01F);
      assertEquals("LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(571.0504F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-0.17740573F), level1.getHeight(), 0.01F);
      assertEquals("LEVEL", level1.getName());
      assertEquals(571.0504F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("LEVEL", level2.getName());
      assertEquals((-0.17740573F), level2.getHeight(), 0.01F);
      assertEquals(571.0504F, level2.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level2.getElevation(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals((-1.0F), level3.getElevation(), 0.01F);
      assertEquals(571.0504F, level3.getFloorThickness(), 0.01F);
      assertEquals("LEVEL", level3.getName());
      assertEquals((-0.17740573F), level3.getHeight(), 0.01F);
      
      wall0.setLevel(level3);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level3));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level2, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      assertNotSame(level3, level2);
      assertNotSame(level3, level0);
      assertNotSame(level3, level1);
      assertEquals(3387.8225F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3388.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3388.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3388.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1694.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3387.8225F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.17740573F), wall0.getXEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.17740573F), level0.getHeight(), 0.01F);
      assertEquals("LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(571.0504F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-0.17740573F), level1.getHeight(), 0.01F);
      assertEquals("LEVEL", level1.getName());
      assertEquals(571.0504F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("LEVEL", level2.getName());
      assertEquals((-0.17740573F), level2.getHeight(), 0.01F);
      assertEquals(571.0504F, level2.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level2.getElevation(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals((-1.0F), level3.getElevation(), 0.01F);
      assertEquals(571.0504F, level3.getFloorThickness(), 0.01F);
      assertEquals("LEVEL", level3.getName());
      assertEquals((-0.17740573F), level3.getHeight(), 0.01F);
      
      wall0.setYStart((-0.17740573F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1694.0887F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.17740573F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4791.1045F, wall0.getLength(), 0.01F);
      assertEquals((-3388.0F), wall0.getThickness(), 0.01F);
      assertEquals(4791.1045F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1694.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.17740573F), wall0.getXEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getYEnd(), 0.01F);
      
      float float1 = wall0.getRightSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1694.0887F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.17740573F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4791.1045F, wall0.getLength(), 0.01F);
      assertEquals((-3388.0F), wall0.getThickness(), 0.01F);
      assertEquals(4791.1045F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1694.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.17740573F), wall0.getXEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1694.0887F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.17740573F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4791.1045F, wall0.getLength(), 0.01F);
      assertEquals((-3388.0F), wall0.getThickness(), 0.01F);
      assertEquals(4791.1045F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1694.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.17740573F), wall0.getXEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getYEnd(), 0.01F);
      
      float float2 = wall0.getXStart();
      assertEquals((-3388.0F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1694.0887F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.17740573F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4791.1045F, wall0.getLength(), 0.01F);
      assertEquals((-3388.0F), wall0.getThickness(), 0.01F);
      assertEquals(4791.1045F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1694.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.17740573F), wall0.getXEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getYEnd(), 0.01F);
      
      Float float3 = new Float((double) (-3388.0F));
      assertEquals((-3388.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level2);
      assertFalse(boolean0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level3));
      assertFalse(level2.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level2, level0);
      assertNotSame(level2, level3);
      assertNotSame(level2, level1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1694.0887F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.17740573F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4791.1045F, wall0.getLength(), 0.01F);
      assertEquals((-3388.0F), wall0.getThickness(), 0.01F);
      assertEquals(4791.1045F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1694.0887F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3388.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.17740573F), wall0.getXEnd(), 0.01F);
      assertEquals((-3388.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.17740573F), level0.getHeight(), 0.01F);
      assertEquals("LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(571.0504F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-0.17740573F), level1.getHeight(), 0.01F);
      assertEquals("LEVEL", level1.getName());
      assertEquals(571.0504F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("LEVEL", level2.getName());
      assertEquals((-0.17740573F), level2.getHeight(), 0.01F);
      assertEquals(571.0504F, level2.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), level2.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall((-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F));
      assertNotNull(wall0);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall((-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F), (-3163.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3163.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3163.0F), wall1.getXEnd(), 0.01F);
      
      Float float0 = new Float((-3163.0F));
      assertEquals((-3163.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3163.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3163.0F), wall1.getXEnd(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3163.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3163.0F), wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3163.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3163.0F), wall1.getXEnd(), 0.01F);
      
      wall1.setXEnd(2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1580.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3165.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3165.0F, wall1.getLength(), 0.01F);
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1580.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3165.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3165.0F, wall1.getLength(), 0.01F);
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1580.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3165.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3165.0F, wall1.getLength(), 0.01F);
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      
      Float float1 = new Float(1.0E-6);
      assertEquals(1.0E-6F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = float1.floatValue();
      assertEquals(1.0E-6F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float3 = Float.sum(3971.6533F, 3971.6533F);
      assertEquals(7943.3066F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      float float4 = float1.floatValue();
      assertEquals(1.0E-6F, float4, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      
      wall1.setHeightAtEnd((Float) 1.0E-6F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-3163.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3163.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1580.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3165.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3165.0F, wall1.getLength(), 0.01F);
      assertEquals(1.0E-6F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-3163.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall1.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-3163.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-3163.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-3163.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3163.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-3163.0F), wall0.getYStart(), 0.01F);
      assertEquals((-3163.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      
      level0.setFloorThickness(1049.0F);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals(1049.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      
      level0.setFloorThickness((-1329.59F));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals((-1329.59F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      
      wall0.setRightSideShininess((-2942.3F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2942.3F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      Float float0 = wall1.getHeight();
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2942.3F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      
      Wall wall2 = wall1.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2942.3F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(786.83F, wall2.getThickness(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals((-2942.3F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      
      float float1 = wall0.getThickness();
      assertEquals(786.83F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2942.3F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      Float float2 = new Float(786.83F);
      assertEquals(786.83F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      boolean boolean1 = Float.isFinite((-1.0F));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Float float3 = new Float(0.0);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2942.3F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      float float4 = wall2.getThickness();
      assertEquals(786.83F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float4, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2942.3F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(786.83F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-2942.3F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall((-1.0281775F), (-1.0281775F), (-1.0281775F), (-1.0281775F), (-1.0281775F));
      assertNotNull(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getThickness(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0281775F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0281775F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0281775F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall(2262.9563F, 2591.89F, 2591.89F, 1.0F, 1466.6588F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2611.6868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2262.9563F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2591.89F, wall0.getYStart(), 0.01F);
      assertEquals(2427.423F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2611.6868F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2591.89F, wall0.getXEnd(), 0.01F);
      assertEquals(1466.6588F, wall0.getThickness(), 0.01F);
      assertEquals(1296.445F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(2611.6868F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2611.6868F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2262.9563F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2591.89F, wall0.getYStart(), 0.01F);
      assertEquals(2427.423F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2611.6868F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2591.89F, wall0.getXEnd(), 0.01F);
      assertEquals(1466.6588F, wall0.getThickness(), 0.01F);
      assertEquals(1296.445F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 633.1F, 633.1F, 0.0F, 0.01F, 1.0F);
      assertNotNull(wall0);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(1.0F, 1.0F, 1.0F, 1089.547F, 967.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1088.547F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1089.547F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(545.2735F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1088.547F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(967.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1088.547F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1089.547F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(545.2735F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1088.547F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(967.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1088.547F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1089.547F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(545.2735F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1088.547F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(967.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1088.547F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1089.547F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(545.2735F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1088.547F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(967.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1088.547F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(967.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(545.2735F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1088.547F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1089.547F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall2.setXEnd((-709.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-709.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(967.0F, wall2.getThickness(), 0.01F);
      assertEquals(1299.6287F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1299.6287F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(545.2735F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-354.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1089.547F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall2.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1089.547F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-354.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1299.6287F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(545.2735F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(967.0F, wall1.getThickness(), 0.01F);
      assertEquals(1299.6287F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-709.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(967.0F, wall2.getThickness(), 0.01F);
      assertEquals(1299.6287F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1299.6287F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(545.2735F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-354.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1089.547F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-709.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(967.0F, wall2.getThickness(), 0.01F);
      assertEquals(1299.6287F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1299.6287F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(545.2735F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-354.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1089.547F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall2.setHeightAtEnd((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-709.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(967.0F, wall2.getThickness(), 0.01F);
      assertEquals(1299.6287F, wall2.getLength(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1299.6287F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(545.2735F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-354.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1089.547F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setHeightAtEnd((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(895.33856F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(316.55F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(895.33856F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(633.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(633.1F, wall0.getYStart(), 0.01F);
      assertEquals(316.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 0.9784496F, (-265.3059F), 0.9784496F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.021550417F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.021550417F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("o!@Rx", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("o!@Rx", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.021550417F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.021550417F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals("o!@Rx", propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = new Wall(1.0F, (-265.3059F), (-265.3059F), 1090.35F, (-265.3059F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(412.52203F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1381.565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-132.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(1381.565F, wall1.getLength(), 0.01F);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      
      wall1.setYEnd(2.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(377.3212F, wall1.getLength(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(377.3212F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-132.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.021550417F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.021550417F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(377.3212F, wall1.getLength(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(377.3212F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-132.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.021550417F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.021550417F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(377.3212F, wall1.getLength(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(377.3212F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-132.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(377.3212F, wall1.getLength(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(377.3212F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-132.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.021550417F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.021550417F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(377.3212F, wall1.getLength(), 0.01F);
      assertEquals((-265.3059F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(377.3212F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-132.15295F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      
      wall1.setXEnd(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(267.3059F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(267.3059F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      
      float[][] floatArray1 = wall1.getPoints();
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(267.3059F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-131.65295F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals(267.3059F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-265.3059F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-265.3059F), wall1.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(2.0F, 0.9784496F, 1.0F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.021550417F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-265.3059F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.9784496F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.9784496F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.021550417F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      wall0.setRightSideShininess(969.6794F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      float float1 = wall0.getThickness();
      assertEquals(786.83F, float1, 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = Float.isFinite((-1.0F));
      assertTrue(boolean0);
      
      Float float2 = new Float(786.83F);
      assertEquals(786.83F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(786.83F, (-1.0F), 2570.109F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(969.6794F, 786.83F, (-1.0F));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      assertNotNull(wall0);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(814.35F, float0, 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      float float1 = Float.max((-1.0F), 507.4F);
      assertEquals(507.4F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      Float float2 = new Float(129.29583458837163);
      assertEquals(129.29584F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      boolean boolean0 = float2.equals("/>bNC");
      assertFalse(boolean0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setHeightAtEnd(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(129.29584F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(129.29584F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setYEnd((-1.0F));
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(129.29584F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNull(homeTexture1);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("OHg z^Iku{<vs", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("HEIGHT_AT_END", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("HEIGHT_AT_END", propertyChangeListenerProxy1.getPropertyName());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      assertNotNull(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("HEIGHT_AT_END", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals("OHg z^Iku{<vs", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.containsPoint((-118.869995F), (-1.0F), (-1338.0F));
      assertFalse(boolean0);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 3621.8F, 0.0F, 0.0F, 0.0F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1810.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3621.8F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3621.8F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3621.8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = new Wall((-2883.5745F), 0.1F, 0.1F, (-762.133F), (-117.63012F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-762.133F), wall1.getYEnd(), 0.01F);
      assertEquals(2982.7131F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-1441.7372F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-117.63012F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-381.0165F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-2883.5745F), wall1.getXStart(), 0.01F);
      assertEquals(2982.7131F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-762.133F), wall1.getYEnd(), 0.01F);
      assertEquals(2982.7131F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-1441.7372F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-117.63012F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-381.0165F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-2883.5745F), wall1.getXStart(), 0.01F);
      assertEquals(2982.7131F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      
      String string0 = "cG";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = Integer.valueOf(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      wall1.setHeight((Float) 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-762.133F), wall1.getYEnd(), 0.01F);
      assertEquals(2982.7131F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-1441.7372F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-117.63012F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-381.0165F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-2883.5745F), wall1.getXStart(), 0.01F);
      assertEquals(2982.7131F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      // Undeclared exception!
      try { 
        Integer.remainderUnsigned(15, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall(10.565355F, 10.565355F, 10.565355F, 10.565355F, 786.83F, 10.565355F);
      assertNotNull(wall0);
      assertEquals(10.565355F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.565355F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(10.565355F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(10.565355F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(10.565355F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(10.565355F, wall0.getXEnd(), 0.01F);
      assertEquals(10.565355F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float(10.565355F);
      assertEquals(10.565355F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(10.565355F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.565355F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(10.565355F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(10.565355F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(10.565355F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(10.565355F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(10.565355F, wall0.getXEnd(), 0.01F);
      assertEquals(10.565355F, wall0.getYEnd(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertEquals(10.565355F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.565355F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(11.565355F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(10.565355F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(10.565355F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(10.565355F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(11.565355F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.7826777F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.565355F, wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(10.565355F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.565355F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(11.565355F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(10.565355F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(10.565355F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(10.565355F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(11.565355F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.7826777F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.565355F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), (-1.0F), 10.565355F);
      assertTrue(boolean0);
      assertEquals(10.565355F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(10.565355F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(11.565355F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(10.565355F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(10.565355F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(10.565355F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(11.565355F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.7826777F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(10.565355F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(1630.33F, 2.0F, 1630.33F, 1630.33F, 1630.33F, (-3540.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3540.0F), wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3540.0F), wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3540.0F), wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3540.0F), wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3540.0F), wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3540.0F), wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(816.165F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.33F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1628.33F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3540.0F), wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      
      wall0.setXEnd(1630.33F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1628.33F, wall2.getLength(), 0.01F);
      assertEquals(816.165F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1630.33F, wall2.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall2.getThickness(), 0.01F);
      assertEquals(1628.33F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3540.0F), wall2.getHeight(), 0.01F);
      assertEquals(1630.33F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      
      boolean boolean0 = wall2.containsPoint(2.0F, 0.75654465F, 1630.33F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1628.33F, wall2.getLength(), 0.01F);
      assertEquals(816.165F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1630.33F, wall2.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall2.getThickness(), 0.01F);
      assertEquals(1628.33F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3540.0F), wall2.getHeight(), 0.01F);
      assertEquals(1630.33F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall2));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall((-2068.9363F), 0.0F, 786.83F, (-2068.9363F), (-2068.9363F), (-3388.0F));
      assertNotNull(wall0);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setXEnd(786.83F);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals(3526.457F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2068.9363F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3526.457F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-641.0531F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1034.4681F), wall1.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals(3526.457F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2068.9363F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3526.457F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-641.0531F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1034.4681F), wall1.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall1.containsPoint((-2068.9363F), 786.83F, 786.83F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals(3526.457F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2068.9363F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3526.457F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-641.0531F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1034.4681F), wall1.getYArcCircleCenter(), 0.01F);
      
      Float float0 = new Float((double) (-2068.9363F));
      assertEquals((-2068.9363F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3526.457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-1034.4681F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall0.getThickness(), 0.01F);
      assertEquals(3526.457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals((-2068.9363F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals(3526.457F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2068.9363F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(3526.457F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2068.9363F), wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-641.0531F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYEnd(), 0.01F);
      assertEquals((-1034.4681F), wall1.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Float float0 = new Float(3670.16758081624);
      assertEquals(3670.1675F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Float float2 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = Float.valueOf(786.83F);
      assertEquals(786.83F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = Float.valueOf((-2640.3F));
      assertEquals((-2640.3F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      
      Float float5 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      
      Float float6 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      
      wall0.setThickness(786.83F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Float float7 = Float.valueOf((-1233.86F));
      assertEquals((-1233.86F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      
      float float8 = Float.min((-980.543F), (-2025.0F));
      assertEquals((-2025.0F), float8, 0.01F);
      
      Float float9 = Float.valueOf(426.19244F);
      assertEquals(426.19244F, (float)float9, 0.01F);
      assertNotNull(float9);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      
      float float10 = Float.max((-2025.0F), 1348.71F);
      assertEquals(1348.71F, float10, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      
      wall0.setHeightAtEnd(float4);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      assertNotEquals((float)float4, (float)float6, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float8, 0.01F);
      assertNotEquals((float)float4, (float)float9, 0.01F);
      assertNotEquals((float)float4, (float)float10, 0.01F);
      assertNotEquals((float)float4, (float)float7, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      float float11 = wall0.getXArcCircleCenter();
      assertEquals((-1.0F), float11, 0.01F);
      assertNotEquals(float11, float8, 0.01F);
      assertNotEquals(float11, float10, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      float float12 = wall0.getXStart();
      assertEquals((-1.0F), float12, 0.01F);
      assertEquals(float12, float11, 0.01F);
      assertNotEquals(float12, float8, 0.01F);
      assertNotEquals(float12, float10, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(4027.1191F, 813.5618F, (-4498.0F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 346.67682F, 346.67682F, 1.0F, 346.67682F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(488.86084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(488.86084F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(173.83841F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(346.67682F, wall0.getXEnd(), 0.01F);
      assertEquals(346.67682F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(346.67682F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(173.83841F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(488.86084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(488.86084F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(173.83841F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(346.67682F, wall0.getXEnd(), 0.01F);
      assertEquals(346.67682F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(346.67682F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(173.83841F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(173.83841F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(346.67682F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(346.67682F, wall1.getThickness(), 0.01F);
      assertEquals(173.83841F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(488.86084F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(346.67682F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(488.86084F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      wall1.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(488.86084F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(488.86084F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(173.83841F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(346.67682F, wall0.getXEnd(), 0.01F);
      assertEquals(346.67682F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(346.67682F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(173.83841F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(173.83841F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(346.67682F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(346.67682F, wall1.getThickness(), 0.01F);
      assertEquals(173.83841F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(488.86084F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(346.67682F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(488.86084F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall((-2068.9363F), 0.0F, 786.83F, (-1025.9F), (-1025.9F), (-3388.0F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1025.9F), wall0.getThickness(), 0.01F);
      assertEquals(3034.4475F, wall0.getLength(), 0.01F);
      assertEquals(3034.4475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1025.9F), wall0.getYEnd(), 0.01F);
      assertEquals((-512.95F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2068.9363F), 786.83F, 786.83F, (-3388.0F), 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals((-641.0531F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2962.1787F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2962.1787F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1025.9F), wall0.getThickness(), 0.01F);
      assertEquals(3034.4475F, wall0.getLength(), 0.01F);
      assertEquals(3034.4475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1025.9F), wall0.getYEnd(), 0.01F);
      assertEquals((-512.95F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals((-641.0531F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2962.1787F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2962.1787F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1025.9F), wall0.getThickness(), 0.01F);
      assertEquals(3034.4475F, wall0.getLength(), 0.01F);
      assertEquals(3034.4475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1025.9F), wall0.getYEnd(), 0.01F);
      assertEquals((-512.95F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals((-641.0531F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2962.1787F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2962.1787F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals((-641.0531F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2962.1787F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2962.1787F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Wall wall2 = new Wall((-1.0F), (-2196.0496F), (-1025.9F), (-2068.9363F), 3046.0054F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-513.45F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2132.493F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3046.0054F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-2196.0496F), wall2.getYStart(), 0.01F);
      assertEquals(1032.7526F, wall2.getLength(), 0.01F);
      assertEquals(1032.7526F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2068.9363F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1025.9F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      
      wall0.setThickness(516.98F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3034.4475F, wall0.getLength(), 0.01F);
      assertEquals(3034.4475F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(516.98F, wall0.getThickness(), 0.01F);
      assertEquals((-2068.9363F), wall0.getXStart(), 0.01F);
      assertEquals((-641.0531F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1025.9F), wall0.getYEnd(), 0.01F);
      assertEquals((-512.95F), wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = new Float(3046.0054F);
      assertEquals(3046.0054F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setWallAtStart((Wall) null);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals((-641.0531F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2962.1787F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2068.9363F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2962.1787F, wall1.getLength(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall2.containsPoint(0.0F, (-2196.0496F), 0.0F);
      assertFalse(boolean0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-513.45F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2132.493F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3046.0054F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-2196.0496F), wall2.getYStart(), 0.01F);
      assertEquals(1032.7526F, wall2.getLength(), 0.01F);
      assertEquals(1032.7526F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2068.9363F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1025.9F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      
      Wall wall3 = new Wall((-1338.0F), 811.9018F, 1358.01F, 0.0F, (-1338.0F), (-2068.9363F));
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(2815.6091F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(811.9018F, wall3.getYStart(), 0.01F);
      assertEquals((-1338.0F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(10.005005F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall3.getHeight(), 0.01F);
      assertEquals(2815.6091F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1358.01F, wall3.getXEnd(), 0.01F);
      assertEquals(405.9509F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-1338.0F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall3.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertEquals(2815.6091F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(811.9018F, wall3.getYStart(), 0.01F);
      assertEquals((-1338.0F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(10.005005F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2068.9363F), wall3.getHeight(), 0.01F);
      assertEquals(2815.6091F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1358.01F, wall3.getXEnd(), 0.01F);
      assertEquals(405.9509F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-1338.0F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      
      wall2.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-513.45F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2132.493F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3046.0054F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-2196.0496F), wall2.getYStart(), 0.01F);
      assertEquals(1032.7526F, wall2.getLength(), 0.01F);
      assertEquals(1032.7526F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2068.9363F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1025.9F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideShininess(1630.33F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(1630.33F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, 665.5F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("OU.j6yy5", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("OU.j6yy5", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals("OU.j6yy5", propertyChangeListenerProxy0.getPropertyName());
      
      wall1.setRightSideShininess((-2078.5083F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      
      Float float0 = wall1.getHeight();
      assertEquals(665.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      
      Wall wall2 = wall1.getWallAtStart();
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      
      float float1 = wall1.getThickness();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(665.5F, wall1.getHeight(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite((-780.224F));
      assertTrue(boolean0);
      
      wall1.setHeight(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      
      float float3 = wall1.getThickness();
      assertEquals(0.0F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float3, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals(665.5F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall((-1025.9F), 0.0F, (-3388.0F), (-2085.6272F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1042.8136F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2206.95F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1025.9F), wall0.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3151.0881F, wall0.getLength(), 0.01F);
      assertEquals((-2085.6272F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1042.8136F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2206.95F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1025.9F), wall0.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3151.0881F, wall0.getLength(), 0.01F);
      assertEquals((-2085.6272F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2206.95F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3388.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1025.9F), wall1.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3151.0881F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1042.8136F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2085.6272F), wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1042.8136F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2206.95F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1025.9F), wall0.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3151.0881F, wall0.getLength(), 0.01F);
      assertEquals((-2085.6272F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2206.95F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3388.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1025.9F), wall1.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3151.0881F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1042.8136F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2085.6272F), wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1042.8136F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2206.95F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1025.9F), wall0.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3151.0881F, wall0.getLength(), 0.01F);
      assertEquals((-2085.6272F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2206.95F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3388.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1025.9F), wall1.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3151.0881F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1042.8136F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2085.6272F), wall1.getYEnd(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      assertNotNull(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1042.8136F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2206.95F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1025.9F), wall0.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3151.0881F, wall0.getLength(), 0.01F);
      assertEquals((-2085.6272F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2206.95F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3388.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1025.9F), wall1.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3151.0881F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1042.8136F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2085.6272F), wall1.getYEnd(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy3 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy2);
      assertNotNull(propertyChangeListenerProxy3);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy3.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy3.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy3.equals((Object)propertyChangeListenerProxy1));
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      assertNull(propertyChangeListenerProxy3.getPropertyName());
      
      boolean boolean0 = wall0.containsPoint((-118.869995F), (-238.0F), (-624.96F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1042.8136F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2206.95F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1025.9F), wall0.getXStart(), 0.01F);
      assertEquals(3151.0881F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3151.0881F, wall0.getLength(), 0.01F);
      assertEquals((-2085.6272F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = Float.valueOf((-1073.37F));
      assertEquals((-1073.37F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      
      Float float5 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      wall0.setHeightAtEnd(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float6 = wall0.getXArcCircleCenter();
      assertEquals((-1.3299344E19F), float6, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float7 = wall0.getXStart();
      assertEquals(0.0F, float7, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-1.0F), 1.0F, (-2037.5082F));
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float8 = wall0.getArcExtent();
      assertEquals(0.0F, (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertEquals((float)float8, (float)float3, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.3299344E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setRightSideShininess(1630.33F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertNull(float0);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float1 = Float.max(1630.33F, 1630.33F);
      assertEquals(1630.33F, float1, 0.01F);
      
      float float2 = wall0.getThickness();
      assertEquals(1630.33F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 786.83F, 0.0F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = new Integer(2148);
      assertEquals(2148, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2148, (int)wall0.getRightSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2148, (int)wall0.getRightSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(2148, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2148, (int)wall0.getRightSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(2148, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2148, (int)wall0.getRightSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(2148, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(786.83F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("FLOOR_THICKNESS", (PropertyChangeListener) null);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("FLOOR_THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = Float.valueOf(786.83F);
      assertEquals(786.83F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = Float.valueOf(507.0F);
      assertEquals(507.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2148, (int)wall0.getRightSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2148, (int)wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(786.83F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      wall2.setArcExtent(float3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2148, (int)wall0.getRightSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2148, (int)wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(786.83F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals(307.52515F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-0.6566151F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(507.0F, wall2.getArcExtent(), 0.01F);
      
      Float float4 = wall2.getHeightAtEnd();
      assertNull(float4);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2148, (int)wall0.getRightSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2148, (int)wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(786.83F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals(307.52515F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-0.6566151F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(507.0F, wall2.getArcExtent(), 0.01F);
      
      Wall wall3 = wall0.getWallAtStart();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2148, (int)wall0.getRightSideColor());
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals((-0.5F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals(786.83F, wall3.getThickness(), 0.01F);
      assertEquals(2148, (int)wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(1.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals((-1.0F), wall3.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      float float0 = (-2079.5393F);
      Wall wall0 = new Wall((-2079.5393F), 0.0F, 786.83F, (-2079.5393F), (-2079.5393F), (-3388.0F));
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3541.265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-646.3546F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2079.5393F), wall0.getYEnd(), 0.01F);
      assertEquals(3541.265F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2079.5393F), wall0.getXStart(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1039.7697F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2079.5393F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, (-2079.5393F), 786.83F, 786.83F, (-3388.0F), 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2972.402F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2079.5393F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(2972.402F, wall1.getLength(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-646.3546F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3541.265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-646.3546F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2079.5393F), wall0.getYEnd(), 0.01F);
      assertEquals(3541.265F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2079.5393F), wall0.getXStart(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1039.7697F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2079.5393F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2972.402F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2079.5393F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(2972.402F, wall1.getLength(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-646.3546F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3541.265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-646.3546F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2079.5393F), wall0.getYEnd(), 0.01F);
      assertEquals(3541.265F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2079.5393F), wall0.getXStart(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1039.7697F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2079.5393F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2972.402F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2079.5393F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(2972.402F, wall1.getLength(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-646.3546F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2972.402F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2079.5393F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3388.0F), wall1.getThickness(), 0.01F);
      assertEquals(2972.402F, wall1.getLength(), 0.01F);
      assertEquals(393.415F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-646.3546F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(786.83F, wall1.getXEnd(), 0.01F);
      assertEquals(786.83F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(0.0F, (-238.0F), (-624.96F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3541.265F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-646.3546F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2079.5393F), wall0.getYEnd(), 0.01F);
      assertEquals(3541.265F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2079.5393F), wall0.getXStart(), 0.01F);
      assertEquals(786.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1039.7697F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2079.5393F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3388.0F), wall0.getHeight(), 0.01F);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float3 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float(3670.16758081624);
      assertEquals(3670.1675F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float2 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      Float float4 = Float.valueOf((-2640.3F));
      assertEquals((-2640.3F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1.0429149F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-0.084756136F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      
      wall1.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(1.0429149F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-0.084756136F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 1630.33F, 2521.2083F, (-1937.178F), (-1749.2F));
      assertNotNull(wall0);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals((-153.42401F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1260.6091F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(4368.4727F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(2158.0);
      assertEquals(2158.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals((-1749.2F), wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float1 = Float.valueOf((-1749.2F));
      assertEquals((-1749.2F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = Float.valueOf((-1999.099F));
      assertEquals((-1999.099F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      Float float3 = Float.valueOf((-2640.3F));
      assertEquals((-2640.3F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float((-1937.178F));
      assertEquals((-1937.178F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      Float float5 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      
      wall0.setThickness(1348.71F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(1348.71F, wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float6 = wall0.getArcExtent();
      assertEquals(2158.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(1348.71F, wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float7 = Float.min(0.0F, 3037.1829F);
      assertEquals(0.0F, float7, 0.01F);
      
      Float float8 = Float.valueOf((-4573.0F));
      assertEquals((-4573.0F), (float)float8, 0.01F);
      assertNotNull(float8);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      
      float float9 = Float.max((-2640.3F), 0.01F);
      assertEquals(0.01F, float9, 0.01F);
      assertEquals(float9, float7, 0.01F);
      
      wall0.setHeightAtEnd(float8);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float9, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(1348.71F, wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float10 = wall0.getXArcCircleCenter();
      assertEquals(1506.663F, float10, 0.01F);
      assertNotEquals(float10, float9, 0.01F);
      assertNotEquals(float10, float7, 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(1348.71F, wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      
      float float11 = wall0.getXStart();
      assertEquals(0.01F, float11, 0.01F);
      assertEquals(float11, float9, 0.01F);
      assertEquals(float11, float7, 0.01F);
      assertNotEquals(float11, float10, 0.01F);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(1348.71F, wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(1348.71F, wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(1348.71F, wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(786.83F, 2.0F, (-4573.0F));
      assertFalse(boolean0);
      assertEquals((-1937.178F), wall0.getYEnd(), 0.01F);
      assertEquals(1348.71F, wall0.getThickness(), 0.01F);
      assertEquals(2158.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-4573.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(4368.4727F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(4758215.5F, wall0.getLength(), 0.01F);
      assertEquals(1506.663F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(2521.2083F, wall0.getXEnd(), 0.01F);
      assertEquals(20.465002F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setXEnd(0.1F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean0 = Float.isFinite(1722.0356F);
      assertTrue(boolean0);
      
      wall0.setHeight(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float2 = wall0.getThickness();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.move(0.0F, (-1143.418F));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-329.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1143.418F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(485.28198F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-329.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1143.418F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(485.28198F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.9784496F, 1.0F, 1.0F, (-266.41934F));
      assertNotNull(wall0);
      assertEquals(0.021550417F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-266.41934F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.021550417F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.9784496F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.9892248F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setYEnd(3.1415927F);
      assertNull(wall0.getHeight());
      assertEquals(3.1415927F, wall0.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1631432F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.9784496F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0600212F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1631432F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), (-266.41934F), (-266.41934F), 1.0F, (-266.41934F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-133.70967F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(376.7765F, wall1.getLength(), 0.01F);
      assertEquals((-266.41934F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-266.41934F), wall1.getThickness(), 0.01F);
      assertEquals(376.7765F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-132.70967F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall1.getYStart(), 0.01F);
      
      wall1.setYEnd((-12.24441F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-139.33188F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-133.70967F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(367.49466F, wall1.getLength(), 0.01F);
      assertEquals((-266.41934F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-266.41934F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(367.49466F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-12.24441F), wall1.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall1.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertEquals(3.1415927F, wall0.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1631432F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.9784496F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0600212F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1631432F, wall0.getLength(), 0.01F);
      assertEquals((-139.33188F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-133.70967F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(367.49466F, wall1.getLength(), 0.01F);
      assertEquals((-266.41934F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-266.41934F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(367.49466F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-12.24441F), wall1.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall1.getYStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertEquals(3.1415927F, wall0.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1631432F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.9784496F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0600212F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1631432F, wall0.getLength(), 0.01F);
      assertEquals((-139.33188F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-133.70967F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(367.49466F, wall1.getLength(), 0.01F);
      assertEquals((-266.41934F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-266.41934F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(367.49466F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-12.24441F), wall1.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall1.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertEquals(3.1415927F, wall0.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1631432F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.9784496F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0600212F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1631432F, wall0.getLength(), 0.01F);
      assertEquals((-139.33188F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-133.70967F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(367.49466F, wall1.getLength(), 0.01F);
      assertEquals((-266.41934F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-266.41934F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(367.49466F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-12.24441F), wall1.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall1.getYStart(), 0.01F);
      
      wall1.setXEnd(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-139.33188F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(254.1828F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(254.1828F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-266.41934F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-12.24441F), wall1.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-139.33188F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(254.1828F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(254.1828F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-266.41934F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-12.24441F), wall1.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-12.24441F), 0.9784496F, 1.0F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertEquals(3.1415927F, wall0.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1631432F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.9784496F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0600212F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1631432F, wall0.getLength(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertEquals(3.1415927F, wall0.getYEnd(), 0.01F);
      assertEquals((-266.41934F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1631432F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.9784496F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0600212F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1631432F, wall0.getLength(), 0.01F);
      
      HomeTexture homeTexture1 = null;
      try {
        homeTexture1 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Wall wall0 = new Wall(0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F, 0.68707967F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.68707967F, wall0.getYStart(), 0.01F);
      assertEquals(0.68707967F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getThickness(), 0.01F);
      assertEquals(0.68707967F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.68707967F, wall0.getXEnd(), 0.01F);
      assertEquals(0.68707967F, wall0.getYEnd(), 0.01F);
      assertEquals(0.68707967F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = new Float((-0.35923812F));
      assertEquals((-0.35923812F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.68707967F, wall0.getYStart(), 0.01F);
      assertEquals(0.68707967F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getThickness(), 0.01F);
      assertEquals(0.68707967F, wall0.getXStart(), 0.01F);
      assertEquals((-0.35923812F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.68707967F, wall0.getXEnd(), 0.01F);
      assertEquals(0.68707967F, wall0.getYEnd(), 0.01F);
      assertEquals(0.68707967F, wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.68707967F, wall0.getYStart(), 0.01F);
      assertEquals(0.68707967F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.68707967F, wall0.getThickness(), 0.01F);
      assertEquals(0.68707967F, wall0.getXStart(), 0.01F);
      assertEquals((-0.35923812F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.68707967F, wall0.getXEnd(), 0.01F);
      assertEquals(0.68707967F, wall0.getYEnd(), 0.01F);
      assertEquals(0.68707967F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      Float float0 = Float.valueOf(2923.5586F);
      assertEquals(2923.5586F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(55.43F);
      assertEquals(55.43F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Float float2 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = new Float(2923.5586F);
      assertEquals(2923.5586F, float3, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(2923.5586F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertTrue(boolean0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(2923.5586F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      float float4 = wall0.getRightSideShininess();
      assertEquals(0.0F, float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(2923.5586F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 1.0F, (-23.871628F), 1.0F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals((-23.871628F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      boolean boolean1 = wall1.containsPoint((-1703.0F), (-709.0F), 1.0F);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      Float float1 = new Float((double) 0.1F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setHeightAtEnd(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      assertNotNull(level0);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      
      float float2 = level0.getElevation();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      
      float float3 = level0.getHeight();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      
      boolean boolean2 = wall0.isAtLevel(level0);
      assertFalse(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = 1.0F;
      Wall wall0 = new Wall(742.0F, 742.0F, 742.0F, 742.0F, 1.0F, (-2295.155F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(742.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXEnd(), 0.01F);
      assertEquals(742.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(742.0F, wall0.getXStart(), 0.01F);
      assertEquals(742.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(742.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXEnd(), 0.01F);
      assertEquals(742.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(742.0F, wall0.getXStart(), 0.01F);
      assertEquals(742.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(742.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(742.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2295.155F), wall1.getHeight(), 0.01F);
      assertEquals(742.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(742.0F, wall1.getYStart(), 0.01F);
      assertEquals(742.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(742.0F, wall1.getXStart(), 0.01F);
      
      wall1.setXStart(1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(742.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXEnd(), 0.01F);
      assertEquals(742.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(742.0F, wall0.getXStart(), 0.01F);
      assertEquals(742.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(742.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(371.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(742.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2295.155F), wall1.getHeight(), 0.01F);
      assertEquals(742.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(741.0F, wall1.getLength(), 0.01F);
      assertEquals(741.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(742.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(742.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXEnd(), 0.01F);
      assertEquals(742.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(742.0F, wall0.getXStart(), 0.01F);
      assertEquals(742.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(742.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(371.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2295.155F), wall1.getHeight(), 0.01F);
      assertEquals(742.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1, (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(741.0F, wall1.getLength(), 0.01F);
      assertEquals(741.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(742.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(742.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXEnd(), 0.01F);
      assertEquals(742.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(742.0F, wall0.getXStart(), 0.01F);
      assertEquals(742.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall1.containsWallStartAt((-2295.155F), 400.123F, 400.123F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(742.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXEnd(), 0.01F);
      assertEquals(742.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(742.0F, wall0.getXStart(), 0.01F);
      assertEquals(742.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(742.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(371.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2295.155F), wall1.getHeight(), 0.01F);
      assertEquals(742.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1, (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(741.0F, wall1.getLength(), 0.01F);
      assertEquals(741.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(742.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float float1 = 0.0F;
      boolean boolean1 = wall0.containsPoint(1, 0.0F, (-1.0F));
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2295.155F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(742.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXEnd(), 0.01F);
      assertEquals(742.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(742.0F, wall0.getXStart(), 0.01F);
      assertEquals(742.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(742.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float float0 = (-262.6F);
      float float1 = (-2424.809F);
      Wall wall0 = new Wall(0.0F, 0.0F, (-2474.601F), (-262.6F), (-2424.809F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1237.3005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2424.809F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2474.601F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2488.4954F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-262.6F), wall0.getYEnd(), 0.01F);
      assertEquals(2488.4954F, wall0.getLength(), 0.01F);
      assertEquals((-131.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = 1.0F;
      boolean boolean0 = wall0.containsPoint(1.0F, 0.0F, (-2424.809F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1237.3005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2424.809F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2474.601F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2488.4954F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-262.6F), wall0.getYEnd(), 0.01F);
      assertEquals(2488.4954F, wall0.getLength(), 0.01F);
      assertEquals((-131.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1237.3005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2474.601F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2488.4954F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-262.6F), wall0.getYEnd(), 0.01F);
      assertEquals(2488.4954F, wall0.getLength(), 0.01F);
      assertEquals((-131.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      try { 
        Float.valueOf("e6F(J{W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideShininess((-2078.5083F));
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2078.5083F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      
      Float float0 = Float.valueOf((-2078.5083F));
      assertEquals((-2078.5083F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-2078.5083F));
      assertEquals((-2078.5083F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(849.975F, 1630.33F, 476.68582F);
      assertFalse(boolean0);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2078.5083F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(481.17633F, 2291.419F, 0.0F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2078.5083F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      
      Level level0 = new Level("'Slkoim~gN", 1630.33F, 4258.0F, (-2078.5083F));
      assertNotNull(level0);
      assertEquals("'Slkoim~gN", level0.getName());
      assertEquals(4258.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2078.5083F), level0.getHeight(), 0.01F);
      assertEquals(1630.33F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2078.5083F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2078.5083F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      float float2 = wall0.getLength();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2078.5083F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2078.5083F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1630.33F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(1630.33F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Wall wall0 = new Wall(3010.477F, 3010.477F, 3010.477F, 645.007F, 645.007F);
      assertNotNull(wall0);
      assertEquals(645.007F, wall0.getThickness(), 0.01F);
      assertEquals(3010.477F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2365.47F, wall0.getLength(), 0.01F);
      assertEquals(645.007F, wall0.getYEnd(), 0.01F);
      assertEquals(2365.47F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3010.477F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3010.477F, wall0.getYStart(), 0.01F);
      assertEquals(3010.477F, wall0.getXEnd(), 0.01F);
      assertEquals(1827.7421F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(645.007F, wall0.getThickness(), 0.01F);
      assertEquals(3010.477F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2365.47F, wall0.getLength(), 0.01F);
      assertEquals(645.007F, wall0.getYEnd(), 0.01F);
      assertEquals(2365.47F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3010.477F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3010.477F, wall0.getYStart(), 0.01F);
      assertEquals(3010.477F, wall0.getXEnd(), 0.01F);
      assertEquals(1827.7421F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Wall wall0 = new Wall((-0.5274488F), (-0.5274488F), (-0.5274488F), (-0.5274488F), 786.83F, (-0.5274488F));
      assertNotNull(wall0);
      assertEquals((-0.5274488F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5274488F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5274488F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5274488F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5274488F), wall0.getYEnd(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5274488F), wall0.getYStart(), 0.01F);
      assertEquals((-0.5274488F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYEnd(786.83F);
      assertEquals((-0.5274488F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5274488F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5274488F), wall0.getXEnd(), 0.01F);
      assertEquals(787.3575F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(393.15128F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5274488F), wall0.getYStart(), 0.01F);
      assertEquals((-0.5274488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(787.3575F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertEquals(787.3576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5274488F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5274488F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(787.3576F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.7637244F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(393.15128F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5274488F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(787.3576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5274488F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5274488F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(787.3576F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.7637244F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(393.15128F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5274488F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), (-1.0F), (-0.5274488F));
      assertFalse(boolean0);
      assertEquals(787.3576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5274488F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5274488F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(787.3576F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.7637244F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(393.15128F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5274488F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(787.3576F, float0, 0.01F);
      assertEquals(787.3576F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5274488F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5274488F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(787.3576F, wall0.getLength(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.7637244F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(393.15128F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5274488F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(814.35F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean0 = wall0.containsPoint(1525.638F, 0.0F, 1628.7F);
      assertTrue(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      wall0.setXEnd((-1.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      float float0 = wall0.getYEnd();
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 1.0F, (-23.871628F), 1.0F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setXEnd((-709.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      boolean boolean0 = wall1.containsPoint(1.0F, 1956.925F, (-1439.375F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      wall1.setHeightAtEnd((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(1320.134F, wall1.getLength(), 0.01F);
      assertEquals(1320.134F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-355.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      wall0.setRightSideShininess(969.6794F);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      boolean boolean0 = Float.isFinite((-611.54F));
      assertTrue(boolean0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Integer integer0 = Integer.valueOf(3286);
      assertEquals(3286, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(3286);
      assertEquals(3286, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.valueOf((-779));
      assertEquals((-779), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = Integer.valueOf(3286);
      assertEquals(3286, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      
      Integer integer4 = Integer.valueOf(357);
      assertEquals(357, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      wall0.setRightSideColor(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(357, (int)wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      assertNotNull(level0);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      float float0 = level0.getElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      float float1 = level0.getHeight();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(357, (int)wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      Integer integer5 = wall0.getRightSideColor();
      assertEquals(357, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(969.6794F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(357, (int)wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Wall wall0 = new Wall(1608.46F, 1608.46F, 1608.46F, 1608.46F, 1608.46F, 1608.46F);
      assertNotNull(wall0);
      assertEquals(1608.46F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1608.46F, wall0.getXEnd(), 0.01F);
      assertEquals(1608.46F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1608.46F, wall0.getXStart(), 0.01F);
      assertEquals(1608.46F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1608.46F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((double) 1608.46F);
      assertEquals(1608.46F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = Float.isFinite(2.0F);
      assertTrue(boolean0);
      
      float float1 = Float.max((-1073.37F), (-1073.37F));
      assertEquals((-1073.37F), float1, 0.01F);
      
      float float2 = Float.min((-1073.37F), 2.0F);
      assertEquals((-1073.37F), float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      float float3 = Float.max(2.0F, 1735.6F);
      assertEquals(1735.6F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1608.46F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1608.46F, wall0.getXEnd(), 0.01F);
      assertEquals(1608.46F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1608.46F, wall0.getXStart(), 0.01F);
      assertEquals(1608.46F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1608.46F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getThickness(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(1608.46F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1608.46F, wall0.getXEnd(), 0.01F);
      assertEquals(1608.46F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1608.46F, wall0.getXStart(), 0.01F);
      assertEquals(1608.46F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1608.46F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.46F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(1608.46F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1608.46F, wall0.getXEnd(), 0.01F);
      assertEquals(1608.46F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1608.46F, wall0.getXStart(), 0.01F);
      assertEquals(1608.46F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1608.46F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.46F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getThickness(), 0.01F);
      
      float float4 = wall0.getXEnd();
      assertEquals(1608.46F, float4, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(1608.46F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1608.46F, wall0.getXEnd(), 0.01F);
      assertEquals(1608.46F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1608.46F, wall0.getXStart(), 0.01F);
      assertEquals(1608.46F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1608.46F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.46F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getThickness(), 0.01F);
      
      float float5 = wall0.getXEnd();
      assertEquals(1608.46F, float5, 0.01F);
      assertEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(1608.46F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1608.46F, wall0.getXEnd(), 0.01F);
      assertEquals(1608.46F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1608.46F, wall0.getXStart(), 0.01F);
      assertEquals(1608.46F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1608.46F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.46F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1608.46F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1608.46F, wall0.getXEnd(), 0.01F);
      assertEquals(1608.46F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1608.46F, wall0.getXStart(), 0.01F);
      assertEquals(1608.46F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1608.46F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.46F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1608.46F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), (-709.0F), (-709.0F), (-709.0F), (-709.0F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getHeight(), 0.01F);
      
      wall0.setThickness((-709.0F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getHeight(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      Level level0 = new Level("K 95Y!,@B)IDn", 2.0F, 2.0F, 2.0F);
      assertNotNull(level0);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.0F, level0.getElevation(), 0.01F);
      assertEquals(2.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      
      float float0 = level0.getHeight();
      assertEquals(2.0F, float0, 0.01F);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.0F, level0.getElevation(), 0.01F);
      assertEquals(2.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.0F, level0.getElevation(), 0.01F);
      assertEquals(2.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(2.0F, level1.getHeight(), 0.01F);
      assertEquals(2.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(2.0F, level1.getFloorThickness(), 0.01F);
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.0F, level0.getElevation(), 0.01F);
      assertEquals(2.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertEquals(2.0F, level1.getHeight(), 0.01F);
      assertEquals(2.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertEquals(2.0F, level1.getFloorThickness(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getHeight(), 0.01F);
      
      wall0.setWallAtEnd((Wall) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-709.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-709.0F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 786.83F, (-1.0F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXEnd((-1.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall((-1.0F), (-953.64F), (-953.64F), (-1058.7F), (-271.82535F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1006.17F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-271.82535F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-953.64F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(958.41565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(958.41565F, wall1.getLength(), 0.01F);
      assertEquals((-953.64F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1058.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-477.32F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.setThickness((-953.64F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1006.17F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-953.64F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-953.64F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(958.41565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(958.41565F, wall1.getLength(), 0.01F);
      assertEquals((-953.64F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1058.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-477.32F), wall1.getXArcCircleCenter(), 0.01F);
      
      float float1 = wall1.getThickness();
      assertEquals((-953.64F), float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1006.17F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-953.64F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-953.64F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(958.41565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(958.41565F, wall1.getLength(), 0.01F);
      assertEquals((-953.64F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1058.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-477.32F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1006.17F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-953.64F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-953.64F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(958.41565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(958.41565F, wall1.getLength(), 0.01F);
      assertEquals((-953.64F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1058.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-477.32F), wall1.getXArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-1338.0F), (-1338.0F), (-271.82535F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall1.setThickness((-271.82535F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1006.17F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-271.82535F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-953.64F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(958.41565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(958.41565F, wall1.getLength(), 0.01F);
      assertEquals((-953.64F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1058.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-477.32F), wall1.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-1006.17F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-271.82535F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-953.64F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(958.41565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(958.41565F, wall1.getLength(), 0.01F);
      assertEquals((-953.64F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1058.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-477.32F), wall1.getXArcCircleCenter(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1058.7F), wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-477.32F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-271.82535F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(958.41565F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-953.64F), wall2.getYStart(), 0.01F);
      assertEquals((-1006.17F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-953.64F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(958.41565F, wall2.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Wall wall0 = new Wall(1628.6637F, 1628.6637F, 1628.6637F, 1628.6637F, 1628.6637F, 1628.6637F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      
      wall0.setRightSideShininess(1628.6637F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(1628.6637F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = new Float(1628.6637F);
      assertEquals(1628.6637F, float1, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1628.6637F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1628.6637F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall1.getHeight(), 0.01F);
      assertEquals(1628.6637F, wall1.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall1.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall1.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1628.6637F, wall1.getThickness(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1628.6637F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1628.6637F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall1.getHeight(), 0.01F);
      assertEquals(1628.6637F, wall1.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall1.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall1.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1628.6637F, wall1.getThickness(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1628.6637F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1628.6637F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall1.getHeight(), 0.01F);
      assertEquals(1628.6637F, wall1.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall1.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall1.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1628.6637F, wall1.getThickness(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1628.6637F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1628.6637F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall1.getHeight(), 0.01F);
      assertEquals(1628.6637F, wall1.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall1.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall1.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1628.6637F, wall1.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(3002.77F, (-3794.8716F), 1164.07F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1628.6637F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1628.6637F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1628.6637F, wall0.getXEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getThickness(), 0.01F);
      assertEquals(1628.6637F, wall0.getYStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.6637F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.6637F, wall0.getXStart(), 0.01F);
      assertEquals(1628.6637F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, (-1749.2F));
      assertNotNull(wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1749.2F), wall1.getHeight(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("OU.j6yy5", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("OU.j6yy5", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals("OU.j6yy5", propertyChangeListenerProxy0.getPropertyName());
      
      wall1.setRightSideShininess((-2078.5083F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1749.2F), wall1.getHeight(), 0.01F);
      
      Float float0 = wall1.getHeight();
      assertEquals((-1749.2F), (float)float0, 0.01F);
      assertNotNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1749.2F), wall1.getHeight(), 0.01F);
      
      Wall wall2 = wall1.getWallAtStart();
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1749.2F), wall1.getHeight(), 0.01F);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite((-780.224F));
      assertTrue(boolean0);
      
      wall1.setHeight(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      
      float float2 = wall1.getThickness();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-59.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1630.33F, wall1.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1630.33F, wall1.getXStart(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1630.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1749.2F), wall1.getYEnd(), 0.01F);
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.move((-1749.2F), 1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-118.869995F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-58.434998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-118.869995F), wall1.getXStart(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-118.869995F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1631.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1748.2F), wall1.getYEnd(), 0.01F);
      
      wall1.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-118.869995F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3437.9648F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(2.7595956E19F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-118.869995F), wall1.getXStart(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1631.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1748.2F), wall1.getYEnd(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(1544.284F, 1629.33F, (-780.224F), 393.0F);
      assertTrue(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-59.434998F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1749.2F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(3379.5298F, wall0.getLength(), 0.01F);
      assertEquals((-1749.2F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3379.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-118.869995F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3437.9648F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(3379.5298F, wall1.getLength(), 0.01F);
      assertEquals(2.7595956E19F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-118.869995F), wall1.getXStart(), 0.01F);
      assertEquals((-2078.5083F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3379.5298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1631.33F, wall1.getYStart(), 0.01F);
      assertEquals((-1748.2F), wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1.0F), (-1.0F), 1.0F, (-23.871628F), 1.0F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall((-1.0F), (-23.871628F), (-23.871628F), 1090.35F, (-23.871628F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = wall1.containsWallEndAt(1090.35F, (-1.0F), 1.0F);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      boolean boolean1 = wall1.containsPoint((-1703.4757F), (-709.0F), (-1.0F));
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1090.35F, wall1.getYEnd(), 0.01F);
      assertEquals(1114.4563F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-23.871628F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-23.871628F), wall1.getXEnd(), 0.01F);
      assertEquals((-12.435814F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1114.4563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-23.871628F), wall1.getYStart(), 0.01F);
      assertEquals(533.2392F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Float float0 = new Float(976.501082);
      assertEquals(976.5011F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-23.871628F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.828427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.828427F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Wall wall0 = new Wall((-709.0F), (-709.0F), 0.0F, (-709.0F), 0.0F, (-285.98456F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      assertEquals((-354.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(709.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-709.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-709.0F), wall1.getYStart(), 0.01F);
      assertEquals((-354.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-285.98456F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(709.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall1.getXStart(), 0.01F);
      assertEquals((-709.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Level level0 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      float float0 = level0.getElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      float float1 = level0.getHeight();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K 95Y!,@B)IDn", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("K 95Y!,@B)IDn", propertyChangeListenerProxy0.getPropertyName());
      
      level1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", propertyChangeListenerProxy0.getPropertyName());
      
      level1.setHeight(0.0F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.setLevel(level1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      wall0.setThickness((-285.98456F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(709.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-709.0F), wall0.getYStart(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-709.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(709.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setYStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float3 = wall0.getYStart();
      assertEquals(0.0F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setLevel(level1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-285.98456F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("K 95Y!,@B)IDn", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      
      wall0.setThickness(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float4 = wall0.getYStart();
      assertEquals(0.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertEquals(float4, float0, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness((-4114.6245F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(1002.6774F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-354.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-709.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-285.98456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-709.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1002.6774F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-354.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4114.6245F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Wall wall0 = new Wall((-33.26289F), 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(34.26289F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16.131445F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-33.26289F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(34.26289F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(34.26289F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16.131445F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-33.26289F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(34.26289F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtStart(wall0);
      assertEquals(34.26289F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16.131445F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-33.26289F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(34.26289F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16.131445F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-33.26289F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(32.358902F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(34.26289F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(35.733276F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.containsPoint(1.0F, 0.0F, 1.0F);
      assertTrue(boolean0);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16.131445F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-33.26289F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(32.358902F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(34.26289F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(35.733276F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      wall0.setXStart(1.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      assertNotNull(wall0);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideShininess(1630.33F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(1.0F, 1.0F, 1.0F);
      assertFalse(boolean0);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals(1630.33F, float0, 0.01F);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall(3550.031F, 3550.031F, 29.381277F, (-437.08545F), 1646.143F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(1630.33F, wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertEquals(1630.33F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Level level0 = new Level("", 1630.33F, 1.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(1630.33F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1630.33F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1630.33F, level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      
      wall1.setLevel(level1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(wall1, wall0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1630.33F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1630.33F, level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1630.33F, wall2.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall2.getXEnd(), 0.01F);
      assertEquals(1630.33F, wall2.getXStart(), 0.01F);
      assertEquals(1630.33F, wall2.getHeight(), 0.01F);
      assertEquals(1630.33F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall2.getThickness(), 0.01F);
      assertEquals(1630.33F, wall2.getYStart(), 0.01F);
      assertEquals(1630.33F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      
      wall2.setYStart((-634.2F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1630.33F, wall2.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall2.getXEnd(), 0.01F);
      assertEquals(498.06497F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall2.getXStart(), 0.01F);
      assertEquals(1630.33F, wall2.getHeight(), 0.01F);
      assertEquals(1630.33F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2264.53F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-634.2F), wall2.getYStart(), 0.01F);
      assertEquals(1630.33F, wall2.getThickness(), 0.01F);
      assertEquals(1630.33F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2264.53F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      
      float float1 = wall0.getRightSideShininess();
      assertEquals(1630.33F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float1, float0, 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(498.06497F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-634.2F), wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2264.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(2264.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertFalse(wall0.equals((Object)wall1));
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1630.33F, wall0.getThickness(), 0.01F);
      assertEquals(498.06497F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-634.2F), wall0.getYStart(), 0.01F);
      assertEquals(1630.33F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2264.53F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1630.33F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1630.33F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1630.33F, wall0.getXEnd(), 0.01F);
      assertEquals(2264.53F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1630.33F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1630.33F, wall0.getYEnd(), 0.01F);
      
      float float2 = wall1.getXStart();
      assertEquals(3550.031F, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Float float3 = new Float(3502.0342799976056);
      assertEquals(3502.0342F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Level level2 = wall2.getLevel();
      assertNull(level2);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(1630.33F, wall2.getYEnd(), 0.01F);
      assertEquals(1630.33F, wall2.getXEnd(), 0.01F);
      assertEquals(498.06497F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall2.getXStart(), 0.01F);
      assertEquals(1630.33F, wall2.getHeight(), 0.01F);
      assertEquals(1630.33F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2264.53F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-634.2F), wall2.getYStart(), 0.01F);
      assertEquals(1630.33F, wall2.getThickness(), 0.01F);
      assertEquals(1630.33F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2264.53F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      
      boolean boolean1 = wall1.isAtLevel((Level) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertEquals((-437.08545F), wall1.getYEnd(), 0.01F);
      assertEquals(5319.0293F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(3550.031F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3550.031F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1556.4728F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1789.7062F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5319.0293F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1646.143F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(29.381277F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 0.0F, 786.83F, 0.0F);
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = new Float(3670.16758081624);
      assertEquals(3670.1675F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      Float float2 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Float float3 = Float.valueOf(786.83F);
      assertEquals(786.83F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      Float float4 = Float.valueOf((-2640.3F));
      assertEquals((-2640.3F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      Float float5 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      
      Float float6 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotNull(float6);
      assertEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      
      wall0.setThickness(786.83F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      Float float7 = Float.valueOf((-1233.86F));
      assertEquals((-1233.86F), (float)float7, 0.01F);
      assertNotNull(float7);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      
      float float8 = Float.min((-980.543F), (-2025.0F));
      assertEquals((-2025.0F), float8, 0.01F);
      
      Float float9 = Float.valueOf(426.19244F);
      assertEquals(426.19244F, (float)float9, 0.01F);
      assertNotNull(float9);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      
      float float10 = Float.max((-2025.0F), 1348.71F);
      assertEquals(1348.71F, float10, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      
      wall0.setHeightAtEnd(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float6, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float7, 0.01F);
      assertNotEquals((float)float4, (float)float8, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float9, 0.01F);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      assertNotEquals((float)float4, (float)float10, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      float float11 = wall0.getXArcCircleCenter();
      assertEquals((-0.084756136F), float11, 0.01F);
      assertNotEquals(float11, float8, 0.01F);
      assertNotEquals(float11, float10, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      float float12 = wall0.getXStart();
      assertEquals((-1.0F), float12, 0.01F);
      assertNotEquals(float12, float11, 0.01F);
      assertNotEquals(float12, float8, 0.01F);
      assertNotEquals(float12, float10, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(1.0F, 1698.975F, 1348.71F);
      assertFalse(boolean0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      Float float13 = wall0.getArcExtent();
      assertEquals((-1.0F), (float)float13, 0.01F);
      assertNotNull(float13);
      assertNotEquals((float)float13, (float)float8, 0.01F);
      assertNotEquals((float)float13, (float)float6, 0.01F);
      assertNotEquals((float)float13, (float)float0, 0.01F);
      assertNotEquals((float)float13, (float)float9, 0.01F);
      assertNotEquals((float)float13, (float)float10, 0.01F);
      assertNotEquals((float)float13, (float)float4, 0.01F);
      assertEquals((float)float13, (float)float12, 0.01F);
      assertNotEquals((float)float13, (float)float2, 0.01F);
      assertEquals((float)float13, (float)float5, 0.01F);
      assertNotEquals((float)float13, (float)float7, 0.01F);
      assertNotEquals((float)float13, (float)float11, 0.01F);
      assertNotEquals((float)float13, (float)float3, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      wall0.setHeight(float4);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float7, 0.01F);
      assertNotEquals((float)float4, (float)float8, 0.01F);
      assertNotEquals((float)float4, (float)float13, 0.01F);
      assertNotEquals((float)float4, (float)float10, 0.01F);
      assertNotEquals((float)float4, (float)float12, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float6, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float11, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float9, 0.01F);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      float float14 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float14, 0.01F);
      assertNotEquals(float14, float10, 0.01F);
      assertNotEquals(float14, float12, 0.01F);
      assertNotEquals(float14, float11, 0.01F);
      assertNotEquals(float14, float8, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      
      Float float15 = wall0.getHeightAtEnd();
      assertEquals((-2640.3F), (float)float15, 0.01F);
      assertNotNull(float15);
      assertNotEquals((float)float15, (float)float0, 0.01F);
      assertNotEquals((float)float15, (float)float7, 0.01F);
      assertNotEquals((float)float15, (float)float8, 0.01F);
      assertNotEquals((float)float15, (float)float10, 0.01F);
      assertNotEquals((float)float15, (float)float13, 0.01F);
      assertNotEquals((float)float15, (float)float1, 0.01F);
      assertNotEquals((float)float15, (float)float11, 0.01F);
      assertNotEquals((float)float15, (float)float12, 0.01F);
      assertNotEquals((float)float15, (float)float3, 0.01F);
      assertNotEquals((float)float15, (float)float9, 0.01F);
      assertNotEquals((float)float15, (float)float6, 0.01F);
      assertNotEquals((float)float15, (float)float2, 0.01F);
      assertNotEquals((float)float15, (float)float14, 0.01F);
      assertNotEquals((float)float15, (float)float5, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.084756136F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2640.3F), wall0.getHeight(), 0.01F);
      assertEquals(786.83F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1628.7F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(814.35F, float0, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(1722.0356F);
      assertTrue(boolean0);
      
      wall0.setHeight((Float) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = wall0.getThickness();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(1628.7F, wall0.getYEnd(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(814.35F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.move(0.0F, (-1143.418F));
      assertEquals((-329.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(485.28198F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1143.418F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals((-329.068F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1628.7F, wall0.getLength(), 0.01F);
      assertEquals(1628.7F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(485.28198F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1143.418F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.2011F), 4027.1191F, 0.0F);
      assertNotNull(wall0);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      assertFalse(boolean0);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYStart(0.1F);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 128.0F, 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setRightSideShininess(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall1.setLevel(level0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean1 = wall1.containsPoint((-684.2011F), 0.0F, 0.0F);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setYStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNotNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(homeTexture1, homeTexture0);
      assertEquals(4084.7295F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4084.7295F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2013.6096F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-684.2011F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(4027.1191F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-342.10056F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(homeTexture1.getName());
      assertEquals(0.0F, homeTexture1.getHeight(), 0.01F);
      assertEquals(0.0F, homeTexture1.getWidth(), 0.01F);
      assertFalse(homeTexture1.isLeftToRightOriented());
      
      wall1.setXEnd((-1663.3918F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1663.3931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-831.6959F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1663.3918F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1663.3931F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      float[][] floatArray1 = wall1.getPoints();
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall1, wall0);
      assertEquals(1663.3931F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-831.6959F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1663.3918F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1663.3931F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(128.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.0F), (-684.0F), 0.0F);
      wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn("{$K8>yS}y.t4UN`KzV").when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      wall0.getPoints();
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), (-684.0F), 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("{$K8>yS}y.t4UN`KzV", propertyChangeListener0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      Integer integer0 = Integer.valueOf(0);
      integer0.equals("U8F}");
      wall0.setRightSideColor(integer0);
      wall1.setRightSideShininess(0.1F);
      wall1.setWallAtEnd(wall0);
      wall0.setPattern((TextureImage) null);
      wall0.setWallAtEnd(wall1);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      doReturn((-684.0F), (-87.348F)).when(level0).getElevation();
      wall1.setLevel(level0);
      wall1.containsPoint((-684.0F), 0.0F, 0.0F);
      wall1.setYStart(1.0F);
      wall0.getRightSideTexture();
      wall1.getThickness();
      wall1.move(742.0F, (-684.0F));
      Level level1 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level1.getElevation();
      level1.getHeight();
      boolean boolean0 = wall1.isAtLevel(level1);
      assertEquals(0.1F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      wall0.setRightSideShininess(1630.33F);
      wall0.containsWallEndAt(1.0F, 1.0F, 1.0F);
      wall0.getThickness();
      Wall wall1 = new Wall(3550.031F, 3550.031F, 29.381277F, (-437.08545F), 1646.143F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.containsPoint((-2646.0F), (-694.25F), (-1246.749F));
      Float float0 = new Float((-3226.293960466145));
      Float float1 = new Float(1.0E-6);
      float1.floatValue();
      float1.floatValue();
      wall1.setHeightAtEnd((Float) 1.0E-6F);
      Wall wall2 = wall0.clone();
      Float float2 = new Float(1.0E-6F);
      wall2.setHeightAtEnd(float2);
      wall0.getPoints();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("T_/yfr]UN?]#kZA/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.T_/yfr]UN?]#kZA/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, (-684.0F), (-684.0F), 0.0F);
      wall0.containsWallEndAt(0.0F, 0.1F, 0.0F);
      HomeTexture homeTexture0 = mock(HomeTexture.class, new ViolatedAssumptionAnswer());
      doReturn("{$K8>yS}y.t4UN`KzV").when(homeTexture0).toString();
      wall0.setRightSideTexture(homeTexture0);
      wall0.getPoints();
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), (-684.0F), 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("{$K8>yS}y.t4UN`KzV", propertyChangeListener0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      Integer integer0 = Integer.valueOf(0);
      integer0.equals("U8F}");
      wall0.setRightSideColor(integer0);
      wall1.setRightSideShininess(0.1F);
      wall1.setWallAtEnd(wall0);
      wall0.setPattern((TextureImage) null);
      wall0.setWallAtEnd(wall1);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F, 0.0F).when(level0).getElevation();
      wall1.setLevel(level0);
      wall1.containsPoint((-684.0F), 0.0F, 0.0F);
      wall1.setYStart(1.0F);
      wall0.getRightSideTexture();
      wall1.getThickness();
      wall1.move(742.0F, (-684.0F));
      Level level1 = new Level("K 95Y!,@B)IDn", 0.0F, 1.0F, 0.0F);
      level1.getElevation();
      level1.getHeight();
      wall1.isAtLevel(level1);
      assertEquals((-685.0F), wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, (-1749.2F), 0.0F, (-1749.2F));
      Wall wall1 = wall0.clone();
      wall1.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getHeight();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Float float0 = new Float((-808.0F));
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits(0.0F);
      Float.floatToIntBits((-232.5F));
      wall0.setArcExtent((Float) (-232.5F));
      Float.valueOf(648.48F);
      Float.valueOf(122.54403F);
      Float.valueOf(0.1F);
      Float.valueOf(648.48F);
      Float.valueOf(1631.33F);
      Float.valueOf(1630.33F);
      Float.min(1631.33F, 122.54403F);
      wall0.setHeightAtEnd((Float) null);
      wall1.getXArcCircleCenter();
      wall0.getXStart();
      wall0.setPattern((TextureImage) null);
      wall0.setPattern((TextureImage) null);
      wall1.getWallAtStart();
      assertEquals((-150982.02F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1630.33F, wall1.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-1.0F), 0.9784496F, (-265.3059F), 0.9784496F);
      Wall wall1 = new Wall((-1.0F), (-265.3059F), (-265.3059F), 1090.35F, (-265.3059F));
      wall1.setYEnd(2.0F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXEnd(1.0F);
      wall1.getPoints();
      wall0.containsPoint(2.0F, 0.9784496F, (-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Wall wall0 = new Wall(1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F, 1630.33F);
      boolean boolean0 = wall0.containsPoint(1630.33F, 1630.33F, 1630.33F);
      wall0.getLeftSideTexture();
      boolean boolean1 = wall0.intersectsRectangle(1630.33F, 1630.33F, 757.543F, (-225.89F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
