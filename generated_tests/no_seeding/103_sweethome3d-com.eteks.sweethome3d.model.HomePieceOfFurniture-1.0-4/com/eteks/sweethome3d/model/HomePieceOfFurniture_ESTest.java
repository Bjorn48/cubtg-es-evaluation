/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:50:56 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Comparator;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isTopRightPointAt((-744.266F), 3971.5732F, 1.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homeLight0.isBottomLeftPointAt((-1.0F), 0.0F, (-319.403F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("68DQw)B+Hpo0fy~v", propertyChangeListener0);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 2048.318F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 2060.3196F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Super class isn't cloneable", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("q/#%\"/FM}dgm$M}P%%", propertyChangeListenerProxy0);
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, (-720.5663F));
      homeLight0.isPointAt(0.0F, (-1303.0F), 2.0F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight((String) null, "q/#%\"/FM}dgm$M}P%%", ")iX", (Content) null, (Content) null, (Content) null, 1330.356F, 1330.356F, 1.5793494F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(")iX", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(")iX", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1330.356F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1330.356F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(665.178F, homeLight0.getY(), 0.01F);
      assertEquals(665.178F, homeLight0.getX(), 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)124;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)2, (byte)83, (byte)3, (byte)124}, byteArray0);
      assertFalse(boolean0);
      
      homeLight0.setX(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(")iX", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1330.356F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1330.356F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(665.178F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(")iX", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1330.356F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1330.356F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(665.178F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(2.0F, 0.25F, 1.5793494F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(")iX", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1330.356F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1330.356F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(665.178F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isNameVisible();
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(")iX", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1330.356F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1330.356F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(665.178F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = homeLight0.isBottomRightPointAt(1.5793494F, 2.0F, 1.5793494F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(")iX", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1330.356F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1330.356F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(665.178F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = homeLight0.isBottomRightPointAt((byte)83, (byte)3, (byte)3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(")iX", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1330.356F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1330.356F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(665.178F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      LightSource lightSource0 = new LightSource((-3052.6924F), (-3052.6924F), (-3052.6924F), (-1700), float0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, 2.0F, 80.53F, 436.76007F, (-2.5580041F), false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow0.getPrice();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 2.0F, 424.1F, 0.0F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      TextStyle textStyle0 = new TextStyle(1330.356F, true, false);
      homeDoorOrWindow0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setDepth(3.4028235E38F);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(738.0438F, (-3050.9814F), 2252.8123F, (-1700), float0);
      LightSource lightSource1 = new LightSource(2414.194F, (-2891), 0.0F, (-250), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("n2'3#1", ":fbi4ni7", "n2'3#1", (Content) null, (Content) null, (Content) null, 2252.8123F, (-2891), 2.0F, (-1700.0F), true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX((-250));
      homeLight0.getStaircaseCutOutShape();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getLevel();
      homeLight0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-2842));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, (-0.96685743F), (-0.96685743F), (-0.96685743F), (-0.96685743F), false, (-2842), (-0.96685743F), sashArray0, integer0, (float[][]) null, false, (-0.96685743F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      lightSourceArray0[1] = lightSourceArray0[0];
      Sash[] sashArray0 = new Sash[0];
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1.5793494F;
      floatArray1[1] = 302.774F;
      floatArray1[2] = (float) (-484);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 302.774F;
      floatArray2[1] = 1330.356F;
      floatArray2[2] = 424.1F;
      floatArray2[3] = 1.5793494F;
      floatArray2[4] = (-287.9F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 1156.577F;
      floatArray3[2] = 302.774F;
      floatArray3[3] = 2.0F;
      floatArray3[4] = 2213.4F;
      floatArray3[5] = 1.5793494F;
      floatArray3[6] = 1156.577F;
      floatArray3[7] = (float) (-484);
      floatArray0[2] = floatArray3;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)12;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "8/oS/OzbxV5{", "com.eteks.sweethome3d.model.HomePieceOfFurniture$1", (Content) null, (Content) null, (Content) null, 1156.577F, 80.53F, 302.774F, 2.0F, false, lightSourceArray0, floatArray0, "u<", true, true, false, bigDecimal0, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3052.7693F), 0.0F, (-3052.7693F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 0.0F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3052.7693F), true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setNameVisible(false);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setNameVisible(false);
      homeLight1.setShininess(float0);
      homeLight1.getStaircaseCutOutShape();
      homeLight2.setNameXOffset(0.0F);
      Integer integer0 = new Integer((-1700));
      homeLight0.getStaircaseCutOutShape();
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1700), (-2754.71F), (-3524.1F));
      boolean boolean1 = homeLight2.isPointAt((-286.9F), (-1700), (-606.487F));
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      homeLight0.isTexturable();
      homeLight2.getDepth();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tOLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "hg", (Content) null, (Content) null, (Content) null, 3.4028235E38F, (-1.0F), 2048.318F, 3.4028235E38F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(141.7F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setNameYOffset(1020.9385F);
      homeLight1.getLevel();
      homeLight0.setModelMirrored(true);
      homeLight1.getName();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.intersectsRectangle((-0.032138787F), (-0.032138787F), (-904.13885F), (-904.13885F));
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getCatalogId();
      homeLight0.setVisible(false);
      homeLight0.getColor();
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, 2253.0F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      Float.min(3077.213F, 0.0F);
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.valueOf(3185L);
      CatalogLight catalogLight0 = new CatalogLight((String) null, "IA4,[iTA;", "com.eteks.sweethome3d.model.HomeTexture", (Content) null, (Content) null, (Content) null, (-1586.5284F), (-1109.0F), 4042.6003F, 0.0F, false, lightSourceArray0, (float[][]) null, "rEyE^S5", false, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.setDescription("IA4,[iTA;");
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setX(4042.6003F);
      Level level0 = new Level("COLOR", (-1709.5F), (-1214.7189F), (-1586.5284F));
      homeLight2.isAtLevel(level0);
      homeLight1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("", 0.0F, 1262.0F, 0.0F);
      homeLight0.setLevel(level0);
      Level level1 = new Level("COLOR", 0.0F, 0.0F, 0.0F);
      homeLight0.isAtLevel(level1);
      homeLight0.getAngle();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("COLOR", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListenerProxy0);
      homeLight0.setName("COLOR");
      homeLight0.getIcon();
      homeLight0.containsPoint(0.0F, 3.4028235E38F, 3.4028235E38F);
      homeLight0.isTopLeftPointAt(0.5F, 0.0F, 0.5F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isDoorOrWindow();
      homeLight0.isTopRightPointAt(2048.318F, (-1066.91F), 2.0F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("COLcH", "COLcH", "COLcH", (Content) null, (Content) null, (Content) null, (-22.0F), (-22.0F), (-22.0F), (-22.0F), false, lightSourceArray0, (float[][]) null, "COLcH", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle((-22.0F));
      homeLight0.setDescription("COLcH");
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setTexture((HomeTexture) null);
      Level level0 = new Level("q/#%\"/FM}dgm$M}P%%", 0.5F, 0.0F, (-3050.9814F));
      Level level1 = level0.clone();
      homeLight0.isAtLevel(level1);
      homeLight0.setDescription("94{vi8QY;O");
      homeLight0.intersectsRectangle((-3050.9814F), 1330.356F, 1330.356F, (-390.8F));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      Level level0 = new Level((String) null, (-0.03214F), (-0.03214F), (-0.03214F));
      BigDecimal bigDecimal0 = new BigDecimal(821.2138F);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "$VALUES", (Content) null, (Content) null, 2764.0F, 821.2138F, (-0.03214F), 2764.0F, true, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setLevel(level0);
      Level level1 = new Level("$VALUES", 0.5F, 1905.316F, (-0.03214F));
      homeLight0.isAtLevel(level1);
      homeLight0.getGroundElevation();
      homeLight0.isPointAt((-0.03214F), (-0.03214F), 2763.9678F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "COLOR";
      stringArray0[1] = "xd3S]CHm5Hp";
      stringArray0[2] = "COLOR";
      stringArray0[3] = "COLOR";
      stringArray0[4] = "ir*X>v[; C";
      stringArray0[5] = "xd3S]CHm5Hp";
      Long long0 = Long.getLong("xd3S]CHm5Hp", 0L);
      Float float0 = new Float((-1345.141F));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "ir*X>v[; C", "ir*X>v[; C", "xd3S]CHm5Hp", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 605.487F, 3.0439858F, (-3007.3308F), 605.487F, false, lightSourceArray0, "ecFgAE)1{2JHQBzV1", (float[][]) null, "Y0np7WoN[?Fw{", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getTexture();
      // Undeclared exception!
      try { 
        homeLight1.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-2842));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, (-0.96685743F), (-0.96685743F), (-0.96685743F), (-0.96685743F), false, (-2842), (-0.96685743F), sashArray0, integer0, (float[][]) null, false, (-0.96685743F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getLevel();
      homeDoorOrWindow0.setLevel((Level) null);
      homeDoorOrWindow0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "hg", (Content) null, (Content) null, (Content) null, 3.4028235E38F, (-1.0F), (-3050.9814F), 3.4028235E38F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(141.7F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isNameCenterPointAt((-1700), (-1542.567F), (-1542.567F));
      homeLight1.isNameCenterPointAt(141.7F, 3.4028235E38F, 0.0F);
      Level level0 = new Level("hg", 286.9F, (-3050.9814F), 0.5F);
      homeLight0.getStaircaseCutOutShape();
      homeLight2.containsPoint((-1542.567F), 1998.03F, 1979.3644F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1678));
      assertNotNull(float0);
      assertEquals((-1678.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1678), float0);
      assertNotNull(lightSource0);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals((-1678), lightSource0.getColor());
      assertEquals((-1678.0F), lightSource0.getDiameter(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1678), float0);
      assertNotNull(lightSource1);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1678.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals((-1678), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertNull(furnitureCategory0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      Content content0 = homeLight0.getModel();
      assertNull(content0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      homeLight0.setDepth((-1678));
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("COLOR", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("COLOR", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertEquals("COLOR", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("#K%RAO@URX", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      homeLight0.setName("COLOR");
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      Content content1 = homeLight0.getIcon();
      assertNull(content1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      boolean boolean0 = homeLight0.containsPoint(0.0F, 3.4028235E38F, 3.4028235E38F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(boolean0);
      
      homeLight0.setAngle(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      homeLight0.getColor();
      homeLight0.containsPoint((-3050.9814F), (-1222.0715F), 0.0F);
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "q/#%\"/FM}dgm$M}P%%", ")iX", (Content) null, (Content) null, (Content) null, 1330.356F, 1330.356F, 1.5793494F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt(2.0F, 0.25F, 1.5793494F);
      homeLight0.isNameVisible();
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      homeLight0.isNameCenterPointAt(1000.3F, 1000.3F, 1000.3F);
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3052.7693F), 0.0F, (-1700), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 0.0F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, (-3052.7693F), 0.0F, 0.0F, (-3052.7693F), true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setNameVisible(false);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setNameVisible(false);
      homeLight1.setShininess(float0);
      homeLight1.getStaircaseCutOutShape();
      homeLight2.setNameXOffset(0.0F);
      Integer integer0 = new Integer(2142566279);
      homeLight1.setColor((Integer) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      homeLight1.setWidth(0.0F);
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Float float0 = new Float((double) 1330.356F);
      LightSource lightSource0 = new LightSource((-1700), 0.0F, 1526.9196F, (-1700), float0);
      Float float1 = new Float(0.0F);
      LightSource lightSource1 = new LightSource(0.5F, 0.0F, 2248.8F, 0, float1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LightSource[] lightSourceArray0 = new LightSource[5];
      lightSourceArray0[0] = lightSource1;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource1;
      CatalogLight catalogLight0 = new CatalogLight("", "", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, (-1700), 1526.9196F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.getStaircaseCutOutShape();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.setX(0.5F);
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.setVisible(false);
      HomeLight homeLight4 = homeLight3.clone();
      homeLight3.isTopRightPointAt(0.37146938F, (-3050.9814F), (-3050.9814F));
      HomeLight homeLight5 = new HomeLight(catalogLight0);
      homeLight4.isTexturable();
      Random.setNextRandom(1110);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListenerProxy0);
      homeLight0.isBottomLeftPointAt(438.1095F, 2292.27F, (-1785.6F));
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.isBottomLeftPointAt((-1.0F), 0.5F, 0.0F);
      homeLight0.isNameCenterPointAt(0.3926991F, 0.5F, 0.0F);
      homeLight1.getName();
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      MathContext mathContext1 = MathContext.DECIMAL32;
      bigDecimal0.subtract(bigDecimal1, mathContext1);
      homeLight0.getHeight();
      homeLight0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, 1331.1434F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.add(bigDecimal1);
      homeLight0.setNameXOffset((-3050.9814F));
      homeLight0.isNameCenterPointAt((-435.214F), 0.0F, 1331.1434F);
      homeLight0.setNameAngle((-1700));
      homeLight0.setMovable(false);
      homeLight0.isTopLeftPointAt((-1700), (-135.06F), (-3050.9814F));
      homeLight0.getModelRotation();
      homeLight0.getX();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G^lbX}yk38QcB");
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", (String) null, (Content) null, (Content) null, (Content) null, (-1288.3291F), (-366.6F), (-0.032138787F), (-1288.3291F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription((String) null);
      homeLight0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Sash[] sashArray0 = new Sash[1];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ser~clas isn't ceable", (Content) null, (Content) null, 1.558279F, 3214.4146F, (-1.0F), 3214.4146F, true, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, true, (-1.0F), true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer integer1 = new Integer((-1700));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Wnv", (Content) null, (Content) null, 3214.4146F, (-1921.9F), (-586.655F), (-1700), true, true, integer1, (float[][]) null, true, 3.4028235E38F, true);
      catalogDoorOrWindow0.compareTo(catalogPieceOfFurniture0);
      homeDoorOrWindow0.setX(1.558279F);
      homeDoorOrWindow0.isBottomRightPointAt(1.558279F, 3214.4146F, (float) integer1);
      homeDoorOrWindow0.isTopLeftPointAt((-600.49097F), 430.0F, 1742.58F);
      homeDoorOrWindow0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.setDescription("COLOR");
      homeLight0.setX(0.5F);
      HomeLight homeLight3 = homeLight1.clone();
      homeLight3.isNameCenterPointAt(0.0F, 0.0F, 1.0F);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("`iRa';$CmfU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.`iRa';$CmfU
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.setNameAngle(0.0F);
      homeLight0.getPrice();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[9];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLO", "COLO", "COLO", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, "COLO", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setX(0.5F);
      homeLight1.setMovable(false);
      homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isBottomLeftPointAt(0.5F, 0.37146938F, 0.3926991F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1714));
      LightSource lightSource0 = new LightSource(0.0F, (-1714), 0.0F, (-1714), float0);
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, 1480.8F, (-2891), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 85.8F, 1330.356F, (-2891), true, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight1.clone();
      HomeLight homeLight3 = new HomeLight(homeLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight2.setNameAngle(2781.9043F);
      homeLight1.setMovable(true);
      homeLight3.isTopLeftPointAt((-1255.3147F), (-0.7804F), 0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomRightPointAt((-0.7804F), (-1018.6007F), (-2019.0F));
      homeLight3.getElevation();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032F), (-0.032F), (-0.032F), (-0.032F), true, lightSourceArray0, (float[][]) null, "tOLEOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isNameCenterPointAt((-0.032F), (-0.032F), (-0.032F));
      homeLight1.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "hg", (Content) null, (Content) null, (Content) null, (-3050.9814F), (-1.0F), (-3050.9814F), (-3050.9814F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("c*[0|{xB lK=E", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("s-,>byg&k@", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy1);
      homeLight0.setName("dV(,");
      homeLight0.getIcon();
      homeLight0.setAngle(0.3926991F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1346.4564F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "q/#%\"/FM}dgm$M}P%%", ")iX", (Content) null, (Content) null, (Content) null, 1346.4564F, 1346.4564F, 1.5793494F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)3;
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = new HomeLight(homeLight1);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight2.setNameVisible(true);
      HomeLight homeLight4 = homeLight3.clone();
      homeLight2.isTexturable();
      homeLight2.setNameAngle((-3643.3132F));
      homeLight4.getNameAngle();
      homeLight0.getNameXOffset();
      homeLight1.setAngle((-610.644F));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = false;
      LightSource[] lightSourceArray0 = new LightSource[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032F), (-0.032F), (-0.032F), (-0.032F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-0.032F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setHeight((-0.032138787F));
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.MOVABLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("COLOR", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListenerProxy0);
      homeLight0.setName("COLOR");
      homeLight0.getIcon();
      homeLight0.containsPoint(0.0F, 3.4028235E38F, 3.4028235E38F);
      homeLight0.setAngle(0.0F);
      homeLight0.setShininess((Float) null);
      homeLight0.setDescription("com.eteks.sweethome3d.model.FurnitureCategory");
      homeLight0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1331.1434F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      Float.max((-0.7804F), 0.5F);
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.setNameAngle(0.0F);
      homeLight0.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float((double) 1330.356F);
      LightSource lightSource0 = new LightSource((-1700), 0.0F, 1526.9196F, (-1700), float0);
      Float float1 = new Float(0.0F);
      LightSource lightSource1 = new LightSource(0.5F, 0.0F, 2248.8F, (-1700), float1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LightSource[] lightSourceArray0 = new LightSource[5];
      lightSourceArray0[0] = lightSource1;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource1;
      CatalogLight catalogLight0 = new CatalogLight("", "", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, (-1700), 1526.9196F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.getStaircaseCutOutShape();
      HomeLight homeLight3 = new HomeLight(homeLight0);
      homeLight2.getStaircaseCutOutShape();
      homeLight1.isMovable();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 2048.318F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomLeftPointAt(1303.9838F, 2.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      homeLight0.isBottomRightPointAt(0.5F, (-945.14F), 0.0F);
      homeLight0.isPointAt(2059.0793F, (-4.6670823F), 422.17413F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getCatalogId();
      homeLight0.getNameAngle();
      homeLight0.getWidth();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = 0.0F;
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float1 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float1);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1331.1434F, 0.0F, (-1700), float1);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-1700));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("6%U?", "6%U?", "6%U?", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "6%U?", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1000.3F, 1000.3F, 1000.3F);
      bigDecimal0.ulp();
      homeLight0.isTopLeftPointAt(0.032138787F, 0.032138787F, 1.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, 2.0F, 3215.2395F, (-1.0F), 3215.2395F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setWidth(388.9755F);
      Integer.max((-471), (-1700));
      homeDoorOrWindow0.setX(2.0F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt(2.0F, 3215.2395F, (-471));
      homeDoorOrWindow1.setVisible(false);
      homeDoorOrWindow0.setColor(integer0);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("Super clas isn't cloeable");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.Super clas isn't cloeable
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      homeLight0.setMovable(true);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("tLOR", "tLOR", "tLOR", (Content) null, (Content) null, (Content) null, (-0.03214F), (-0.03214F), (-0.03214F), (-0.03214F), true, lightSourceArray0, (float[][]) null, "tLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt((-0.03214F), (-0.03214F), (-0.03214F));
      homeLight0.setDescription("VISIBLE");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1331.1434F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      Float.max((-0.7804F), 0.5F);
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.5F);
      homeLight0.getStaircaseCutOutShape();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.add(bigDecimal1);
      homeLight0.setNameXOffset((-3050.9814F));
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.setNameAngle(0.0F);
      homeLight0.setMovable(false);
      homeLight0.isTopLeftPointAt(490.37F, 0.5F, 448.63348F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q/#%\"/FM}dgm$M}P%%");
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 1.5793494F, 1.5793494F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getName();
      Integer integer0 = new Integer(1);
      homeLight0.setColor(integer0);
      // Undeclared exception!
      try { 
        homeLight0.setWidth(2.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset((-0.032138787F));
      homeLight0.setModelMirrored(true);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(0.0F, (-1700), 21.797253F, (-1700), float0);
      Float.min(1330.356F, 448.63348F);
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, 1480.8F, (-2891), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 21.797253F, 85.8F, 1330.356F, (-2891), true, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      HomeLight homeLight3 = new HomeLight(homeLight0);
      homeLight3.isNameCenterPointAt(1330.356F, (-1018.6007F), 0.5F);
      homeLight1.setNameAngle(2781.9043F);
      homeLight0.setMovable(false);
      homeLight3.isTopLeftPointAt((-1255.3147F), (-2891), 21.797253F);
      homeLight3.setDepth(1.0F);
      homeLight1.setNameYOffset(0.0F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float((-0.96685743F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = new BigDecimal(175L);
      CatalogLight catalogLight0 = new CatalogLight(".VUUnCa4M]TTFT)r;3", "oSy ?V:hv", "M:B,>DS`;8!", (Content) null, (Content) null, (Content) null, (-2842), (-2842), (-1.0F), (-2365.7F), true, lightSourceArray0, "M:B,>DS`;8!", (float[][]) null, ".VUUnCa4M]TTFT)r;3", true, true, false, bigDecimal0, bigDecimal0, ".VUUnCa4M]TTFT)r;3");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight0.setShininess((Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      lightSourceArray0[1] = lightSourceArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 1.5793494F, 1.5793494F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      CatalogLight catalogLight1 = new CatalogLight("~6@ZDv,:l", "", "~6@ZDv,:l", (Content) null, (Content) null, (Content) null, (-3050.9814F), (-1038.027F), (-1038.027F), 0.5F, false, lightSourceArray0, (float[][]) null, "~6@ZDv,:l", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getName();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "hg", "hg", (Content) null, (Content) null, (Content) null, 1477.53F, (-1.0F), 3.4028235E38F, (-1.0F), false, lightSourceArray0, (float[][]) null, (String) null, true, true, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset(2424.8474F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isNameCenterPointAt((-775.0F), (-1.0F), (-1.0F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getName();
      homeLight1.setHeight((-1700));
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Sash[] sashArray0 = new Sash[9];
      Integer integer0 = new Integer((-2842));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("P(:j%=C@", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, (-2842), 0.0F, sashArray0, integer0, (float[][]) null, false, 0.0F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setHeight(3117.711F);
      homeDoorOrWindow0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1331.1434F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      Float.max((-0.7804F), 0.5F);
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.5F);
      homeLight0.getStaircaseCutOutShape();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.add(bigDecimal1);
      homeLight0.setNameXOffset((-3050.9814F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setNameVisible(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTexturable();
      homeLight1.setNameAngle(1.0F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homeLight1.getNameAngle();
      homeLight0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1331.1434F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      Float.max((-0.7804F), 0.5F);
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, (-1.9596578F), (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.5F);
      homeLight0.getStaircaseCutOutShape();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.add(bigDecimal1);
      homeLight0.setNameXOffset((-3050.9814F));
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.setNameAngle(0.0F);
      homeLight0.setMovable(false);
      homeLight0.isTopLeftPointAt(490.37F, 0.5F, 448.63348F);
      homeLight0.getWidth();
      homeLight0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("tLOR", "tLOR", "tLOR", (Content) null, (Content) null, (Content) null, (-0.03214F), (-0.03214F), (-0.03214F), (-0.03214F), false, lightSourceArray0, (float[][]) null, "tLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameStyle((TextStyle) null);
      homeLight0.setName("tLOR");
      homeLight0.isPointAt((-0.03214F), (-0.03214F), (-0.03214F));
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("tLOR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.tLOR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(true);
      homeLight0.getColor();
      homeLight0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", ";&O_Y!o?28un$da.yyy", "", temporaryURLContent0, (Content) null, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 910.36F, false, lightSourceArray0, "", (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, false, false, bigDecimal1, bigDecimal0, "R&D:(iC2KIJ3");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      Content content0 = homeLight1.getModel();
      CatalogLight catalogLight1 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$18", "", temporaryURLContent0, content0, (Content) null, (-666.3F), 0.0F, 910.36F, 0.0F, true, lightSourceArray0, (float[][]) null, ")z!?(vj=;18(8", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.getX();
      homePieceOfFurniture0.move(1.0F, (-3050.9814F));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = 0.0F;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float1 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float1);
      lightSourceArray0[0] = lightSource0;
      float float2 = 0.5F;
      LightSource lightSource1 = new LightSource(1330.356F, (-1700), (-968.09F), (-1700), (Float) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      String string0 = "uby4.$tKTj+:VUL1";
      CatalogLight catalogLight0 = new CatalogLight("", "uby4.$tKTj+:VUL1", "$", (Content) null, (Content) null, (Content) null, 0.0F, (-968.09F), 1042.0F, 1042.0F, false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      HomeTexture homeTexture0 = null;
      homeLight0.getIcon();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(3059L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("*B", (String) null, "lKu-^jTu/IlA@", (Content) null, (Content) null, (Content) null, 2576.2F, 0.0F, 0.0F, 0.0F, false, 1042.0F, (-3614.0F), sashArray0, (float[][]) null, "\"Y81,p", false, true, false, bigDecimal0, bigDecimal1);
      // Undeclared exception!
      try { 
        catalogLight0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.RuleBasedCollator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, 2.0F, 3215.2395F, (-1.0F), 3215.2395F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.getX();
      homePieceOfFurniture0.isDoorOrWindow();
      homeDoorOrWindow0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.clone();
      homeLight0.setX(0.0F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setAngle(0.0F);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1678));
      LightSource lightSource0 = new LightSource(0.0F, 1330.356F, 0.0F, (-1678), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1678), float0);
      lightSourceArray0[1] = lightSource1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setDepth((-1678));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("COLOR", propertyChangeListener0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(homePieceOfFurniture0, "#K%RAO@URX", object0, "<n,`=");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListenerProxy0);
      homeLight0.setName("COLOR");
      homeLight0.getIcon();
      homeLight0.containsPoint(0.0F, 3.4028235E38F, 3.4028235E38F);
      homeLight0.setAngle(0.0F);
      homeLight0.setShininess((Float) null);
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(0.0F, (-1700), (-1700), (-1700));
      lightSourceArray0[1] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.removePropertyChangeListener(propertyChangeListener0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight0.setNameVisible(false);
      HomeLight homeLight4 = homeLight1.clone();
      homeLight2.getStaircaseCutOutShape();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight4.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, (-0.9522846F), 80.53F, 424.1F, 0.0F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.setDescription("COLOR");
      homeLight0.setX(0.5F);
      homeLight0.setNameAngle(2725.9639F);
      homeLight2.setMovable(false);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, 5170.4F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getY();
      homeLight1.setY((-3118.0F));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      float float0 = 2292.27F;
      homeLight0.isBottomLeftPointAt(438.1095F, 2292.27F, (-1785.6F));
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.isBottomLeftPointAt((-1.0F), 0.0F, 0.0F);
      homeLight0.isNameCenterPointAt(0.3926991F, (-1.0F), 0.0F);
      homeLight1.getName();
      homeLight1.setHeight(0.0F);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 2048.318F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomLeftPointAt(0.5F, 2.0F, 2060.3196F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("q/#%\"/FM}dgm$M}P%%", propertyChangeListener0);
      homeLight0.isBottomRightPointAt(2048.318F, 0.0F, 2060.3196F);
      homeLight0.isPointAt(2060.3196F, 0.0F, 545.2414F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 1.5793494F, 1.5793494F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      // Undeclared exception!
      try { 
        homeLight0.setWidth(2.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.0F);
      homeLight0.getCatalogId();
      homeLight0.setVisible(false);
      homeLight0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals((-1700), lightSource1.getColor());
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      homeLight0.setX(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      homeLight0.setNameXOffset(0.0F);
      Integer integer0 = new Integer(71);
      homeLight0.setColor((Integer) null);
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-2798.5F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.isTexturable();
      homeLight0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("COLOR", 0.0F, 1262.4308F, 0.0F);
      homeLight0.setLevel(level0);
      homeLight0.isAtLevel(level0);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032F), (-0.032F), (-0.032F), (-0.032F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX((-0.032F));
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homeLight0.isBottomLeftPointAt((-1.0F), 0.0F, (-319.403F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("68DQw)B+Hpo0fy~v", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("@ALOR", "@ALOR", "@ALOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "@ALOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight0.setNameVisible(false);
      HomeLight homeLight4 = homeLight1.clone();
      homeLight4.getPriceValueAddedTaxIncluded();
      homeLight0.setNameVisible(false);
      homeLight3.isTexturable();
      homeLight0.setNameAngle(665.178F);
      homeLight1.isVisible();
      homeLight3.getTexture();
      homeLight2.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset((-2131.1335F));
      Level level0 = new Level("o'_[.", 0.0F, 0.0F, 0.0F);
      homeLight0.isAtLevel(level0);
      homeLight0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(false);
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("CL@3OR", "CL@3OR", "CL@3OR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "CL@3OR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("CL@3OR", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.setName("CL@3OR");
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setVisible(false);
      homeLight0.setNameXOffset((-2251.11F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.isNameCenterPointAt((-3377.281F), (-2251.11F), (-2251.11F));
      homeLight1.setNameAngle((-2251.11F));
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.getLevel();
      homeLight0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("COLOR", 0.0F, 0.0F, 0.0F);
      homeLight0.setLevel(level0);
      Level level1 = new Level("COLOR", 0.5F, 0.0F, 0.0F);
      homeLight0.isAtLevel(level1);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1331.1434F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      Float.max((-0.7804F), 0.5F);
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.setNameAngle(0.0F);
      MathContext mathContext0 = MathContext.DECIMAL128;
      bigDecimal0.abs(mathContext0);
      homeLight0.setMovable(false);
      homeLight0.getAngle();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(false);
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.setCategory((FurnitureCategory) null);
      homeLight0.getModel();
      homeLight0.setElevation(1.0F);
      homeLight0.isBottomRightPointAt(2281.0F, 0.0F, 1.0F);
      homeLight0.isPointAt(1.0F, 0.0F, 2.0F);
      homeLight0.getCatalogId();
      homeLight0.getNameAngle();
      homeLight0.getIcon();
      homeLight0.isNameCenterPointAt(2281.0F, 0.0F, 0.0F);
      homeLight0.getNameStyle();
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-485), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      homeLight0.setName("applicationSubFolder.Windows");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0Hb],vPC~?");
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight1 = new CatalogLight("NAME", "| u7", "| u7", (Content) null, (Content) null, (Content) null, 2048.318F, (-1.0F), 2048.318F, 2048.318F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal1);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.37146938F);
      homeLight1.clone();
      homeLight0.setVisible(false);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isTopRightPointAt(0.37146938F, 3050.4814F, 3050.4814F);
      HomeLight homeLight3 = null;
      try {
        homeLight3 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow0.getCatalogId();
      homePieceOfFurniture0.getDescription();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 2048.318F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomLeftPointAt(0.5F, 2.0F, 2060.3196F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.OperatingSystem$3", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      homeLight0.setName("");
      homeLight0.getIcon();
      homeLight0.containsPoint((-1700), 0.5F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Sash[] sashArray0 = new Sash[9];
      Integer integer0 = new Integer((-2842));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("P(:j%=C@", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, (-2842), 0.0F, sashArray0, integer0, (float[][]) null, false, 0.0F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setElevation(1.0F);
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, 1.0F);
      homeLight0.isPointAt(1.0F, 0.0F, 2.0F);
      homeLight0.getCatalogId();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      bigDecimal0.max(bigDecimal1);
      homeLight0.getNameAngle();
      homeLight0.getIcon();
      homeLight0.isNameCenterPointAt(0.0F, 0.0F, 0.0F);
      homeLight0.setAngle(960.0F);
      homeLight0.getValueAddedTaxPercentage();
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1331.1434F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.setNameAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((float) (-1702));
      LightSource lightSource0 = new LightSource((-3049.9685F), 1330.356F, (-3049.9685F), (-1702), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1702));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 79.29807F, 424.1F, 0.0F, false, (-1702), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      catalogDoorOrWindow0.getCategory();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1702));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.setName("Super class isn't cloneable");
      homeDoorOrWindow0.getHeight();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1678));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1678), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1678), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setDepth((-1678));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("COLOR", propertyChangeListener0);
      homeLight0.isNameCenterPointAt(0.5F, 2.0F, (-1678));
      homeLight0.isNameVisible();
      homeLight0.isBottomRightPointAt(2851.536F, (-1969.88F), 3.4028235E38F);
      homeLight0.move(0.0F, (-404.293F));
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "hg", (Content) null, (Content) null, (Content) null, 3.4028235E38F, (-1.0F), (-3050.9814F), 3.4028235E38F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(141.7F);
      homeLight0.setNameYOffset(1020.9385F);
      homeLight0.getPriceValueAddedTaxIncluded();
      Level level0 = new Level((String) null, 3.4028235E38F, 141.7F, 1020.9385F);
      homeLight0.setModelMirrored(true);
      homeLight1.getName();
      homeLight1.isNameVisible();
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(0.0F, (-1.0F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(192.0F);
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setName("tOIOR");
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("CL@3OR", "CL@3OR", "CL@3OR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "CL@3OR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setNameYOffset(0.0F);
      homeLight0.setName("CL@3OR");
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("HGqmm)> 9hF", "COLOR", "", (Content) null, (Content) null, (Content) null, 0.0F, (-3081.734F), (-60.209F), (-2.09333F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      homeLight3.setDescription((String) null);
      homeLight0.setX((-60.209F));
      homeLight2.setNameAngle(40.265F);
      homeLight2.setMovable(false);
      homeLight3.isTopLeftPointAt((-60.209F), 0.0F, 0.0F);
      homeLight2.getStaircaseCutOutShape();
      HomeLight homeLight4 = new HomeLight(homeLight1);
      homeLight4.getY();
      homeLight3.setY(2725.9639F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3052.7693F), 0.0F, (-3052.7693F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 0.0F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3052.7693F), true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setNameVisible(false);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setNameVisible(false);
      homeLight1.setShininess(float0);
      homeLight1.getStaircaseCutOutShape();
      homeLight2.setNameXOffset(0.0F);
      Integer integer0 = new Integer((-1700));
      Integer integer1 = Integer.valueOf(2508);
      homeLight1.setColor(integer1);
      homeLight2.setWidth((-2622.1401F));
      homeLight2.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i7b,Z;EsN", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-485), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float0 = new Float((-0.96685743F));
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Long long0 = new Long(604800000L);
      Float float1 = new Float((-0.96685743F));
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = new BigDecimal(763.2039135);
      CatalogLight catalogLight0 = new CatalogLight("Super clas isn't cloeable", "Super clas isn't cloeable", "7Mq%T~_w}b(Yk", "S4Hn/I0T6c#9Q", (String[]) null, long0, float1, (Content) null, (Content) null, (Content) null, (-0.96685743F), (-2842), (-2842), (-2842), true, lightSourceArray0, "Super clas isn't cloeable", (float[][]) null, "S4Hn/I0T6c#9Q", false, true, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.tools.URLContent");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX((-3511.0F));
      homeLight0.setMovable(false);
      homeLight0.isTopLeftPointAt((-3511.0F), 2.0F, (-0.96685743F));
      homeLight1.getGroundElevation();
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.setDescription("COLOR");
      homeLight0.setX(0.5F);
      HomeLight homeLight3 = homeLight1.clone();
      homeLight3.isNameCenterPointAt(0.0F, 0.0F, 1.0F);
      Level level0 = new Level((String) null, 0.0F, 1.0F, 0.0F);
      homeLight0.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032F), (-0.032F), (-0.032F), (-0.032F), true, lightSourceArray0, (float[][]) null, "tOLEOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(17, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertEquals((-0.032F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-0.032F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-0.032F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(17, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertEquals((-0.032F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-0.032F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-0.032F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertEquals((-0.032F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-0.032F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-0.032F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.016F), homeLight0.getX(), 0.01F);
      assertEquals((-0.016F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.032F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.032F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertNull(homeTexture0);
      assertEquals(17, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertEquals((-0.032F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-0.032F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-0.032F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertEquals((-0.032F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-0.032F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-0.032F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.016F), homeLight0.getX(), 0.01F);
      assertEquals((-0.016F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.032F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.032F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      
      homeLight0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(0.0F, 2252.8123F, 0.0F, (-1700), float0);
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, (-3050.9814F), (-2891), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 85.8F, 1330.356F, (-2891), false, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(636.4405F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getLevel();
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomRightPointAt(3214.4146F, 156.4299F, 156.4299F);
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, (-1700), 424.1F, 0.0F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      Integer.max((-484), (-1700));
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("", "Super class isn't cloneable", "/ng{l+z#q~(`n", (Content) null, (Content) null, (Content) null, 424.1F, (-1700), (-484), (-1700), false, lightSourceArray0, (float[][]) null, "[8\"gKCnz_", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(1189.95F, 0.99908334F, 1189.95F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-715827882));
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.0F, (-715827882), 5158);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", (String) null, ",X]U=,IbkY", (Content) null, (Content) null, (Content) null, 0.0F, 1381.0F, 1381.0F, (-3050.9814F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(2.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameXOffset((-3645.4927F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isNameCenterPointAt(0.0F, 1330.356F, (-3645.4927F));
      homeLight0.setNameAngle((-1700));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 27.440994F, 27.440994F, 27.440994F, (-3081.734F), true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setNameAngle(27.440994F);
      homeLight0.setMovable(true);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isTopRightPointAt(0.56629944F, 27.440994F, 1443.0355F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight1 = new CatalogLight("", "7p(X<", "COLOR", (Content) null, (Content) null, (Content) null, 1314.5565F, 3129.967F, 2877.1628F, (-17.5F), true, lightSourceArray0, (float[][]) null, "7p(X<", false, false, false, bigDecimal0, bigDecimal1);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isBottomLeftPointAt((-17.5F), 2048.318F, 2048.318F);
      homeLight1.getLevel();
      homeLight0.getColor();
      Integer integer0 = new Integer(2377);
      homeLight1.setColor(integer0);
      homeLight1.getColor();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setName("COLOR");
      homeLight0.getIcon();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setAngle(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(0.0F, 0.0F, 0.0F);
      homeLight1.isTexturable();
      homeLight1.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't coeable", (Content) null, (Content) null, 2.0F, 3214.4146F, (-1.0F), 3214.4146F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setWidth(392.58246F);
      Integer.max((-471), (-1700));
      homeDoorOrWindow0.setX(2.0F);
      homeDoorOrWindow0.isBottomRightPointAt(2.0F, 3214.4146F, (-471));
      CatalogTexture catalogTexture0 = new CatalogTexture("Super clas isn't coeable", (Content) null, (-471), 358.0F, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeDoorOrWindow0.setTexture(homeTexture0);
      homeDoorOrWindow0.getTexture();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homeLight0.setNameAngle((-3050.9814F));
      homeLight0.setNameAngle(3.4028235E38F);
      homeLight0.setMovable(true);
      homeLight0.isTopLeftPointAt(1147.8804F, 885.7F, (-1.0F));
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isDoorOrWindow();
      homeLight0.isTopRightPointAt(0.5F, 0.0F, 0.0F);
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "hg", (Content) null, (Content) null, (Content) null, 3.4028235E38F, (-1.0F), (-3050.9814F), 3.4028235E38F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(141.7F);
      homeLight0.setNameYOffset(1020.9385F);
      Level level0 = new Level((String) null, 3.4028235E38F, 141.7F, 1020.9385F);
      homeLight0.setModelMirrored(true);
      homeLight1.getName();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "tOLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomRightPointAt(1000.3F, 1000.3F, 1000.3F);
      homeLight0.isNameCenterPointAt(1000.3F, 1000.3F, 1000.3F);
      homeLight0.getColor();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((-320.284F));
      assertNotNull(float0);
      assertEquals((-320.284F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(2.0F, 2.0F, (-11.15829F), 513503332, float0);
      assertNotNull(lightSource0);
      assertEquals((-320.284F), lightSource0.getDiameter(), 0.01F);
      assertEquals(513503332, lightSource0.getColor());
      assertEquals(2.0F, lightSource0.getY(), 0.01F);
      assertEquals(2.0F, lightSource0.getX(), 0.01F);
      assertEquals((-11.15829F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("COLO", "TF", "WBc3&c_P]X1J<[", (Content) null, (Content) null, (Content) null, (-320.284F), (-320.284F), (-320.284F), 0.37146938F, true, lightSourceArray0, (float[][]) null, "applicationSubFolder", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("WBc3&c_P]X1J<[", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-320.284F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getHeight(), 0.01F);
      assertEquals("applicationSubFolder", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("TF", catalogLight0.getName());
      assertEquals("COLO", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("WBc3&c_P]X1J<[", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-320.284F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getHeight(), 0.01F);
      assertEquals("applicationSubFolder", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("TF", catalogLight0.getName());
      assertEquals("COLO", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-320.284F), homeLight0.getWidth(), 0.01F);
      assertEquals((-320.284F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals((-160.142F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-160.142F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.37146938F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.37146938F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-320.284F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("WBc3&c_P]X1J<[", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals("TF", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("COLO", homeLight0.getCatalogId());
      
      Level level0 = new Level("^Nc( {N*_XtL^", (-11.15829F), 617.9F, (-320.284F));
      assertNotNull(level0);
      assertEquals("^Nc( {N*_XtL^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-320.284F), level0.getHeight(), 0.01F);
      assertEquals((-11.15829F), level0.getElevation(), 0.01F);
      assertEquals(617.9F, level0.getFloorThickness(), 0.01F);
      
      homeLight0.setLevel(level0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("WBc3&c_P]X1J<[", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-320.284F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getHeight(), 0.01F);
      assertEquals("applicationSubFolder", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("TF", catalogLight0.getName());
      assertEquals("COLO", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-320.284F), homeLight0.getWidth(), 0.01F);
      assertEquals((-320.284F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals((-160.142F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-160.142F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.37146938F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-320.284F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("WBc3&c_P]X1J<[", homeLight0.getDescription());
      assertEquals((-10.78682F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals("TF", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("COLO", homeLight0.getCatalogId());
      assertEquals("^Nc( {N*_XtL^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-320.284F), level0.getHeight(), 0.01F);
      assertEquals((-11.15829F), level0.getElevation(), 0.01F);
      assertEquals(617.9F, level0.getFloorThickness(), 0.01F);
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("^Nc( {N*_XtL^", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-320.284F), level0.getHeight(), 0.01F);
      assertEquals((-11.15829F), level0.getElevation(), 0.01F);
      assertEquals(617.9F, level0.getFloorThickness(), 0.01F);
      assertEquals("^Nc( {N*_XtL^", level1.getName());
      assertEquals(617.9F, level1.getFloorThickness(), 0.01F);
      assertEquals((-11.15829F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-320.284F), level1.getHeight(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      
      Level level2 = new Level("DESCRIPTION", 2.0F, (-11.15829F), 617.9F);
      assertNotNull(level2);
      assertTrue(level2.isVisible());
      assertEquals("DESCRIPTION", level2.getName());
      assertEquals((-11.15829F), level2.getFloorThickness(), 0.01F);
      assertEquals(617.9F, level2.getHeight(), 0.01F);
      assertEquals(2.0F, level2.getElevation(), 0.01F);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      
      boolean boolean0 = homeLight0.isAtLevel(level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("WBc3&c_P]X1J<[", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-320.284F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getHeight(), 0.01F);
      assertEquals("applicationSubFolder", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("TF", catalogLight0.getName());
      assertEquals("COLO", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-320.284F), homeLight0.getWidth(), 0.01F);
      assertEquals((-320.284F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals((-160.142F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-160.142F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.37146938F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-320.284F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("WBc3&c_P]X1J<[", homeLight0.getDescription());
      assertEquals((-10.78682F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals("TF", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("COLO", homeLight0.getCatalogId());
      assertTrue(level2.isVisible());
      assertEquals("DESCRIPTION", level2.getName());
      assertEquals((-11.15829F), level2.getFloorThickness(), 0.01F);
      assertEquals(617.9F, level2.getHeight(), 0.01F);
      assertEquals(2.0F, level2.getElevation(), 0.01F);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(boolean0);
      
      Float float1 = new Float((-11.15829F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-11.15829F), (float)float1, 0.01F);
      
      float float2 = homeLight0.getGroundElevation();
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("WBc3&c_P]X1J<[", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals((-320.284F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getHeight(), 0.01F);
      assertEquals("applicationSubFolder", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-320.284F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("TF", catalogLight0.getName());
      assertEquals("COLO", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-320.284F), homeLight0.getWidth(), 0.01F);
      assertEquals((-320.284F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertEquals((-160.142F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-160.142F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.37146938F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-320.284F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("WBc3&c_P]X1J<[", homeLight0.getDescription());
      assertEquals((-10.78682F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals("TF", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("COLO", homeLight0.getCatalogId());
      assertEquals((-10.78682F), float2, 0.01F);
      
      homeLight0.getShininess();
      homeLight0.getLevel();
      Integer integer0 = new Integer(6);
      homeLight0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getLevel();
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(0.0F, (-1700), 0.0F, (-1700), float0);
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, 1480.8F, (-2891), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 85.8F, 1330.356F, (-2891), true, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = new HomeLight(homeLight0);
      HomeLight homeLight4 = new HomeLight(homeLight0);
      homeLight4.isNameCenterPointAt((-0.7804F), (-1018.6007F), 0.5F);
      homeLight2.setNameAngle(2781.9043F);
      homeLight1.setMovable(false);
      homeLight4.isTopLeftPointAt((-1255.3147F), (-0.7804F), 0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight1.isDoorOrWindow();
      homeLight4.isTopRightPointAt(85.8F, 1383.3F, (-296.645F));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.toBigInteger();
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, (-0.47410527F), (-0.47410527F), (-0.47410527F), (-0.47410527F), true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setElevation(1.0F);
      homeLight0.isBottomRightPointAt((-0.47410527F), (-0.47410527F), 1.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("");
      Level level0 = new Level("C*R0U", 1.0F, 3.2742434F, (-1535.2526F));
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.setModelMirrored(false);
      homeLight3.getDescription();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "91a.{8Miz,", "|I!U2K>mUn+", (Content) null, (Content) null, (Content) null, 1.5793494F, 2530.89F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, ")Lq=r", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getStaircaseCutOutShape();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      HomeLight homeLight4 = new HomeLight(homeLight3);
      HomeLight homeLight5 = new HomeLight(homeLight3);
      homeLight5.setNameVisible(true);
      HomeLight homeLight6 = new HomeLight(homeLight2);
      homeLight6.clone();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight4.setNameVisible(false);
      homeLight5.isTexturable();
      homeLight6.setNameAngle(1.0F);
      homeLight1.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(1.5793494F, 0.0F, (-3050.9814F), (-1700));
      lightSourceArray0[1] = lightSourceArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 1.5793494F, 1.5793494F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt(0.0F, (-3615.14F), 448.63348F);
      homeLight0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.CatalogTexture", "com.eteks.sweethome3d.model.CatalogTexture", "com.eteks.sweethome3d.model.CatalogTexture", (Content) null, (Content) null, (Content) null, 1.0413905F, 1.0413905F, 1.0413905F, 1.0413905F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.CatalogTexture", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1.0413905F, 1650.0F, 1.0413905F);
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "COLOR";
      Content content0 = null;
      float float0 = 0.0F;
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float1 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float1);
      lightSourceArray0[0] = lightSource0;
      float float2 = 0.5F;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float1);
      lightSourceArray0[1] = lightSource1;
      float[][] floatArrayArray0 = null;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      String string1 = "r";
      float float3 = 0.0F;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("tLOR", "tLOR", "tLOR", (Content) null, (Content) null, (Content) null, (-0.03214F), (-0.03214F), (-0.03214F), (-0.03214F), false, lightSourceArray0, (float[][]) null, "tLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt((-0.03214F), (-0.03214F), (-0.03214F));
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1000.3F, 1000.3F, 1000.3F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setTexture((HomeTexture) null);
      Level level0 = new Level("q/#%\"/FM}dgm$M}P%%", 0.5F, 0.0F, (-3050.9814F));
      Level level1 = level0.clone();
      homeLight0.isAtLevel(level1);
      homeLight0.getCatalogId();
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("a", "a", "a", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, (-1711.6445F), 0.0F, true, lightSourceArray0, (float[][]) null, "a", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.containsPoint(3.4028235E38F, (-980.1117F), 0.0F);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(0.0F, (-1700), 21.797253F, (-1700), float0);
      Float.min(1330.356F, 448.63348F);
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, 1480.8F, (-2891), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 21.797253F, 85.8F, 1330.356F, (-2891), true, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = new HomeLight(homeLight0);
      homeLight3.isNameCenterPointAt(448.63348F, 1480.8F, (-1018.6007F));
      homeLight0.setMovable(false);
      homeLight2.isTopLeftPointAt((-1018.6007F), (-1255.3147F), (-200.80371F));
      homeLight1.setDepth(85.8F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "hg", (Content) null, (Content) null, (Content) null, 3.4028235E38F, (-1.0F), (-3050.9814F), 3.4028235E38F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(141.7F);
      homeLight0.setNameYOffset(1020.9385F);
      Level level0 = new Level((String) null, 3.4028235E38F, 141.7F, 1020.9385F);
      homeLight0.setModelMirrored(true);
      homeLight1.getName();
      homeLight1.setHeight(3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      LightSource[] lightSourceArray0 = new LightSource[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource lightSource0 = new LightSource(0.37146938F, 0.0F, (-5477.4395F), (-3250));
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", ".tmp", "q#bk", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.0F, false, lightSourceArray0, (float[][]) null, "b6(Ka", true, bigDecimal0, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(0.37146938F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setVisible(false);
      homeLight2.clone();
      homeLight1.isTopRightPointAt(0.37146938F, (-5477.4395F), 0.37146938F);
      homeLight0.setVisible(false);
      homeLight2.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = 1000.3F;
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(1000.3F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(3808.4844F, 4.8801794F, 4.8801794F);
      homeLight0.setDescription("COLOR");
      homeLight0.setX(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight0.getPrice();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, 2.0F, (-2.5580041F), (-1.0F), (-2.5580041F), false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homeDoorOrWindow0.setColor(integer0);
      homePieceOfFurniture0.setAngle(294.39313F);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.getX();
      homePieceOfFurniture0.setAngle(1.0F);
      homeDoorOrWindow0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "com.eteks.sweethome3d.model.CatalogDoorOrWindow";
      stringArray0[1] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$15";
      stringArray0[2] = "";
      stringArray0[3] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$15";
      stringArray0[4] = "com.eteks.sweethome3d.model.CatalogDoorOrWindow";
      stringArray0[5] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$15";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource(2223.31F, (-549.1569F), 2.0F, (-2144752053));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(880.0306F, (-549.1569F), 2.0F, 33);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-2144752053), 1863.398F, 2223.31F, 513503332, (Float) null);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-3520.0F), 0.3926991F, 880.0306F, 8192);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$15", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", "", stringArray0, (Long) null, (Float) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-549.1569F), (-549.1569F), 880.0306F, 880.0306F, true, lightSourceArray0, "O(%", (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$15", true, true, true, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$15");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homePieceOfFurniture0.getValueAddedTax();
      homeDoorOrWindow0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-485), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.intersectsRectangle(0.0F, 1.5793494F, (-2798.5F), 424.1F);
      homePieceOfFurniture0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("CL@3OR", "CL@3OR", "CL@3OR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "CL@3OR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2841.5166F);
      homeLight0.getModel();
      homeLight0.setName("CL@3OR");
      homeLight0.clone();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("WIDTH", "COLOR", "WIDTH", (Content) null, (Content) null, (-4495.0F), (-1101.1171F), 1235.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "MODEL_MIRRORED", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash((-514.747F), 0.81969535F, (-514.747F), 0.0F, 1235.5F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-4495.0F), 193.3822F, (-1037.81F), 3.3100991F, 1.0F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-4495.0F), 392.63544F, 2870.7883F, (-1574.5131F), 0.0F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(193.3822F, (-1101.1171F), (-3081.734F), (-980.425F), 0.81969535F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-1574.5131F), (-179.93692F), 15.376221F, 2870.7883F, 0.0F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(0.81969535F, (-1776.4F), 1168.5F, (-1776.4F), 1100.4F);
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(0.0F, (-728.0942F), (-1574.5131F), (-2913.719F), 0.0F);
      sashArray0[6] = sash6;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("COLOR", ")d*bWdozJ!O@", ")d*bWdozJ!O@", (Content) null, (Content) null, (Content) null, 0.0F, (-3081.734F), (-3081.734F), (-1101.1171F), false, 0.0F, (-3081.734F), sashArray0, (float[][]) null, "P|K#,*yaCB&Rc#c^g$J", true, false, false, bigDecimal0, bigDecimal0, "q/#%\"/FM}dgm$M}P%%");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-678.84314F));
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3052.7693F), 0.0F, (-3052.7693F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-3052.7693F), lightSource0.getZ(), 0.01F);
      assertEquals((-3052.7693F), lightSource0.getX(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 0.0F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3052.7693F), true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3052.7693F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-3052.7693F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight1.setNameVisible(false);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-3052.7693F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-3052.7693F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("COLOR", homeLight2.getName());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-3052.7693F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals((-3052.7693F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      homeLight0.setNameVisible(false);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3052.7693F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      homeLight1.setShininess(float0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1700.0F), homeLight1.getShininess(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-3052.7693F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      String string0 = homeLight1.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1700.0F), homeLight1.getShininess(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-3052.7693F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight2.setNameXOffset(0.0F);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1700.0F), homeLight1.getShininess(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-3052.7693F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("COLOR", homeLight2.getName());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-3052.7693F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals((-3052.7693F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      Integer integer0 = new Integer(2142566279);
      assertNotNull(integer0);
      assertEquals(2142566279, (int)integer0);
      
      homeLight1.setColor((Integer) null);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1700.0F), homeLight1.getShininess(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-3052.7693F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight1.setWidth(0.0F);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1700.0F), homeLight1.getShininess(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-3052.7693F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      BigDecimal bigDecimal1 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)2, bigDecimal1.byteValue());
      assertEquals((short)2, bigDecimal1.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-3052.7693F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3052.7693F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3052.7693F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      homeLight1.isResizable();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float(0.0F);
      LightSource lightSource0 = new LightSource((-1700), (-1.0F), (-1.0F), (-1700), float0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LightSource[] lightSourceArray0 = new LightSource[7];
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      lightSourceArray0[3] = lightSource0;
      lightSourceArray0[4] = lightSource0;
      lightSourceArray0[5] = lightSource0;
      lightSourceArray0[6] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("", "t;A|5.C\"~5el", "", (Content) null, (Content) null, (Content) null, 94.1424F, 3.4028235E38F, 4.0364747F, 2.0F, false, lightSourceArray0, (float[][]) null, "1RIBKAC", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt((-907.567F), (-1700), 0.3926991F);
      homeLight0.getCatalogId();
      homeLight0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, (-3109.6255F), 3919.0F, (-3109.6255F), (-3109.6255F), true, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setName((String) null);
      homeLight0.getIcon();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setAngle(0.112845264F);
      homeLight0.clone();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1696));
      LightSource lightSource0 = new LightSource((-3050.9814F), 565.33795F, (-3050.9814F), (-1696), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 565.33795F, 0.0F, (-1696), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(4128.131F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.isResizable();
      Integer integer0 = new Integer((-1696));
      homeLight0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1235.5F, 0.0F, 1235.5F);
      homeLight0.setNameAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle((-0.032138787F));
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.setX(0.5F);
      homeLight1.clone();
      homeLight0.setVisible(true);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isTopRightPointAt(0.5F, 1577.1F, 3992.615F);
      HomeLight homeLight3 = null;
      try {
        homeLight3 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(0.0F, (-1700), 0.0F, (-1700), float0);
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, 1480.8F, (-2891), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 85.8F, 1330.356F, (-2891), true, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(636.4405F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameYOffset((-1424.0391F));
      homeLight0.getLevel();
      homeLight0.setModelMirrored(true);
      homeLight0.getName();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setHeight(0.0F);
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isPointAt(0.0F, (-1.0F), 0.0F);
      Integer integer0 = new Integer(472);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 1.5793494F, 1.5793494F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("NWCuBt-y;Z~RH'Vv`,");
      catalogLight0.setCategory(furnitureCategory0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getValueAddedTaxPercentage();
      // Undeclared exception!
      try { 
        homeLight0.setWidth(2.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setDescription("COLOR");
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setX(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setName("");
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      System.setCurrentTimeMillis((-1406L));
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.LEVEL;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("temp", (String) null, (Content) null, 1610.2122F, (-1406L), "temp");
      assertNotNull(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("temp", catalogTexture0.getCreator());
      assertEquals("temp", catalogTexture0.getId());
      assertEquals((-1406.0F), catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getName());
      assertEquals(1610.2122F, catalogTexture0.getWidth(), 0.01F);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("temp", catalogTexture0.getCreator());
      assertEquals("temp", catalogTexture0.getId());
      assertEquals((-1406.0F), catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getName());
      assertEquals(1610.2122F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(1610.2122F, homeTexture0.getWidth(), 0.01F);
      assertEquals((-1406.0F), homeTexture0.getHeight(), 0.01F);
      assertNull(homeTexture0.getName());
      
      homeLight0.setTexture(homeTexture0);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("temp", catalogTexture0.getCreator());
      assertEquals("temp", catalogTexture0.getId());
      assertEquals((-1406.0F), catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getName());
      assertEquals(1610.2122F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(1610.2122F, homeTexture0.getWidth(), 0.01F);
      assertEquals((-1406.0F), homeTexture0.getHeight(), 0.01F);
      assertNull(homeTexture0.getName());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "tOLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(1000.3F);
      homeLight0.isNameCenterPointAt(1000.3F, 1000.3F, 1000.3F);
      homeLight0.getColor();
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = true;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "hg", (Content) null, (Content) null, (Content) null, (-3050.9814F), (-1.0F), (-3050.9814F), (-3050.9814F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.clone();
      homeLight0.setVisible(true);
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(2523.2617F, 761.02203F, 761.02203F, (-720.07117F), (-720.07117F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-459.95618F), 2523.2617F, 3.4028235E38F, 1852.1549F, 3.4028235E38F);
      sashArray0[1] = sash1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, "", "hg", (Content) null, (Content) null, (Content) null, 761.02203F, (-3050.9814F), (-3050.9814F), 761.02203F, true, (-2658.8F), (-2658.8F), sashArray0, (float[][]) null, (String) null, true, true, false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer integer0 = new Integer(2);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.move(221.57F, 221.57F);
      homeLight0.setModelMirrored(true);
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomeLight", ":\"[p'c/hfAGU:HAU=", "T1m;jm#X", (Content) null, (Content) null, (Content) null, 0.0F, 1898.1581F, (-991.76F), 581.09F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameVisible(false);
      homeLight1.clone();
      homeLight1.getStaircaseCutOutShape();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ELEVATION;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight0.isDoorOrWindow();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homeLight1.setElevation((-991.76F));
      homeLight1.setNameAngle(0.3926991F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight1 = new CatalogLight((String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$15", "com.eteks.sweethome3d.model.HomePieceOfFurniture$15", (Content) null, (Content) null, (Content) null, 364.0F, (-905.2075F), 0.0F, 1.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal1, bigDecimal1);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setX(1.0F);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 2048.318F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomLeftPointAt(0.5F, 2.0F, 2060.3196F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.OperatingSystem$3", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy1);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("COLcR", "COLcR", "COLcR", (Content) null, (Content) null, (Content) null, (-22.0F), (-22.0F), (-22.0F), (-22.0F), false, lightSourceArray0, (float[][]) null, "COLcR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("COLcR");
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = true;
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR;R", "tOLOR;R", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      homeLight0.getGroundElevation();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Float.valueOf((float) (-1700));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, 2.0F, 3215.2395F, (-1.0F), 3215.2395F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-471), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isPointAt(2.150792F, 2.0F, 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt(2.0F, 3215.2395F, (-471));
      homePieceOfFurniture0.setVisible(false);
      homeDoorOrWindow0.setColor(integer0);
      homePieceOfFurniture0.getHeight();
      HomePieceOfFurniture.Property.valueOf("COLOR");
      homeDoorOrWindow0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      homeDoorOrWindow0.isBottomRightPointAt((-484), 0.0F, 424.1F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setMovable(true);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow0.getColor();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.setX(0.5F);
      homeLight1.setMovable(false);
      homeLight0.isTopLeftPointAt(0.37146938F, 0.37146938F, 5171.506F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight0.getElevation();
      homeLight2.clone();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "q/#%\"/FM}dgm$M}P%%", ")iX", (Content) null, (Content) null, (Content) null, 1330.356F, 1330.356F, 1.5793494F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt(2.0F, 0.25F, 1.5793494F);
      homeLight0.isNameVisible();
      homeLight0.isBottomRightPointAt(1.5793494F, 2.0F, 1.5793494F);
      homeLight0.isTopLeftPointAt(2.0F, (-1.0F), (-1264.88F));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setY((-287.9F));
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homeDoorOrWindow0.setX(1.5793494F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeDoorOrWindow0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setMovable(true);
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Float float0 = new Float((-0.96685743F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-2872));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, (-0.96685743F), (-0.96685743F), (-0.96685743F), (-0.96685743F), true, (-2872), (-0.96685743F), sashArray0, integer0, (float[][]) null, true, (-0.96685743F), true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.isBackFaceShown();
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1331.1434F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1331.1434F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.add(bigDecimal1);
      homeLight0.setNameXOffset((-3050.9814F));
      homeLight0.isNameCenterPointAt((-435.214F), 0.0F, 1331.1434F);
      homeLight0.setNameAngle(0.0F);
      homeLight0.setMovable(false);
      homeLight0.isTopLeftPointAt((-1625.4711F), (-135.06F), (-3050.9814F));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setMovable(false);
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) 1330.356F);
      LightSource lightSource0 = new LightSource((-1700), (-1140.0477F), 1330.356F, 3, float0);
      Float float1 = new Float((double) 0.5F);
      LightSource lightSource1 = new LightSource(665.178F, 0.5F, 1431.08F, (-1233), float1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "COLOR", "", (Content) null, (Content) null, (Content) null, 4711.0F, (-1700), 2912.6262F, 1977.2F, false, lightSourceArray0, (float[][]) null, "0Zn7/jG*BN)-", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("");
      homeLight0.setX(1.25F);
      homeLight0.isNameCenterPointAt(187.29F, (-1416.73F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("Z6g(Cp", "Z6g(Cp", "Z6g(Cp", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "Z6g(Cp", false, bigDecimal0, bigDecimal0);
      Level level0 = new Level("Z6g(Cp", 0.18573469F, 3274.802F, 0.18573469F);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setLevel(level0);
      Level level1 = new Level(">7-]ht", 811.15894F, 1.0F, 3.4028235E38F);
      homeLight1.isAtLevel(level1);
      homeLight1.getAngle();
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(0.0F, (-1700), 0.0F, (-1700), float0);
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, 1480.8F, (-2891), float0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 85.8F, 1330.356F, (-2891), true, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = new HomeLight(homeLight0);
      HomeLight homeLight4 = new HomeLight(homeLight0);
      homeLight3.setNameXOffset((-1.0F));
      homeLight1.isNameCenterPointAt((-1018.6007F), (-1018.6007F), (-2891));
      homeLight0.setNameAngle(1.0F);
      homeLight1.setMovable(true);
      homeLight1.getName();
      homeLight2.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homeLight0.isBottomLeftPointAt((-3050.9814F), 0.0F, (-319.403F));
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("68DQw)B+Hpo0fy~v", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight0.setNameVisible(false);
      HomeLight homeLight4 = homeLight1.clone();
      homeLight2.getStaircaseCutOutShape();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight4.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Float float0 = new Float((-0.6029821F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-2872));
      Float.isFinite(2959.9404F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, (-27.959877F), (-0.6029821F), (-0.6029821F), (-0.6029821F), false, (-2872), (-0.6029821F), sashArray0, integer0, (float[][]) null, false, (-0.6029821F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.move(0.5F, 0.37146938F);
      homeLight0.setX(0.5F);
      homeLight1.setMovable(false);
      homeLight0.isTopLeftPointAt(0.37146938F, 0.37146938F, 5171.506F);
      homeLight0.getCatalogId();
      HomePieceOfFurniture.Property homePieceOfFurniture_Property0 = HomePieceOfFurniture.Property.HEIGHT;
      homeLight1.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, (-1698), 0.5F, 0.5F, (-1698), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomLeftPointAt(0.5F, 0.5F, (-1698));
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("com.eteks.sweethome3d.model.TexturesCategory");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.com.eteks.sweethome3d.model.TexturesCategory
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("COLOR", 0.0F, 1262.0F, 0.0F);
      homeLight0.setLevel(level0);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(4327.8296F, 680.0F, 1262.0F, 1.0F, 1331.1434F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, "M<jI=b`U", (String) null, (Content) null, (Content) null, (Content) null, 1262.0F, 680.0F, 1262.0F, 0.0F, false, 0.0F, 680.0F, sashArray0, (float[][]) null, "9Np9", false, false, false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer integer0 = new Integer(1817);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      Float.sum(2932.0F, 2932.0F);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, false, 10.272775F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-485), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.getDescription();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      int int0 = (-1700);
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 1.5793494F, 1.5793494F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameXOffset(2.0F);
      // Undeclared exception!
      try { 
        homeLight0.setWidth(2.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032F), (-0.032F), (-0.032F), (-0.032F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(false);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((float) (-1702));
      LightSource lightSource0 = new LightSource((-3049.9685F), 1330.356F, (-3049.9685F), (-1702), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1702));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 79.29807F, 424.1F, 0.0F, false, (-1702), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-484), (-1702));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.setName("Super class isn't cloneable");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDepth((-0.032138787F));
      homeLight0.isBottomRightPointAt(3214.4146F, 156.4299F, 156.4299F);
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[19];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      CatalogLight catalogLight1 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 1313.2509F, 0.37146938F, 1313.2509F, 1313.2509F, true, lightSourceArray0, (float[][]) null, "COLOR", true, true, true, bigDecimal0, bigDecimal0);
      homeLight0.clone();
      homeLight0.isBottomLeftPointAt(0.37146938F, 0.37146938F, 0.37146938F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[10];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("COLcR", "COLcR", "COLcR", (Content) null, (Content) null, (Content) null, (-22.0F), (-22.0F), (-22.0F), (-22.0F), false, lightSourceArray0, (float[][]) null, "COLcR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("COLcR");
      homeLight0.isBottomLeftPointAt((-22.0F), 1544.24F, 1544.24F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "hg", (Content) null, (Content) null, (Content) null, 3.4028235E38F, (-1.0F), (-3050.9814F), 3.4028235E38F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(141.7F);
      homeLight0.setNameYOffset(1020.9385F);
      Level level0 = new Level((String) null, 3.4028235E38F, 141.7F, 1020.9385F);
      homeLight0.setModelMirrored(true);
      homeLight1.getName();
      homeLight1.isBottomRightPointAt((-1700), 990.9F, 1020.9385F);
      homeLight1.setName((String) null);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1678));
      LightSource lightSource0 = new LightSource(0.0F, 1330.356F, 0.0F, (-1678), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1678), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setDepth((-1678));
      homeLight0.isNameCenterPointAt((-1678), (-3380.5F), 0.0F);
      homeLight0.setDepth(0.0F);
      homeLight0.setNameAngle((-3380.5F));
      homeLight0.setNameYOffset(653.29626F);
      homeLight0.setMovable(false);
      homeLight0.isTopLeftPointAt(1330.356F, 4060.0F, 0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isDoorOrWindow();
      homeLight0.isTopRightPointAt((-1255.3147F), (-1678), (-3380.5F));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("CO{LOR", "CO{LOR", "CO{LOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), true, lightSourceArray0, (float[][]) null, "CO{LOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("CO{LOR");
      BigDecimal.valueOf(0.14126180450414338);
      homeLight0.setX(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't coeable", (Content) null, (Content) null, 2.0F, 3215.2395F, (-1.0F), 3215.2395F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setWidth(2.0F);
      Integer.max((-471), (-1700));
      homeDoorOrWindow0.isBottomRightPointAt(2.0F, 3215.2395F, (-471));
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("Super clas isn't coeable");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.Super clas isn't coeable
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogLight catalogLight0 = new CatalogLight("K0x^ 1{&", "w25&>q#;!ZGo", "OAyn.9Xi@d", (Content) null, (Content) null, (Content) null, (-1.0F), (-1.0F), 0.5F, (-0.032138787F), true, lightSourceArray0, "w25&>q#;!ZGo", (float[][]) null, "w25&>q#;!ZGo", false, true, false, bigDecimal0, bigDecimal0, "K0x^ 1{&");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      Level level0 = new Level((String) null, 546.0F, 0.5F, (-0.032138787F));
      homeLight0.setLevel(level0);
      Level level1 = new Level("hpa>k9w;FfC", 0.3926991F, (-0.032F), (-1.0F));
      homeLight0.isAtLevel(level1);
      homeLight0.getPrice();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[9];
      Integer integer0 = new Integer((-2842));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("P(:j%HC ", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, (-2842), 0.0F, sashArray0, integer0, (float[][]) null, true, 0.0F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setNameXOffset(264.2834F);
      homeDoorOrWindow0.getNameXOffset();
      homeDoorOrWindow0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListenerProxy0);
      homeLight0.setName("COLOR");
      homeLight0.getIcon();
      homeLight0.containsPoint(0.0F, 3.4028235E38F, 3.4028235E38F);
      homeLight0.setNameVisible(true);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = new HomeLight(homeLight0);
      homeLight1.setNameVisible(false);
      homeLight2.setNameAngle(0.0F);
      homeLight2.getNameAngle();
      homeLight2.isTexturable();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-1700));
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt(3.2742434F, 0.0F, (-447.8F));
      homeLight0.isNameVisible();
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0.0F);
      homeLight0.move(0.0F, 1138.0F);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
      homeLight0.isTopLeftPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Float float0 = new Float((-0.6029821F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource((-1.0F), (-1.0F), 520.6F, (-2872));
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal((-2872));
      CatalogLight catalogLight0 = new CatalogLight("Super clas isn't cloeable", "Y", "Y", (Content) null, (Content) null, (Content) null, (-2872), (-1.0F), (-2872), (-0.6029821F), false, lightSourceArray0, "}B\"t/O^#O*V7$f]", (float[][]) null, "Super clas isn't cloeable", false, false, false, bigDecimal0, bigDecimal0, "Super clas isn't cloeable");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = new HomeLight(homeLight0);
      HomeLight homeLight4 = homeLight0.clone();
      homeLight4.clone();
      Float float1 = new Float((float) (-2872));
      // Undeclared exception!
      try { 
        homeLight2.setShininess(float1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("COLOR");
      homeLight0.setX(0.0F);
      homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(1.5793494F, 1330.356F, 1.5793494F, (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 1.5793494F, false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      HomePieceOfFurniture.SortableProperty.valueOf("COLOR");
      homeLight0.getTexture();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "tOLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      homeLight0.isBottomRightPointAt(0.5F, 1660.572F, 1660.572F);
      homeLight0.isNameCenterPointAt(1000.3F, 1000.3F, 1000.3F);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[1];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), (-3050.9814F), (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 2048.318F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.isBottomLeftPointAt(2099.9F, 2099.9F, 3.4028235E38F);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("q/#%\"/FM}dgm$M}P%%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.q/#%\"/FM}dgm$M}P%%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = homeLight0.isBottomLeftPointAt((-1.0F), 0.0F, (-319.403F));
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(boolean0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("68DQw)B+Hpo0fy~v", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("68DQw)B+Hpo0fy~v", propertyChangeListenerProxy0.getPropertyName());
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      BigDecimal bigDecimal1 = homeLight0.getPrice();
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight1.equals((Object)homeLight0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setElevation(1.0F);
      homeLight0.isBottomRightPointAt(1734.0F, 0.0F, 1.0F);
      homeLight0.isPointAt(1.0F, 0.0F, 2.0F);
      homeLight0.getCatalogId();
      homeLight0.getNameAngle();
      homeLight0.getIcon();
      homeLight0.isNameCenterPointAt(1734.0F, 0.0F, 0.0F);
      homeLight0.setDescription("COLOR");
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("COLOR", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((double) (-1678));
      LightSource lightSource0 = new LightSource(0.0F, 1330.356F, 0.0F, (-1678), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1678), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getModel();
      homeLight0.setDepth((-1678));
      homeLight0.isNameCenterPointAt((-1678), (-3380.5F), 0.0F);
      homeLight0.setNameAngle((-3380.5F));
      homeLight0.setMovable(false);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      homeLight2.setNameVisible(false);
      homeLight3.setNameAngle((-802.1095F));
      homeLight0.getNameAngle();
      homeLight0.isTexturable();
      homeLight3.setVisible(false);
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[9];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLO", "COLO", "COLO", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, "COLO", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("", (-1135.3F), 2499.0F, 0.5F);
      homeLight0.setLevel(level0);
      Level level1 = level0.clone();
      level1.clone();
      Level level2 = homeLight0.getLevel();
      homeLight0.isAtLevel(level2);
      Float float0 = new Float((-154.2F));
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("COLOR");
      catalogLight0.setCategory(furnitureCategory0);
      homeLight0.setX(0.0F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt((-1625.4711F), (-435.214F), 448.63348F);
      homeLight0.setElevation(1330.356F);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, 2.0F, 3215.2395F, (-1.0F), 3215.2395F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-471), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.isBottomRightPointAt(2.1599295F, 3215.2395F, (-471));
      homePieceOfFurniture0.setVisible(false);
      homeDoorOrWindow0.setColor(integer0);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("UO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.UO
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Integer.max((-485), (-1700));
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, 5170.6313F, 5170.6313F, 5170.6313F, 1.7014117E38F, true, lightSourceArray0, "tOIOR", (float[][]) null, "tOIOR", false, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$10");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.setVisible(true);
      homeLight0.getTexture();
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't coeable", (Content) null, (Content) null, 2.0F, 3215.2395F, (-1.0F), 3215.2395F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setWidth(392.58246F);
      Integer.max((-471), (-1700));
      homeDoorOrWindow0.setX(2.0F);
      homeDoorOrWindow0.isBottomRightPointAt(2.0F, 3215.2395F, (-471));
      homeDoorOrWindow0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (String) null, (Content) null, (Content) null, (Content) null, (-1698), (-1698), 1.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "editorSubFolder", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription((String) null);
      homeLight1.setX(1.0F);
      homeLight1.isPointAt((-2271.104F), (-4827.802F), 1138.0F);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight0.getCatalogId();
      homeLight1.getNameAngle();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameXOffset((-2251.11F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.isNameCenterPointAt((-3377.281F), (-2251.11F), (-2251.11F));
      homeLight1.setNameAngle((-2251.11F));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.containsPoint(842.3002F, (-2419.561F), (-2419.561F));
      homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "tOLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-3081.734F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-3081.734F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-3081.734F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-3081.734F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertTrue(homeLight2.isDeformable());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals((-3081.734F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals((-3081.734F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      
      homeLight2.setDescription("COLOR");
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-3081.734F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-3081.734F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("COLOR", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertTrue(homeLight2.isDeformable());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals((-3081.734F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals((-3081.734F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      
      HomeLight homeLight3 = new HomeLight(homeLight0);
      assertNotNull(homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertEquals((-3081.734F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals("COLOR", homeLight3.getName());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 0.5F, 0.5F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(boolean0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.valueOf("DOOR_OR_WINDOW");
      assertEquals(HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW, homePieceOfFurniture_SortableProperty0);
      
      float float0 = homeLight3.getNameXOffset();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertEquals((-3081.734F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals("COLOR", homeLight3.getName());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals(0.0F, float0, 0.01F);
      
      HomeLight homeLight4 = homeLight3.clone();
      assertNotNull(homeLight4);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertEquals((-3081.734F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals("COLOR", homeLight3.getName());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight4.getDepth(), 0.01F);
      assertEquals((-3081.734F), homeLight4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight4.getCatalogId());
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight4.getY(), 0.01F);
      assertEquals("COLOR", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isResizable());
      assertTrue(homeLight4.isDeformable());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertNull(homeLight4.getShininess());
      assertTrue(homeLight4.isVisible());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight4.getHeight(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertTrue(homeLight4.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight4.getDescription());
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertNull(homeLight4.getColor());
      assertEquals((-3081.734F), homeLight4.getElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight3));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tLOR", "tLOR", "tLOR", (Content) null, (Content) null, (Content) null, 15.1106F, 15.1106F, 15.1106F, 15.1106F, false, lightSourceArray0, (float[][]) null, "tLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tLOR", catalogLight0.getCreator());
      assertEquals("tLOR", catalogLight0.getDescription());
      assertEquals(15.1106F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(15.1106F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(15.1106F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("tLOR", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(15.1106F, catalogLight0.getHeight(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tLOR", catalogLight0.getCreator());
      assertEquals("tLOR", catalogLight0.getDescription());
      assertEquals(15.1106F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(15.1106F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(15.1106F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("tLOR", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(15.1106F, catalogLight0.getHeight(), 0.01F);
      assertEquals(15.1106F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(7.5553F, homeLight0.getY(), 0.01F);
      assertEquals(7.5553F, homeLight0.getX(), 0.01F);
      assertEquals(15.1106F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(15.1106F, homeLight0.getElevation(), 0.01F);
      assertEquals("tLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("tLOR", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("tLOR", homeLight0.getDescription());
      assertEquals(15.1106F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(15.1106F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      boolean boolean0 = homeLight0.isPointAt(15.1106F, 15.1106F, 15.1106F);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tLOR", catalogLight0.getCreator());
      assertEquals("tLOR", catalogLight0.getDescription());
      assertEquals(15.1106F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(15.1106F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(15.1106F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("tLOR", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(15.1106F, catalogLight0.getHeight(), 0.01F);
      assertEquals(15.1106F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(7.5553F, homeLight0.getY(), 0.01F);
      assertEquals(7.5553F, homeLight0.getX(), 0.01F);
      assertEquals(15.1106F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(15.1106F, homeLight0.getElevation(), 0.01F);
      assertEquals("tLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("tLOR", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("tLOR", homeLight0.getDescription());
      assertEquals(15.1106F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(15.1106F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1678));
      assertNotNull(float0);
      assertEquals((-1678.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 1330.356F, 0.0F, (-1678), float0);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals((-1678.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-1678), lightSource0.getColor());
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1678), float0);
      assertNotNull(lightSource1);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals((-1678.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1678), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertNull(furnitureCategory0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      
      Content content0 = homeLight0.getModel();
      assertNull(content0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      
      homeLight0.setDepth((-1678));
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      
      boolean boolean0 = homeLight0.isNameCenterPointAt((-1678), (-3380.5F), 0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(boolean0);
      
      homeLight0.setNameAngle((-3380.5F));
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(6.1368804F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      
      homeLight0.setMovable(false);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(6.1368804F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      
      boolean boolean1 = homeLight0.isTopLeftPointAt(1330.356F, 4060.0F, 0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(6.1368804F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(6.1368804F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      
      boolean boolean2 = homeLight0.isDoorOrWindow();
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(6.1368804F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = homeLight0.isTopRightPointAt((-1255.3147F), (-1678), (-3380.5F));
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(6.1368804F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      homeLight0.getStaircaseCutOutShape();
      float float1 = homeLight0.getElevation();
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1678));
      assertNotNull(float0);
      assertEquals((-1678.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 1330.356F, 0.0F, (-1678), float0);
      assertNotNull(lightSource0);
      assertEquals((-1678), lightSource0.getColor());
      assertEquals((-1678.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1678), float0);
      assertNotNull(lightSource1);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1678), lightSource1.getColor());
      assertEquals((-1678.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertNull(furnitureCategory0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Content content0 = homeLight0.getModel();
      assertNull(content0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setDepth((-1678));
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("COLOR", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("COLOR", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("#K%RAO@URX", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertEquals("COLOR", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("#K%RAO@URX", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      homeLight0.setName("COLOR");
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Content content1 = homeLight0.getIcon();
      assertNull(content1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.containsPoint(0.0F, 3.4028235E38F, 3.4028235E38F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      
      homeLight0.setAngle(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setShininess((Float) null);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1678.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLEOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals("tOLEOR", homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setDescription("tOLEOR");
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertEquals("tOLEOR", homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      assertNotNull(integer0);
      assertEquals((-1700), (int)integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, 2.0F, 3215.2395F, (-1.0F), 3215.2395F, false, (-1700), 3215.2395F, sashArray0, integer0, (float[][]) null, false, (-1.0F), false);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3215.2395F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3215.2395F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3215.2395F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3215.2395F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(3215.2395F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1607.6198F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3215.2395F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      
      homeDoorOrWindow0.setNameXOffset((-1700));
      assertEquals(0, sashArray0.length);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3215.2395F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3215.2395F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3215.2395F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(3215.2395F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1607.6198F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3215.2395F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3215.2395F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3215.2395F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3215.2395F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(3215.2395F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1607.6198F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3215.2395F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(3215.2395F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(3215.2395F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertEquals(3215.2395F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow1.getName());
      assertEquals((-1700.0F), homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(3215.2395F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1607.6198F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      homeDoorOrWindow0.setName("");
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3215.2395F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3215.2395F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3215.2395F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(3215.2395F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1607.6198F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(3215.2395F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      homeDoorOrWindow1.setVisible(false);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3215.2395F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3215.2395F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3215.2395F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(3215.2395F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1607.6198F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(3215.2395F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(3215.2395F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals(3215.2395F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertEquals(3215.2395F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow1.getName());
      assertEquals((-1700.0F), homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(3215.2395F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1607.6198F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      homeDoorOrWindow0.setColor(integer0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3215.2395F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3215.2395F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3215.2395F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3215.2395F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(3215.2395F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1607.6198F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(3215.2395F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("PVO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.PVO
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertEquals("tOLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("tOLOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getName());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertEquals("tOLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("tOLOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getName());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("tOLOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("tOLOR", homeLight0.getName());
      
      homeLight0.setElevation(1425.0104F);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertEquals("tOLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("tOLOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getName());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1425.0104F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals(1425.0104F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("tOLOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("tOLOR", homeLight0.getName());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 0.0F, (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 0.0F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight1.setNameVisible(false);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      
      String string0 = homeLight1.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ELEVATION;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      boolean boolean0 = homeLight0.isDoorOrWindow();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      homeLight1.setElevation(0.0F);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight2.setNameAngle(0.3926991F);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("CL@3OR", "CL@3OR", "CL@3OR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "CL@3OR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setMovable(true);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, (-1700), 21.797253F, (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-1700.0F), lightSource0.getY(), 0.01F);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(21.797253F, lightSource0.getZ(), 0.01F);
      
      float float1 = Float.min(1330.356F, 448.63348F);
      assertEquals(448.63348F, float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, 1480.8F, (-2891), float0);
      assertNotNull(lightSource1);
      assertEquals(0.5F, lightSource1.getY(), 0.01F);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals((-2891), lightSource1.getColor());
      assertEquals(1330.356F, lightSource1.getX(), 0.01F);
      assertEquals(1480.8F, lightSource1.getZ(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 21.797253F, 85.8F, 1330.356F, (-2891), true, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(21.797253F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals((-2891.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals((-2891.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(42.9F, homeLight1.getY(), 0.01F);
      assertEquals(85.8F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(10.898626F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = new HomeLight(homeLight0);
      assertNotNull(homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(85.8F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(10.898626F, homeLight2.getX(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(21.797253F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals("COLOR", homeLight2.getDescription());
      assertEquals(42.9F, homeLight2.getY(), 0.01F);
      assertEquals((-2891.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals((-2891.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1330.356F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      HomeLight homeLight3 = new HomeLight(homeLight0);
      assertNotNull(homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(42.9F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(10.898626F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals("COLOR", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals("COLOR", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertNull(homeLight3.getCurrency());
      assertEquals(1330.356F, homeLight3.getHeight(), 0.01F);
      assertEquals(85.8F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(21.797253F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      
      boolean boolean0 = homeLight3.isNameCenterPointAt(1330.356F, (-1018.6007F), 0.5F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(42.9F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(10.898626F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals("COLOR", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals("COLOR", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertNull(homeLight3.getCurrency());
      assertEquals(1330.356F, homeLight3.getHeight(), 0.01F);
      assertEquals(85.8F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(21.797253F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(boolean0);
      
      homeLight1.setNameAngle(2781.9043F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals(21.797253F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals((-2891.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals((-2891.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(42.9F, homeLight1.getY(), 0.01F);
      assertEquals(4.736391F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(85.8F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(10.898626F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight0.setMovable(false);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      boolean boolean1 = homeLight3.isTopLeftPointAt((-1255.3147F), (-2891), 21.797253F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(42.9F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(10.898626F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals("COLOR", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals("COLOR", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertNull(homeLight3.getCurrency());
      assertEquals(1330.356F, homeLight3.getHeight(), 0.01F);
      assertEquals(85.8F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(21.797253F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      homeLight3.setDepth(1.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(42.9F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertEquals(10.898626F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals(1.0F, homeLight3.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals("COLOR", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertNull(homeLight3.getCurrency());
      assertEquals(1330.356F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(21.797253F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      
      boolean boolean2 = homeLight2.isMovable();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals(21.797253F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(21.797253F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(10.898626F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(85.8F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(10.898626F, homeLight2.getX(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isTexturable());
      assertEquals(21.797253F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals("COLOR", homeLight2.getDescription());
      assertEquals(42.9F, homeLight2.getY(), 0.01F);
      assertEquals((-2891.0F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals((-2891.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1330.356F, homeLight2.getHeight(), 0.01F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, (-1700), 0.0F, (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals((-1700.0F), lightSource0.getY(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      
      LightSource lightSource1 = new LightSource(1330.356F, 0.5F, 1480.8F, (-2891), float0);
      assertNotNull(lightSource1);
      assertEquals(1330.356F, lightSource1.getX(), 0.01F);
      assertEquals(1480.8F, lightSource1.getZ(), 0.01F);
      assertEquals((-2891), lightSource1.getColor());
      assertEquals(0.5F, lightSource1.getY(), 0.01F);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 85.8F, 1330.356F, (-2891), true, lightSourceArray0, (float[][]) null, "n2'3#1", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(85.8F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals((-2891.0F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-2891.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight1.getHeight(), 0.01F);
      assertEquals(42.9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertEquals(42.9F, homeLight2.getY(), 0.01F);
      assertEquals((-2891.0F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(1330.356F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals("COLOR", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2891.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(85.8F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      HomeLight homeLight3 = new HomeLight(homeLight0);
      assertNotNull(homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(85.8F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(1330.356F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight3.getElevation(), 0.01F);
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertEquals((-2891.0F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isMovable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(42.9F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertEquals("COLOR", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getShininess());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      
      HomeLight homeLight4 = new HomeLight(homeLight0);
      assertNotNull(homeLight4);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight4.getCatalogId());
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals((-2891.0F), homeLight4.getGroundElevation(), 0.01F);
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isModelMirrored());
      assertNull(homeLight4.getCurrency());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(1330.356F, homeLight4.getHeight(), 0.01F);
      assertEquals((-2891.0F), homeLight4.getElevation(), 0.01F);
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertEquals(85.8F, homeLight4.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight4.getDescription());
      assertEquals(42.9F, homeLight4.getY(), 0.01F);
      assertEquals("COLOR", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isDeformable());
      assertTrue(homeLight4.isVisible());
      assertTrue(homeLight4.isResizable());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getShininess());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      
      boolean boolean0 = homeLight4.isNameCenterPointAt((-0.7804F), (-1018.6007F), 0.5F);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight4.getCatalogId());
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals((-2891.0F), homeLight4.getGroundElevation(), 0.01F);
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isModelMirrored());
      assertNull(homeLight4.getCurrency());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(1330.356F, homeLight4.getHeight(), 0.01F);
      assertEquals((-2891.0F), homeLight4.getElevation(), 0.01F);
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertEquals(85.8F, homeLight4.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight4.getDescription());
      assertEquals(42.9F, homeLight4.getY(), 0.01F);
      assertEquals("COLOR", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isDeformable());
      assertTrue(homeLight4.isVisible());
      assertTrue(homeLight4.isResizable());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getShininess());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(boolean0);
      
      homeLight2.setNameAngle(2781.9043F);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertEquals(42.9F, homeLight2.getY(), 0.01F);
      assertEquals((-2891.0F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(1330.356F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals("COLOR", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(4.736391F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2891.0F), homeLight2.getElevation(), 0.01F);
      assertEquals(85.8F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight3));
      
      homeLight1.setMovable(false);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight4);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(85.8F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals((-2891.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-2891.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight1.getHeight(), 0.01F);
      assertEquals(42.9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight4));
      
      boolean boolean1 = homeLight4.isTopLeftPointAt((-1255.3147F), (-0.7804F), 0.0F);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight4.getCatalogId());
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals((-2891.0F), homeLight4.getGroundElevation(), 0.01F);
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isModelMirrored());
      assertNull(homeLight4.getCurrency());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(1330.356F, homeLight4.getHeight(), 0.01F);
      assertEquals((-2891.0F), homeLight4.getElevation(), 0.01F);
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertEquals(85.8F, homeLight4.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight4.getDescription());
      assertEquals(42.9F, homeLight4.getY(), 0.01F);
      assertEquals("COLOR", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isDeformable());
      assertTrue(homeLight4.isVisible());
      assertTrue(homeLight4.isResizable());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getShininess());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      
      boolean boolean2 = homeLight0.isBottomRightPointAt((-0.7804F), (-1018.6007F), (-2019.0F));
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(boolean2);
      
      float float1 = homeLight1.getNameYOffset();
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight4);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(85.8F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals((-2891.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-2891.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight1.getHeight(), 0.01F);
      assertEquals(42.9F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertEquals(0.0F, float1, 0.01F);
      
      BigDecimal bigDecimal1 = homeLight4.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("n2'3#1", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-2891.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1330.356F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(85.8F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(42.9F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(1330.356F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-2891.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(85.8F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight4.getCatalogId());
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals((-2891.0F), homeLight4.getGroundElevation(), 0.01F);
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isModelMirrored());
      assertNull(homeLight4.getCurrency());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(1330.356F, homeLight4.getHeight(), 0.01F);
      assertEquals((-2891.0F), homeLight4.getElevation(), 0.01F);
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertEquals(85.8F, homeLight4.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight4.getDescription());
      assertEquals(42.9F, homeLight4.getY(), 0.01F);
      assertEquals("COLOR", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertTrue(homeLight4.isMovable());
      assertTrue(homeLight4.isDeformable());
      assertTrue(homeLight4.isVisible());
      assertTrue(homeLight4.isResizable());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getShininess());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      assertNotNull(integer0);
      assertEquals((-1700), (int)integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, true, (-1700), 4128.131F, sashArray0, integer0, (float[][]) null, true, 1.5793494F, true);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4128.131F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4128.131F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4128.131F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      
      int int0 = Integer.max((-485), (-1700));
      assertEquals((-485), int0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4128.131F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4128.131F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(80.53F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", homeDoorOrWindow1.getName());
      assertEquals(40.265F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(424.1F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(4128.131F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      homeDoorOrWindow1.setVisible(false);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4128.131F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4128.131F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(80.53F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", homeDoorOrWindow1.getName());
      assertEquals(40.265F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(424.1F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(4128.131F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      homeDoorOrWindow1.setNameStyle((TextStyle) null);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(4128.131F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4128.131F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(80.53F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", homeDoorOrWindow1.getName());
      assertEquals(40.265F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(424.1F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(4128.131F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Long long0 = new Long((-3217L));
      assertNotNull(long0);
      assertEquals((-3217L), (long)long0);
      
      Class<CatalogPieceOfFurniture> class0 = CatalogPieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("oQE{$OqAD6C,md0_5", "oQE{$OqAD6C,md0_5", resourceURLContent0, (-3217L), (-3217L), "", false);
      assertNotNull(catalogTexture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-3217.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-3217.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getName());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-3217.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-3217.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-3217.0F), homeTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", homeTexture0.getName());
      assertEquals((-3217.0F), homeTexture0.getHeight(), 0.01F);
      
      ResourceURLContent resourceURLContent1 = (ResourceURLContent)homeTexture0.getImage();
      assertNotNull(resourceURLContent1);
      assertSame(resourceURLContent0, resourceURLContent1);
      assertSame(resourceURLContent1, resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-3217.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-3217.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-3217.0F), homeTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", homeTexture0.getName());
      assertEquals((-3217.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(resourceURLContent1.isJAREntry());
      assertFalse(resourceURLContent1.isMultiPartResource());
      
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash((-3217L), (-3345.5137F), 560.0F, (-3345.5137F), (-1.0F));
      assertNotNull(sash0);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals(560.0F, sash0.getWidth(), 0.01F);
      assertEquals((-3345.5137F), sash0.getStartAngle(), 0.01F);
      assertEquals((-3217.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-3345.5137F), sash0.getYAxis(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), 560.0F, (-1171.0F), (-3345.5137F), 560.0F);
      assertNotNull(sash1);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertEquals((-1171.0F), sash1.getWidth(), 0.01F);
      assertEquals(560.0F, sash1.getYAxis(), 0.01F);
      assertEquals(560.0F, sash1.getEndAngle(), 0.01F);
      assertEquals((-3345.5137F), sash1.getStartAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-749.85F), 358.1849F, (-1.0F), (-3217L), 0.3926991F);
      assertNotNull(sash2);
      assertEquals((-749.85F), sash2.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getWidth(), 0.01F);
      assertEquals((-3217.0F), sash2.getStartAngle(), 0.01F);
      assertEquals(358.1849F, sash2.getYAxis(), 0.01F);
      assertEquals(0.3926991F, sash2.getEndAngle(), 0.01F);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(0.3926991F, (-3345.5137F), (-3345.5137F), (-0.7804F), 2.0F);
      assertNotNull(sash3);
      assertEquals((-3345.5137F), sash3.getYAxis(), 0.01F);
      assertEquals((-0.7804F), sash3.getStartAngle(), 0.01F);
      assertEquals(0.3926991F, sash3.getXAxis(), 0.01F);
      assertEquals((-3345.5137F), sash3.getWidth(), 0.01F);
      assertEquals(2.0F, sash3.getEndAngle(), 0.01F);
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash1));
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-3345.5137F), 358.1849F, 3508.3005F, (-1644.2284F), (-1320.7749F));
      assertNotNull(sash4);
      assertEquals(358.1849F, sash4.getYAxis(), 0.01F);
      assertEquals((-1644.2284F), sash4.getStartAngle(), 0.01F);
      assertEquals((-1320.7749F), sash4.getEndAngle(), 0.01F);
      assertEquals((-3345.5137F), sash4.getXAxis(), 0.01F);
      assertEquals(3508.3005F, sash4.getWidth(), 0.01F);
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash3));
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(358.1849F, (-158.8194F), 2331.5F, (-0.7804F), (-1220.0262F));
      assertNotNull(sash5);
      assertEquals((-0.7804F), sash5.getStartAngle(), 0.01F);
      assertEquals(2331.5F, sash5.getWidth(), 0.01F);
      assertEquals((-158.8194F), sash5.getYAxis(), 0.01F);
      assertEquals((-1220.0262F), sash5.getEndAngle(), 0.01F);
      assertEquals(358.1849F, sash5.getXAxis(), 0.01F);
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash0));
      
      sashArray0[5] = sash5;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("oQE{$OqAD6C,md0_5", "oQE{$OqAD6C,md0_5", "oQE{$OqAD6C,md0_5", "oQE{$OqAD6C,md0_5", stringArray0, long0, (Float) null, resourceURLContent1, resourceURLContent0, resourceURLContent0, (-1171.0F), (-1.0F), 358.1849F, (-3345.5137F), false, (-278.5F), (-1.0F), sashArray0, (float[][]) null, "F%>2=LY*", false, false, false, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, stringArray0.length);
      assertEquals(6, sashArray0.length);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-3217.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-3217.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-278.5F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("F%>2=LY*", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(358.1849F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getId());
      assertEquals((-3217L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getName());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-3345.5137F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1171.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-3217.0F), homeTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", homeTexture0.getName());
      assertEquals((-3217.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(resourceURLContent1.isJAREntry());
      assertFalse(resourceURLContent1.isMultiPartResource());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0, stringArray0.length);
      assertEquals(6, sashArray0.length);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-3217.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-3217.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-278.5F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("F%>2=LY*", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(358.1849F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getId());
      assertEquals((-3217L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getName());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-3345.5137F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1171.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-3217.0F), homeTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", homeTexture0.getName());
      assertEquals((-3217.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-585.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("oQE{$OqAD6C,md0_5", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-3345.5137F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals("oQE{$OqAD6C,md0_5", homePieceOfFurniture0.getName());
      assertEquals(358.1849F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("oQE{$OqAD6C,md0_5", homePieceOfFurniture0.getCatalogId());
      assertEquals((-1171.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-3345.5137F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent1.isJAREntry());
      assertFalse(resourceURLContent1.isMultiPartResource());
      
      boolean boolean0 = homePieceOfFurniture0.isVisible();
      assertSame(resourceURLContent0, resourceURLContent1);
      assertSame(resourceURLContent1, resourceURLContent0);
      assertEquals(0, stringArray0.length);
      assertEquals(6, sashArray0.length);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getId());
      assertEquals("", catalogTexture0.getCreator());
      assertEquals((-3217.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-3217.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", catalogTexture0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-278.5F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("F%>2=LY*", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(358.1849F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getId());
      assertEquals((-3217L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getName());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-3345.5137F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("oQE{$OqAD6C,md0_5", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1171.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-3217.0F), homeTexture0.getWidth(), 0.01F);
      assertEquals("oQE{$OqAD6C,md0_5", homeTexture0.getName());
      assertEquals((-3217.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-585.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("oQE{$OqAD6C,md0_5", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-3345.5137F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals("oQE{$OqAD6C,md0_5", homePieceOfFurniture0.getName());
      assertEquals(358.1849F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("oQE{$OqAD6C,md0_5", homePieceOfFurniture0.getCatalogId());
      assertEquals((-1171.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-3345.5137F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent1.isJAREntry());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1346.4564F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals(1346.4564F, lightSource0.getY(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight((String) null, "q/#%\"/FM}dgm$M}P%%", ")iX", (Content) null, (Content) null, (Content) null, 1346.4564F, 1346.4564F, 1.5793494F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1346.4564F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(673.2282F, homeLight0.getX(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(673.2282F, homeLight0.getY(), 0.01F);
      assertEquals(1346.4564F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)3;
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(673.2282F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(")iX", homeLight1.getDescription());
      assertEquals(673.2282F, homeLight1.getY(), 0.01F);
      assertEquals(1.5793494F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(1346.4564F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertEquals(1346.4564F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(673.2282F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(")iX", homeLight1.getDescription());
      assertEquals(673.2282F, homeLight1.getY(), 0.01F);
      assertEquals(1.5793494F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(1346.4564F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertEquals(1346.4564F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertEquals(673.2282F, homeLight2.getY(), 0.01F);
      assertEquals(")iX", homeLight2.getDescription());
      assertEquals(1.5793494F, homeLight2.getHeight(), 0.01F);
      assertEquals(673.2282F, homeLight2.getX(), 0.01F);
      assertEquals(1346.4564F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1346.4564F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      homeLight0.setX(1.5793494F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1.5793494F, homeLight0.getX(), 0.01F);
      assertEquals(1346.4564F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(673.2282F, homeLight0.getY(), 0.01F);
      assertEquals(1346.4564F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      String string0 = homeLight2.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(673.2282F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(")iX", homeLight1.getDescription());
      assertEquals(673.2282F, homeLight1.getY(), 0.01F);
      assertEquals(1.5793494F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(1346.4564F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertEquals(1346.4564F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertEquals(673.2282F, homeLight2.getY(), 0.01F);
      assertEquals(")iX", homeLight2.getDescription());
      assertEquals(1.5793494F, homeLight2.getHeight(), 0.01F);
      assertEquals(673.2282F, homeLight2.getX(), 0.01F);
      assertEquals(1346.4564F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1346.4564F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      boolean boolean0 = homeLight1.isNameCenterPointAt((byte)3, (-983.6735F), (byte)83);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals(673.2282F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(")iX", homeLight1.getDescription());
      assertEquals(673.2282F, homeLight1.getY(), 0.01F);
      assertEquals(1.5793494F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(1346.4564F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertEquals(1346.4564F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isNameVisible();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1.5793494F, homeLight0.getX(), 0.01F);
      assertEquals(1346.4564F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(673.2282F, homeLight0.getY(), 0.01F);
      assertEquals(1346.4564F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isBackFaceShown();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1346.4564F, catalogLight0.getDepth(), 0.01F);
      assertEquals(")iX", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(1.5793494F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertEquals(1346.4564F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(")iX", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1.5793494F, homeLight0.getX(), 0.01F);
      assertEquals(1346.4564F, homeLight0.getDepth(), 0.01F);
      assertEquals(1.5793494F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(673.2282F, homeLight0.getY(), 0.01F);
      assertEquals(1346.4564F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("Super class isn't cloneable", "Super class isn't cloneable", "Super class isn't cloneable", (Content) null, (Content) null, (Content) null, 2.0F, (-1700), 1138.3956F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1700.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1138.3956F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1700.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1138.3956F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1138.3956F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals((-850.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1700.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1700.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1138.3956F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1138.3956F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals((-850.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1700.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-850.0F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1700.0F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(1138.3956F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight1.setX((-1644.2284F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1700.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1138.3956F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1138.3956F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals((-850.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1700.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-850.0F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1644.2284F), homeLight1.getX(), 0.01F);
      assertEquals((-1700.0F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(1138.3956F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      String string0 = homeLight1.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1700.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1138.3956F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1138.3956F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals((-850.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1700.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-850.0F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1644.2284F), homeLight1.getX(), 0.01F);
      assertEquals((-1700.0F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(1138.3956F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight1.setNameXOffset((-33.4142F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1700.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1138.3956F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1138.3956F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals((-850.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1700.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("Super class isn't cloneable", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-850.0F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertEquals("Super class isn't cloneable", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("Super class isn't cloneable", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-33.4142F), homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1644.2284F), homeLight1.getX(), 0.01F);
      assertEquals((-1700.0F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(1138.3956F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      Integer integer0 = new Integer((-1700));
      assertNotNull(integer0);
      assertEquals((-1700), (int)integer0);
      
      homeLight0.setColor(integer0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-1700.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("Super class isn't cloneable", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("Super class isn't cloneable", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1138.3956F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("Super class isn't cloneable", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1700), (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1138.3956F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("Super class isn't cloneable", homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals("Super class isn't cloneable", homeLight0.getDescription());
      assertEquals("Super class isn't cloneable", homeLight0.getName());
      assertEquals((-850.0F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1700.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "q/#%\"/FM}dgm$M}P%%";
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.5F, 1.0F, (-1700));
      assertNotNull(sash0);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.5F, sash0.getWidth(), 0.01F);
      assertEquals((-1700.0F), sash0.getEndAngle(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1275.3383F), 0.0F, 460.8234F, 634.8768F, 0.0F);
      assertNotNull(sash1);
      assertEquals(634.8768F, sash1.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash1.getYAxis(), 0.01F);
      assertEquals(460.8234F, sash1.getWidth(), 0.01F);
      assertEquals(0.0F, sash1.getEndAngle(), 0.01F);
      assertEquals((-1275.3383F), sash1.getXAxis(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-2231.3792F), 0.5F, 707.38F, 0.0F, 0.5F);
      assertNotNull(sash2);
      assertEquals((-2231.3792F), sash2.getXAxis(), 0.01F);
      assertEquals(0.0F, sash2.getStartAngle(), 0.01F);
      assertEquals(707.38F, sash2.getWidth(), 0.01F);
      assertEquals(0.5F, sash2.getYAxis(), 0.01F);
      assertEquals(0.5F, sash2.getEndAngle(), 0.01F);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(460.8234F, 414.8357F, (-2288.1309F), 0.0F, (-3050.9814F));
      assertNotNull(sash3);
      assertEquals(0.0F, sash3.getStartAngle(), 0.01F);
      assertEquals(460.8234F, sash3.getXAxis(), 0.01F);
      assertEquals((-2288.1309F), sash3.getWidth(), 0.01F);
      assertEquals(414.8357F, sash3.getYAxis(), 0.01F);
      assertEquals((-3050.9814F), sash3.getEndAngle(), 0.01F);
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash0));
      
      sashArray0[3] = sash3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("COLOR", "COLOR", "COLOR", "COLOR", stringArray0, (Long) null, float1, (Content) null, (Content) null, (Content) null, 0.5F, 1.0F, 634.8768F, 1330.356F, false, (-1086.51F), 0.0F, sashArray0, (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, "q/#%\"/FM}dgm$M}P%%");
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1086.51F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("COLOR", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(1330.356F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("COLOR", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("COLOR", catalogDoorOrWindow0.getName());
      assertEquals(634.8768F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("COLOR", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1086.51F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("COLOR", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(1330.356F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("COLOR", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("COLOR", catalogDoorOrWindow0.getName());
      assertEquals(634.8768F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("COLOR", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1330.356F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeDoorOrWindow0.getCatalogId());
      assertEquals("COLOR", homeDoorOrWindow0.getName());
      assertEquals((-1086.51F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(634.8768F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1330.356F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeDoorOrWindow0.getCurrency());
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.25F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("COLOR", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1086.51F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("COLOR", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(1330.356F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("COLOR", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("COLOR", catalogDoorOrWindow0.getName());
      assertEquals(634.8768F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("COLOR", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1330.356F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeDoorOrWindow0.getCatalogId());
      assertEquals("COLOR", homeDoorOrWindow0.getName());
      assertEquals((-1086.51F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(634.8768F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1330.356F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeDoorOrWindow0.getCurrency());
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.25F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("COLOR", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(1330.356F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeDoorOrWindow1.getCurrency());
      assertEquals("COLOR", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.5F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("COLOR", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1330.356F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("COLOR", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1086.51F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(634.8768F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Content content0 = homeDoorOrWindow1.getModel();
      assertNull(content0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1086.51F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("COLOR", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(1330.356F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.5F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("COLOR", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("COLOR", catalogDoorOrWindow0.getName());
      assertEquals(634.8768F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("COLOR", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1330.356F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeDoorOrWindow0.getCatalogId());
      assertEquals("COLOR", homeDoorOrWindow0.getName());
      assertEquals((-1086.51F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(634.8768F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1330.356F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeDoorOrWindow0.getCurrency());
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.25F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals("COLOR", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(1330.356F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeDoorOrWindow1.getCurrency());
      assertEquals("COLOR", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.5F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("COLOR", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1330.356F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("COLOR", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1086.51F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(634.8768F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = new BigDecimal(3229);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight((String) null, "Super clas isn't cloeable", "uEDs/k}", (Content) null, (Content) null, (Content) null, 3.5841339F, 1331.1434F, (-1700), 2.0F, false, lightSourceArray0, (float[][]) null, "uEDs/k}", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.5841339F, homeLight0.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("uEDs/k}", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals((-1700.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(665.5717F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1331.1434F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("Super clas isn't cloeable", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1.7920669F, homeLight0.getX(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.5841339F, homeLight0.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("uEDs/k}", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals((-1700.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(665.5717F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1331.1434F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("Super clas isn't cloeable", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1.7920669F, homeLight0.getX(), 0.01F);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.5841339F, homeLight0.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("uEDs/k}", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals((-1700.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(665.5717F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(1331.1434F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("Super clas isn't cloeable", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1.7920669F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(1331.1434F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isMovable());
      assertEquals((-1700.0F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(665.5717F, homeLight1.getY(), 0.01F);
      assertEquals(1.7920669F, homeLight1.getX(), 0.01F);
      assertEquals("uEDs/k}", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(3.5841339F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals("Super clas isn't cloeable", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals(2.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertNotNull(homeLight2);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1700.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals("uEDs/k}", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1331.1434F, homeLight2.getDepth(), 0.01F);
      assertEquals("Super clas isn't cloeable", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1.7920669F, homeLight2.getX(), 0.01F);
      assertEquals(665.5717F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(3.5841339F, homeLight2.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      homeLight2.setNameXOffset(2.0F);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1700.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals("uEDs/k}", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1331.1434F, homeLight2.getDepth(), 0.01F);
      assertEquals("Super clas isn't cloeable", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1.7920669F, homeLight2.getX(), 0.01F);
      assertEquals(665.5717F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(3.5841339F, homeLight2.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(2.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      BigDecimal bigDecimal1 = homeLight2.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1700.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals("uEDs/k}", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1331.1434F, homeLight2.getDepth(), 0.01F);
      assertEquals("Super clas isn't cloeable", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1.7920669F, homeLight2.getX(), 0.01F);
      assertEquals(665.5717F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(3.5841339F, homeLight2.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(2.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((byte) (-26), bigDecimal1.byteValue());
      assertEquals((short)9446, bigDecimal1.shortValue());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      boolean boolean0 = homeLight2.isNameCenterPointAt(5.2831855F, (-1067.6F), 1331.1434F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1700.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals("uEDs/k}", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1331.1434F, homeLight2.getDepth(), 0.01F);
      assertEquals("Super clas isn't cloeable", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1.7920669F, homeLight2.getX(), 0.01F);
      assertEquals(665.5717F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(3.5841339F, homeLight2.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(2.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean0);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("Super clas isn't cloeable");
      assertNotNull(furnitureCategory0);
      assertEquals("Super clas isn't cloeable", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      catalogLight0.setCategory(furnitureCategory0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("Super clas isn't cloeable", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      
      homeLight2.setNameAngle(377.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((byte) (-99), bigDecimal0.byteValue());
      assertEquals((short)3229, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3.5841339F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("Super clas isn't cloeable", catalogLight0.getName());
      assertEquals(2.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("uEDs/k}", catalogLight0.getCreator());
      assertEquals("uEDs/k}", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1331.1434F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1700.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1700.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals("uEDs/k}", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(1331.1434F, homeLight2.getDepth(), 0.01F);
      assertEquals("Super clas isn't cloeable", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1.7920669F, homeLight2.getX(), 0.01F);
      assertEquals(665.5717F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(3.5841339F, homeLight2.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(2.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.008881569F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertEquals(1000.3F, homeLight0.getWidth(), 0.01F);
      assertEquals(1000.3F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1000.3F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1000.3F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(500.15F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(500.15F, homeLight0.getX(), 0.01F);
      assertEquals(1000.3F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setNameVisible(true);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertEquals(1000.3F, homeLight0.getWidth(), 0.01F);
      assertEquals(1000.3F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1000.3F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1000.3F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(500.15F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(500.15F, homeLight0.getX(), 0.01F);
      assertEquals(1000.3F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setShininess((Float) null);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getId());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertEquals(1000.3F, homeLight0.getWidth(), 0.01F);
      assertEquals(1000.3F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1000.3F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1000.3F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(500.15F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(500.15F, homeLight0.getX(), 0.01F);
      assertEquals(1000.3F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      homeLight0.setX(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      
      homeLight0.setName("");
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = false;
      LightSource[] lightSourceArray0 = new LightSource[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032F), (-0.032F), (-0.032F), (-0.032F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(17, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032F), catalogLight0.getElevation(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.032F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-0.032F), catalogLight0.getHeight(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(17, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032F), catalogLight0.getElevation(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.032F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-0.032F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-0.032F), homeLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("tOLEOR", homeLight0.getName());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-0.032F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-0.032F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-0.016F), homeLight0.getX(), 0.01F);
      assertEquals((-0.016F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.032F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-0.032F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setX(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      boolean boolean0 = homeLight0.isDoorOrWindow();
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      homeLight2.setElevation(1625.4711F);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(1625.4711F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(1625.4711F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      
      homeLight2.setNameAngle((-3050.9814F));
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(1625.4711F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(1625.4711F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(2.646614F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("tOIOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("tOIOR", homeLight0.getCatalogId());
      
      TextStyle textStyle0 = new TextStyle(2219.9197F);
      assertNotNull(textStyle0);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(2219.9197F, textStyle0.getFontSize(), 0.01F);
      
      homeLight0.setNameStyle(textStyle0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("tOIOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("tOIOR", homeLight0.getCatalogId());
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(2219.9197F, textStyle0.getFontSize(), 0.01F);
      
      homeLight0.setModelMirrored(true);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("tOIOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("tOIOR", homeLight0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)20, (byte)63, (byte)10, (byte) (-70), (byte)115, (byte)3, (byte)3}, byteArray0);
      assertFalse(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertNotNull(homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getColor());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      
      HomeLight homeLight3 = homeLight2.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getColor());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertEquals("COLOR", homeLight3.getName());
      assertEquals((-3050.9814F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      
      String string0 = homeLight3.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getColor());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertEquals("COLOR", homeLight3.getName());
      assertEquals((-3050.9814F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.COLOR;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      float float1 = homeLight1.getNameAngle();
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URL uRL1 = MockURL.URL(uRL0, "");
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertTrue(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      float[][] floatArray0 = new float[4][7];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 4062.3F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 4062.3F;
      floatArray1[4] = 15.0F;
      floatArray1[5] = 4062.3F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 4062.3F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 15.0F;
      floatArray2[5] = 4062.3F;
      floatArray2[6] = 15.0F;
      floatArray2[7] = 4062.3F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = (-1398.0F);
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = 4062.3F;
      floatArray3[6] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = new BigDecimal(60000L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)96, bigDecimal0.byteValue());
      assertEquals((short) (-5536), bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("D$=$@(8", "D$=$@(8", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 4062.3F, 0.0F, 4062.3F, 0.0F, false, floatArray0, "D$=$@(8", false, true, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((byte)96, bigDecimal0.byteValue());
      assertEquals((short) (-5536), bigDecimal0.shortValue());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals(4062.3F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(4062.3F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((byte)96, bigDecimal0.byteValue());
      assertEquals((short) (-5536), bigDecimal0.shortValue());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals(4062.3F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(4062.3F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("D$=$@(8", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(4062.3F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("D$=$@(8", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals(2031.15F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(4062.3F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent1 = (TemporaryURLContent)homePieceOfFurniture0.getIcon();
      assertNotNull(temporaryURLContent1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertSame(temporaryURLContent1, temporaryURLContent0);
      assertEquals(4, floatArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((byte)96, bigDecimal0.byteValue());
      assertEquals((short) (-5536), bigDecimal0.shortValue());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals(4062.3F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("D$=$@(8", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(4062.3F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("D$=$@(8", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(4062.3F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("D$=$@(8", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals(2031.15F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(4062.3F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(temporaryURLContent1.isJAREntry());
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, (-3081.73F), false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.37146938F, homeLight0.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.18573469F, homeLight0.getX(), 0.01F);
      assertEquals(0.18573469F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.37146938F, homeLight0.getHeight(), 0.01F);
      assertEquals((-3081.73F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3081.73F), homeLight0.getElevation(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.37146938F, homeLight0.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.18573469F, homeLight0.getX(), 0.01F);
      assertEquals(0.18573469F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.37146938F, homeLight0.getHeight(), 0.01F);
      assertEquals((-3081.73F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3081.73F), homeLight0.getElevation(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.37146938F, homeLight0.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.18573469F, homeLight0.getX(), 0.01F);
      assertEquals(0.18573469F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.37146938F, homeLight0.getHeight(), 0.01F);
      assertEquals((-3081.73F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3081.73F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertEquals((-3081.73F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.18573469F, homeLight1.getY(), 0.01F);
      assertEquals(0.18573469F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals(0.37146938F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.37146938F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-3081.73F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.37146938F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertNotNull(homeLight2);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.18573469F, homeLight2.getY(), 0.01F);
      assertEquals("COLOR", homeLight2.getDescription());
      assertEquals((-3081.73F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.18573469F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("COLOR", homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-3081.73F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.37146938F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      homeLight2.setDescription("COLOR");
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.18573469F, homeLight2.getY(), 0.01F);
      assertEquals("COLOR", homeLight2.getDescription());
      assertEquals((-3081.73F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.18573469F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("COLOR", homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-3081.73F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.37146938F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      homeLight0.setX(0.5F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.37146938F, homeLight0.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.18573469F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.37146938F, homeLight0.getHeight(), 0.01F);
      assertEquals((-3081.73F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3081.73F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      
      homeLight2.setMovable(false);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.18573469F, homeLight2.getY(), 0.01F);
      assertEquals("COLOR", homeLight2.getDescription());
      assertEquals((-3081.73F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.18573469F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("COLOR", homeLight2.getName());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-3081.73F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.37146938F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.37146938F, 0.37146938F, 5171.506F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-3081.73F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.37146938F, homeLight0.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.18573469F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.37146938F, homeLight0.getHeight(), 0.01F);
      assertEquals((-3081.73F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3081.73F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      Level level0 = new Level("", 0.0F, 1262.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(1262.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      homeLight0.setLevel(level0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1262.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      
      Level level1 = new Level("COLOR", 0.0F, 0.0F, 0.0F);
      assertNotNull(level1);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("COLOR", level1.getName());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean0 = homeLight0.isAtLevel(level1);
      assertNotSame(level1, level0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("COLOR", level1.getName());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
      
      float float0 = homeLight0.getAngle();
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, float0, 0.01F);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      float[][] floatArray1 = homeLight0.getModelRotation();
      assertNotNull(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals(3, floatArray1.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("tOLEOR", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      
      Integer integer0 = homeLight0.getColor();
      assertNull(integer0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("tOLEOR", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1678));
      assertNotNull(float0);
      assertEquals((-1678.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 1330.356F, 0.0F, (-1678), float0);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1678.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-1678), lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1678), float0);
      assertNotNull(lightSource1);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals((-1678), lightSource1.getColor());
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals((-1678.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      
      FurnitureCategory furnitureCategory0 = catalogLight0.getCategory();
      assertNull(furnitureCategory0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("COLOR", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("COLOR", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("COLOR", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertEquals("COLOR", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("COLOR", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("xH", propertyChangeListenerProxy1);
      assertNotNull(propertyChangeListenerProxy2);
      assertEquals("COLOR", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("COLOR", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("xH", propertyChangeListenerProxy2.getPropertyName());
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      
      homeLight0.setName("#K%RAO@URX");
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("#K%RAO@URX", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Content content0 = homeLight0.getIcon();
      assertNull(content0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("#K%RAO@URX", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.containsPoint(2342.4333F, 2342.4333F, 3.4028235E38F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("#K%RAO@URX", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
      
      homeLight0.setAngle(0.5F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("#K%RAO@URX", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      homeLight0.setShininess((Float) null);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("#K%RAO@URX", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      Level level0 = new Level("COLOR", 0.0F, 1262.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(1262.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("COLOR", level0.getName());
      
      homeLight0.setLevel(level0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1262.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("COLOR", level0.getName());
      
      Level level1 = new Level("COLOR", 0.0F, 1262.0F, 0.0F);
      assertNotNull(level1);
      assertEquals(1262.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("COLOR", level1.getName());
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean0 = homeLight0.isAtLevel(level1);
      assertNotSame(level1, level0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1262.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("COLOR", level1.getName());
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, (-16.694164F), (-16.694164F), (-16.694164F), (-3081.734F), false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-16.694164F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-16.694164F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-8.347082F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-8.347082F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-16.694164F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-16.694164F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-16.694164F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-8.347082F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-8.347082F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-16.694164F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNull(propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      homeLight0.setName((String) null);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-16.694164F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-16.694164F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-8.347082F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-8.347082F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-16.694164F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      
      Content content0 = homeLight0.getIcon();
      assertNull(content0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-16.694164F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-16.694164F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-8.347082F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-8.347082F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-16.694164F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = bigDecimal0.toEngineeringString();
      assertNotNull(string1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals("1", string1);
      
      homeLight0.setAngle(560.2026F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-16.694164F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-16.694164F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-8.347082F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-8.347082F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.99908334F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-16.694164F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-16.694164F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-16.694164F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-8.347082F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-8.347082F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.99908334F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-16.694164F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-8.347082F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3081.734F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-8.347082F), homeLight1.getX(), 0.01F);
      assertEquals(0.99908334F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-3081.734F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals((-16.694164F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertEquals((-16.694164F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals((-16.694164F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight1.setShininess((Float) null);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-16.694164F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-16.694164F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-8.347082F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-8.347082F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.99908334F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-16.694164F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-8.347082F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3081.734F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-8.347082F), homeLight1.getX(), 0.01F);
      assertEquals(0.99908334F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-3081.734F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals((-16.694164F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertEquals((-16.694164F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals((-16.694164F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      float float0 = homeLight1.getWidth();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-16.694164F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals((-16.694164F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals((-16.694164F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-16.694164F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-16.694164F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-8.347082F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-8.347082F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.99908334F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-16.694164F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-8.347082F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3081.734F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-8.347082F), homeLight1.getX(), 0.01F);
      assertEquals(0.99908334F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-3081.734F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals((-16.694164F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isVisible());
      assertEquals((-16.694164F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals((-16.694164F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-16.694164F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOLEOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setVisible(true);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Float float0 = new Float((-0.96685743F));
      assertNotNull(float0);
      assertEquals((-0.96685743F), (float)float0, 0.01F);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-2872));
      assertNotNull(integer0);
      assertEquals((-2872), (int)integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super clas isn't cloeable", (Content) null, (Content) null, (-0.96685743F), (-0.96685743F), (-0.96685743F), (-0.96685743F), false, (-2872), (-0.96685743F), sashArray0, integer0, (float[][]) null, false, (-0.96685743F), false);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2872.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2872), (int)catalogDoorOrWindow0.getColor());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2872.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2872), (int)catalogDoorOrWindow0.getColor());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-2872.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.48342872F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.48342872F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2872), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      
      homeDoorOrWindow0.setColor(integer0);
      assertEquals(0, sashArray0.length);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2872.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2872), (int)catalogDoorOrWindow0.getColor());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-2872.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.48342872F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.48342872F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2872), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      
      float float1 = homeDoorOrWindow0.getNameAngle();
      assertEquals(0, sashArray0.length);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2872.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2872), (int)catalogDoorOrWindow0.getColor());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-2872.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.48342872F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.48342872F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2872), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      BigDecimal bigDecimal0 = homeDoorOrWindow0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertEquals(0, sashArray0.length);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2872.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2872), (int)catalogDoorOrWindow0.getColor());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Super clas isn't cloeable", catalogDoorOrWindow0.getName());
      assertEquals((-0.96685743F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-2872.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.48342872F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.48342872F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-0.96685743F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Super clas isn't cloeable", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.96685743F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-0.96685743F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2872), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setDescription("COLOR");
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      homeLight0.setX(0.0F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(1030.4F, 1334.94F, (-1013.6F));
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(boolean0);
      
      Level level0 = new Level("COLOR", (-2263.4402F), (-3081.734F), (-3081.734F));
      assertNotNull(level0);
      assertEquals("COLOR", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-3081.734F), level0.getFloorThickness(), 0.01F);
      assertEquals((-3081.734F), level0.getHeight(), 0.01F);
      assertEquals((-2263.4402F), level0.getElevation(), 0.01F);
      
      boolean boolean1 = homeLight0.isAtLevel(level0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-3081.734F), level0.getFloorThickness(), 0.01F);
      assertEquals((-3081.734F), level0.getHeight(), 0.01F);
      assertEquals((-2263.4402F), level0.getElevation(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 2.0F, 1090.03F, (-2848.6035F), (-1.0F), false, lightSourceArray0, (float[][]) null, "! P%ALPpQ/XoEon8WY(", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(545.015F, homeLight1.getY(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2848.6035F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(1090.03F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = new HomeLight(homeLight0);
      assertNotNull(homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1090.03F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight2.getX(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertEquals(2.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertNull(homeLight2.getColor());
      assertEquals((-2848.6035F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertEquals(545.015F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      
      homeLight1.setDescription("! P%ALPpQ/XoEon8WY(");
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(545.015F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2848.6035F), homeLight1.getHeight(), 0.01F);
      assertEquals("! P%ALPpQ/XoEon8WY(", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(1090.03F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      
      homeLight2.setX((-3050.9814F));
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-3050.9814F), homeLight2.getX(), 0.01F);
      assertEquals(1090.03F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertEquals(2.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertNull(homeLight2.getColor());
      assertEquals((-2848.6035F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertEquals(545.015F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      
      HomeLight homeLight3 = new HomeLight(homeLight0);
      assertNotNull(homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight3.getCurrency());
      assertEquals(2.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(545.015F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals("", homeLight3.getCatalogId());
      assertEquals(1090.03F, homeLight3.getDepth(), 0.01F);
      assertEquals((-1.0F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals((-2848.6035F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      
      homeLight3.setNameAngle((-1090.0F));
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight3.getCurrency());
      assertEquals(2.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(545.015F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertEquals(3.2742434F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals("", homeLight3.getCatalogId());
      assertEquals(1090.03F, homeLight3.getDepth(), 0.01F);
      assertEquals((-1.0F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals((-2848.6035F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      
      homeLight0.setMovable(false);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      boolean boolean0 = homeLight2.isTopLeftPointAt((-1090.0F), 1096.7F, 1.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-3050.9814F), homeLight2.getX(), 0.01F);
      assertEquals(1090.03F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertEquals(2.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertNull(homeLight2.getColor());
      assertEquals((-2848.6035F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertEquals(545.015F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(boolean0);
      
      String string1 = homeLight3.getStaircaseCutOutShape();
      assertNull(string1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight3.getCurrency());
      assertEquals(2.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(545.015F, homeLight3.getY(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getColor());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertEquals(3.2742434F, homeLight3.getNameAngle(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertNull(homeLight3.getShininess());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals("", homeLight3.getCatalogId());
      assertEquals(1090.03F, homeLight3.getDepth(), 0.01F);
      assertEquals((-1.0F), homeLight3.getGroundElevation(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals((-2848.6035F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      
      float float0 = homeLight1.getY();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(545.015F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2848.6035F), homeLight1.getHeight(), 0.01F);
      assertEquals("! P%ALPpQ/XoEon8WY(", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-1.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(1090.03F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertEquals(545.015F, float0, 0.01F);
      
      homeLight0.setY(545.015F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1090.03F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals("! P%ALPpQ/XoEon8WY(", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals((-2848.6035F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(545.015F, homeLight0.getY(), 0.01F);
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1090.03F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-2848.6035F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-3081.734F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("COLOR", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-3081.734F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-3081.734F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertNotNull(homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-3081.734F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals((-3081.734F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, (Content) null, (Content) null, 1283.3903F, 0.5F, (-1.0F), (-392.1506F), false, 0.0F, (-3050.9814F), sashArray0, (Integer) null, (float[][]) null, false, (-3081.734F), false);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1283.3903F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-392.1506F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(641.6951F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3050.9814F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      
      int int0 = Integer.max((-1), (-1));
      assertEquals((-1), int0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1283.3903F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-392.1506F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(641.6951F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3050.9814F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(1283.3903F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.5F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-3050.9814F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(641.6951F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      homeDoorOrWindow0.setY((-1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1283.3903F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-392.1506F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(641.6951F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3050.9814F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      homeLight2.setVisible(false);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-3081.734F), catalogLight0.getElevation(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-3081.734F), homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-3081.734F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1283.3903F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-392.1506F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(641.6951F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3050.9814F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      homeDoorOrWindow0.setX(0.0F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1283.3903F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-392.1506F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3050.9814F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      homeDoorOrWindow0.setColor((Integer) null);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1283.3903F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-392.1506F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3050.9814F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      homeDoorOrWindow0.setMovable(false);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1283.3903F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-392.1506F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3050.9814F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      float float0 = homeDoorOrWindow0.getX();
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals((-3050.9814F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-3081.734F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1283.3903F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1283.3903F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-392.1506F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-392.1506F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3050.9814F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("tOIOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("tOIOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("tOIOR", homeLight0.getCatalogId());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals("tOIOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      
      homeLight0.setModelMirrored(true);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("tOIOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("tOIOR", homeLight0.getCatalogId());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals("tOIOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      
      boolean boolean0 = homeLight0.isModelMirrored();
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("tOIOR", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("tOIOR", homeLight0.getCatalogId());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals("tOIOR", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isModelMirrored());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("ji-$</0t[~dN[fJ`We");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.ji-$</0t[~dN[fJ`We
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "tOLOR";
      stringArray0[1] = "q/#%\"/FM}dgm$M}P%%";
      stringArray0[2] = "Moe/34qfS'ur";
      stringArray0[3] = "";
      stringArray0[4] = "tOLOR";
      stringArray0[5] = "tOLOR";
      stringArray0[6] = "q/#%\"/FM}dgm$M}P%%";
      stringArray0[7] = "tOLOR";
      Long long0 = new Long(604800000L);
      assertNotNull(long0);
      assertEquals(604800000L, (long)long0);
      
      Float float0 = new Float(1.8114886283874512);
      assertNotNull(float0);
      assertEquals(1.8114886F, (float)float0, 0.01F);
      
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "q/#%\"/FM}dgm$M}P%%", "Moe/34qfS'ur", "tOLOR", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 4277.3726F, 852.602F, 604800000L, 0.0F, false, lightSourceArray0, "tOLOR", (float[][]) null, "VALUE_ADDED_TAX_PERCENTAGE", true, true, false, bigDecimal0, bigDecimal0, "q/#%\"/FM}dgm$M}P%%");
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(8, stringArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(4277.3726F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(852.602F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1.8114886F, catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getStaircaseCutOutShape());
      assertEquals(604800000L, (long)catalogLight0.getCreationDate());
      assertEquals(6.048E8F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals("Moe/34qfS'ur", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getInformation());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(8, stringArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(4277.3726F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(852.602F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1.8114886F, catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getStaircaseCutOutShape());
      assertEquals(604800000L, (long)catalogLight0.getCreationDate());
      assertEquals(6.048E8F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals("Moe/34qfS'ur", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getInformation());
      assertEquals(426.301F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Moe/34qfS'ur", homeLight0.getDescription());
      assertEquals(4277.3726F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertEquals("tOLOR", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(852.602F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(2138.6863F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(6.048E8F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      homeLight0.setAngle((-1.0F));
      assertEquals(2, lightSourceArray0.length);
      assertEquals(8, stringArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(4277.3726F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(852.602F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1.8114886F, catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getStaircaseCutOutShape());
      assertEquals(604800000L, (long)catalogLight0.getCreationDate());
      assertEquals(6.048E8F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals("Moe/34qfS'ur", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getInformation());
      assertEquals(426.301F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Moe/34qfS'ur", homeLight0.getDescription());
      assertEquals(4277.3726F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertEquals("tOLOR", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(852.602F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(2138.6863F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(6.048E8F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(8, stringArray0.length);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Moe/34qfS'ur", homeLight1.getDescription());
      assertEquals("tOLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(2138.6863F, homeLight1.getX(), 0.01F);
      assertEquals("tOLOR", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(5.2831855F, homeLight1.getAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(6.048E8F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(426.301F, homeLight1.getY(), 0.01F);
      assertEquals(4277.3726F, homeLight1.getWidth(), 0.01F);
      assertEquals(852.602F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(4277.3726F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(852.602F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1.8114886F, catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getStaircaseCutOutShape());
      assertEquals(604800000L, (long)catalogLight0.getCreationDate());
      assertEquals(6.048E8F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals("Moe/34qfS'ur", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getInformation());
      assertEquals(426.301F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Moe/34qfS'ur", homeLight0.getDescription());
      assertEquals(4277.3726F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertEquals("tOLOR", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(852.602F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(2138.6863F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(6.048E8F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(8, stringArray0.length);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Moe/34qfS'ur", homeLight1.getDescription());
      assertEquals("tOLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(2138.6863F, homeLight1.getX(), 0.01F);
      assertEquals("tOLOR", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(5.2831855F, homeLight1.getAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(6.048E8F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(426.301F, homeLight1.getY(), 0.01F);
      assertEquals(4277.3726F, homeLight1.getWidth(), 0.01F);
      assertEquals(852.602F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(426.301F, homeLight2.getY(), 0.01F);
      assertEquals(4277.3726F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(5.2831855F, homeLight2.getAngle(), 0.01F);
      assertEquals("Moe/34qfS'ur", homeLight2.getDescription());
      assertEquals("tOLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getCurrency());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(6.048E8F, homeLight2.getHeight(), 0.01F);
      assertEquals(2138.6863F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(852.602F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getName());
      assertEquals("tOLOR", homeLight2.getStaircaseCutOutShape());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(4277.3726F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(852.602F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1.8114886F, catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getStaircaseCutOutShape());
      assertEquals(604800000L, (long)catalogLight0.getCreationDate());
      assertEquals(6.048E8F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals("Moe/34qfS'ur", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getInformation());
      assertEquals(426.301F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Moe/34qfS'ur", homeLight0.getDescription());
      assertEquals(4277.3726F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertEquals("tOLOR", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(852.602F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(2138.6863F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(6.048E8F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      boolean boolean0 = homeLight2.isTopRightPointAt(604800000L, (-1.0F), (-2.543264F));
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(8, stringArray0.length);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("Moe/34qfS'ur", homeLight1.getDescription());
      assertEquals("tOLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(2138.6863F, homeLight1.getX(), 0.01F);
      assertEquals("tOLOR", homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(5.2831855F, homeLight1.getAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(6.048E8F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(426.301F, homeLight1.getY(), 0.01F);
      assertEquals(4277.3726F, homeLight1.getWidth(), 0.01F);
      assertEquals(852.602F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(426.301F, homeLight2.getY(), 0.01F);
      assertEquals(4277.3726F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(5.2831855F, homeLight2.getAngle(), 0.01F);
      assertEquals("Moe/34qfS'ur", homeLight2.getDescription());
      assertEquals("tOLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isTexturable());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getCurrency());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(6.048E8F, homeLight2.getHeight(), 0.01F);
      assertEquals(2138.6863F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(852.602F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getName());
      assertEquals("tOLOR", homeLight2.getStaircaseCutOutShape());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(4277.3726F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(852.602F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1.8114886F, catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getStaircaseCutOutShape());
      assertEquals(604800000L, (long)catalogLight0.getCreationDate());
      assertEquals(6.048E8F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals("Moe/34qfS'ur", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getInformation());
      assertEquals(426.301F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Moe/34qfS'ur", homeLight0.getDescription());
      assertEquals(4277.3726F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertEquals("tOLOR", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(852.602F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(2138.6863F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(6.048E8F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isTexturable();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(8, stringArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(4277.3726F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(852.602F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1.8114886F, catalogLight0.getGrade(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getStaircaseCutOutShape());
      assertEquals(604800000L, (long)catalogLight0.getCreationDate());
      assertEquals(6.048E8F, catalogLight0.getHeight(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCurrency());
      assertEquals("tOLOR", catalogLight0.getId());
      assertEquals("Moe/34qfS'ur", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getInformation());
      assertEquals(426.301F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("Moe/34qfS'ur", homeLight0.getDescription());
      assertEquals(4277.3726F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertEquals("tOLOR", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(852.602F, homeLight0.getDepth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(2138.6863F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(6.048E8F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getAngle(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("tOIOR", homeLight0.getCatalogId());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("tOIOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Float float0 = new Float((double) (-0.032138787F));
      assertNotNull(float0);
      assertEquals((-0.032138787F), (float)float0, 0.01F);
      
      homeLight0.setShininess(float0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getShininess(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("tOIOR", homeLight0.getCatalogId());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals("tOIOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Level level0 = new Level("COLOR", 0.0F, 0.0F, 0.0F);
      assertNotNull(level0);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("COLOR", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("COLOR", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), 0.0F, (-319.403F));
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("68DQw)B+Hpo0fy~v", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("68DQw)B+Hpo0fy~v", propertyChangeListenerProxy0.getPropertyName());
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      BigDecimal bigDecimal1 = homeLight0.getPrice();
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals("COLOR", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      boolean boolean2 = homeLight1.isDeformable();
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals("COLOR", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean2);
      
      float[][] floatArray0 = homeLight0.getModelRotation();
      assertNotNull(floatArray0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("COLOR", catalogLight0.getName());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.equals((Object)homeLight1));
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[19];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight(",bNv8", ",bNv8", ",bNv8", (Content) null, (Content) null, (Content) null, 0.37146938F, 0.37146938F, 0.37146938F, 0.37146938F, false, lightSourceArray0, (float[][]) null, ",bNv8", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(19, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(",bNv8", catalogLight0.getId());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertEquals(",bNv8", catalogLight0.getCreator());
      assertEquals(",bNv8", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals(",bNv8", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(19, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(",bNv8", catalogLight0.getId());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertEquals(",bNv8", catalogLight0.getCreator());
      assertEquals(",bNv8", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals(",bNv8", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(",bNv8", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getElevation(), 0.01F);
      assertEquals(",bNv8", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.37146938F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.18573469F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(",bNv8", homeLight0.getDescription());
      assertEquals(0.18573469F, homeLight0.getX(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getGroundElevation(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(19, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(",bNv8", catalogLight0.getId());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertEquals(",bNv8", catalogLight0.getCreator());
      assertEquals(",bNv8", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals(",bNv8", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(",bNv8", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getElevation(), 0.01F);
      assertEquals(",bNv8", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.37146938F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.18573469F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(",bNv8", homeLight0.getDescription());
      assertEquals(0.18573469F, homeLight0.getX(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.18573469F, homeLight1.getY(), 0.01F);
      assertEquals(0.18573469F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.37146938F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(",bNv8", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.37146938F, homeLight1.getWidth(), 0.01F);
      assertEquals(",bNv8", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.37146938F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight1.getDepth(), 0.01F);
      assertEquals(",bNv8", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.37146938F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      BigDecimal bigDecimal1 = bigDecimal0.negate();
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short) (-10), bigDecimal1.shortValue());
      assertEquals((byte) (-10), bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      boolean boolean0 = homeLight1.isTopRightPointAt(0.37146938F, 0.37146938F, 0.37146938F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(19, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.37146938F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.37146938F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(",bNv8", catalogLight0.getId());
      assertEquals(0.37146938F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(0.37146938F, catalogLight0.getDepth(), 0.01F);
      assertEquals(",bNv8", catalogLight0.getCreator());
      assertEquals(",bNv8", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals(",bNv8", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(",bNv8", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getElevation(), 0.01F);
      assertEquals(",bNv8", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.37146938F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.18573469F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(",bNv8", homeLight0.getDescription());
      assertEquals(0.18573469F, homeLight0.getX(), 0.01F);
      assertEquals(0.37146938F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.18573469F, homeLight1.getY(), 0.01F);
      assertEquals(0.18573469F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.37146938F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(",bNv8", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.37146938F, homeLight1.getWidth(), 0.01F);
      assertEquals(",bNv8", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.37146938F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.37146938F, homeLight1.getDepth(), 0.01F);
      assertEquals(",bNv8", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.37146938F, homeLight1.getHeight(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator((HomePieceOfFurniture.SortableProperty) null);
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      
      Sash[] sashArray0 = new Sash[0];
      Integer integer0 = new Integer((-1700));
      assertNotNull(integer0);
      assertEquals((-1700), (int)integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Super class isn't cloneable", (Content) null, (Content) null, 2.0F, 80.53F, 424.1F, 0.0F, false, (-1700), 1.0F, sashArray0, integer0, (float[][]) null, false, 1.5793494F, false);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      
      int int0 = Integer.max((-484), (-1700));
      assertEquals((-484), int0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertEquals("Super class isn't cloneable", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(40.265F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(80.53F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      homeDoorOrWindow1.setVisible(false);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertEquals("Super class isn't cloneable", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(40.265F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(80.53F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      homeDoorOrWindow1.setNameStyle((TextStyle) null);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertEquals("Super class isn't cloneable", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(40.265F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(80.53F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      homeDoorOrWindow0.setColor(integer0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      homeDoorOrWindow0.setMovable(false);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      float float1 = homeDoorOrWindow0.getX();
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(1.0F, float1, 0.01F);
      
      homeDoorOrWindow1.setNameStyle((TextStyle) null);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertEquals("Super class isn't cloneable", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(40.265F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(80.53F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow1.clone();
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals((-1700.0F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(424.1F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow2.getName());
      assertEquals(1.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(40.265F, homeDoorOrWindow2.getY(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals((-1700), (int)homeDoorOrWindow2.getColor());
      assertNull(homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(80.53F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(2.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(424.1F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.5793494F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(80.53F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1700.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1700), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Super class isn't cloneable", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1700.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(80.53F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(40.265F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Super class isn't cloneable", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1700), (int)homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(424.1F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1700.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1700), (int)homeDoorOrWindow1.getColor());
      assertEquals("Super class isn't cloneable", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(40.265F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(80.53F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertNotNull(homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isTexturable());
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      
      BigDecimal bigDecimal2 = homeLight1.getValueAddedTax();
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      homeLight2.setDescription("COLOR");
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals("COLOR", homeLight2.getDescription());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      
      homeLight0.setX(0.5F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      
      HomeLight homeLight3 = homeLight1.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals((-3050.9814F), homeLight3.getElevation(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals("", homeLight3.getDescription());
      assertEquals("COLOR", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getCurrency());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("`iRa';$CmfU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.`iRa';$CmfU
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "com.eteks.sweethome3d.model.Level", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(uRL1.equals((Object)uRL0));
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL1, false);
      assertNotNull(resourceURLContent0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float[][] floatArray0 = new float[3][8];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1865.7F;
      floatArray1[2] = 1795.1F;
      floatArray1[3] = 1795.1F;
      floatArray1[4] = 1865.7F;
      floatArray1[5] = 1795.1F;
      floatArray1[6] = 1795.1F;
      floatArray1[7] = 1865.7F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1865.7F;
      floatArray2[1] = 1865.7F;
      floatArray2[2] = 1865.7F;
      floatArray2[3] = 1865.7F;
      floatArray2[4] = 1795.1F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 1865.7F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1795.1F;
      floatArray3[4] = 1.0F;
      floatArray3[5] = 1795.1F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "com.eteks.sweethome3d.model.HomePieceOfFurniture$15", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1865.7F, 1795.1F, 1865.7F, 1795.1F, true, "com.eteks.sweethome3d.model.Level", floatArray0, "com.eteks.sweethome3d.model.Level", false, false, true, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$15");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(3, floatArray0.length);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1795.1F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", catalogPieceOfFurniture0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.Level", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.Level", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1865.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1795.1F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1865.7F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(3, floatArray0.length);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1795.1F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1865.7F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(897.55F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1795.1F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(932.85F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1865.7F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1795.1F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Level", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1795.1F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", catalogPieceOfFurniture0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.Level", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.Level", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1865.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1795.1F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1865.7F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      BigDecimal bigDecimal1 = homePieceOfFurniture0.getValueAddedTax();
      assertNotNull(bigDecimal1);
      assertNotSame(uRL0, uRL1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(uRL1, uRL0);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(3, floatArray0.length);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1795.1F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1865.7F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(897.55F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1795.1F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(932.85F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1865.7F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1795.1F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Level", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1795.1F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", catalogPieceOfFurniture0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.Level", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$15", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.Level", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1865.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1795.1F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1865.7F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[17];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOLEOR", "tOLEOR", "tOLEOR", (Content) null, (Content) null, (Content) null, (-0.032F), (-0.032F), (-0.032F), (-0.032F), false, lightSourceArray0, (float[][]) null, "tOLEOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(17, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-0.032F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-0.032F), catalogLight0.getDepth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-0.032F), catalogLight0.getHeight(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(17, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-0.032F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-0.032F), catalogLight0.getDepth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-0.032F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.032F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.032F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.032F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.016F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-0.032F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.016F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("tOLEOR", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      boolean boolean0 = homeLight0.isTopRightPointAt((-0.032F), 166.299F, 166.299F);
      assertEquals(17, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-0.032F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.032F), catalogLight0.getWidth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getCreator());
      assertEquals("tOLEOR", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-0.032F), catalogLight0.getDepth(), 0.01F);
      assertEquals("tOLEOR", catalogLight0.getId());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCurrency());
      assertEquals("tOLEOR", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-0.032F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("tOLEOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-0.032F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.032F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.032F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.016F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-0.032F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.016F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.032F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("tOLEOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("tOLEOR", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOLOR", "tOLOR", "tOLOR", (Content) null, (Content) null, (Content) null, 1000.3F, 1000.3F, 1000.3F, 1000.3F, false, lightSourceArray0, (float[][]) null, "tOLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertEquals("tOLOR", catalogLight0.getCreator());
      assertEquals("tOLOR", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getId());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertEquals("tOLOR", catalogLight0.getCreator());
      assertEquals("tOLOR", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1000.3F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1000.3F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1000.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1000.3F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1000.3F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(500.15F, homeLight0.getY(), 0.01F);
      assertEquals(500.15F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals("tOLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("tOLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1000.3F, 0.3926991F, 1000.3F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertEquals("tOLOR", catalogLight0.getCreator());
      assertEquals("tOLOR", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1000.3F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1000.3F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1000.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1000.3F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1000.3F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(500.15F, homeLight0.getY(), 0.01F);
      assertEquals(500.15F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals("tOLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("tOLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(boolean0);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertEquals("tOLOR", catalogLight0.getCreator());
      assertEquals("tOLOR", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1000.3F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1000.3F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1000.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1000.3F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1000.3F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(500.15F, homeLight0.getY(), 0.01F);
      assertEquals(500.15F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals("tOLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("tOLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(1000.3F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(1000.3F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals("tOLOR", homeLight1.getDescription());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals("tOLOR", homeLight1.getCatalogId());
      assertEquals("tOLOR", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(1000.3F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1000.3F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(500.15F, homeLight1.getY(), 0.01F);
      assertEquals(500.15F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(1000.3F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      float float0 = homeLight0.getGroundElevation();
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1000.3F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1000.3F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals(1000.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1000.3F, catalogLight0.getHeight(), 0.01F);
      assertEquals("tOLOR", catalogLight0.getCreator());
      assertEquals("tOLOR", catalogLight0.getDescription());
      assertEquals("tOLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOLOR", catalogLight0.getId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1000.3F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1000.3F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1000.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("tOLOR", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1000.3F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1000.3F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(500.15F, homeLight0.getY(), 0.01F);
      assertEquals(500.15F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertEquals("tOLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("tOLOR", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(1000.3F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      
      LightSource lightSource0 = new LightSource(3.4028235E38F, 2642.0F, (-539.3069F), (-2526), float1);
      assertNotNull(lightSource0);
      assertEquals(1.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals((-2526), lightSource0.getColor());
      assertEquals(2642.0F, lightSource0.getY(), 0.01F);
      assertEquals(3.4028235E38F, lightSource0.getX(), 0.01F);
      assertEquals((-539.3069F), lightSource0.getZ(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, 538.10187F, (-539.3069F), (-1114), float0);
      assertNotNull(lightSource1);
      assertEquals((-539.3069F), lightSource1.getZ(), 0.01F);
      assertEquals(0.0F, lightSource1.getDiameter(), 0.01F);
      assertEquals((-1114), lightSource1.getColor());
      assertEquals(538.10187F, lightSource1.getY(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = new BigDecimal((-1700));
      assertNotNull(bigDecimal1);
      assertEquals((short) (-1700), bigDecimal1.shortValue());
      assertEquals((byte)92, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      CatalogLight catalogLight0 = new CatalogLight("", "TUu'm L0-oE9-yDL~", "com.eteks.sweethome3d.model.Sash", (Content) null, (Content) null, (Content) null, 0.0F, (-1114), 0.0F, (-2526), false, lightSourceArray0, (float[][]) null, "ez,[n4[k", false, bigDecimal1, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-1700), bigDecimal1.shortValue());
      assertEquals((byte)92, bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1114.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2526.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("TUu'm L0-oE9-yDL~", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("ez,[n4[k", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Sash", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-1700), bigDecimal1.shortValue());
      assertEquals((byte)92, bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1114.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2526.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("TUu'm L0-oE9-yDL~", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("ez,[n4[k", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Sash", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1114.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-557.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals("TUu'm L0-oE9-yDL~", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-2526.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Sash", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2526.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-1700), bigDecimal1.shortValue());
      assertEquals((byte)92, bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1114.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2526.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("TUu'm L0-oE9-yDL~", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("ez,[n4[k", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Sash", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1114.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-557.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals("TUu'm L0-oE9-yDL~", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-2526.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Sash", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2526.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeLight0.setTexture((HomeTexture) null);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-1700), bigDecimal1.shortValue());
      assertEquals((byte)92, bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1114.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2526.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("TUu'm L0-oE9-yDL~", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("ez,[n4[k", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Sash", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1114.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-557.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals("TUu'm L0-oE9-yDL~", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-2526.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Sash", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2526.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      Level level0 = new Level(")h~>", 0.5F, 538.10187F, 3.4028235E38F);
      assertNotNull(level0);
      assertEquals(538.10187F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3.4028235E38F, level0.getHeight(), 0.01F);
      assertEquals(0.5F, level0.getElevation(), 0.01F);
      assertEquals(")h~>", level0.getName());
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(538.10187F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3.4028235E38F, level0.getHeight(), 0.01F);
      assertEquals(0.5F, level0.getElevation(), 0.01F);
      assertEquals(")h~>", level0.getName());
      assertEquals(0.5F, level1.getElevation(), 0.01F);
      assertEquals(")h~>", level1.getName());
      assertEquals(3.4028235E38F, level1.getHeight(), 0.01F);
      assertEquals(538.10187F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertFalse(level1.equals((Object)level0));
      
      Level level2 = homeLight0.getLevel();
      assertNull(level2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-1700), bigDecimal1.shortValue());
      assertEquals((byte)92, bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1114.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2526.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("TUu'm L0-oE9-yDL~", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("ez,[n4[k", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Sash", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1114.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-557.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals("TUu'm L0-oE9-yDL~", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-2526.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Sash", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2526.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      boolean boolean0 = homeLight0.isAtLevel((Level) null);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-1700), bigDecimal1.shortValue());
      assertEquals((byte)92, bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1114.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2526.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("TUu'm L0-oE9-yDL~", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("ez,[n4[k", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Sash", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1114.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-557.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals("TUu'm L0-oE9-yDL~", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-2526.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Sash", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2526.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(boolean0);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-1700), bigDecimal1.shortValue());
      assertEquals((byte)92, bigDecimal1.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1114.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-2526.0F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("TUu'm L0-oE9-yDL~", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("ez,[n4[k", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.Sash", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1114.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-557.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals("TUu'm L0-oE9-yDL~", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-2526.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Sash", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2526.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "'ovF>");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      assertNotNull(float0);
      assertEquals((-1700.0F), (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource((-3050.9814F), 1330.356F, (-3050.9814F), (-1700), float0);
      assertNotNull(lightSource0);
      assertEquals((-1700.0F), lightSource0.getDiameter(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getX(), 0.01F);
      assertEquals((-3050.9814F), lightSource0.getZ(), 0.01F);
      assertEquals(1330.356F, lightSource0.getY(), 0.01F);
      assertEquals((-1700), lightSource0.getColor());
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.5F, 1330.356F, 0.0F, (-1700), float0);
      assertNotNull(lightSource1);
      assertEquals(1330.356F, lightSource1.getY(), 0.01F);
      assertEquals((-1700), lightSource1.getColor());
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-1700.0F), lightSource1.getDiameter(), 0.01F);
      assertEquals(0.5F, lightSource1.getX(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertNotNull(homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      
      HomeLight homeLight3 = new HomeLight(homeLight2);
      assertNotNull(homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight3.getName());
      assertNull(homeLight3.getColor());
      assertEquals((-3050.9814F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertFalse(homeLight3.isMovable());
      assertEquals((-3050.9814F), homeLight3.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      
      homeLight0.setNameVisible(false);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      
      HomeLight homeLight4 = homeLight1.clone();
      assertNotNull(homeLight4);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals("COLOR", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getY(), 0.01F);
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertEquals(0.0F, homeLight4.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getColor());
      assertEquals((-3050.9814F), homeLight4.getGroundElevation(), 0.01F);
      assertFalse(homeLight4.isMovable());
      assertEquals(0.0F, homeLight4.getHeight(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals((-3050.9814F), homeLight4.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight4.getDescription());
      assertFalse(homeLight4.isResizable());
      assertNull(homeLight4.getShininess());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertTrue(homeLight4.isDeformable());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertTrue(homeLight4.isVisible());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight4.getCatalogId());
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      
      BigDecimal bigDecimal2 = homeLight4.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal2);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertEquals(2, lightSourceArray0.length);
      assertEquals("COLOR", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getY(), 0.01F);
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertEquals(0.0F, homeLight4.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getColor());
      assertEquals((-3050.9814F), homeLight4.getGroundElevation(), 0.01F);
      assertFalse(homeLight4.isMovable());
      assertEquals(0.0F, homeLight4.getHeight(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals((-3050.9814F), homeLight4.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight4.getDescription());
      assertFalse(homeLight4.isResizable());
      assertNull(homeLight4.getShininess());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertTrue(homeLight4.isDeformable());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertTrue(homeLight4.isVisible());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals("COLOR", homeLight4.getCatalogId());
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertEquals((short)2, bigDecimal2.shortValue());
      assertEquals((byte)2, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("COLOR", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals("COLOR", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-3050.9814F), homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      
      homeLight0.setNameVisible(false);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      
      boolean boolean0 = homeLight3.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals("COLOR", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals((-3050.9814F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight3.getName());
      assertNull(homeLight3.getColor());
      assertEquals((-3050.9814F), homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals("COLOR", homeLight3.getCatalogId());
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isResizable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertFalse(homeLight3.isMovable());
      assertEquals((-3050.9814F), homeLight3.getElevation(), 0.01F);
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight3.getDescription());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertTrue(boolean0);
      
      homeLight0.setNameAngle(665.178F);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-3050.9814F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("COLOR", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getDescription());
      assertEquals("q/#%\"/FM}dgm$M}P%%", catalogLight0.getCreator());
      assertEquals("q/#%\"/FM}dgm$M}P%%", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(5.4435215F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals((-3050.9814F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-3050.9814F), homeLight0.getElevation(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      
      Level level0 = new Level("COLOR", 0.0F, 1262.0F, 1262.0F);
      assertNotNull(level0);
      assertEquals(1262.0F, level0.getHeight(), 0.01F);
      assertEquals(1262.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("COLOR", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      homeLight0.setLevel(level0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1262.0F, level0.getHeight(), 0.01F);
      assertEquals(1262.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("COLOR", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      
      Level level1 = new Level("COLOR", 0.5F, 1262.0F, 0.0F);
      assertNotNull(level1);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1262.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("COLOR", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.5F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      
      boolean boolean0 = homeLight0.isAtLevel(level1);
      assertNotSame(level1, level0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1262.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("COLOR", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.5F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Level level2 = homeLight0.getLevel();
      assertNotNull(level2);
      assertNotSame(level2, level1);
      assertSame(level2, level0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("COLOR", catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertEquals("COLOR", catalogLight0.getCreator());
      assertEquals("COLOR", catalogLight0.getDescription());
      assertEquals("COLOR", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("COLOR", homeLight0.getDescription());
      assertEquals("COLOR", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("COLOR", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1262.0F, level2.getHeight(), 0.01F);
      assertEquals(1262.0F, level2.getFloorThickness(), 0.01F);
      assertEquals("COLOR", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertFalse(level2.equals((Object)level1));
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("tOIOR", "tOIOR", "tOIOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOIOR", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("tOIOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("tOIOR", catalogLight0.getCreator());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("tOIOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals("tOIOR", homeLight0.getName());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("tOIOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("tOIOR", (Content) null, (-841.9957F), (-841.9957F), true);
      assertNotNull(catalogTexture0);
      assertEquals((-841.9957F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("tOIOR", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertEquals((-841.9957F), catalogTexture0.getHeight(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals((-841.9957F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("tOIOR", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertEquals((-841.9957F), catalogTexture0.getHeight(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-841.9957F), homeTexture0.getWidth(), 0.01F);
      assertEquals((-841.9957F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("tOIOR", homeTexture0.getName());
      
      homeLight0.setTexture(homeTexture0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("tOIOR", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals("tOIOR", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-0.032138787F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.032138787F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-0.032138787F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("tOIOR", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("tOIOR", catalogLight0.getCreator());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.032138787F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("tOIOR", homeLight0.getDescription());
      assertEquals("tOIOR", homeLight0.getName());
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-0.032138787F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("tOIOR", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.032138787F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-841.9957F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("tOIOR", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertEquals((-841.9957F), catalogTexture0.getHeight(), 0.01F);
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-841.9957F), homeTexture0.getWidth(), 0.01F);
      assertEquals((-841.9957F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("tOIOR", homeTexture0.getName());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-1700));
      LightSource lightSource0 = new LightSource(0.5F, 1330.356F, 5.796206F, (-1700), float0);
      lightSourceArray0[1] = lightSource0;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 5.796206F, 5.796206F, 0.0F, (-3050.9814F), false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isTopRightPointAt((-744.266F), 3971.5732F, 1.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homeLight0.isBottomLeftPointAt((-1.0F), 0.0F, (-319.403F));
      Integer integer0 = new Integer(508);
      homeLight0.setColor(integer0);
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-2355.8704F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tLOR", "tLOR", "tLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.removePropertyChangeListener((PropertyChangeListener) null);
      boolean boolean0 = homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(boolean0);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Sash[] sashArray0 = new Sash[9];
      Integer integer0 = new Integer((-2842));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("P(:j%=C@", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, (-2842), 0.0F, sashArray0, integer0, (float[][]) null, false, 0.0F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Level level0 = new Level((String) null, (-2842), 0.25F, 1.0F);
      Level level1 = level0.clone();
      homeDoorOrWindow0.setLevel(level1);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setColor(integer0);
      assertEquals((-2842.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("'_XX", 0.0F, 0.0F, 0.0F);
      boolean boolean0 = homeLight0.isAtLevel(level0);
      boolean boolean1 = homeLight0.isTopRightPointAt(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, (-3081.734F), true, lightSourceArray0, (float[][]) null, "COLOR", true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight1 = new CatalogLight("COLOR", "", "]mo%NXd}Bs!", (Content) null, (Content) null, (Content) null, 4141.26F, (-3081.734F), 0.0F, 4141.26F, false, lightSourceArray0, (float[][]) null, "OeBsyFV=,u)As1", true, bigDecimal1, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getGroundElevation();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", "q/#%\"/FM}dgm$M}P%%", (Content) null, (Content) null, (Content) null, 2048.318F, 0.5F, 0.5F, 2048.318F, false, lightSourceArray0, (float[][]) null, "q/#%\"/FM}dgm$M}P%%", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.5F, 0.5F, (-1698));
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("tLOR", "tLOR", "tLOR", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), false, lightSourceArray0, (float[][]) null, "tLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      boolean boolean0 = homeLight0.isPointAt((-0.032138787F), (-0.032138787F), (-0.032138787F));
      homeLight0.getLevel();
      boolean boolean1 = homeLight0.isAtLevel((Level) null);
      assertEquals((-0.032138787F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.032138787F), homeLight0.getDepth(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getX(), 0.01F);
      assertEquals((-0.016069394F), homeLight0.getY(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("COLOR", "COLOR", "COLOR", (Content) null, (Content) null, (Content) null, 0.9713733F, 0.9713733F, 0.9713733F, 0.9713733F, false, lightSourceArray0, (float[][]) null, "COLOR", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(2098.2258F);
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopLeftPointAt(0.9713733F, 0.9713733F, 2098.2258F);
      homeLight1.getGroundElevation();
      assertEquals(2098.2258F, homeLight0.getX(), 0.01F);
      assertEquals(0.9713733F, homeLight0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("tOaOH", "tOaOH", "tOaOH", (Content) null, (Content) null, (Content) null, (-0.032138787F), (-0.032138787F), (-0.032138787F), (-0.032138787F), true, lightSourceArray0, (float[][]) null, "tOaOH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDepth(1.0F);
      homeLight0.setName("tOaOH");
      homeLight0.setShininess((Float) null);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
  }
}
