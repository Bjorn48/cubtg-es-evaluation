/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:29:47 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.AllMUSes;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AllMUSes_ESTest extends AllMUSes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>((MaxSatDecorator) null);
      FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>>(groupClauseSelectorSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt();
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, solutionFoundListener0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMUSes(solutionFoundListener0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      VecInt vecInt0 = new VecInt();
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((IVecInt) vecInt0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSS(solutionFoundListener0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      allMUSes0.computeAllMSS((SolutionFoundListener) checkMUSSolutionListener0);
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      VecInt vecInt0 = new VecInt(0, 0);
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSS((IVecInt) vecInt0, solutionFoundListener0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      VecInt vecInt0 = new VecInt(507, 3362);
      List<IVecInt> list0 = allMUSes0.computeAllMSS((IVecInt) vecInt0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt0);
      assertTrue(list0.contains(iVecInt0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams((-1277.4444980946), (-4588.803621), (-1277.4444980946), 61);
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, (SolutionFoundListener) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      VecInt vecInt0 = new VecInt(4056, 3141);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(true, lightFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt0, solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams((-1277.4444980946), (-4588.803621), (-1277.4444980946), 50);
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[3];
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0, iVecInt0, checkMUSSolutionListener0);
      abstractMinimalModelArray0[0] = (AbstractMinimalModel) minimal4CardinalityModel0;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(abstractMinimalModelArray0[0]);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4InclusionModel0, false);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      ASolverFactory<OptToSatAdapter> aSolverFactory1 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(optToSatAdapter0).when(aSolverFactory1).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory1);
      IVecInt iVecInt1 = iVecInt0.pop();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt1, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      AllMUSes allMUSes1 = new AllMUSes(true, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      int[] intArray0 = new int[5];
      intArray0[0] = 1843;
      VecInt vecInt0 = new VecInt(intArray0);
      allMUSes1.computeAllMSSOrdered(vecInt0, solutionFoundListener0);
      allMUSes0.computeAllMUSes((IVecInt) vecInt0);
      // Undeclared exception!
      allMUSes1.computeAllMSSOrdered(vecInt0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(iVecInt0, checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.CheckMUSSolutionListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      VecInt vecInt0 = new VecInt(3715, 3715);
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSS((IVecInt) vecInt0, solutionFoundListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(true, lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(0, 0);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(iVecInt0, solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(true, lightFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(optToSatAdapter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes(false, (ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes((ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>>(groupClauseSelectorSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      negationDecorator0.addClause(iVecInt0);
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      VecInt vecInt0 = new VecInt(507, 3362);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, (SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams((-1277.4444980946), (-4588.803621), (-1277.4444980946), 50);
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      allMUSes0.computeAllMUSes((IVecInt) vecInt0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      VecInt vecInt0 = new VecInt(0, 3141);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(false, lightFactory0);
      allMUSes0.computeAllMUSes();
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMUSes((IVecInt) vecInt0, solutionFoundListener0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>>(groupClauseSelectorSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      negationDecorator0.addClause(iVecInt0);
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      allMUSes0.computeAllMSSOrdered(iVecInt0, checkMUSSolutionListener0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>>(groupClauseSelectorSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      negationDecorator0.addClause(iVecInt0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(dimacsOutputSolver0);
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(singleSolutionDetector0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(maxSatDecorator0).isVerbose();
      doReturn(0).when(maxSatDecorator0).nVars();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(maxSatDecorator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(solutionCounter0).getLogPrefix();
      doReturn(false, false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, true, false, true, true).when(solutionCounter0).isVerbose();
      doReturn((-2074), (-2074)).when(solutionCounter0).nVars();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ClausalCardinalitiesDecorator<DimacsOutputSolver> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      SolutionCounter solutionCounter1 = new SolutionCounter(clausalCardinalitiesDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter1, solutionCounter1).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
      ASolverFactory<MinOneDecorator> aSolverFactory1 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      List<IVecInt> list1 = allMUSes0.computeAllMUSes((SolutionFoundListener) checkMUSSolutionListener0);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsOutputSolver0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      ISolver iSolver0 = allMUSes0.getSolverInstance();
      assertNotNull(iSolver0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>((MinOneDecorator) null);
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(negationDecorator0, aSolverFactory0);
      allMUSes0.reset();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ASolverFactory<Minimal4InclusionModel> aSolverFactory0 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory1 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((SolutionFoundListener) checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
