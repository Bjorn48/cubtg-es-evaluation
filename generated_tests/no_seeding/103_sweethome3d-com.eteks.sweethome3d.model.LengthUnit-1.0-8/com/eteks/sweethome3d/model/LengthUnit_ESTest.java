/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 22:29:49 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.LengthUnit;
import java.text.Format;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthUnit_ESTest extends LengthUnit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      float float0 = lengthUnit0.centimeterToUnit(2063.2085F);
      assertEquals(20.632086F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      String string0 = lengthUnit0.getName();
      assertNotNull(string0);
      assertEquals("cm", string0);
      
      Format format0 = lengthUnit0.getFormat();
      assertNotNull(format0);
      
      Format format1 = lengthUnit0.getAreaFormatWithUnit();
      assertNotNull(format1);
      assertFalse(format1.equals((Object)format0));
      
      String string1 = lengthUnit0.getName();
      assertNotNull(string1);
      assertEquals("cm", string1);
      
      float float0 = lengthUnit0.getMaximumLength();
      assertEquals(100000.0F, float0, 0.01F);
      
      String string2 = lengthUnit0.getName();
      assertNotNull(string2);
      assertEquals("cm", string2);
      
      float float1 = LengthUnit.centimeterToInch(100000.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(39370.08F, float1, 0.01F);
      
      float float2 = lengthUnit0.getMagnetizedLength(39370.08F, 100000.0F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(39400.0F, float2, 0.01F);
      
      float float3 = lengthUnit0.unitToCentimeter((-1.0F));
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-1.0F), float3, 0.01F);
      
      float float4 = LengthUnit.centimeterToFoot((-2994.4346F));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-98.24261F), float4, 0.01F);
      
      LengthUnit[] lengthUnitArray0 = LengthUnit.values();
      assertNotNull(lengthUnitArray0);
      assertEquals(4, lengthUnitArray0.length);
      
      float float5 = lengthUnit0.unitToCentimeter(1.0F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(1.0F, float5, 0.01F);
      
      Format format2 = lengthUnit0.getAreaFormatWithUnit();
      assertSame(format2, format1);
      assertNotNull(format2);
      assertFalse(format2.equals((Object)format0));
      
      LengthUnit[] lengthUnitArray1 = LengthUnit.values();
      assertNotSame(lengthUnitArray1, lengthUnitArray0);
      assertNotNull(lengthUnitArray1);
      assertFalse(lengthUnitArray1.equals((Object)lengthUnitArray0));
      assertEquals(4, lengthUnitArray1.length);
      
      float float6 = lengthUnit0.getMaximumLength();
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertEquals(100000.0F, float6, 0.01F);
      
      // Undeclared exception!
      try { 
        LengthUnit.valueOf("(GY8G`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.LengthUnit.(GY8G`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = LengthUnit.footToCentimeter(3.7224543F);
      assertEquals(113.46041F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.centimeterToUnit(3.0F);
      assertEquals(30.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.getMaximumLength();
      assertEquals(253934.97F, float0, 0.01F);
      
      float float1 = lengthUnit0.getMinimumLength();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.3175F, float1, 0.01F);
      
      float float2 = lengthUnit0.getMagnetizedLength(736.824F, 6.0F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(739.14F, float2, 0.01F);
      
      float float3 = lengthUnit0.getMaximumLength();
      assertEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(253934.97F, float3, 0.01F);
      
      LengthUnit lengthUnit1 = LengthUnit.INCH;
      float float4 = lengthUnit1.getMagnetizedLength((-1.0F), 1.0F);
      assertSame(lengthUnit1, lengthUnit0);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals((-1.27F), float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float float0 = LengthUnit.inchToCentimeter(1172.923F);
      assertEquals(2979.2244F, float0, 0.01F);
      
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float1 = lengthUnit0.getMaximumLength();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(100000.0F, float1, 0.01F);
      
      float float2 = lengthUnit0.getMinimumLength();
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.1F, float2, 0.01F);
      
      float float3 = lengthUnit0.getMaximumLength();
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(100000.0F, float3, 0.01F);
      
      float float4 = LengthUnit.centimeterToInch(3806.76F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(1498.7245F, float4, 0.01F);
      
      Format format0 = lengthUnit0.getFormatWithUnit();
      assertNotNull(format0);
      
      Format format1 = lengthUnit0.getFormat();
      assertNotSame(format1, format0);
      assertNotNull(format1);
      assertFalse(format1.equals((Object)format0));
      
      float float5 = LengthUnit.centimeterToFoot(100000.0F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(3280.8398F, float5, 0.01F);
      
      float float6 = lengthUnit0.getMagnetizedLength(3280.8398F, 0.0F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertEquals(3280.8F, float6, 0.01F);
      
      float float7 = lengthUnit0.getMagnetizedLength(100000.0F, 3280.8398F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float0, 0.01F);
      assertEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertEquals(100000.0F, float7, 0.01F);
      
      String string0 = lengthUnit0.getName();
      assertNotNull(string0);
      assertEquals("mm", string0);
      
      Format format2 = lengthUnit0.getAreaFormatWithUnit();
      assertNotNull(format2);
      assertFalse(format2.equals((Object)format0));
      assertFalse(format2.equals((Object)format1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      float float0 = lengthUnit0.centimeterToUnit(1966.1108F);
      assertEquals(774.0594F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      LengthUnit lengthUnit1 = LengthUnit.CENTIMETER;
      Format format0 = lengthUnit1.getFormatWithUnit();
      assertNotNull(format0);
      assertFalse(lengthUnit1.equals((Object)lengthUnit0));
      
      Format format1 = lengthUnit1.getAreaFormatWithUnit();
      assertNotNull(format1);
      assertFalse(lengthUnit1.equals((Object)lengthUnit0));
      assertFalse(format1.equals((Object)format0));
      
      LengthUnit lengthUnit2 = LengthUnit.INCH;
      Format format2 = lengthUnit2.getFormatWithUnit();
      assertNotNull(format2);
      assertFalse(lengthUnit2.equals((Object)lengthUnit0));
      assertFalse(lengthUnit2.equals((Object)lengthUnit1));
      assertFalse(format2.equals((Object)format0));
      assertFalse(format2.equals((Object)format1));
      
      float float0 = lengthUnit0.getMagnetizedLength(47.87F, 47.87F);
      assertFalse(lengthUnit0.equals((Object)lengthUnit1));
      assertFalse(lengthUnit0.equals((Object)lengthUnit2));
      assertEquals(50.0F, float0, 0.01F);
      
      LengthUnit lengthUnit3 = LengthUnit.MILLIMETER;
      float float1 = lengthUnit3.getMagnetizedLength(2080.44F, 50.0F);
      assertSame(lengthUnit3, lengthUnit0);
      assertFalse(lengthUnit3.equals((Object)lengthUnit1));
      assertFalse(lengthUnit3.equals((Object)lengthUnit2));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2080.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      Format format0 = lengthUnit0.getAreaFormatWithUnit();
      assertNotNull(format0);
      
      Format format1 = lengthUnit0.getFormat();
      assertNotNull(format1);
      assertFalse(format1.equals((Object)format0));
      
      float float0 = lengthUnit0.getMagnetizedLength((-632.1F), 0.0F);
      assertEquals((-632.1425F), float0, 0.01F);
      
      float float1 = lengthUnit0.getMaximumElevation();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(25393.496F, float1, 0.01F);
      
      float float2 = LengthUnit.footToCentimeter(25393.496F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(773993.75F, float2, 0.01F);
      
      float float3 = lengthUnit0.getMaximumElevation();
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(25393.496F, float3, 0.01F);
      
      float float4 = lengthUnit0.centimeterToUnit(0.0F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      float float5 = LengthUnit.inchToCentimeter((-965.59F));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertEquals((-2452.5986F), float5, 0.01F);
      
      Format format2 = lengthUnit0.getAreaFormatWithUnit();
      assertSame(format2, format0);
      assertNotNull(format2);
      assertFalse(format2.equals((Object)format1));
      
      LengthUnit lengthUnit1 = LengthUnit.MILLIMETER;
      float float6 = lengthUnit1.getMagnetizedLength((-2452.5986F), 773993.75F);
      assertFalse(lengthUnit1.equals((Object)lengthUnit0));
      assertNotEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertEquals((-2500.0F), float6, 0.01F);
      
      float float7 = lengthUnit0.getMaximumElevation();
      assertFalse(lengthUnit0.equals((Object)lengthUnit1));
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float0, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertEquals(float7, float1, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertEquals(float7, float3, 0.01F);
      assertEquals(25393.496F, float7, 0.01F);
      
      float float8 = LengthUnit.centimeterToFoot((-632.1F));
      assertNotEquals(float8, float1, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float0, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertEquals((-20.738188F), float8, 0.01F);
      
      float float9 = LengthUnit.centimeterToInch(773993.75F);
      assertNotEquals(float9, float3, 0.01F);
      assertNotEquals(float9, float4, 0.01F);
      assertNotEquals(float9, float1, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float5, 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float0, 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertEquals(304721.97F, float9, 0.01F);
      
      float float10 = lengthUnit1.getMinimumLength();
      assertFalse(lengthUnit1.equals((Object)lengthUnit0));
      assertNotEquals(float10, float3, 0.01F);
      assertNotEquals(float10, float4, 0.01F);
      assertNotEquals(float10, float9, 0.01F);
      assertNotEquals(float10, float7, 0.01F);
      assertNotEquals(float10, float5, 0.01F);
      assertNotEquals(float10, float6, 0.01F);
      assertNotEquals(float10, float2, 0.01F);
      assertNotEquals(float10, float0, 0.01F);
      assertNotEquals(float10, float1, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      assertEquals(0.1F, float10, 0.01F);
      
      float float11 = LengthUnit.footToCentimeter((-632.1F));
      assertNotEquals(float11, float6, 0.01F);
      assertNotEquals(float11, float7, 0.01F);
      assertNotEquals(float11, float0, 0.01F);
      assertNotEquals(float11, float3, 0.01F);
      assertNotEquals(float11, float5, 0.01F);
      assertNotEquals(float11, float2, 0.01F);
      assertNotEquals(float11, float10, 0.01F);
      assertNotEquals(float11, float8, 0.01F);
      assertNotEquals(float11, float9, 0.01F);
      assertNotEquals(float11, float4, 0.01F);
      assertNotEquals(float11, float1, 0.01F);
      assertEquals((-19266.406F), float11, 0.01F);
      
      float float12 = lengthUnit0.centimeterToUnit(0.1F);
      assertFalse(lengthUnit0.equals((Object)lengthUnit1));
      assertNotEquals(float12, float0, 0.01F);
      assertNotEquals(float12, float6, 0.01F);
      assertNotEquals(float12, float11, 0.01F);
      assertNotEquals(float12, float2, 0.01F);
      assertNotEquals(float12, float10, 0.01F);
      assertNotEquals(float12, float4, 0.01F);
      assertNotEquals(float12, float3, 0.01F);
      assertNotEquals(float12, float5, 0.01F);
      assertNotEquals(float12, float7, 0.01F);
      assertNotEquals(float12, float9, 0.01F);
      assertNotEquals(float12, float8, 0.01F);
      assertNotEquals(float12, float1, 0.01F);
      assertEquals(0.03937008F, float12, 0.01F);
      
      float float13 = LengthUnit.centimeterToFoot(0.3F);
      assertNotEquals(float13, float3, 0.01F);
      assertNotEquals(float13, float5, 0.01F);
      assertNotEquals(float13, float6, 0.01F);
      assertNotEquals(float13, float10, 0.01F);
      assertNotEquals(float13, float11, 0.01F);
      assertEquals(float13, float4, 0.01F);
      assertNotEquals(float13, float9, 0.01F);
      assertNotEquals(float13, float8, 0.01F);
      assertNotEquals(float13, float1, 0.01F);
      assertNotEquals(float13, float7, 0.01F);
      assertNotEquals(float13, float12, 0.01F);
      assertNotEquals(float13, float2, 0.01F);
      assertNotEquals(float13, float0, 0.01F);
      assertEquals(0.00984252F, float13, 0.01F);
      
      LengthUnit lengthUnit2 = LengthUnit.INCH;
      String string0 = lengthUnit2.getName();
      assertSame(lengthUnit2, lengthUnit0);
      assertNotNull(string0);
      assertFalse(lengthUnit2.equals((Object)lengthUnit1));
      assertEquals("inch", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      Format format0 = lengthUnit0.getAreaFormatWithUnit();
      assertNotNull(format0);
      
      float float0 = lengthUnit0.getMaximumLength();
      assertEquals(100000.0F, float0, 0.01F);
      
      float float1 = lengthUnit0.getMagnetizedLength(100000.0F, 100000.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(100000.0F, float1, 0.01F);
      
      float float2 = lengthUnit0.getMagnetizedLength(100000.0F, 1.0F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(100000.0F, float2, 0.01F);
      
      float float3 = lengthUnit0.unitToCentimeter(0.0F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      float float4 = lengthUnit0.getMagnetizedLength(0.0F, (-2997.429F));
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      float float5 = lengthUnit0.getMaximumElevation();
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(10000.0F, float5, 0.01F);
      
      float float6 = LengthUnit.centimeterToFoot(10000.0F);
      assertNotEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(328.08398F, float6, 0.01F);
      
      float float7 = LengthUnit.centimeterToInch(328.08398F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float0, 0.01F);
      assertNotEquals(float7, float3, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertEquals(129.16693F, float7, 0.01F);
      
      float float8 = lengthUnit0.getMinimumLength();
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float0, 0.01F);
      assertNotEquals(float8, float1, 0.01F);
      assertNotEquals(float8, float3, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertEquals(0.1F, float8, 0.01F);
      
      float float9 = LengthUnit.footToCentimeter(328.08398F);
      assertNotEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float1, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertNotEquals(float9, float0, 0.01F);
      assertEquals(float9, float5, 0.01F);
      assertNotEquals(float9, float4, 0.01F);
      assertNotEquals(float9, float3, 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      assertEquals(10000.0F, float9, 0.01F);
      
      LengthUnit lengthUnit1 = LengthUnit.CENTIMETER;
      float float10 = lengthUnit1.getMagnetizedLength(10000.0F, 11.9375F);
      assertFalse(lengthUnit1.equals((Object)lengthUnit0));
      assertNotEquals(float10, float0, 0.01F);
      assertNotEquals(float10, float4, 0.01F);
      assertNotEquals(float10, float8, 0.01F);
      assertNotEquals(float10, float2, 0.01F);
      assertNotEquals(float10, float6, 0.01F);
      assertEquals(float10, float5, 0.01F);
      assertNotEquals(float10, float1, 0.01F);
      assertNotEquals(float10, float7, 0.01F);
      assertEquals(float10, float9, 0.01F);
      assertNotEquals(float10, float3, 0.01F);
      assertEquals(10000.0F, float10, 0.01F);
      
      float float11 = lengthUnit1.getMaximumElevation();
      assertFalse(lengthUnit1.equals((Object)lengthUnit0));
      assertNotEquals(float11, float1, 0.01F);
      assertEquals(float11, float10, 0.01F);
      assertNotEquals(float11, float2, 0.01F);
      assertEquals(float11, float5, 0.01F);
      assertNotEquals(float11, float7, 0.01F);
      assertNotEquals(float11, float6, 0.01F);
      assertNotEquals(float11, float0, 0.01F);
      assertNotEquals(float11, float8, 0.01F);
      assertNotEquals(float11, float4, 0.01F);
      assertNotEquals(float11, float3, 0.01F);
      assertEquals(float11, float9, 0.01F);
      assertEquals(10000.0F, float11, 0.01F);
      
      float float12 = LengthUnit.centimeterToInch(0.07750016F);
      assertNotEquals(float12, float5, 0.01F);
      assertNotEquals(float12, float6, 0.01F);
      assertNotEquals(float12, float11, 0.01F);
      assertNotEquals(float12, float0, 0.01F);
      assertNotEquals(float12, float3, 0.01F);
      assertNotEquals(float12, float9, 0.01F);
      assertNotEquals(float12, float2, 0.01F);
      assertNotEquals(float12, float8, 0.01F);
      assertNotEquals(float12, float10, 0.01F);
      assertNotEquals(float12, float4, 0.01F);
      assertNotEquals(float12, float1, 0.01F);
      assertNotEquals(float12, float7, 0.01F);
      assertEquals(0.030511873F, float12, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.getMagnetizedLength(8.0F, 8.0F);
      assertEquals(10.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.INCH;
      Format format0 = lengthUnit0.getFormat();
      assertNotNull(format0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      float float0 = lengthUnit0.getMinimumLength();
      assertEquals(0.1F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.METER;
      float float0 = lengthUnit0.unitToCentimeter(2327.85F);
      assertEquals(232785.02F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LengthUnit lengthUnit0 = LengthUnit.MILLIMETER;
      float float0 = lengthUnit0.getMinimumLength();
      assertEquals(0.1F, float0, 0.01F);
  }
}
