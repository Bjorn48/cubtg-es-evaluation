/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 21:57:59 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset((-799));
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.pop();
      // Undeclared exception!
      try { 
        vecInt1.copyTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1454, 1454);
      vecInt0.ensure(455);
      VecInt vecInt1 = new VecInt();
      vecInt1.push(1201);
      VecInt vecInt2 = new VecInt();
      vecInt2.push(1201);
      vecInt1.sort();
      vecInt1.toArray();
      vecInt2.unsafePush((-288));
      vecInt1.iterator();
      vecInt1.containsAt((-288));
      vecInt0.push((-288));
      vecInt2.pushAll(vecInt0);
      vecInt2.toArray();
      vecInt0.sortUnique();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      Integer integer0 = new Integer(1017);
      vecInt2.equals(integer0);
      vecInt1.ensure((-1));
      vecInt0.subset(1410);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      vecInt0.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.unsafePush((-717));
      vecInt0.sort(1, 0, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, 0, comparator1);
      vecInt0.shrinkTo(1);
      vecInt0.last();
      vecInt0.clone();
      Object object0 = new Object();
      VecInt vecInt1 = new VecInt(1);
      VecInt vecInt2 = new VecInt();
      vecInt1.equals(vecInt2);
      // Undeclared exception!
      try { 
        vecInt1.moveTo(434, 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(715);
      int[] intArray0 = new int[22];
      intArray0[0] = 715;
      intArray0[1] = 715;
      intArray0[2] = 715;
      intArray0[3] = 715;
      intArray0[4] = 715;
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.pushAll(iVecInt0);
      vecInt0.sort(715, (-328));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 136;
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      vecInt0.clear();
      vecInt0.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-861), comparator0);
      vecInt0.sort();
      vecInt0.growTo(3804, 5);
      vecInt0.set(136, (-1));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3788, 0, 2, 1445, (-861)).when(comparator1).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(5, 1445, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3804
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 15;
      VecInt vecInt0 = new VecInt(15);
      int int1 = 0;
      VecInt vecInt1 = new VecInt(0);
      // Undeclared exception!
      try { 
        vecInt1.unsafePush(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      vecInt0.toString();
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.clone();
      vecInt1.push(0);
      vecInt1.set(0, 0);
      vecInt0.pushAll(vecInt1);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      vecInt0.pop();
      VecInt vecInt1 = new VecInt(0, 0);
      vecInt0.equals(vecInt1);
      int int1 = (-9);
      // Undeclared exception!
      try { 
        vecInt0.subset(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 1228;
      intArray0[0] = 1228;
      intArray0[1] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(1228);
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.copyTo(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.copyTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(1228);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.push(2228);
      VecInt vecInt2 = new VecInt(1228);
      vecInt2.sortUnique();
      vecInt0.copyTo((IVecInt) vecInt2);
      vecInt0.sort(1006, 1228);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 1;
      vecInt0.insertFirst(1);
      int int1 = 0;
      Comparator<Integer> comparator0 = null;
      vecInt0.sort(1, 0, (Comparator<Integer>) null);
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      iVecInt0.containsAt(1, 1000);
      vecInt0.insertFirst(15);
      vecInt0.moveTo(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.moveTo(2, intArray0);
      VecInt vecInt1 = new VecInt(2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[5];
      vecInt0.push(1);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.ensure((-1750));
      vecInt0.subset(0);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(1491, 1491);
      vecInt1.isSubsetOf(vecInt0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.moveTo(0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[19];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      vecInt0.equals(readOnlyVecInt0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.subset(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.ensure((-2955));
      vecInt0.unsafePush((-2955));
      vecInt1.iterator();
      int[] intArray0 = new int[9];
      intArray0[0] = (-2955);
      intArray0[1] = (-2955);
      intArray0[2] = (-2955);
      intArray0[3] = (-2739);
      intArray0[4] = (-2955);
      intArray0[5] = (-2955);
      intArray0[6] = (-2955);
      intArray0[7] = (-2955);
      intArray0[8] = (-2955);
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.containsAt((-2955));
      vecInt1.push(5);
      vecInt1.pushAll(vecInt0);
      VecInt vecInt3 = new VecInt();
      vecInt3.toArray();
      vecInt0.sortUnique();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      VecInt vecInt4 = new VecInt(377, 377);
      EmptyVecInt emptyVecInt1 = new EmptyVecInt();
      vecInt4.equals(emptyVecInt1);
      VecInt vecInt5 = new VecInt();
      vecInt5.push(0);
      vecInt5.pop();
      vecInt5.ensure((-3330));
      vecInt2.subset(5);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 694;
      VecInt vecInt0 = new VecInt(694, 694);
      int int1 = 1;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(1228);
      vecInt0.subset(0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(0);
      vecInt0.sortUnique();
      int int0 = 2;
      vecInt0.insertFirst(2);
      vecInt0.subset(0);
      int int1 = 1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.pop();
      vecInt0.insertFirst(202);
      vecInt0.iterator();
      vecInt0.sort(0, 1, comparator0);
      // Undeclared exception!
      try { 
        vecInt0.set(202, (-156));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.remove(4891);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2752);
      intArray0[1] = (-781);
      int int0 = (-1705);
      intArray0[2] = (-1705);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.subset(1);
      // Undeclared exception!
      try { 
        vecInt0.set((-781), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-262));
      int int0 = 0;
      VecInt vecInt1 = new VecInt(0);
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.subset((-799));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 531;
      VecInt vecInt0 = new VecInt(531);
      int int1 = (-2);
      vecInt0.subset((-2));
      IVecInt iVecInt0 = null;
      vecInt0.toString();
      vecInt0.shrinkTo(531);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.clear();
      // Undeclared exception!
      try { 
        vecInt0.sort((-1), 3775);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1887
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1509);
      vecInt0.shrink((-1509));
      int int1 = 15;
      int int2 = 0;
      // Undeclared exception!
      try { 
        vecInt0.ensure(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1);
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt();
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-3053);
      int int1 = (-2893);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-3053), (-2893));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push(2);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.subset(0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 5;
      intArray0[0] = 5;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 136;
      intArray0[2] = 136;
      VecInt vecInt0 = new VecInt();
      int int3 = 0;
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.clear();
      vecInt0.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-861), comparator0);
      vecInt0.sort();
      vecInt0.growTo(3804, 5);
      vecInt0.set(136, (-1));
      int int4 = 1445;
      int int5 = 390;
      int int6 = (-1);
      int int7 = 6;
      // Undeclared exception!
      try { 
        iVecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251);
      vecInt0.sortUnique();
      vecInt0.growTo(2251, 1);
      vecInt0.clear();
      vecInt0.insertFirst(2251);
      vecInt0.hashCode();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt();
      vecInt1.push(2030);
      vecInt1.size();
      vecInt1.selectionSort(1228, 1228);
      vecInt1.last();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-2181));
      // Undeclared exception!
      try { 
        vecInt0.remove((-2181));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1497, 1497);
      vecInt0.push(1497);
      vecInt0.size();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(1497, 1497, comparator0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(2767);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2767
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(1228);
      VecInt vecInt1 = new VecInt(intArray0);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.sortUnique();
      vecInt1.contains(5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset((-1));
      // Undeclared exception!
      try { 
        vecInt0.delete((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1329);
      int int1 = 0;
      vecInt0.shrink(0);
      vecInt0.clone();
      vecInt0.toString();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort((-1329), 0, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -665
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.clear();
      vecInt0.sortUnique();
      int[] intArray1 = new int[5];
      intArray1[0] = 1228;
      intArray1[1] = 0;
      intArray1[2] = 1228;
      intArray1[3] = (-190);
      intArray1[4] = 0;
      VecInt vecInt1 = new VecInt(intArray1);
      vecInt1.indexOf(1228);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = 136;
      intArray0[2] = 136;
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      vecInt0.clear();
      vecInt0.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-861), comparator0);
      vecInt0.sort();
      vecInt0.growTo(3804, 5);
      vecInt0.set(136, (-1));
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 136, 5, 3797, (-1)).when(comparator1).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(5, 1445, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3804
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1);
      vecInt0.subset(15);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      VecInt vecInt1 = new VecInt();
      iVecInt0.iterator();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.clear();
      vecInt0.insertFirst((-1));
      vecInt0.get(0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator1);
      vecInt0.containsAt(0);
      IVecInt iVecInt0 = vecInt0.push((-1));
      vecInt0.pushAll(iVecInt0);
      vecInt0.toArray();
      vecInt0.sortUnique();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      EmptyVecInt emptyVecInt1 = new EmptyVecInt();
      vecInt0.equals(emptyVecInt1);
      vecInt0.unsafePush(634);
      vecInt0.last();
      vecInt0.shrinkTo(0);
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1479);
      VecInt vecInt1 = new VecInt(2228);
      vecInt0.sortUnique();
      vecInt0.copyTo(iVecInt0);
      vecInt1.sort(1227, 2228);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1454, 1454);
      vecInt0.shrinkTo(5);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2423);
      intArray0[1] = 1635;
      intArray0[2] = 1635;
      intArray0[4] = 0;
      intArray0[5] = 1635;
      VecInt vecInt1 = new VecInt(intArray0);
      VecInt vecInt2 = new VecInt(1421);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2094), (-2094), 0, 25, 1512).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt2.selectionSort(1223, 1635, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1421
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.insertFirst(1);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      vecInt0.sort(1, 0, (Comparator<Integer>) null);
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-3520), (-799));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-780), (-780), (-688)).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.clear();
      vecInt0.insertFirst((-1));
      vecInt0.get(0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator1);
      vecInt0.unsafePush(0);
      vecInt0.shrink(0);
      vecInt0.unsafePush(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1829;
      intArray0[1] = (-1775);
      intArray0[2] = 2;
      intArray0[3] = 30;
      intArray0[4] = 0;
      intArray0[5] = 217;
      intArray0[6] = 15;
      VecInt vecInt1 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt1.pop();
      iVecInt0.isEmpty();
      iVecInt0.last();
      vecInt1.size();
      IVecInt iVecInt1 = iVecInt0.push((-1775));
      vecInt0.pushAll(iVecInt1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt1.sortUnique();
      vecInt0.contains(655);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 1829;
      intArray1[1] = (-1775);
      vecInt0.shrink(1829);
      intArray1[2] = 2;
      intArray1[3] = 30;
      intArray1[4] = 0;
      intArray1[5] = 217;
      intArray1[6] = 15;
      VecInt vecInt1 = new VecInt(intArray1);
      IVecInt iVecInt0 = vecInt1.pop();
      iVecInt0.isEmpty();
      iVecInt0.last();
      vecInt1.size();
      IVecInt iVecInt1 = iVecInt0.push((-1775));
      // Undeclared exception!
      try { 
        vecInt0.moveTo(iVecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.clone();
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3784, 201, 1).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.contains(3772);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.equals(iVecInt0);
      vecInt0.delete(1);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(3772, 2476, comparator1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251);
      vecInt0.sortUnique();
      vecInt0.growTo(2251, 1);
      vecInt0.clear();
      vecInt0.insertFirst(2251);
      vecInt0.hashCode();
      vecInt0.shrinkTo(955);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.toArray();
      vecInt0.clone();
      VecInt vecInt1 = new VecInt(1019, (-1934));
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(455);
      vecInt0.unsafePush(455);
      vecInt0.iterator();
      vecInt0.containsAt(455);
      IVecInt iVecInt0 = vecInt0.push(4375);
      vecInt0.pushAll(iVecInt0);
      vecInt0.toArray();
      vecInt0.sortUnique();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt0.equals(emptyVecInt0);
      vecInt0.unsafePush(0);
      vecInt0.last();
      vecInt0.shrinkTo(0);
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.shrinkTo((-2275));
      vecInt1.toArray();
      VecInt vecInt2 = new VecInt(1413, 593);
      vecInt0.isSubsetOf(vecInt2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      vecInt0.toString();
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.push(1);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.copyTo((IVecInt) vecInt0);
      vecInt2.copyTo(intArray0);
      vecInt1.pushAll(vecInt2);
      VecInt vecInt3 = new VecInt(1, 1);
      int int0 = 0;
      int int1 = (-1);
      vecInt0.containsAt(1, (-1));
      vecInt1.clear();
      int int2 = 1;
      // Undeclared exception!
      try { 
        vecInt2.delete(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.set(0, (-367));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.copyTo(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.clear();
      int int0 = (-2072);
      vecInt1.insertFirst((-2072));
      // Undeclared exception!
      try { 
        vecInt1.set((-1), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1228);
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt();
      vecInt1.shrink(1228);
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset((-799));
      // Undeclared exception!
      try { 
        vecInt0.sort((-3496), (-799));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2148
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251);
      vecInt0.sortUnique();
      vecInt0.growTo(2251, 1);
      vecInt0.clear();
      vecInt0.insertFirst(2251);
      vecInt0.hashCode();
      vecInt0.shrinkTo(955);
      vecInt0.toArray();
      VecInt vecInt1 = new VecInt(1019, (-1934));
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.push(1);
      vecInt0.toArray();
      vecInt1.isSubsetOf(vecInt0);
      vecInt0.size();
      vecInt1.containsAt(1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-715);
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.moveTo(intArray0);
      vecInt0.subset((-1));
      vecInt0.contains(0);
      // Undeclared exception!
      try { 
        vecInt0.delete(404);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 404
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.get(1917);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1454, 1454);
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2379, 2379);
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.toArray();
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int[] intArray0 = new int[5];
          intArray0[0] = 5;
          int int0 = 0;
          intArray0[1] = 0;
          intArray0[2] = 136;
          VecInt vecInt0 = new VecInt();
          assertNotNull(vecInt0);
          assertTrue(vecInt0.isEmpty());
          assertEquals(0, vecInt0.size());
          
          IVecInt iVecInt0 = vecInt0.push(0);
          assertNotNull(iVecInt0);
          assertSame(vecInt0, iVecInt0);
          assertSame(iVecInt0, vecInt0);
          assertEquals(1, vecInt0.size());
          assertFalse(vecInt0.isEmpty());
          assertEquals(0, vecInt0.last());
          assertFalse(iVecInt0.isEmpty());
          assertEquals(1, iVecInt0.size());
          assertEquals(0, iVecInt0.last());
          
          vecInt0.clear();
          assertSame(vecInt0, iVecInt0);
          assertTrue(vecInt0.isEmpty());
          assertEquals(0, vecInt0.size());
          
          vecInt0.clear();
          assertSame(vecInt0, iVecInt0);
          assertTrue(vecInt0.isEmpty());
          assertEquals(0, vecInt0.size());
          
          Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          vecInt0.selectionSort(0, (-861), comparator0);
          assertSame(vecInt0, iVecInt0);
          assertTrue(vecInt0.isEmpty());
          assertEquals(0, vecInt0.size());
          
          vecInt0.sort();
          assertSame(vecInt0, iVecInt0);
          assertTrue(vecInt0.isEmpty());
          assertEquals(0, vecInt0.size());
          
          int int1 = 3804;
          vecInt0.growTo(3804, 5);
          assertSame(vecInt0, iVecInt0);
          assertFalse(vecInt0.isEmpty());
          assertEquals(5, vecInt0.last());
          assertEquals(3804, vecInt0.size());
          
          vecInt0.set(136, (-1));
          assertSame(vecInt0, iVecInt0);
          assertFalse(vecInt0.isEmpty());
          assertEquals(5, vecInt0.last());
          assertEquals(3804, vecInt0.size());
          
          Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
          doReturn(3804, 0, 5, (-1), 803).when(comparator1).compare(anyInt() , anyInt());
          vecInt0.sort(5, 1445, comparator1);
          assertSame(vecInt0, iVecInt0);
          assertFalse(vecInt0.isEmpty());
          assertEquals(5, vecInt0.last());
          assertEquals(3804, vecInt0.size());
          
          // Undeclared exception!
          try { 
            vecInt0.remove(int0);
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // 3804
             //
             verifyException("org.sat4j.core.VecInt", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(1004);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt1.subset(1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals("[]", emptyVecInt0.toString());
      
      boolean boolean0 = vecInt0.equals(vecInt1);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      int int0 = vecInt0.unsafeGet(1);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(0, int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 1228;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 1228}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1228, vecInt0.last());
      
      boolean boolean0 = vecInt0.contains(650);
      assertArrayEquals(new int[] {1228, 1228}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1228, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 5;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 5}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.ensure(1228);
      assertArrayEquals(new int[] {1228, 5}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1228, 5}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt1.size());
      assertEquals(5, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertArrayEquals(new int[] {1228, 5}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(2, vecInt1.size());
      assertEquals(5, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(5, iVecInt0.last());
      
      int int0 = 2228;
      IVecInt iVecInt1 = vecInt1.push(2228);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertArrayEquals(new int[] {1228, 5}, intArray0);
      assertNotNull(iVecInt1);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt1);
      assertEquals(3, vecInt1.size());
      assertEquals(2228, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2228, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(3, iVecInt1.size());
      
      VecInt vecInt2 = new VecInt(1228);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      
      vecInt2.shrinkTo(1440);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, iVecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(1440, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt2.sortUnique();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1439
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2211);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      vecInt0.sort(1, 2211);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals("[]", emptyVecInt0.toString());
      
      boolean boolean0 = vecInt0.equals(emptyVecInt0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals("[]", emptyVecInt0.toString());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.growTo(2251, 1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2251, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      vecInt0.clear();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.insertFirst(2251);
      assertEquals(2251, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      vecInt0.hashCode();
      assertEquals(2251, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      vecInt0.shrinkTo(955);
      assertFalse(vecInt0.isEmpty());
      assertEquals(955, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2251, (-1), 2, 2, 2251).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(955, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      int[] intArray0 = vecInt0.toArray();
      assertNotNull(intArray0);
      assertEquals(2251, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(955, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(955, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(955, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      
      VecInt vecInt1 = new VecInt(1019, (-1934));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals((-1934), vecInt1.last());
      assertEquals(1019, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      VecInt vecInt2 = new VecInt();
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt2.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1228;
      intArray0[0] = 1228;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.growTo(1228, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = (-1298);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1298));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1173;
      intArray0[2] = (-571);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1173, (-571)}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(3, intArray0.length);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-571), vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertArrayEquals(new int[] {0, 1173, (-571)}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(3, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      
      vecInt0.moveTo(iVecInt0);
      assertArrayEquals(new int[] {0, 1173, (-571)}, intArray0);
      assertEquals(3, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-571), 3122, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -570
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(715);
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 715;
      intArray0[1] = 715;
      intArray0[2] = 715;
      intArray0[3] = 715;
      intArray0[4] = 715;
      vecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {715, 715, 715, 715, 715}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(715);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 715
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1228;
      intArray0[0] = 1228;
      VecInt vecInt0 = new VecInt(166);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrinkTo(1228);
      assertEquals(1228, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray1 = vecInt0.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(166, intArray1.length);
      assertNotSame(intArray1, intArray0);
      assertEquals(1228, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(0, vecInt2.last());
      
      // Undeclared exception!
      try { 
        vecInt2.isSubsetOf(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 166
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.ensure(1228);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(2);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(iVecIntArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, iVecIntArray0.length);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      int int0 = 1487;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1487, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush(455);
      assertEquals(1, vecInt0.size());
      assertEquals(455, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(455, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.containsAt(455);
      assertEquals(0, int0);
      assertEquals(1, vecInt0.size());
      assertEquals(455, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = (VecInt)vecInt0.push(4379);
      assertNotNull(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4379, vecInt1.last());
      assertEquals(2, vecInt1.size());
      
      vecInt0.pushAll(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(4379, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4379, vecInt1.last());
      assertEquals(4, vecInt1.size());
      
      int[] intArray0 = vecInt0.toArray();
      assertArrayEquals(new int[] {455, 4379, 455, 4379, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      assertSame(vecInt0, vecInt1);
      assertEquals(4379, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertSame(vecInt0, vecInt1);
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt0);
      assertSame(vecInt0, vecInt1);
      assertTrue(boolean0);
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt1.ensure(4379);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4379, vecInt1.last());
      assertEquals(2, vecInt1.size());
      
      vecInt1.sort(1102, 22);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4379, vecInt1.last());
      assertEquals(2, vecInt1.size());
      
      int int1 = vecInt0.get(2);
      assertTrue(int1 == int0);
      assertSame(vecInt0, vecInt1);
      assertEquals(0, int1);
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int2 = vecInt1.size();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(2, int2);
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4379, vecInt1.last());
      assertEquals(2, vecInt1.size());
      
      VecInt vecInt2 = (VecInt)vecInt1.pop();
      assertNotNull(vecInt2);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt2);
      assertSame(vecInt1, vecInt2);
      assertSame(vecInt1, vecInt0);
      assertSame(vecInt2, vecInt1);
      assertSame(vecInt2, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(455, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(455, vecInt2.last());
      assertEquals(1, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(7);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(iVecIntArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, iVecIntArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt((IVecInt) null);
      assertNotNull(readOnlyVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.equals(readOnlyVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      vecInt1.sortUnique();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(3, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.shrink((-2245));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2248, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1124
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-2378);
      intArray0[1] = (-2620);
      intArray0[2] = (-2266);
      intArray0[3] = 0;
      intArray0[4] = 1;
      VecInt vecInt0 = new VecInt(2589, 2612);
      assertNotNull(vecInt0);
      assertEquals(2612, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2589, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(0, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.set(0, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = 507;
      vecInt0.ensure(507);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sort();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(0);
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 507;
      intArray0[2] = 662;
      intArray0[3] = 507;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(662, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 0;
      int int0 = 136;
      intArray0[2] = 136;
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(0);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      
      vecInt0.clear();
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-861), comparator0);
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sort();
      assertSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(3804, 5);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3804, vecInt0.size());
      assertEquals(5, vecInt0.last());
      
      vecInt0.set(136, (-1));
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3804, vecInt0.size());
      assertEquals(5, vecInt0.last());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator1).compare(anyInt() , anyInt());
      vecInt0.sort(5, 1445, comparator1);
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3804
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(0, (-2614));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll(emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.size();
      assertEquals(0, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      assertNotNull(readOnlyVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(0, readOnlyVecInt0.size());
      
      boolean boolean0 = vecInt0.equals(readOnlyVecInt0);
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertEquals(0, readOnlyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(2, 2);
      assertEquals(2, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(2251, 1);
      assertEquals(2251, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.insertFirst(2251);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2251, vecInt0.last());
      
      vecInt0.hashCode();
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2251, vecInt0.last());
      
      vecInt0.shrinkTo(955);
      assertEquals(955, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray0 = vecInt0.toArray();
      assertNotNull(intArray0);
      assertEquals(2251, intArray0.length);
      assertEquals(955, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt0);
      assertFalse(boolean0);
      assertEquals(955, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrinkTo(1444);
      assertEquals(1444, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = 1635;
      vecInt0.insertFirst(1444);
      assertEquals(0, vecInt0.last());
      assertEquals(1445, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      // Undeclared exception!
      try { 
        vecInt1.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1454, 1454);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1454, vecInt0.size());
      assertEquals(1454, vecInt0.last());
      
      vecInt0.shrinkTo(5);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1454, vecInt0.last());
      assertEquals(5, vecInt0.size());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2423);
      intArray0[1] = 1635;
      intArray0[2] = 1635;
      intArray0[3] = 1635;
      vecInt0.insertFirst((-2423));
      assertFalse(vecInt0.isEmpty());
      assertEquals(1454, vecInt0.last());
      assertEquals(6, vecInt0.size());
      
      vecInt0.hashCode();
      assertFalse(vecInt0.isEmpty());
      assertEquals(1454, vecInt0.last());
      assertEquals(6, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      vecInt1.moveTo2(vecInt0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      int int0 = vecInt1.containsAt(5, 1635);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertEquals((-1), int0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      vecInt1.insertFirst(1635);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(1635, vecInt1.last());
      
      vecInt1.moveTo((IVecInt) vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1635, vecInt0.last());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.set(1070, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = (VecInt)vecInt0.push(18);
      assertNotNull(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(18, vecInt0.last());
      assertEquals(18, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      int[] intArray0 = vecInt0.toArray();
      assertArrayEquals(new int[] {18, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      assertSame(vecInt0, vecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(18, vecInt0.last());
      
      boolean boolean0 = vecInt1.isSubsetOf(vecInt0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertTrue(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(18, vecInt0.last());
      assertEquals(18, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      vecInt1.remove(18);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = 1291;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(14, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(14, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.delete(10);
      assertEquals(14, intArray0.length);
      assertEquals(0, int0);
      assertEquals(0, vecInt0.last());
      assertEquals(13, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.ensure(0);
      assertEquals(14, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(13, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int1 = vecInt0.indexOf(1291);
      assertTrue(int1 == int0);
      assertEquals(14, intArray0.length);
      assertEquals(0, int1);
      assertEquals(0, vecInt0.last());
      assertEquals(13, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int2 = vecInt0.indexOf(0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(14, intArray0.length);
      assertEquals(1, int2);
      assertEquals(0, vecInt0.last());
      assertEquals(13, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        vecInt0.insertFirst(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray1 = vecInt0.toArray();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int[] intArray1 = vecInt0.toArray();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int int0 = vecInt0.containsAt(1, 1471);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(intArray0, intArray1);
      assertEquals((-1), int0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-488), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.delete(0);
      assertEquals(1, int0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sort();
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.moveTo(1, 0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)vecInt0.push(1210);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(2, intArray0.length);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(1210, vecInt0.last());
      assertEquals(3, vecInt1.size());
      assertEquals(1210, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertTrue(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(1210, vecInt0.last());
      assertEquals(3, vecInt1.size());
      assertEquals(1210, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-56);
      intArray0[1] = 2247;
      intArray0[2] = (-4550);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {(-56), 2247, (-4550), 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int int0 = 587;
      vecInt0.moveTo(0, intArray0);
      assertArrayEquals(new int[] {(-56), 2247, (-4550), 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      boolean boolean0 = iVecInt0.isEmpty();
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertTrue(boolean0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        iVecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 169;
      VecInt vecInt0 = new VecInt(169);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      vecInt0.clear();
      assertSame(vecInt0, iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrinkTo(3160);
      assertSame(vecInt0, iVecInt0);
      assertEquals(3160, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.remove(3160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 169
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.pushAll(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int2 = vecInt0.containsAt(0, 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int3 = vecInt0.size();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      
      // Undeclared exception!
      try { 
        emptyVecInt0.delete(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      vecInt0.shrinkTo((-1156));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1156), vecInt0.size());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt2.size());
      assertEquals(0, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      
      vecInt2.sortUnique();
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 1228}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(1228, vecInt2.last());
      assertEquals(2, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      
      boolean boolean0 = vecInt0.contains(1228);
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 1228}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1156), vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 1;
      VecInt vecInt0 = new VecInt(1);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.clear();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int1 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int2 = (-717);
      vecInt0.unsafePush((-717));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      vecInt0.sort(1, 0, comparator0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, 0, comparator1);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      vecInt0.shrinkTo(1);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      int int3 = 1;
      IVecInt iVecInt0 = vecInt0.push(1);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      
      String string0 = vecInt0.toString();
      assertNotNull(string0);
      assertSame(vecInt0, iVecInt0);
      assertEquals("-717,1", string0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      IVecInt iVecInt1 = vecInt0.pop();
      assertNotNull(iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-717), iVecInt1.last());
      assertEquals(1, iVecInt1.size());
      
      int[] intArray0 = new int[4];
      vecInt0.copyTo(iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-717), iVecInt1.last());
      assertEquals(2, iVecInt1.size());
      
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      vecInt0.copyTo(intArray0);
      assertArrayEquals(new int[] {(-717), (-717), 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      vecInt0.pushAll(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt0, vecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals((-717), iVecInt0.last());
      
      int int4 = vecInt0.containsAt(0, 1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertEquals((-1), int4);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      
      vecInt0.insertFirst((-1640));
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-717), vecInt0.last());
      
      vecInt0.moveTo(iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      
      // Undeclared exception!
      try { 
        vecInt0.set((-717), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1491, 1491);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1491, vecInt0.size());
      assertEquals(1491, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(1228, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(1228, vecInt0.size());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        vecInt0.subset(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.ensure(455);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush(455);
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      int int0 = vecInt0.containsAt(455);
      assertEquals(0, int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push(4375);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(4375, vecInt0.last());
      assertEquals(4375, iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      vecInt0.pushAll(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(4375, vecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertEquals(4375, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      int[] intArray0 = vecInt0.toArray();
      assertNotNull(intArray0);
      assertEquals(455, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(4375, vecInt0.last());
      
      vecInt0.sortUnique();
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(4375, vecInt0.last());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      boolean boolean0 = vecInt0.equals(emptyVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(4375, vecInt0.last());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      iVecInt0.ensure(4375);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(4375, vecInt0.last());
      assertEquals(4375, iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(2);
      assertNotNull(iVecIntArray0);
      assertEquals(1, iVecIntArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(4375, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = (VecInt)vecInt0.push(1);
      assertNotNull(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt1.size());
      assertEquals(1, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      int[] intArray0 = vecInt0.toArray();
      assertArrayEquals(new int[] {1, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      assertSame(vecInt0, vecInt1);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      boolean boolean0 = vecInt1.isSubsetOf(vecInt0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertTrue(boolean0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt1.size());
      assertEquals(1, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      int int0 = vecInt0.containsAt(2137, (-1));
      assertSame(vecInt0, vecInt1);
      assertEquals((-1), int0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      vecInt0.sortUnique();
      assertSame(vecInt0, vecInt1);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      int int0 = (-1);
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(boolean0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.push((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.insertFirst((-718));
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-718), vecInt0.last());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(0);
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-718), vecInt0.last());
      
      int int1 = 1303;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(2, 1303, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 652
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      
      EmptyVecInt emptyVecInt1 = (EmptyVecInt)emptyVecInt0.clone();
      assertTrue(emptyVecInt1.equals((Object)emptyVecInt0));
      assertNotNull(emptyVecInt1);
      assertNotSame(emptyVecInt0, emptyVecInt1);
      assertNotSame(emptyVecInt1, emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt1.toString());
      assertEquals(0, emptyVecInt1.size());
      assertTrue(emptyVecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(emptyVecInt1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int int0 = vecInt0.size();
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, int0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int int1 = vecInt0.last();
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int1);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      boolean boolean1 = vecInt0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean1);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      int int2 = vecInt0.size();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, int2);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      vecInt0.copyTo(iVecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((-2703));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.ensure(455);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.unsafePush(455);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      
      int int0 = vecInt0.containsAt(455);
      assertEquals(0, int0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.push(4375);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4375, vecInt0.last());
      assertEquals(4375, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      
      vecInt0.pushAll(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4375, vecInt0.last());
      assertEquals(4375, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      
      int[] intArray0 = vecInt0.toArray();
      assertNotNull(intArray0);
      assertEquals(455, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4375, vecInt0.last());
      
      iVecInt0.unsafePush(1819);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1819, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1819, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(5, iVecInt0.size());
      
      boolean boolean0 = vecInt0.equals(iteratorInt0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(boolean0);
      assertEquals(1819, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertSame(vecInt0, iVecInt0);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4375, vecInt0.last());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      
      boolean boolean1 = vecInt0.equals(emptyVecInt0);
      assertTrue(boolean1 == boolean0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(boolean1);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4375, vecInt0.last());
      assertEquals("[]", emptyVecInt0.toString());
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      
      iVecInt0.ensure(4375);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4375, vecInt0.last());
      assertEquals(4375, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3, iVecInt0.size());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(2);
      assertNotNull(iVecIntArray0);
      assertEquals(3, iVecIntArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4375, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(boolean0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.subset(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Integer integer0 = new Integer(1967);
      assertNotNull(integer0);
      assertEquals(1967, (int)integer0);
      
      boolean boolean0 = vecInt0.equals(integer0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertEquals("0,0", string0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      vecInt0.clear();
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.indexOf(0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals((-1), int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1463;
      intArray0[4] = 0;
      intArray0[5] = 2251;
      VecInt vecInt1 = new VecInt(intArray0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 1463, 0, 2251}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(6, intArray0.length);
      assertEquals(2251, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(6, vecInt1.size());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 1463, 0, 2251}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(6, intArray0.length);
      assertFalse(vecInt2.isEmpty());
      assertEquals(2251, vecInt2.last());
      assertEquals(6, vecInt2.size());
      
      VecInt vecInt3 = new VecInt(0, 2251);
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertNotNull(vecInt3);
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      
      vecInt3.shrinkTo(2686);
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertNotSame(vecInt3, vecInt1);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt0);
      assertFalse(vecInt3.isEmpty());
      assertEquals(2686, vecInt3.size());
      
      int[] intArray1 = vecInt2.toArray();
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt3));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 1463, 0, 2251}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 1463, 0, 2251}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertSame(intArray0, intArray1);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt3);
      assertSame(intArray1, intArray0);
      assertFalse(vecInt2.isEmpty());
      assertEquals(2251, vecInt2.last());
      assertEquals(6, vecInt2.size());
      
      boolean boolean0 = vecInt2.isSubsetOf(vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt3));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt3));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {0, 0, 0, 1463, 0, 2251}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt3);
      assertNotSame(vecInt0, vecInt2);
      assertSame(intArray0, intArray1);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt3);
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(vecInt2.isEmpty());
      assertEquals(2251, vecInt2.last());
      assertEquals(6, vecInt2.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 3175;
      VecInt vecInt0 = new VecInt(1, 3175);
      assertNotNull(vecInt0);
      assertEquals(3175, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 2251;
      VecInt vecInt0 = new VecInt(2251);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.growTo(2251, 1);
      assertEquals(2251, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.insertFirst(2251);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2251, vecInt0.last());
      
      int int1 = vecInt0.hashCode();
      assertTrue(int1 == int0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2251, vecInt0.last());
      
      vecInt0.shrinkTo(955);
      assertEquals(955, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(955, 15, 1, 955, 2251).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertEquals(955, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      int int2 = 1019;
      VecInt vecInt1 = (VecInt)vecInt0.clone();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(955, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(955, vecInt1.size());
      assertEquals(1, vecInt1.last());
      
      int int3 = (-1934);
      VecInt vecInt2 = new VecInt(int2, int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertFalse(vecInt2.isEmpty());
      assertEquals(1019, vecInt2.size());
      assertEquals((-1934), vecInt2.last());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt2);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(boolean0);
      assertEquals(955, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1019, vecInt2.size());
      assertEquals((-1934), vecInt2.last());
      
      boolean boolean1 = vecInt1.isSubsetOf(vecInt2);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(boolean1);
      assertEquals(955, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(955, vecInt1.size());
      assertEquals(1, vecInt1.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1019, vecInt2.size());
      assertEquals((-1934), vecInt2.last());
      
      boolean boolean2 = vecInt2.isSubsetOf(vecInt0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(boolean2);
      assertEquals(955, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1019, vecInt2.size());
      assertEquals((-1934), vecInt2.last());
      
      int int4 = vecInt0.containsAt(int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertEquals(626, int4);
      assertEquals(955, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[0];
      vecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.sort();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      boolean boolean0 = vecInt0.equals("[]");
      assertFalse(boolean0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrinkTo(1491);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1491, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(1491, 1491);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(1491, vecInt1.last());
      assertEquals(1491, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      vecInt1.sortUnique();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1491, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.contains(1491);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.ensure(455);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.unsafePush(455);
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      int int0 = vecInt0.containsAt(455);
      assertEquals(0, int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(455, vecInt0.last());
      assertEquals(1, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)vecInt0.push(4379);
      assertNotNull(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals(4379, vecInt1.last());
      
      vecInt0.pushAll(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4379, vecInt1.last());
      
      int[] intArray0 = vecInt0.toArray();
      assertNotNull(intArray0);
      assertEquals(455, intArray0.length);
      assertSame(vecInt0, vecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(4, vecInt0.size());
      
      vecInt0.sortUnique();
      assertSame(vecInt0, vecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      
      boolean boolean0 = vecInt0.equals(emptyVecInt0);
      assertSame(vecInt0, vecInt1);
      assertFalse(boolean0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertEquals(0, emptyVecInt0.size());
      assertTrue(emptyVecInt0.isEmpty());
      
      vecInt1.ensure(4379);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals(4379, vecInt1.last());
      
      vecInt1.sort(1102, 22);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals(4379, vecInt1.last());
      
      int int1 = vecInt0.get(2);
      assertTrue(int1 == int0);
      assertSame(vecInt0, vecInt1);
      assertEquals(0, int1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      int int2 = new Integer(0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = vecInt1.size();
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertEquals(2, int3);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4379, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals(4379, vecInt1.last());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = 1;
      IVecInt iVecInt0 = vecInt0.push(1);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(1, iVecInt0.last());
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      // Undeclared exception!
      try { 
        vecInt1.copyTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      vecInt1.shrinkTo(1000);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1000, vecInt1.size());
      
      vecInt0.moveTo2(vecInt1);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      int int0 = vecInt0.indexOf(998);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals((-1), int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt1.unsafeGet(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 0;
      intArray0[2] = 136;
      intArray0[3] = (-2423);
      intArray0[4] = 1635;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {5, 0, 136, (-2423), 1635}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(5, intArray0.length);
      assertEquals(1635, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-816), 136, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -815
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.ensure(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      boolean boolean0 = iVecInt0.isEmpty();
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertTrue(boolean0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        iVecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      vecInt1.ensure((-3));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt1.sort((-807), 4772, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1982
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      
      IVecInt[] iVecIntArray0 = iVecInt0.subset(1);
      assertNotNull(iVecIntArray0);
      assertEquals(1, iVecIntArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      Comparator<Integer> comparator0 = null;
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      VecInt vecInt2 = new VecInt();
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      
      VecInt vecInt3 = new VecInt();
      assertTrue(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertNotNull(vecInt3);
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      
      VecInt vecInt4 = new VecInt();
      assertTrue(vecInt4.equals((Object)vecInt0));
      assertTrue(vecInt4.equals((Object)vecInt3));
      assertTrue(vecInt4.equals((Object)vecInt2));
      assertTrue(vecInt4.equals((Object)vecInt1));
      assertNotNull(vecInt4);
      assertEquals(0, vecInt4.size());
      assertTrue(vecInt4.isEmpty());
      
      IVecInt iVecInt0 = vecInt4.push(0);
      assertFalse(vecInt4.equals((Object)vecInt1));
      assertFalse(vecInt4.equals((Object)vecInt2));
      assertFalse(vecInt4.equals((Object)vecInt0));
      assertFalse(vecInt4.equals((Object)vecInt3));
      assertFalse(iVecInt0.equals((Object)vecInt3));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt2));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt4, vecInt1);
      assertNotSame(vecInt4, vecInt2);
      assertSame(vecInt4, iVecInt0);
      assertNotSame(vecInt4, vecInt0);
      assertNotSame(vecInt4, vecInt3);
      assertNotSame(iVecInt0, vecInt3);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt4);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt2);
      assertEquals(1, vecInt4.size());
      assertFalse(vecInt4.isEmpty());
      assertEquals(0, vecInt4.last());
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt4.remove(2);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int1 = 1;
      IVecInt iVecInt0 = vecInt0.clone();
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2251);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1143);
      intArray0[1] = (-1143);
      intArray0[2] = (-1143);
      intArray0[3] = 1463;
      intArray0[4] = (-1143);
      intArray0[5] = 2251;
      VecInt vecInt1 = new VecInt(intArray0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {(-1143), (-1143), (-1143), 1463, (-1143), 2251}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(6, intArray0.length);
      assertFalse(vecInt1.isEmpty());
      assertEquals(6, vecInt1.size());
      assertEquals(2251, vecInt1.last());
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertArrayEquals(new int[] {(-1143), (-1143), (-1143), 1463, (-1143), 2251}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(6, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals((-1143), vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(5, vecInt1.size());
      assertEquals((-1143), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(5, iVecInt0.size());
      
      VecInt vecInt2 = new VecInt(intArray0);
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertArrayEquals(new int[] {(-1143), (-1143), (-1143), 1463, (-1143), 2251}, intArray0);
      assertNotNull(vecInt2);
      assertEquals(6, intArray0.length);
      assertEquals(6, vecInt2.size());
      assertEquals(2251, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      
      vecInt1.sortUnique();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertArrayEquals(new int[] {(-1143), 1463, (-1143), (-1143), 1463, 2251}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1463, vecInt1.last());
      assertEquals(2, vecInt1.size());
      
      int int0 = vecInt1.indexOf(229);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertArrayEquals(new int[] {(-1143), 1463, (-1143), (-1143), 1463, 2251}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertSame(vecInt1, iVecInt0);
      assertEquals((-1), int0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1463, vecInt1.last());
      assertEquals(2, vecInt1.size());
      
      vecInt1.selectionSort(995, (-2600));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertArrayEquals(new int[] {(-1143), 1463, (-1143), (-1143), 1463, 2251}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1463, vecInt1.last());
      assertEquals(2, vecInt1.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1228;
      intArray0[0] = 1228;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {1228, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt1.moveTo(0, 1228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1228
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(1636);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1636, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1636, iVecInt0.last());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset((-799));
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1636, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      int int0 = vecInt0.indexOf((-799));
      assertSame(vecInt0, iVecInt0);
      assertEquals((-1), int0);
      assertEquals(1636, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1228);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(iVecIntArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, iVecIntArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IVecInt[] iVecIntArray1 = vecInt0.subset(1228);
      assertFalse(iVecIntArray1.equals((Object)iVecIntArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(iVecIntArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, iVecIntArray1.length);
      assertNotSame(iVecIntArray1, iVecIntArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = (VecInt)vecInt0.clone();
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt1);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, vecInt1.last());
      
      vecInt1.pushAll(vecInt0);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, vecInt1.last());
      
      // Undeclared exception!
      try { 
        vecInt1.delete(1228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1228
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      assertNotNull(emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(iteratorInt0);
      assertEquals(2, intArray0.length);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(1228, 1228);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(1228, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1228, vecInt1.last());
      
      int int0 = (-1);
      VecInt vecInt2 = new VecInt();
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      
      VecInt vecInt3 = new VecInt();
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertNotNull(vecInt3);
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.isEmpty());
      
      vecInt3.clear();
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertNotSame(vecInt3, vecInt0);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt1);
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.isEmpty());
      
      vecInt2.clear();
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt3));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt3);
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      
      int int1 = vecInt3.containsAt((-558), 299);
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertTrue(int1 == int0);
      assertNotSame(vecInt3, vecInt0);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt1);
      assertEquals((-1), int1);
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.isEmpty());
      
      vecInt0.clear();
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)vecInt2));
      assertTrue(vecInt0.equals((Object)vecInt3));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, vecInt3);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int2 = (-2072);
      vecInt1.insertFirst(1228);
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt3));
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt3);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1229, vecInt1.size());
      assertEquals(1228, vecInt1.last());
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset((-799));
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.indexOf((-799));
      assertEquals((-1), int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrinkTo((-1277));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1277), vecInt0.size());
      
      vecInt0.sort(423, 1);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1277), vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(2131);
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrinkTo(1191);
      assertEquals(1191, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1190
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(1491, 1491);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(1491, vecInt1.size());
      assertEquals(1491, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(boolean0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1491, vecInt1.size());
      assertEquals(1491, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push(1);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      
      int[] intArray0 = vecInt0.toArray();
      assertArrayEquals(new int[] {1, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.moveTo(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.insertFirst((-1));
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      
      int int0 = vecInt0.get(0);
      assertEquals((-1), int0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      
      int int1 = vecInt0.containsAt(0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      
      VecInt vecInt1 = (VecInt)vecInt0.push((-1));
      assertNotNull(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
      assertEquals(2, vecInt1.size());
      
      vecInt0.pushAll(vecInt1);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
      
      vecInt1.unsafePush((-1));
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1), vecInt1.last());
      
      int int2 = vecInt0.last();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertSame(vecInt0, vecInt1);
      assertEquals((-1), int2);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      assertEquals(5, vecInt0.size());
      
      vecInt1.shrinkTo((-734));
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-734), vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-734), vecInt1.size());
      
      int int3 = vecInt1.hashCode();
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-734), vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-734), vecInt1.size());
      
      VecInt vecInt2 = (VecInt)vecInt0.pop();
      assertNotNull(vecInt2);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt2);
      assertSame(vecInt2, vecInt1);
      assertSame(vecInt2, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-735), vecInt0.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals((-735), vecInt2.size());
      
      // Undeclared exception!
      try { 
        vecInt1.sort((-1130), 3764);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1317
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 15;
      int int0 = (-822);
      intArray0[1] = (-822);
      intArray0[2] = (-1079);
      int int1 = 1;
      intArray0[3] = 1;
      intArray0[4] = 5;
      intArray0[5] = 1962;
      intArray0[6] = 1799;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {15, (-822), (-1079), 1, 5, 1962, 1799, 0}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(8, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertArrayEquals(new int[] {15, (-822), (-1079), 1, 5, 1962, 1799, 0}, intArray0);
      assertNotNull(iteratorInt0);
      assertEquals(8, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.growTo((-822), 0);
      assertArrayEquals(new int[] {15, (-822), (-1079), 1, 5, 1962, 1799, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        vecInt0.delete((-841));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -841
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2378);
      intArray0[1] = (-2620);
      intArray0[2] = (-2266);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = (-388);
      intArray0[6] = 3346;
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.clear();
      vecInt0.push(0);
      vecInt0.size();
      vecInt0.push(3561);
      vecInt0.get(1);
      vecInt0.set(1, 0);
      // Undeclared exception!
      try { 
        vecInt0.set((-3135), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      int int1 = (-802);
      // Undeclared exception!
      try { 
        vecInt0.delete((-802));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -802
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3804, 3804);
      vecInt0.push((-1));
      vecInt0.set(3804, 0);
      vecInt0.last();
      vecInt0.clone();
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.moveTo(434, 493);
      vecInt0.ensure(0);
      vecInt0.insertFirst(493);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.pushAll(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.sort((-2700), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1351
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.set((-9), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      boolean boolean0 = vecInt0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(1228);
      vecInt0.subset(62);
      // Undeclared exception!
      try { 
        vecInt0.containsAt(62, (-1164));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1163
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.size();
      vecInt0.push((-35));
      int[] intArray0 = vecInt0.toArray();
      VecInt vecInt1 = new VecInt(intArray0);
      boolean boolean0 = vecInt1.contains((-35));
      assertFalse(vecInt0.isEmpty());
      assertTrue(boolean0);
  }
}
