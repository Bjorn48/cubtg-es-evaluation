/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:45:19 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.xplain.QuickXplainStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuickXplainStrategy_ESTest extends QuickXplainStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2694, 2090, (-2092)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(iVecInt0).when(iSolver1).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt1 = quickXplainStrategy0.explain(iSolver1, hashMap0, vecInt0);
      assertEquals(1, iVecInt1.size());
      assertEquals(1, iVecInt1.last());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      quickXplainStrategy0.toString();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2694, 2090, 2694, 2090, 2090).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      iVecInt0.containsAt(999);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false, false, false).when(iSolver1).isVerbose();
      doReturn(iVecInt0).when(iSolver1).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      quickXplainStrategy0.explain(iSolver1, hashMap0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      VecInt vecInt0 = new VecInt(938, 938);
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain(dimacsStringSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2694, (-2479)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(iSolver1).unsatExplanation();
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain(iSolver1, hashMap0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      vecInt0.shrinkTo((-824));
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain(iSolver0, hashMap0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2694, (-2479)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("QuickXplain (AAAI 2004 version) minimization strategy", "QuickXplain (AAAI 2004 version) minimization strategy").when(iSolver1).getLogPrefix();
      doReturn(true, true).when(iSolver1).isVerbose();
      doReturn(iVecInt0).when(iSolver1).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt1 = quickXplainStrategy0.explain(iSolver1, hashMap0, vecInt0);
      assertEquals(0, iVecInt1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2694, (-2479)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("QuickXplain (AAAI 2004 version) minimization strategy", "QuickXplain (AAAI 2004 version) minimization strategy").when(iSolver1).getLogPrefix();
      doReturn(true, true, false, false).when(iSolver1).isVerbose();
      doReturn(iVecInt0).when(iSolver1).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      hashMap0.put(integer0, "QuickXplain (AAAI 2004 version) minimization strategy");
      IVecInt iVecInt1 = quickXplainStrategy0.explain(iSolver1, hashMap0, iVecInt0);
      assertEquals(Integer.MIN_VALUE, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.push(1305);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isVerbose();
      doReturn(iVecInt0).when(iSolver0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(1305, 1306, 1884, 313, 3).when(iSolver1).nVars();
      IVecInt iVecInt1 = AbstractMinimalModel.negativeLiterals(iSolver1);
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain(iSolver0, hashMap0, iVecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2694, 2090, 2090, 2694, 2090).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn("QuickXplain (AAAI 2004 version) minimization strategy").when(iSolver1).getLogPrefix();
      doReturn(true).when(iSolver1).isVerbose();
      doReturn(iVecInt0).when(iSolver1).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain(iSolver1, hashMap0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2694, 2090, 2090, 2694, 2090).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("QuickXplain (AAAI 2004 version) minimization strategy").when(iSolver1).getLogPrefix();
      doReturn(true, false).when(iSolver1).isVerbose();
      doReturn(iVecInt0).when(iSolver1).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      IVecInt iVecInt1 = quickXplainStrategy0.explain(iSolver1, hashMap0, iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertTrue(iVecInt1.equals((Object)iVecInt0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      String string0 = quickXplainStrategy0.toString();
      assertEquals("QuickXplain (AAAI 2004 version) minimization strategy", string0);
      
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2694, (-2479)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      iVecInt0.containsAt(999);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("QuickXplain (AAAI 2004 version) minimization strategy", "QuickXplain (AAAI 2004 version) minimization strategy").when(iSolver1).getLogPrefix();
      doReturn(true, true, false).when(iSolver1).isVerbose();
      doReturn(iVecInt0).when(iSolver1).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      hashMap0.put(integer0, "QuickXplain (AAAI 2004 version) minimization strategy");
      IVecInt iVecInt1 = quickXplainStrategy0.explain(iSolver1, hashMap0, iVecInt0);
      assertEquals(0, iVecInt1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      quickXplainStrategy0.cancelExplanationComputation();
      assertEquals("QuickXplain (AAAI 2004 version) minimization strategy", quickXplainStrategy0.toString());
  }
}
