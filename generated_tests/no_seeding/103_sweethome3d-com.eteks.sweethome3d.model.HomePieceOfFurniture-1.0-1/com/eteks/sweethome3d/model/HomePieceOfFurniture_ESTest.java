/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:08:33 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(1);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(235.31877F);
      LightSource lightSource0 = new LightSource(0.3926991F, 1.0F, 1.0F, (-2144808321), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-830.61346F), 0.3926991F, (-3698.3F), 4);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2862.389F, 4244, 0.0F, (-2144808321));
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(2047.382F, 235.31877F, (-3698.3F), 1024, float0);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(235.31877F, (-2144808321), 2339.9F, 33, float0);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource((-2144808321), (-2201.7354F), 2047.382F, 1);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1256.9F, 4814.37F, 1372.907F, 1024);
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(4, (-379.7312F), 0.0F, 1);
      lightSourceArray0[7] = lightSource7;
      LightSource lightSource8 = new LightSource((-3698.3F), 33, (-1.0F), (-1073741823));
      lightSourceArray0[8] = lightSource8;
      float[][] floatArray0 = new float[8][1];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 235.31877F;
      floatArray1[1] = (float) 33;
      floatArray1[2] = 1256.9F;
      floatArray1[3] = (float) 1;
      floatArray1[4] = (-64.9F);
      floatArray1[5] = 1372.907F;
      floatArray1[6] = 2047.382F;
      floatArray1[7] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.3926991F;
      floatArray2[1] = (-379.7312F);
      floatArray2[2] = 4814.37F;
      floatArray2[3] = (float) 1;
      floatArray2[4] = 2862.389F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-1.0F);
      floatArray3[1] = 0.0F;
      floatArray3[2] = (float) 4;
      floatArray3[3] = 3217.2F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = 2.0F;
      floatArray4[1] = (float) 4;
      floatArray4[2] = 1372.907F;
      floatArray4[3] = 1.0F;
      floatArray4[4] = (-379.7312F);
      floatArray4[5] = (-2881.938F);
      floatArray4[6] = 1.0F;
      floatArray4[7] = (float) 33;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = (-2881.938F);
      floatArray5[1] = 4814.37F;
      floatArray5[2] = (-64.9F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[9];
      floatArray6[0] = 1372.907F;
      floatArray6[1] = (-1.0F);
      floatArray6[2] = (-1.0F);
      floatArray6[3] = 0.3927F;
      floatArray6[4] = (float) 4;
      floatArray6[5] = 2047.382F;
      floatArray6[6] = 2047.382F;
      floatArray6[7] = 0.3926991F;
      floatArray6[8] = (float) 1024;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-3698.3F);
      floatArray7[1] = 2.0F;
      floatArray7[2] = (float) 4244;
      floatArray7[3] = (-2881.938F);
      floatArray7[4] = 0.3927F;
      floatArray7[5] = 0.0F;
      floatArray7[6] = (float) 4244;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = 2.0F;
      floatArray8[1] = 0.0F;
      floatArray8[2] = 2.0F;
      floatArray8[3] = 0.3926991F;
      floatArray8[4] = (-1.0F);
      floatArray8[5] = 0.3927F;
      floatArray8[6] = (-184.1F);
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1.0F, 4244, 4814.37F, 4814.37F, true, lightSourceArray0, "", floatArray0, (String) null, true, false, false, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      linkedList0.add((HomePieceOfFurniture) homeLight1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.getLevel();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 0.0F, 0.5230077F);
      homePieceOfFurniture1.setMovable(false);
      Level level0 = new Level("h", 2.0F, 0.5230077F, 2.0F);
      level0.setElevation(0.3926991F);
      Level level1 = level0.clone();
      homePieceOfFurniture0.setLevel(level1);
      Integer integer2 = new Integer(0);
      Integer.remainderUnsigned(0, (-2011));
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.getTexture();
      homePieceOfFurniture0.isNameCenterPointAt(0, (-223.1482F), 0);
      homePieceOfFurniture1.getNameXOffset();
      homePieceOfFurniture1.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level("", 1.0F, 0.0F, 0.0F);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.setNameAngle(0.0F);
      homePieceOfFurniture0.isTopRightPointAt(0.0F, 1951.6416F, 0.0F);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-20.50818F), (-20.50818F), (-20.50818F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.getNameYOffset();
      homePieceOfFurniture0.setDescription("");
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      homePieceOfFurniture0.setHeight(2463.0F);
      homePieceOfFurniture0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-20.30729F), (-20.30729F), (-20.30729F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.intersectsRectangle((-20.30729F), (-20.30729F), 2817.64F, (-20.30729F));
      homePieceOfFurniture0.setMovable(false);
      homePieceOfFurniture0.getNameYOffset();
      MockURL.getFtpExample();
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      Float.max(1.0F, (-2275.0137F));
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      float[][] floatArray0 = new float[8][1];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = (-2275.0137F);
      floatArray1[3] = 1.0F;
      floatArray1[4] = (-2275.0137F);
      floatArray1[5] = 1.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = 1.0F;
      floatArray2[1] = 0.5F;
      floatArray2[2] = 0.5F;
      floatArray2[3] = 0.5F;
      floatArray2[4] = 0.5F;
      floatArray2[5] = (-2275.0137F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = (-2275.0137F);
      floatArray3[1] = 1.0F;
      floatArray3[2] = 0.5F;
      floatArray3[3] = 1.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = 0.5F;
      floatArray4[1] = (-676.2F);
      floatArray4[2] = (-1.0F);
      floatArray4[3] = (-2885.366F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[6];
      floatArray5[0] = 1559.971F;
      floatArray5[1] = 0.5F;
      floatArray5[2] = 1.0F;
      floatArray5[3] = (-2275.0137F);
      floatArray5[4] = 1.0F;
      floatArray5[5] = 0.5F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      floatArray6[0] = 3357.812F;
      floatArray6[1] = (-2885.366F);
      floatArray6[2] = 0.0F;
      floatArray6[3] = (-2885.366F);
      floatArray6[4] = 1559.971F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[9];
      floatArray7[0] = (-2885.366F);
      floatArray7[1] = (-2275.0137F);
      floatArray7[2] = 3357.812F;
      floatArray7[3] = (-676.2F);
      floatArray7[4] = (-2885.366F);
      floatArray7[5] = 0.5F;
      floatArray7[6] = 1559.971F;
      floatArray7[7] = 1.0F;
      floatArray7[8] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = 0.0F;
      floatArray8[1] = 1559.971F;
      floatArray8[2] = (-2275.0137F);
      floatArray8[3] = 0.0F;
      floatArray8[4] = (-1.0F);
      floatArray8[5] = (-676.2F);
      floatArray8[6] = 0.0F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.5F, (-1.0F), (-2275.0137F), 1.0F, true, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.5F, 292.0F, 569.8F);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      resourceURLContent0.getJAREntryURL();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer.getInteger("");
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(true);
      Integer integer3 = new Integer(3);
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.setColor(integer3);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(0.5F);
      homePieceOfFurniture0.move(1.0F, 3);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setNameAngle((-1.0F));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture1.intersectsRectangle(0.0F, 460.9194F, 0, (-1510.388F));
      homePieceOfFurniture1.setY(460.9194F);
      homePieceOfFurniture1.getAngle();
      homePieceOfFurniture0.getWidth();
      homePieceOfFurniture1.isVisible();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(false);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setHeight(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy1);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth((-2275.0137F));
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture1.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture0.setModelMirrored(true);
      Integer integer2 = new Integer(1909);
      homePieceOfFurniture0.setColor((Integer) null);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1909);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.isPointAt(538.718F, 5.8336167F, 538.718F);
      homePieceOfFurniture0.setWidth(0.5230077F);
      homePieceOfFurniture1.setY(0);
      homePieceOfFurniture1.getY();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Long long0 = new Long(604800000L);
      Float float0 = new Float((float) 604800000L);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash(516.095F, 2967.852F, 1279.6809F, 2.0F, (-3051.494F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(11.7F, 516.095F, 2.0F, (-1920.3969F), (-1328.24F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(2.0F, 0.3926991F, 0.5F, 0.5F, 589.55F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-3051.494F), 1569.13F, 3.4028235E38F, 516.095F, 589.55F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(604800000L, 271.5119F, 11.7F, 2166.02F, 0.5F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(728.9F, 2.0F, 2166.02F, 1514.0127F, 589.55F);
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(1.0F, 0.5F, 3.4028235E38F, 2166.02F, 2.0F);
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(1514.0127F, (-659.782F), (-2839.0F), 1052.4F, (-2839.0F));
      sashArray0[7] = sash7;
      float[][] floatArray0 = new float[5][1];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2.0F;
      floatArray1[1] = 0.3926991F;
      floatArray1[2] = 1569.13F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = 0.5F;
      floatArray2[1] = (-1328.24F);
      floatArray2[2] = (-1328.24F);
      floatArray2[3] = (-1920.3969F);
      floatArray2[4] = 516.095F;
      floatArray2[5] = 0.5F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 2.0F;
      floatArray3[1] = 516.095F;
      floatArray3[2] = 0.5F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = (-1328.24F);
      floatArray4[1] = 2.0F;
      floatArray4[2] = 1514.0127F;
      floatArray4[3] = 516.095F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 2.0F;
      floatArray0[4] = floatArray5;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 604800000L, 604800000L, 2967.852F, 2.0F, false, 516.095F, (-3051.494F), sashArray0, floatArray0, "wLN-vTt7f5^N,u1(bg", false, false, false, (BigDecimal) null, (BigDecimal) null, "&?QO2<sn~N.dCL3X");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setShininess((Float) 516.095F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt(0.0F, (-657.6021F), 0.0F);
      homePieceOfFurniture0.setAngle((-657.6021F));
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.getCatalogId();
      homePieceOfFurniture1.getPrice();
      CatalogTexture catalogTexture0 = new CatalogTexture("v_j]_KUHaU", "/IWw_", resourceURLContent0, 0.3926991F, 0.0F, "/IWw_");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture0.setTexture(homeTexture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level("", 1.0F, 0.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      homePieceOfFurniture0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.clone();
      homePieceOfFurniture0.isAtLevel(level0);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 289.85617F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float(1409.1594F);
      Float.isFinite(1.0F);
      Float.max(1.0F, 1409.1594F);
      homePieceOfFurniture1.setShininess(float0);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.isPointAt(1409.1594F, 289.85617F, 289.85617F);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "T\"");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0, 3419.0F, 3419.0F, (-2128.9062F), 1.0F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[7][4];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-2943.1497F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = 1.0F;
      floatArray2[1] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 1.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = (float) 0;
      floatArray3[4] = 1.0F;
      floatArray3[5] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = (float) 0;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-2128.9062F);
      floatArray4[3] = 0.0F;
      floatArray4[4] = (-443.40988F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[7];
      floatArray5[0] = (-2128.9062F);
      floatArray5[1] = 1.0F;
      floatArray5[2] = (float) 0;
      floatArray5[3] = 3419.0F;
      floatArray5[4] = 0.0F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = (-443.40988F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[0];
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = 0.0F;
      floatArray7[1] = 1.0F;
      floatArray0[6] = floatArray7;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = null;
      try {
        catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, "", "com.eteks.sweethome3d.io.HomeURLContent", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0, true, 0.0F, (-2943.1497F), sashArray0, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homePieceOfFurniture1.containsPoint(1.0F, 1.0F, 2268.667F);
      homePieceOfFurniture1.isBottomLeftPointAt(0, 3.4028235E38F, (-0.79386115F));
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListener0);
      homePieceOfFurniture1.setMovable(true);
      Integer integer1 = new Integer(0);
      resourceURLContent0.getJAREntryName();
      Integer integer2 = homePieceOfFurniture1.getColor();
      homePieceOfFurniture0.setColor(integer2);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-1.0F));
      homePieceOfFurniture0.move(0, (-0.79386115F));
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth((-0.79386115F));
      homePieceOfFurniture2.getTexture();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.setNameAngle(99.91048F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      Integer integer0 = new Integer(1079);
      Integer integer1 = new Integer((-5448));
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = new LightSource((-1.0F), 27.0F, (-1.0F), 1079);
      lightSourceArray0[0] = lightSource0;
      Float float0 = new Float((float) 1079);
      LightSource lightSource1 = new LightSource((-3265.7F), (-3265.7F), (-1.0F), (-2147482751), float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-1.0F), (-3265.7F), 27.0F, (-2948));
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1862.5F), 1948.14F, (-1.0F), 1079);
      lightSourceArray0[3] = lightSource3;
      Float float1 = new Float(27.0F);
      LightSource lightSource4 = new LightSource((-1862.5F), 1079, 1079.8157F, (-2147482751), float1);
      lightSourceArray0[4] = lightSource4;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "COLOR", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 1079.8157F, 27.0F, (-1.0F), (-1.0F), false, lightSourceArray0, (float[][]) null, "+]", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setNameXOffset((-1.0F));
      homePieceOfFurniture0.setColor(integer0);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.containsPoint(2268.667F, 2268.667F, 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt(5.278159F, 0.0F, 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("CGo-d7f][!&", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-412.1522F));
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      CatalogTexture catalogTexture0 = new CatalogTexture("CGo-d7f][!&", resourceURLContent0, (-678.7114F), (-2009.0243F), true);
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      FurnitureCategory furnitureCategory1 = new FurnitureCategory("");
      catalogPieceOfFurniture0.setCategory(furnitureCategory1);
      homePieceOfFurniture0.setDepth(1146.297F);
      homePieceOfFurniture0.getPoints();
      Integer integer0 = Integer.valueOf(0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture0.isPointAt(1.0F, (-1.0F), 1288.5797F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset(0.5F);
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      resourceURLContent0.getJAREntryName();
      Integer integer0 = new Integer((-2147483227));
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer((-211));
      Integer integer2 = new Integer((-211));
      Content content0 = homePieceOfFurniture0.getModel();
      Integer integer3 = new Integer((-211));
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", resourceURLContent0, content0, 0.0F, (-1009.4F), (-11.479F), (-1009.4F), true, false, integer3, (float[][]) null, false, 0.0F, true);
      catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture1);
      Integer integer4 = new Integer((-737455542));
      homePieceOfFurniture0.setColor(integer4);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(0.0F);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.isPointAt((-737455542), 0.5F, 0.0F);
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture1);
      homePieceOfFurniture2.setWidth(426.2F);
      homePieceOfFurniture2.setY(0.0F);
      homePieceOfFurniture2.getY();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer((-2));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "*^)gC";
      stringArray0[2] = "jar";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "jar";
      Long long0 = Long.valueOf((long) (-2));
      Float float0 = new Float((double) (-2));
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource((-2), 3.4028235E38F, 27.0F, (-742), float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1002.9F), (-2), 1815.9922F, (-2), float0);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float((-64.20263F));
      LightSource lightSource2 = new LightSource((-686.65344F), 1812.28F, 1812.28F, 2257, float1);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(3.4028235E38F, (-1002.9F), 164.0F, (-1927));
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(2047312157);
      CatalogLight catalogLight0 = new CatalogLight("", "*^)gC", "*^)gC", "jar", stringArray0, long0, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-2), (-2), (-2), (-2), false, lightSourceArray0, "*^)gC", (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, (-1265.1359F), 0.523008F, (-1265.1359F), true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float.isFinite(0.523008F);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      homePieceOfFurniture2.getY();
      homePieceOfFurniture1.isTopLeftPointAt(531.233F, 774.06F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      resourceURLContent0.getJAREntryURL();
      Integer integer3 = new Integer(3);
      homePieceOfFurniture0.setColor(integer3);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Piece isn't texturable", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      homePieceOfFurniture0.addPropertyChangeListener((PropertyChangeListener) null);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(0.5F);
      homePieceOfFurniture0.move(1.0F, 3);
      homePieceOfFurniture0.setDepth(1.0F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homePieceOfFurniture0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      Float float0 = new Float((float) 0);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-2));
      homePieceOfFurniture0.setNameYOffset(27.0F);
      Float float0 = new Float((float) (-2));
      homePieceOfFurniture0.getPrice();
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.isTopLeftPointAt((-1066.9537F), 2221.0825F, (-2688.36F));
      System.setCurrentTimeMillis((-2214L));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      resourceURLContent0.getJAREntryName();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.setColor((Integer) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture0.isPointAt(1.0F, 584.5F, 1.0F);
      homePieceOfFurniture1.getLevel();
      homePieceOfFurniture1.setLevel((Level) null);
      homePieceOfFurniture1.setWidth(584.5F);
      homePieceOfFurniture0.getIcon();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0F));
      Float float1 = new Float((-337.26561893));
      homePieceOfFurniture1.setShininess(float1);
      homePieceOfFurniture0.setShininess(float0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture1.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture1.isPointAt((-1.0F), 1.0F, 1.0F);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture1.setLevel((Level) null);
      homePieceOfFurniture0.setWidth(1.0F);
      homePieceOfFurniture1.getShininess();
      homePieceOfFurniture0.getModelRotation();
      homePieceOfFurniture1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.containsPoint(2268.667F, 2268.667F, 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt(5.278159F, 0.0F, 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("CGo-d7f][!&", (PropertyChangeListener) null);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-412.1522F));
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 1.0F, 0, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-42.059723F), 0.5230077F, (-42.059723F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float float0 = new Float((double) (-42.059723F));
      homePieceOfFurniture0.setShininess(float0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setNameYOffset(0);
      homePieceOfFurniture0.isNameCenterPointAt(2751.858F, 0, (-42.059723F));
      Float float1 = homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.setShininess(float1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 0.0F, 1.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float(1122.6522F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      Float.isFinite((-2275.0137F));
      Float.max(2.0F, (-1731.4485F));
      homePieceOfFurniture1.setShininess(float0);
      homePieceOfFurniture1.setDepth(311.4F);
      Integer integer1 = Integer.getInteger("", (-1073741823));
      homePieceOfFurniture1.setColor(integer1);
      homePieceOfFurniture0.isPointAt((-36.74F), (-1.0F), 2.0F);
      homePieceOfFurniture1.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.667233F, 0.0F, 11.667233F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setNameXOffset(0.0F);
      Float float0 = new Float(0.0F);
      Float.isFinite(11.667233F);
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setDepth(0.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setNameYOffset(1.0F);
      Random.setNextRandom(0);
      homePieceOfFurniture0.isNameCenterPointAt(1.0F, 1734.921F, 1.0F);
      homePieceOfFurniture1.getShininess();
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.isTopRightPointAt(1.0F, (-2305.1423F), (-2766.0F));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 2378.9F, 0.0F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.isBottomRightPointAt(254.843F, 2378.9F, 1841.0F);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homePieceOfFurniture0.setHeight(79.29916F);
      homePieceOfFurniture0.setName("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      homePieceOfFurniture1.setModelMirrored(false);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      homePieceOfFurniture2.setNameYOffset((-2285.0F));
      Random.setNextRandom(1482693444);
      HomePieceOfFurniture homePieceOfFurniture3 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture3.isTopRightPointAt((-2285.0F), 0, (-2285.0F));
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup((List<HomePieceOfFurniture>) null, "/GY9e4mZmMJ6_92y/3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 0.0F, 0.5230077F);
      homePieceOfFurniture1.setMovable(false);
      Integer integer2 = new Integer(0);
      homePieceOfFurniture0.setColor(integer2);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(578.1859F);
      homePieceOfFurniture0.move(3, 0);
      homePieceOfFurniture0.setDepth((-1559.971F));
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.isBottomRightPointAt(2.0F, 0.0F, 0.5230077F);
      homePieceOfFurniture1.getElevation();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 5813.6514F, 5813.6514F, 5813.6514F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float float0 = new Float((double) 5813.6514F);
      homePieceOfFurniture0.setNameXOffset(5813.6514F);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homePieceOfFurniture0.setShininess(float0);
      Integer integer0 = new Integer(46);
      homePieceOfFurniture0.setNameYOffset(5813.6514F);
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.getIcon();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.getModel();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setName("");
      homePieceOfFurniture0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX(0.0F);
      Level level0 = new Level("", 0.0F, 0.0F, 0.0F);
      level0.clone();
      homePieceOfFurniture0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
      homePieceOfFurniture1.setDepth(578.0991F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      TextStyle textStyle0 = new TextStyle(0.0F, true, true);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      TextStyle textStyle0 = new TextStyle(1550.57F, false, true);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.isPointAt(0.0F, 1903.7496F, (-3143.6152F));
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.getAngle();
      homePieceOfFurniture1.getShininess();
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-1710));
      homePieceOfFurniture0.setColor(integer1);
      Integer integer2 = new Integer(394);
      Integer integer3 = new Integer((-1710));
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(false);
      Integer integer4 = new Integer(394);
      homePieceOfFurniture0.setColor(integer1);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(3);
      homePieceOfFurniture0.move(0.0F, 0.0F);
      homePieceOfFurniture0.setDepth(394);
      homePieceOfFurniture0.getTexture();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset(0.5F);
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      resourceURLContent0.getJAREntryName();
      Integer integer0 = new Integer((-2147483227));
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setDepth(0.5F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture0.isBottomLeftPointAt(0.5F, 1.0F, (-2580.31F));
      homePieceOfFurniture0.move(1514.0127F, 1.0F);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setNameAngle(1.0F);
      homePieceOfFurniture0.getY();
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.getHeight();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.move((-878.0F), 0.0F);
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 0.0F, 0.0F);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 1.0F, 2268.667F);
      homePieceOfFurniture0.setMovable(false);
      homePieceOfFurniture1.getY();
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.getDepth();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer.getInteger("");
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(true);
      Integer integer3 = new Integer(3);
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.setColor(integer3);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setDepth(0.5F);
      homePieceOfFurniture0.move(1.0F, 3);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setNameAngle((-1.0F));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homePieceOfFurniture1.containsPoint(1.0F, 1.0F, 2268.667F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(145.891F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture1.getValueAddedTax();
      CatalogTexture catalogTexture0 = new CatalogTexture("V@`|c]utw", resourceURLContent0, 1.0F, 145.891F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture1.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 289.85617F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float(1409.1594F);
      Float.isFinite(1.0F);
      Float.max(1.0F, 1409.1594F);
      homePieceOfFurniture1.setShininess(float0);
      homePieceOfFurniture0.setDepth(1.0F);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "T\"");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7J/9GchWvt");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, resourceURLContent0, resourceURLContent0, 0.0F, (-1.0F), 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture1.clone();
      homePieceOfFurniture0.isBottomLeftPointAt(942.0797F, (-1.0F), (-2477.0F));
      HomePieceOfFurniture homePieceOfFurniture3 = homePieceOfFurniture1.clone();
      homePieceOfFurniture3.isBottomLeftPointAt(942.0797F, (-1.0F), 0.0F);
      homePieceOfFurniture3.getY();
      homePieceOfFurniture3.setNameVisible(false);
      homePieceOfFurniture2.getDepth();
      homePieceOfFurniture2.setName((String) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 3.4028235E38F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 3.4028235E38F, true, false);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      Integer integer0 = new Integer((-1168));
      Integer integer1 = new Integer(0);
      homePieceOfFurniture1.setColor(integer0);
      homePieceOfFurniture0.setColor(integer1);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture1.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture0.setNameAngle(879.0F);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      homePieceOfFurniture2.isTopRightPointAt(1.0F, 1.0F, (-2689.2585F));
      homePieceOfFurniture2.getModel();
      homePieceOfFurniture2.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture1.intersectsRectangle(0.0F, 460.9194F, 0, (-1510.388F));
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 1.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 1.0F, true, true);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setNameAngle(584.0F);
      homePieceOfFurniture0.isTopRightPointAt(1.0F, 1.0F, 584.0F);
      homePieceOfFurniture0.getModel();
      homePieceOfFurniture0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(0.0F);
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt(0.0F, (-657.6021F), 0.0F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-5507.986F), (-5507.986F), (-5507.986F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(4238);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 3.4028235E38F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float.isFinite(0.0F);
      resourceURLContent0.getJAREntryName();
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setNameVisible(false);
      homePieceOfFurniture0.setDepth((-1.0F));
      homePieceOfFurniture0.move(747.3763F, 3.827755F);
      homePieceOfFurniture0.setDepth((-1567.8956F));
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setNameAngle(747.3763F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, (-2275.0137F), 0.0F, (-2275.0137F), true, "", integer0, (float[][]) null, false, 1.0F, true);
      catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture1);
      Float.isFinite((-2580.31F));
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture0.setColor((Integer) null);
      homePieceOfFurniture1.isMovable();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setName("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.667233F, 0.0F, 11.667233F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.valueOf(0.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      Float.isFinite((-2275.0137F));
      homePieceOfFurniture1.setNameYOffset(0.0F);
      Random.setNextRandom(0);
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt((-1411.217F), 11.667233F, (-1411.217F));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-42.059723F), 0.5230077F, (-42.059723F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setNameYOffset(0);
      Random.setNextRandom(0);
      homePieceOfFurniture0.isNameCenterPointAt(2751.858F, 0, (-42.059723F));
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.setShininess((Float) null);
      homePieceOfFurniture0.isBottomRightPointAt(0, 2.8627641F, 0.0F);
      homePieceOfFurniture0.getX();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-5513.843F), (-5513.843F), (-5513.843F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(4238);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(1334.25F, 1334.25F, 4238, 4238);
      lightSourceArray0[0] = lightSource0;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("0[HMslbHM$n", "~=0:(o", "0[HMslbHM$n", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 0.3926991F, (-184.1F), 1334.25F, true, lightSourceArray0, "", (float[][]) null, "0[HMslbHM$n", true, false, false, bigDecimal1, bigDecimal1, "0[HMslbHM$n");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "D{.");
      homeFurnitureGroup0.getStaircaseCutOutShape();
      homePieceOfFurniture0.getPrice();
      homeLight1.getIcon();
      homeLight0.getLevel();
      homeLight0.isAtLevel((Level) null);
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.getColor();
      Integer integer1 = new Integer(0);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(false);
      Integer integer2 = new Integer(3);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.5F);
      homePieceOfFurniture0.move(1.0F, 3);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      Random.setNextRandom(0);
      homePieceOfFurniture0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float.isFinite(0.5230077F);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt(2.0F, 0.0F, (-1016.03503F));
      homePieceOfFurniture1.isVisible();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
      homePieceOfFurniture1.setDepth(578.0991F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      TextStyle textStyle0 = new TextStyle(3.0F, false, true);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture1.setElevation((-3184.1643F));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 198.35F, 198.35F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture1);
      homePieceOfFurniture2.setAngle(1.0F);
      homePieceOfFurniture2.isTopLeftPointAt(2.0F, 198.35F, 198.35F);
      homePieceOfFurniture1.setDepth(1.0F);
      homePieceOfFurniture2.getName();
      homePieceOfFurniture2.isDeformable();
      homePieceOfFurniture1.getValueAddedTax();
      homePieceOfFurniture1.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      resourceURLContent0.getJAREntryName();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float float0 = new Float((-2241.3967F));
      homePieceOfFurniture0.isBottomRightPointAt(1.0F, 0.0F, 5.278159F);
      homePieceOfFurniture0.isNameCenterPointAt(5.278159F, 0.0F, 0);
      homePieceOfFurniture0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
      homePieceOfFurniture1.setHeight(799.0325F);
      homePieceOfFurniture1.setDepth(578.0991F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setElevation(0.0F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      homePieceOfFurniture1.intersectsRectangle(1.0F, 1.0F, (-522.586F), (-522.586F));
      homePieceOfFurniture1.setDepth(578.0991F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      TextStyle textStyle0 = new TextStyle(0.0F, true, true);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 5813.6514F, 5813.6514F, 5813.6514F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float float0 = new Float((double) 5813.6514F);
      homePieceOfFurniture0.setNameXOffset(5813.6514F);
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.setNameYOffset(5813.6514F);
      homePieceOfFurniture0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-0.98779184F), 1.0F, (-0.98779184F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      Float float0 = new Float((float) 0);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      Integer integer0 = new Integer(4238);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("0[HMslbHM$n", "~=0:(o", "0[HMslbHM$n", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.3926991F, 0.3926991F, (-5513.843F), 1334.25F, true, lightSourceArray0, "", (float[][]) null, "0[HMslbHM$n", true, false, false, bigDecimal1, bigDecimal1, "0[HMslbHM$n");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "D{.");
      homeFurnitureGroup0.getStaircaseCutOutShape();
      homeLight1.getIcon();
      homeLight0.getLevel();
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.intersectsRectangle(1.0F, 0.0F, 1.0F, 0.0F);
      homePieceOfFurniture1.getY();
      homePieceOfFurniture0.getDepth();
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(4);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 4);
      Float.isFinite((-2580.31F));
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture1.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(false);
      homePieceOfFurniture1.setDepth((-2580.31F));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 1.0F, 4);
      homePieceOfFurniture0.move(3.827755F, 1.0F);
      homePieceOfFurniture1.setDepth((-2580.31F));
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setNameAngle((-1326.157F));
      homePieceOfFurniture1.getY();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((float) 0);
      float float1 = (-2275.0137F);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture0.setAngle((-2275.0137F));
      Float float2 = new Float(0.5F);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 1.0F, (-196.747F));
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      Integer integer0 = new Integer(2147483645);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 2789.988F, (-59.624F), (-59.624F), 3583.9507F, false, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", (float[][]) null, "]@P}C-(\"", false, false, false, (BigDecimal) null, (BigDecimal) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture1.clone();
      homePieceOfFurniture1.setAngle(5598.43F);
      homePieceOfFurniture1.setAngle(0.0F);
      Float float0 = new Float((-1.0F));
      homePieceOfFurniture2.isTopLeftPointAt((-743.49634F), 1.0F, 3.261504F);
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homePieceOfFurniture1.containsPoint(1.0F, 1.0F, 2268.667F);
      homePieceOfFurniture1.isBottomLeftPointAt(0, 3.4028235E38F, (-1.0F));
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListener0);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.getName();
      Integer integer1 = new Integer(963);
      homePieceOfFurniture1.setColor(integer1);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener1);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homePieceOfFurniture0.setY(0.0F);
      homePieceOfFurniture1.getColor();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setNameXOffset(0.0F);
      Float float0 = new Float((float) 0);
      Float.isFinite((-2580.31F));
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture1.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture1.setDepth((-2580.31F));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 1.0F, 0);
      homePieceOfFurniture0.move(3.827755F, 1.0F);
      homePieceOfFurniture1.setDepth((-2580.31F));
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setNameAngle((-1327.5841F));
      homePieceOfFurniture1.getY();
      System.setCurrentTimeMillis(0L);
      homePieceOfFurniture0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth(0.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(145.891F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture1.getValueAddedTax();
      TextStyle textStyle0 = new TextStyle(1.0F, true, false);
      homePieceOfFurniture0.setNameStyle(textStyle0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 3.4028235E38F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(3.4028235E38F);
      Float float0 = new Float(584.0F);
      homePieceOfFurniture1.isTopLeftPointAt(1.0F, (-6027.8735F), (-6027.8735F));
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      float float0 = 1.0F;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float1 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float1);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homePieceOfFurniture1.isTopLeftPointAt(1.0F, 1.0F, 2430.0796F);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setElevation(0.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homePieceOfFurniture1.containsPoint(1.0F, 1.0F, 2268.667F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture1.setName("&,xFf9Zr4tRT(m'h");
      homePieceOfFurniture0.setDepth(145.891F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setY(0.0F);
      homePieceOfFurniture1.isDoorOrWindow();
      homePieceOfFurniture1.getGroundElevation();
      homePieceOfFurniture1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.7F, 11.7F, 11.7F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.getTexture();
      homePieceOfFurniture1.setX(11.7F);
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.setColor((Integer) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture0.clone();
      Random.setNextRandom(3612);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setNameAngle(0.7671728F);
      Integer integer1 = new Integer(0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setColor(integer0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture0.setNameAngle((float) integer1);
      homePieceOfFurniture0.getModel();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.667233F, 0.0F, 11.667233F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setNameXOffset(0.0F);
      Float float0 = new Float(0.0F);
      Float.isFinite(11.667233F);
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setDepth(0.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setNameYOffset(1.0F);
      Random.setNextRandom(0);
      homePieceOfFurniture0.isNameCenterPointAt(1.0F, 1734.921F, 1.0F);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture1.getShininess();
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setNameXOffset(4.4030204F);
      Float float0 = new Float(0.0F);
      Float.isFinite(0.3926991F);
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture1.setColor((Integer) null);
      homePieceOfFurniture1.setModelMirrored(false);
      homePieceOfFurniture1.setNameVisible(true);
      homePieceOfFurniture1.setDepth(1.0F);
      homePieceOfFurniture1.setNameYOffset(541.0F);
      Random.setNextRandom(4);
      homePieceOfFurniture1.isNameCenterPointAt(4.4030204F, 0.0F, 4.4030204F);
      homePieceOfFurniture1.getShininess();
      homePieceOfFurniture1.getShininess();
      homePieceOfFurniture1.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((double) 65.00491F);
      LightSource lightSource0 = new LightSource(889.6F, (-3637.27F), (-3637.27F), 2413, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float((float) 1343);
      LightSource lightSource1 = new LightSource(2268.667F, 65.00491F, (-505.4858F), 1343, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(65.00491F, (-3637.27F), 2268.667F, 20);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = new BigDecimal(889.6F);
      CatalogLight catalogLight0 = new CatalogLight("", (String) null, "", resourceURLContent0, resourceURLContent0, uRLContent0, 65.00491F, 889.6F, 889.6F, 889.6F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-2));
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(true);
      Integer integer1 = new Integer((-2));
      homePieceOfFurniture0.setDepth((-2));
      homePieceOfFurniture0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-20.30729F), (-20.30729F), (-20.30729F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getNameYOffset();
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.containsPoint((-20.30729F), 0.0F, 0.0F);
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-2146568925));
      homePieceOfFurniture0.setColor(integer0);
      Float float0 = new Float((-70.67F));
      Integer integer1 = new Integer((-2146568925));
      Integer integer2 = homePieceOfFurniture0.getColor();
      Integer integer3 = Integer.getInteger("", integer2);
      homePieceOfFurniture0.setColor(integer3);
      homePieceOfFurniture0.containsPoint((-2419.419F), (-0.30597913F), (-2419.419F));
      homePieceOfFurniture0.isBottomRightPointAt((-536.5247F), 0.5230077F, 1.0F);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-274.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.move(3.827755F, 3.827755F);
      homePieceOfFurniture0.isBottomRightPointAt(0.5230077F, 3.827755F, (-4805.01F));
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level("", 1.0F, 0.0F, 0.0F);
      level0.clone();
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      homePieceOfFurniture0.setHeight((-1.0F));
      homePieceOfFurniture0.getHeight();
      homePieceOfFurniture0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, false, false);
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      Level level0 = new Level("", 1.0F, 0.0F, 0.0F);
      level0.clone();
      level0.clone();
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-42.059723F), (-816.32F), 4275.083F, 115.34F, 115.34F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1.0F, 1984.0F, (-816.32F), 400.57F, (-7.1045933F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-816.32F), (-1.0F), (-2762.2F), (-2762.2F), 1984.0F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-1.0F), (-2762.2F), 3.4028235E38F, (-19.0F), (-7.1045933F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-7.1045933F), (-3019.1465F), 0.0F, 115.34F, (-772.93F));
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-772.93F), (-2352.7F), (-1352.0F), 0.0F, 1123.0F);
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-1782.4683F), (-772.93F), 2039.0F, 2379.723F, 0.0F);
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(1984.0F, (-816.32F), 1123.0F, 215.95227F, 4275.083F);
      sashArray0[7] = sash7;
      float[][] floatArray0 = new float[6][8];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (-19.0F);
      floatArray1[1] = 215.95227F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 1242.466F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 215.95227F;
      floatArray1[6] = 3.4028235E38F;
      floatArray1[7] = 1029.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = 1.5746664F;
      floatArray2[1] = 2039.0F;
      floatArray2[2] = (-3019.1465F);
      floatArray2[3] = 1.0F;
      floatArray2[4] = (-19.0F);
      floatArray2[5] = 4275.083F;
      floatArray2[6] = (-7.1045933F);
      floatArray2[7] = 3.4028235E38F;
      floatArray2[8] = (-2762.2F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 1123.0F;
      floatArray3[2] = 1123.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = (-2762.2F);
      floatArray4[1] = (-2762.2F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      floatArray5[0] = (-1352.0F);
      floatArray5[1] = (-2762.2F);
      floatArray5[2] = (-1.0F);
      floatArray5[3] = (-3019.1465F);
      floatArray5[4] = (-1782.4683F);
      floatArray5[5] = (-2671.323F);
      floatArray5[6] = 1984.0F;
      floatArray5[7] = (-7.1045933F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[8];
      floatArray6[0] = 1.0F;
      floatArray6[1] = 400.57F;
      floatArray6[2] = 1795.6075F;
      floatArray6[3] = (-3019.1465F);
      floatArray6[4] = (-1.0F);
      floatArray6[5] = 1984.0F;
      floatArray6[6] = 1242.466F;
      floatArray6[7] = (-2352.7F);
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", ")m+z=O`JMi;*M", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-816.32F), 1.0F, 1.0F, (-42.059723F), false, 4275.083F, 2379.723F, sashArray0, floatArray0, "com.eteks.sweethome3d.tools.OperatingSystem$1", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("NAME_Y_OFFSET", resourceURLContent0, resourceURLContent0, 1.0F, 1409.1594F, 1408.1594F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      int int0 = 0;
      Integer integer0 = new Integer((-791));
      Integer integer1 = new Integer((-791));
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float(1262.0F);
      Float.isFinite((-466.2037F));
      Float.max(584.0F, 0.0F);
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth(1.0F);
      homePieceOfFurniture1.isPointAt(0.0F, (-1726.0F), 1.0F);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setName("mb,8#}GjN~I!w~a");
      homePieceOfFurniture0.move(4.4511786F, 4.4511786F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 1.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 1.0F, true, false);
      homePieceOfFurniture0.getNameYOffset();
      homePieceOfFurniture0.setDescription("");
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      homePieceOfFurniture0.setVisible(false);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.getCatalogId();
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      homePieceOfFurniture2.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer.getInteger("");
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(false);
      resourceURLContent0.getJAREntryName();
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(0.5F);
      homePieceOfFurniture0.move(1.0F, 3);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 24.172388F, 24.172388F, 24.172388F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-2));
      homePieceOfFurniture0.setDepth((-2));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homePieceOfFurniture1.containsPoint(1.0F, 1.0F, 2268.667F);
      homePieceOfFurniture1.isBottomLeftPointAt(0, 3.4028235E38F, (-1.0F));
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListener0);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.getName();
      Integer integer1 = new Integer(963);
      homePieceOfFurniture1.setColor(integer1);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener1);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homePieceOfFurniture0.setY(0.0F);
      homePieceOfFurniture1.getAngle();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.containsPoint(2268.667F, 2268.667F, 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt(5.278159F, 0.0F, 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("CGo-d7f][!&", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-412.1522F));
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      CatalogTexture catalogTexture0 = new CatalogTexture("CGo-d7f][!&", resourceURLContent0, (-678.7114F), (-2009.0243F), true);
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.toUnsignedLong(4);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.setModelMirrored(false);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.move(4, 0.0F);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture1.setDepth(0);
      homePieceOfFurniture1.getTexture();
      homePieceOfFurniture0.setNameYOffset((-1411.217F));
      Random.setNextRandom(715827854);
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture1);
      homePieceOfFurniture2.isTopRightPointAt(0, 0.0F, 2259.0F);
      Level level0 = new Level("", 0.0F, (-1099.317F), 2259.0F);
      Level level1 = level0.clone();
      homePieceOfFurniture0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-20.30729F), (-20.30729F), (-20.30729F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getNameYOffset();
      MockURL.getFtpExample();
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.isTopLeftPointAt((-20.30729F), (-20.30729F), (-20.30729F));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 5836.5F, 0.8999386F, 5836.5F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float float0 = new Float((double) 5836.5F);
      homePieceOfFurniture0.setNameXOffset(0.8999386F);
      Float.isFinite(5836.5F);
      homePieceOfFurniture0.setShininess(float0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setNameYOffset(0);
      homePieceOfFurniture0.isMovable();
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getX();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 3.4028235E38F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(3.4028235E38F);
      homePieceOfFurniture0.setName("");
      homePieceOfFurniture0.setModelMirrored(true);
      Float float0 = new Float(584.0F);
      homePieceOfFurniture1.isTopLeftPointAt(1.0F, (-6027.8735F), (-6027.8735F));
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-20.30729F), (-20.30729F), (-20.30729F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getNameYOffset();
      MockURL.getFtpExample();
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.containsPoint(0.0F, (-20.30729F), (-20.30729F));
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.getWidth();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.setModelMirrored(false);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture0.isPointAt(0.5230077F, 0.5230077F, 584.5F);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture1.getTexture();
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture1.setNameAngle((-377.0F));
      homePieceOfFurniture0.getY();
      homePieceOfFurniture1.getStaircaseCutOutShape();
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture1.clone();
      homePieceOfFurniture2.getHeight();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.eteks.sweethome3d.model.HomePieceOfFurniture";
      stringArray0[1] = "";
      stringArray0[2] = "com.eteks.sweethome3d.model.HomePieceOfFurniture";
      Long long0 = new Long(604800000L);
      Float float0 = new Float((float) 604800000L);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash(516.095F, 2967.852F, 1279.6809F, 2.0F, (-3051.494F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(11.7F, 516.095F, 2.0F, (-1920.3969F), (-1328.24F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(2.0F, 0.3926991F, 0.5F, 0.5F, 589.55F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-3051.494F), 1569.13F, 3.4028235E38F, 516.095F, 589.55F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(604800000L, 271.5119F, 11.7F, 2166.02F, 0.5F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(728.9F, 2.0F, 2166.02F, 1514.0127F, 589.55F);
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(1.0F, 0.5F, 3.4028235E38F, 2166.02F, 2.0F);
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(1514.0127F, (-659.782F), (-2839.0F), 1052.4F, (-2839.0F));
      sashArray0[7] = sash7;
      float[][] floatArray0 = new float[5][1];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2.0F;
      floatArray1[1] = 0.3926991F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = 0.5F;
      floatArray2[1] = (-1328.24F);
      floatArray2[2] = (-1328.24F);
      floatArray2[3] = (-1920.3969F);
      floatArray2[4] = 516.095F;
      floatArray2[5] = 0.5F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 2.0F;
      floatArray3[1] = 516.095F;
      floatArray3[2] = 0.5F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = (-1328.24F);
      floatArray4[1] = 2.0F;
      floatArray4[2] = 1514.0127F;
      floatArray4[3] = 516.095F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 2.0F;
      floatArray0[4] = floatArray5;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "com.eteks.sweethome3d.model.HomePieceOfFurniture", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 604800000L, 604800000L, 2967.852F, 2.0F, false, 516.095F, (-3051.494F), sashArray0, floatArray0, "wLN-vTt7f5^N,u1(bg", false, false, false, (BigDecimal) null, (BigDecimal) null, "&?QO2<sn~N.dCL3X");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setShininess((Float) 516.095F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-42.059723F), (-42.059723F), (-42.059723F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-2));
      homePieceOfFurniture0.setHeight((-42.059723F));
      homePieceOfFurniture0.setName("PRICE");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.toUnsignedLong(4);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.setModelMirrored(false);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture0.isPointAt(0.5230077F, 0.5230077F, 584.5F);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture1.setLevel((Level) null);
      homePieceOfFurniture0.setNameAngle(0);
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt(27.0F, 172.135F, (-2220.6F));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 0.0F, 1.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float(1122.6522F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      Float.isFinite((-2275.0137F));
      Float.max(2.0F, (-1731.4485F));
      homePieceOfFurniture1.setShininess(float0);
      homePieceOfFurniture1.setDepth(311.4F);
      Integer integer1 = Integer.getInteger("", (-1073741823));
      homePieceOfFurniture1.setColor(integer1);
      homePieceOfFurniture1.setDescription("v6025$6zi|");
      homePieceOfFurniture1.getLevel();
      homePieceOfFurniture1.getName();
      homePieceOfFurniture0.getY();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homePieceOfFurniture1.containsPoint(1.0F, 1.0F, 2268.667F);
      homePieceOfFurniture1.isBottomLeftPointAt(0, 3.4028235E38F, (-0.79386115F));
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListener0);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.getName();
      Integer integer1 = new Integer(963);
      homePieceOfFurniture1.setColor(integer1);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener1);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homePieceOfFurniture0.setY(0.0F);
      homePieceOfFurniture1.getAngle();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt(0.0F, 0.0F, 0.0F);
      homePieceOfFurniture0.setDepth(0.0F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-6.3849874F), 1.0F, (-6.3849874F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Integer.getInteger("", 0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Integer integer1 = new Integer(11);
      homePieceOfFurniture1.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      Float float0 = new Float(3641.4607F);
      Float.isFinite(11);
      homePieceOfFurniture2.setDescription(".Vk");
      Float.max((-4254.8F), (-188.6121F));
      HomePieceOfFurniture homePieceOfFurniture3 = homePieceOfFurniture0.clone();
      homePieceOfFurniture3.setShininess((Float) null);
      homePieceOfFurniture1.setDepth((-4254.8F));
      homePieceOfFurniture0.isBottomRightPointAt((-2172.0479F), (-188.6121F), (-1944.1F));
      Integer integer2 = new Integer(4);
      homePieceOfFurniture2.setColor(integer2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(false);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture0.setNameAngle(491.87F);
      homePieceOfFurniture0.isTopRightPointAt(0.0F, (-2679.9077F), (-2679.9077F));
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 1.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, 1.0F, true, false);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      Integer integer0 = new Integer((-1168));
      Integer integer1 = new Integer(0);
      homePieceOfFurniture1.setColor(integer0);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture0.setNameAngle(879.0F);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      homePieceOfFurniture2.isTopRightPointAt(1.0F, 1.0F, (-2679.9077F));
      homePieceOfFurniture2.getModel();
      homePieceOfFurniture2.setModelMirrored(true);
      homePieceOfFurniture1.isTexturable();
      homePieceOfFurniture2.getNameAngle();
      homePieceOfFurniture2.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setVisible(false);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture1.isNameCenterPointAt(0.0F, 0.0F, 2207.3884F);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.setShininess(float0);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer.min((-1), (-1003));
      homePieceOfFurniture0.setColor(integer0);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 0.0F, 0.0F);
      homePieceOfFurniture0.setElevation((-1003));
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(2930);
      homePieceOfFurniture0.setColor(integer2);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setDepth(1019.0517F);
      homePieceOfFurniture0.move(2.0F, 1019.0517F);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.isBottomRightPointAt(1019.0517F, 21.11728F, 2268.667F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 0.0F, 0.0F);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 1.0F, 0.0F);
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      homePieceOfFurniture1.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.compareUnsigned(4, (-737455542));
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 0.0F, 0.5230077F);
      homePieceOfFurniture1.move(602.6906F, 4);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture1.getTexture();
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.move(0, 0.5F);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture1.getTexture();
      Random.setNextRandom((-2139720442));
      homePieceOfFurniture1.isTopRightPointAt(0, (-1.0F), 1.0F);
      homePieceOfFurniture0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 0.0F, 0.0F);
      homePieceOfFurniture0.setHeight(0.0F);
      homePieceOfFurniture0.setName("p%/:qYq:MSPH");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.isResizable();
      homePieceOfFurniture0.isBottomRightPointAt(5.278159F, 0.0F, 0.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("CGo-d7f][!&", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-412.1522F));
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      float float1 = (-2009.0243F);
      CatalogTexture catalogTexture0 = new CatalogTexture("CGo-d7f][!&", resourceURLContent0, (-678.7114F), (-2009.0243F), true);
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-745));
      homePieceOfFurniture0.setNameXOffset((-2688.3F));
      Float float0 = new Float(4144.8926F);
      Float.isFinite(1.0F);
      resourceURLContent0.getJAREntryName();
      Integer integer1 = new Integer((-745));
      homePieceOfFurniture0.setColor(integer1);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setDepth((-1102.8531F));
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setNameYOffset(0.5F);
      Random.setNextRandom((-745));
      homePieceOfFurniture1.isNameCenterPointAt((-431.0F), 1734.921F, 1.0F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture1.getCatalogId();
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture2.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer1);
      Float float0 = new Float((-2241.3967F));
      Integer integer2 = new Integer(0);
      homePieceOfFurniture0.setColor(integer2);
      homePieceOfFurniture0.containsPoint(1491.6199F, 0, 0);
      homePieceOfFurniture0.isBottomRightPointAt(1.0F, 1.0F, 5.278159F);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-2241.3967F));
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.setModelMirrored(false);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture0.isPointAt(0.5230077F, 0.5230077F, 584.5F);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture1.setLevel((Level) null);
      homePieceOfFurniture0.setWidth((-377.0F));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Content content0 = homePieceOfFurniture0.getModel();
      Float float0 = new Float((double) 27.0F);
      homePieceOfFurniture0.setShininess(float0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", content0, 27.0F, 27.0F, " doesn't contain piece ", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture0.setTexture(homeTexture0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(false);
      Integer integer3 = new Integer(3);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.5F);
      homePieceOfFurniture0.move(1.0F, 3);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      Random.setNextRandom(0);
      homePieceOfFurniture0.isTopRightPointAt(0.0F, 531.64294F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Integer integer0 = new Integer(2147483645);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-2785.0425F), (-2785.0425F), 0.0F, 2789.988F, true, "", integer0, (float[][]) null, false, 2147483645, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture0.isBottomLeftPointAt(2268.667F, 2268.667F, (-2785.0425F));
      homePieceOfFurniture0.setMovable(true);
      homePieceOfFurniture1.setNameYOffset(1.0F);
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture2.getPoints();
      homePieceOfFurniture2.setVisible(false);
      homePieceOfFurniture2.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.7F, 0.0F, 11.7F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPrice();
      homePieceOfFurniture0.getAngle();
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer1);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      float float0 = 289.85617F;
      Float float1 = new Float(289.85617F);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture0.isTopLeftPointAt(478.317F, 1134.6268F, 1603.4531F);
      homePieceOfFurniture0.setHeight((-1.0F));
      homePieceOfFurniture1.setDepth((-1.0F));
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setElevation(0.0F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homePieceOfFurniture0.setNameXOffset(0.0F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setElevation(0.5230077F);
      homePieceOfFurniture0.setWidth(0.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setHeight(1814.0F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(145.891F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture1.getValueAddedTax();
      homePieceOfFurniture0.isDoorOrWindow();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homePieceOfFurniture1.containsPoint(1.0F, 1.0F, 2268.667F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(145.891F);
      homePieceOfFurniture1.getName();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogTexture catalogTexture0 = new CatalogTexture("V@`|c]utw", resourceURLContent0, 1.0F, 145.891F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture1.setTexture(homeTexture0);
      homePieceOfFurniture0.getDescription();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      homePieceOfFurniture1.setDepth((-1559.971F));
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.isTexturable();
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture0.setWidth((-377.0F));
      homePieceOfFurniture0.clone();
      System.setCurrentTimeMillis(600000L);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
      homePieceOfFurniture0.setWidth(0.0F);
      homePieceOfFurniture1.setDepth(578.0991F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      TextStyle textStyle0 = new TextStyle(0.0F, true, true);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setElevation(1.0F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-1150.0F), 1.0F, 266.23F, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(46);
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(46);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(true);
      Integer integer3 = new Integer(3);
      homePieceOfFurniture0.setColor(integer2);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(0.5F);
      homePieceOfFurniture0.move(147.2F, 222.12762F);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getCurrency();
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.isFinite((-2580.31F));
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture1.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture1.setDepth((-2580.31F));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 1.0F, 0);
      homePieceOfFurniture0.move(3.827755F, 1.0F);
      homePieceOfFurniture1.setDepth((-2580.31F));
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setNameAngle((-1326.157F));
      homePieceOfFurniture1.getY();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 0.0F, 0.0F);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 1.0F, 0.0F);
      homePieceOfFurniture0.isTopRightPointAt(1.0F, 1.0F, (-1548.0F));
      Level level0 = new Level("4gK,", 1.0F, (-1548.0F), 0.0F);
      level0.clone();
      level0.clone();
      homePieceOfFurniture1.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth((-2235.4326F));
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      homePieceOfFurniture1.addPropertyChangeListener((PropertyChangeListener) null);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-3184.1643F));
      homePieceOfFurniture0.intersectsRectangle(0, 1.0F, 1.0F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 1.0802861F, 581.272F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      Content content0 = homePieceOfFurniture0.getModel();
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash(2431.0796F, (-4350.2F), (-4350.2F), (-621.5247F), (-945.47F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(3610.2324F, (-1.0F), (-1.0F), 1408.1594F, (-621.5247F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(2078.4F, 1408.8723F, 1557.2F, (-3070.8157F), 2431.0796F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(2078.4F, (-3070.8157F), (-1401.7268F), (-621.5247F), 3594.7444F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-1.0F), (-2815.8F), 621.0F, (-565.22F), 2431.0796F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(2078.4F, 1408.8723F, 0.5F, 2430.0796F, (-621.5247F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(5.0427513F, 2.0F, 621.0F, 2430.736F, (-4350.2F));
      sashArray0[6] = sash6;
      Sash sash7 = new Sash((-1948.0F), 2430.736F, (-621.5247F), 2430.736F, 2.0F);
      sashArray0[7] = sash7;
      Integer integer1 = new Integer(0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("\"", resourceURLContent0, content0, (-3070.8157F), 0, 0.0F, (-3070.8157F), true, 0, 3610.2324F, sashArray0, integer1, (float[][]) null, true, 0, false);
      catalogPieceOfFurniture0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow0);
      homePieceOfFurniture0.setDepth(145.891F);
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.setX(0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 1.0F, 0.0F);
      homePieceOfFurniture0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, (-608.3F), (-689.7F));
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture1.setColor((Integer) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.setModelMirrored(false);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.isPointAt(0.5230077F, (-1922.0F), 0);
      homePieceOfFurniture0.isPointAt(0.5230077F, 0.5230077F, 584.5F);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture1.setLevel((Level) null);
      homePieceOfFurniture0.setWidth((-377.0F));
      homePieceOfFurniture1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.isFinite((-2580.31F));
      homePieceOfFurniture1.isPointAt(0.0F, 0, (-417.0F));
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      Integer integer1 = new Integer(3);
      homePieceOfFurniture1.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("l", resourceURLContent0, resourceURLContent0, 1652.8556F, (-1578.32F), 1.0F, true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-756));
      Integer integer1 = new Integer((-59));
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float(1.0F);
      Float.max((-756), (-1578.32F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth((-59));
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setColor(integer1);
      homePieceOfFurniture1.clone();
      homePieceOfFurniture1.setAngle((-1578.32F));
      Float float1 = new Float((-1578.32F));
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt(0.0F, 0.3926991F, 0.0F);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.667233F, 0.0F, 11.667233F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer.toUnsignedString(0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.valueOf(0.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setX(0.0F);
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      Float.isFinite((-2275.0137F));
      homePieceOfFurniture1.setNameYOffset(0.0F);
      Random.setNextRandom(0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1411.217F), 1514.0127F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture1.getGroundElevation();
      homePieceOfFurniture0.getPrice();
      homePieceOfFurniture0.isTopLeftPointAt(1.0F, 0, 2221.0825F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3n}I[6'tF");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, (Content) null, (Content) null, 5.6372423F, 1041.8254F, (-300.63766F), false, false);
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isBottomLeftPointAt(1.0F, (-1346.111F), 1041.8254F);
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 1041.8254F, (-409.57F));
      Level level0 = new Level("m(/@B8X|J5o:", (-409.57F), (-1346.111F), 1571.977F);
      Level level1 = level0.clone();
      level0.clone();
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture1.getName();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.667233F, 0.0F, 11.667233F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer.toUnsignedString(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.valueOf(0.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setX(0.0F);
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      Float.isFinite((-2275.0137F));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      homePieceOfFurniture1.setNameYOffset(0.0F);
      Random.setNextRandom(0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1411.217F), 1514.0127F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getWidth();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.toUnsignedLong(4);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.setModelMirrored(false);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.move(4, 0.0F);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture1.setDepth(0);
      homePieceOfFurniture1.getTexture();
      Random.setNextRandom(715827854);
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture1);
      homePieceOfFurniture2.isTopRightPointAt(0, 0.0F, 2259.0F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "f|!JMlLa*#I";
      stringArray0[3] = " ";
      stringArray0[4] = "";
      Long.getLong("f|!JMlLa*#I");
      Float float0 = new Float((-1972.9238F));
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      LightSource[] lightSourceArray0 = new LightSource[7];
      LightSource lightSource0 = new LightSource(3.4028235E38F, 3.4028235E38F, 432.0F, 2);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(3.4028235E38F, 0.0F, (-1972.9238F), 2);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(3873.6614F);
      LightSource lightSource2 = new LightSource(432.0F, (-1972.9238F), 3873.6614F, 2, float1);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(2279.046048157107);
      LightSource lightSource3 = new LightSource(3.4028235E38F, 1726.0F, 0.0F, 2, float2);
      lightSourceArray0[3] = lightSource3;
      Float float3 = new Float(0.0);
      LightSource lightSource4 = new LightSource(2858.0F, 1.0F, 3873.6614F, 2, float3);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource((-1379.0F), (-59.0F), 1726.0F, 70, float0);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(432.0F, 2, 2, 2, float1);
      lightSourceArray0[6] = lightSource6;
      float[][] floatArray0 = new float[9][7];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 432.0F;
      floatArray1[1] = (-1379.0F);
      floatArray1[2] = 1726.0F;
      floatArray1[3] = (-1379.0F);
      floatArray1[4] = 3873.6614F;
      floatArray1[5] = (-1379.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (float) 70;
      floatArray2[1] = 1.0F;
      floatArray2[2] = (-1972.9238F);
      floatArray2[3] = (-2.0F);
      floatArray2[4] = 1726.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 483.3072F;
      floatArray3[1] = 1726.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = (-1379.0F);
      floatArray5[1] = 3.4028235E38F;
      floatArray5[2] = 2858.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = (-1.0F);
      floatArray6[1] = (-915.75F);
      floatArray6[2] = (float) 70;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 1.0F;
      floatArray6[5] = 1726.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[8];
      floatArray7[0] = 1726.0F;
      floatArray7[1] = (-1379.0F);
      floatArray7[2] = 0.0F;
      floatArray7[3] = (-4098.7124F);
      floatArray7[4] = 3.4028235E38F;
      floatArray7[5] = (float) 2;
      floatArray7[6] = 2858.0F;
      floatArray7[7] = 0.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 3.5F;
      floatArray8[1] = 0.0F;
      floatArray8[2] = (float) 70;
      floatArray8[3] = 432.0F;
      floatArray8[4] = (-2.0F);
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[7];
      floatArray9[0] = (-2.0F);
      floatArray9[1] = 432.0F;
      floatArray9[2] = 483.3072F;
      floatArray9[3] = 2858.0F;
      floatArray9[4] = 483.3072F;
      floatArray9[5] = 2858.0F;
      floatArray9[6] = (-4098.7124F);
      floatArray0[8] = floatArray9;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("NAME_VISIBLE", " ", "NAME_VISIBLE", "NAME_VISIBLE", stringArray0, (Long) null, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1972.9238F), (-1972.9238F), 3.4028235E38F, 3.4028235E38F, false, lightSourceArray0, "[z_C|},m5w#l`0Wp'C{", floatArray0, "NAME_VISIBLE", false, false, false, bigDecimal0, bigDecimal0, "?A");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.remainderUnsigned(0, (-16));
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 0.0F, 0.5230077F);
      homePieceOfFurniture1.setMovable(false);
      Level level0 = new Level("h", 2.0F, 0.5230077F, 2.0F);
      Level level1 = level0.clone();
      homePieceOfFurniture0.setLevel(level1);
      Integer integer2 = new Integer(0);
      Integer.remainderUnsigned(0, (-2011));
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.getTexture();
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, 0.0F, (-223.1482F));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset(0.5F);
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      resourceURLContent0.getJAREntryName();
      Integer integer0 = new Integer((-2147483227));
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setWidth(1.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setDepth(0.5F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture0.isBottomLeftPointAt(0.5F, 1.0F, (-2580.31F));
      homePieceOfFurniture0.move((-2580.31F), (-2147483227));
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setNameAngle((-2580.31F));
      homePieceOfFurniture0.getY();
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.getHeight();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 1.0F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isBottomLeftPointAt(2268.667F, (-239.67384F), 2268.667F);
      homePieceOfFurniture0.isBottomLeftPointAt(0.0F, 2268.667F, (-2133.1418F));
      homePieceOfFurniture0.setMovable(true);
      homePieceOfFurniture0.getY();
      homePieceOfFurniture1.setNameVisible(true);
      homePieceOfFurniture1.getDepth();
      homePieceOfFurniture1.getPlanIcon();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      float float0 = 0.0F;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float1 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float1);
      Integer integer1 = new Integer((-1109));
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture1);
      Integer integer2 = new Integer((-1109));
      homePieceOfFurniture2.setColor(integer2);
      Integer integer3 = new Integer(2);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("l", resourceURLContent0, resourceURLContent0, 1652.8556F, (-1578.32F), 1.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-756));
      Integer integer1 = new Integer((-59));
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float(1.0F);
      Float.max((-756), (-1578.32F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth((-59));
      homePieceOfFurniture0.getPoints();
      Integer integer2 = new Integer(1294);
      homePieceOfFurniture0.setColor(integer2);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("Piece isn't texturable", propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture1.setDepth((-825.669F));
      homePieceOfFurniture1.setDepth((-1.0F));
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      resourceURLContent0.getJAREntryName();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture0.setLevel((Level) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homePieceOfFurniture0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isBottomRightPointAt(1.0F, 1.0F, 1.0F);
      homePieceOfFurniture1.setHeight(0.0F);
      homePieceOfFurniture1.setName("");
      homePieceOfFurniture0.setDescription("");
      homePieceOfFurniture0.getDescription();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("]W0p2~Ih+^2lFZwxWa%", propertyChangeListenerProxy1);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy2);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(145.891F);
      homePieceOfFurniture1.getName();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getModel();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setName("");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getNameYOffset();
      MockURL.getFtpExample();
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.setDepth(27.0F);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 27.0F, (-1141.1F));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 0.0F, 2268.667F);
      homePieceOfFurniture0.setMovable(false);
      homePieceOfFurniture1.setNameYOffset(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture0.removePropertyChangeListener(propertyChangeListenerProxy0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      resourceURLContent0.getJAREntryName();
      resourceURLContent0.getJAREntryURL();
      Integer integer3 = new Integer(3);
      homePieceOfFurniture0.setColor(integer3);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("Piece isn't texturable", (PropertyChangeListener) null);
      homePieceOfFurniture0.addPropertyChangeListener((PropertyChangeListener) null);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(0.5F);
      homePieceOfFurniture0.move(1.0F, 3);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(1.0F);
      homePieceOfFurniture0.isTopLeftPointAt(0, 0.0F, 0);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0.0F);
      Float float1 = new Float(0.5F);
      homePieceOfFurniture0.isTopLeftPointAt(3.4028235E38F, 0, (-67.8F));
      homePieceOfFurniture1.setDepth(1.0F);
      homePieceOfFurniture0.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      TextStyle textStyle0 = new TextStyle((-67.8F), false, true);
      homePieceOfFurniture1.setNameStyle(textStyle0);
      homePieceOfFurniture1.setElevation(0.0F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.setColor((Integer) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture1.intersectsRectangle(0.0F, (-2275.0137F), 1.0F, 0.0F);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.7F, 0.0F, 11.7F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer.toUnsignedString(0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.valueOf(0.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setX(0.0F);
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      Float.isFinite((-2275.0137F));
      homePieceOfFurniture1.setNameYOffset(0.0F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture1.isBottomRightPointAt((-2275.0137F), (-1.0F), 1.0F);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, 11.7F, 11.7F);
      homePieceOfFurniture0.getShininess();
      Float float0 = new Float((-1.0F));
      homePieceOfFurniture1.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(0.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setNameXOffset(0.0F);
      homePieceOfFurniture0.isPointAt(0.5230077F, 0.5230077F, 0.0F);
      homePieceOfFurniture1.setWidth(0.0F);
      homePieceOfFurniture1.isNameCenterPointAt(0.0F, 1782.7891F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 584.0F, 584.0F, (-1575.7F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-1575.7F), (-2736.77F), (-1718.366F), true, true);
      catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture1);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(7);
      homePieceOfFurniture0.setColor(integer1);
      Float float0 = new Float((float) 7);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture0.setNameAngle(7);
      homePieceOfFurniture0.isTopRightPointAt(0, 584.0F, (-2736.77F));
      homePieceOfFurniture0.getModel();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getCatalogId();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.7F, 11.7F, 11.7F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer.toUnsignedString(0);
      homePieceOfFurniture0.setX(11.7F);
      Float.isFinite((-2275.0137F));
      homePieceOfFurniture0.setNameYOffset(11.7F);
      homePieceOfFurniture0.getPrice();
      homePieceOfFurniture0.isTopLeftPointAt(1.0802861F, 0, 2221.0825F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 0.0F, 0.5230077F);
      homePieceOfFurniture1.setMovable(true);
      Level level0 = new Level("", 2.0F, 0.5230077F, 2.0F);
      Level level1 = level0.clone();
      homePieceOfFurniture0.setLevel(level1);
      Integer integer2 = new Integer(0);
      Integer.remainderUnsigned(0, (-2011));
      homePieceOfFurniture0.setColor(integer2);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-1559.971F));
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.isNameCenterPointAt(0, (-223.1482F), 0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.max(1.0F, (-2275.0137F));
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture1.setColor((Integer) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("RRB<i r53GP", resourceURLContent0, resourceURLContent0, 1.0F, (-52.26581F), (-52.26581F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      Integer integer1 = new Integer(33);
      Integer integer2 = new Integer(0);
      resourceURLContent0.getJAREntryURL();
      homePieceOfFurniture0.setMovable(true);
      Integer integer3 = new Integer(33);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(314.0F);
      homePieceOfFurniture0.move(0.5F, 1.0F);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture0.getTexture();
      Random.setNextRandom(0);
      homePieceOfFurniture0.isTopRightPointAt((-2580.31F), 0, 0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset(0.5F);
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      resourceURLContent0.getJAREntryName();
      Integer integer0 = new Integer((-2147483227));
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setDepth(0.5F);
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 0.0F, 1.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture0.setTexture(homeTexture0);
      Float.isFinite(0.0F);
      homePieceOfFurniture0.setNameYOffset(1380.157F);
      Random.setNextRandom((-2147483227));
      homePieceOfFurniture0.isNameCenterPointAt(0.5F, (-2275.0137F), (-2147483227));
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.remainderUnsigned(0, 4);
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle(0);
      Float float0 = new Float(0.0F);
      homePieceOfFurniture1.setModelMirrored(false);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture0.isPointAt(0.5230077F, 0.5230077F, 602.8222F);
      homePieceOfFurniture1.isNameCenterPointAt(602.8222F, 602.8222F, 0);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getX();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("l", resourceURLContent0, resourceURLContent0, 1652.8556F, (-1578.32F), 1.0F, true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer((-756));
      Integer integer1 = new Integer((-59));
      homePieceOfFurniture0.setColor(integer1);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float(1.0F);
      Float.max((-756), (-1578.32F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth((-59));
      homePieceOfFurniture0.getPoints();
      Integer integer2 = new Integer(1294);
      homePieceOfFurniture0.setColor(integer2);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("Piece isn't texturable", propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture1.setDepth((-825.669F));
      homePieceOfFurniture1.move((-1578.32F), (-2235.4326F));
      homePieceOfFurniture1.setDepth((-1.0F));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.setColor(integer0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(145.891F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.setColor(integer0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy(".tmp", propertyChangeListenerProxy1);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy1);
      homePieceOfFurniture0.setY(1.0F);
      homePieceOfFurniture0.getAngle();
      homePieceOfFurniture1.getDepth();
      homePieceOfFurniture1.getShininess();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.667233F, 0.0F, 11.667233F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer.toUnsignedString(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.valueOf(0.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setX(0.0F);
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      Float.isFinite((-2275.0137F));
      homePieceOfFurniture1.setNameYOffset(0.0F);
      Random.setNextRandom(0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1411.217F), 1514.0127F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.setColor((Integer) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Object object0 = new Object();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "", "com.eteks.sweethome3d.model.HomeDoorOrWindow", "");
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 3.4028235E38F, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer1);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setDepth((-1.0F));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture0.isBottomLeftPointAt((-1352.0F), (-2821.0735F), (-1411.217F));
      homePieceOfFurniture0.move(584.0F, 204.8096F);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.setDepth((-517.4F));
      homePieceOfFurniture1.getTexture();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.setNameAngle((-2821.0735F));
      homePieceOfFurniture1.getY();
      homePieceOfFurniture1.getStaircaseCutOutShape();
      homePieceOfFurniture0.getHeight();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      resourceURLContent0.getJAREntryURL();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setAngle(0.0F);
      Float float0 = new Float((double) 0.0F);
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth(2.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("nPT1D4Pd$'F", resourceURLContent0, resourceURLContent0, 5.85F, 5.85F, 5.85F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("nPT1D4Pd$'F", resourceURLContent0, resourceURLContent0, (-1.0F), 3006.0298F, (-2778.5598F), false, false);
      Integer integer0 = new Integer(852);
      Integer integer1 = new Integer(2147376285);
      Integer integer2 = new Integer(2147376285);
      homePieceOfFurniture0.setColor(integer2);
      Float float0 = new Float((-1430.0F));
      homePieceOfFurniture0.setDepth(5.85F);
      homePieceOfFurniture0.setNameAngle((-1439.4999F));
      homePieceOfFurniture0.isTopRightPointAt(10.25409F, 2.0F, 790.8265F);
      homePieceOfFurniture0.getModel();
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "nPT1D4Pd$'F");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-20.30729F), (-20.30729F), (-20.30729F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getNameYOffset();
      MockURL.getFtpExample();
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 0.0F, 0.0F);
      homePieceOfFurniture1.isBottomLeftPointAt(0.0F, 1.0F, 0.0F);
      homePieceOfFurniture0.isTopRightPointAt(1.0F, 1.0F, (-1548.0F));
      homePieceOfFurniture1.isBottomRightPointAt(584.0F, (-1.0F), 1481.33F);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setNameYOffset((-1.0F));
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      homePieceOfFurniture2.getPoints();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      Float.isFinite(578.0991F);
      Float.max(578.0991F, 578.0991F);
      homePieceOfFurniture1.setShininess(float0);
      homePieceOfFurniture1.setDepth(578.0991F);
      homePieceOfFurniture0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setNameXOffset(0.0F);
      Float float0 = new Float((float) 0);
      Float.isFinite((-2580.31F));
      resourceURLContent0.getJAREntryName();
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture1.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture1.setDepth((-2580.31F));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 1.0F, 0);
      homePieceOfFurniture0.move(3.827755F, 1.0F);
      homePieceOfFurniture1.setDepth((-2580.31F));
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.setNameAngle((-1326.157F));
      homePieceOfFurniture1.getY();
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.getModel();
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homePieceOfFurniture0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.9568711F, 1.0F, 0.9568711F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isBottomRightPointAt(1.0F, 1.0F, 1.0F);
      homePieceOfFurniture1.setVisible(true);
      CatalogTexture catalogTexture0 = new CatalogTexture("k)}XY", resourceURLContent0, (-1.0F), (-1.0F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture0.setTexture(homeTexture0);
      homePieceOfFurniture1.setDescription("");
      homePieceOfFurniture1.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 0.0F, 0.0F);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(121.8F);
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameAngle(27.0F);
      Integer integer0 = new Integer((-2));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.setDepth((-2));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture0.isAtLevel((Level) null);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer.compareUnsigned(3, 0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle(1.0F);
      Float float0 = new Float((float) 0);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
      homePieceOfFurniture1.getName();
      homePieceOfFurniture1.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      TextStyle textStyle0 = new TextStyle(0.0F, true, true);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setElevation(1.0F);
      homePieceOfFurniture1.getCatalogId();
      homePieceOfFurniture1.getModel();
      homePieceOfFurniture1.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 11.667233F, 0.0F, 11.667233F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setMovable(true);
      Integer integer0 = new Integer(0);
      Integer.toUnsignedString(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.valueOf(0.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setX(0.0F);
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      Float.isFinite((-2275.0137F));
      homePieceOfFurniture1.setNameYOffset(0.0F);
      Random.setNextRandom(0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1411.217F), 1514.0127F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getPlanIcon();
      homePieceOfFurniture1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float float0 = new Float((float) 0);
      Float.max(1.0F, 1.0F);
      Float float1 = new Float((double) 0.0F);
      homePieceOfFurniture0.setShininess(float1);
      homePieceOfFurniture0.setDepth(0);
      homePieceOfFurniture1.getPoints();
      Integer integer1 = new Integer((-1138));
      homePieceOfFurniture1.setColor(integer1);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      homePieceOfFurniture0.setColor(integer1);
      Float float0 = new Float((-2241.3967F));
      Integer integer2 = new Integer(0);
      homePieceOfFurniture0.setColor(integer2);
      homePieceOfFurniture0.containsPoint(1523.9062F, (-2172.423F), (-2172.423F));
      homePieceOfFurniture0.isBottomRightPointAt(1.0F, 1.0F, 5.278159F);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth((-2241.3967F));
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt(0.5230077F, 0.5230077F, 0.0F);
      homePieceOfFurniture0.setWidth(0.0F);
      homePieceOfFurniture0.isTopRightPointAt(0.5230077F, 0.5230077F, 0.5230077F);
      homePieceOfFurniture0.getAngle();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 5813.6514F, 5813.6514F, 5813.6514F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDescription("");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isPointAt(0.5230077F, 0.5230077F, 0.0F);
      homePieceOfFurniture1.setWidth(0.0F);
      Level level0 = new Level("", 0.0F, 0.0F, 306.0F);
      homePieceOfFurniture1.setLevel(level0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash((-552.663F), (-1.0F), 1678.413F, 971.15F, (-552.663F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1028.0F, (-1203.4369F), 1202.88F, (-743.6024F), 627.4567F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-743.6024F), (-4352.281F), 874.7F, (-1.0F), (-1.0F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(3610.298F, (-120.87904F), (-739.4617F), (-1.0F), 220.4F);
      sashArray0[3] = sash3;
      Integer integer0 = new Integer((-58));
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 1028.0F;
      floatArray1[1] = (-1203.4369F);
      floatArray1[2] = 1678.413F;
      floatArray1[3] = 1202.88F;
      floatArray1[4] = (-743.6024F);
      floatArray1[5] = (-120.87904F);
      floatArray1[6] = 627.4567F;
      floatArray1[7] = 220.4F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (-1.0F);
      floatArray2[1] = 3411.0F;
      floatArray2[2] = (-4352.281F);
      floatArray2[3] = (-739.4617F);
      floatArray2[4] = (-1.0F);
      floatArray2[5] = 874.7F;
      floatArray2[6] = 2.0F;
      floatArray2[7] = (-739.4617F);
      floatArray2[8] = 220.4F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1678.413F;
      floatArray3[1] = (-1203.4369F);
      floatArray3[2] = 3610.298F;
      floatArray3[3] = 3610.298F;
      floatArray3[4] = (-739.4617F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = (-1.0F);
      floatArray4[1] = 971.15F;
      floatArray4[2] = (float) (-58);
      floatArray4[3] = (-552.663F);
      floatArray4[4] = 220.4F;
      floatArray4[5] = 1202.88F;
      floatArray4[6] = (-552.663F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = (-4352.281F);
      floatArray5[1] = 3610.298F;
      floatArray5[2] = (-1.0F);
      floatArray5[3] = (-1.0F);
      floatArray5[4] = (-4352.281F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = 971.15F;
      floatArray6[1] = 1678.413F;
      floatArray6[2] = 1.0F;
      floatArray6[3] = (-4352.281F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = (-552.663F);
      floatArray7[1] = 1028.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 3610.298F;
      floatArray8[1] = 3610.298F;
      floatArray8[2] = (-1203.4369F);
      floatArray8[3] = 1678.413F;
      floatArray8[4] = (-739.4617F);
      floatArray0[7] = floatArray8;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, temporaryURLContent0, temporaryURLContent0, 1678.413F, (-1.0F), 971.15F, 971.15F, true, (-1.0F), (-552.663F), sashArray0, integer0, floatArray0, true, 3610.298F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.getPrice();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      homePieceOfFurniture0.setHeight(11.7F);
      homePieceOfFurniture0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Integer integer1 = new Integer(11);
      homePieceOfFurniture1.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      Float float0 = new Float(3641.4607F);
      Float.isFinite(11);
      homePieceOfFurniture2.setDescription(".Vk");
      Float.max((-4254.8F), (-189.0F));
      HomePieceOfFurniture homePieceOfFurniture3 = homePieceOfFurniture0.clone();
      homePieceOfFurniture3.setShininess((Float) null);
      homePieceOfFurniture1.setDepth((-4254.8F));
      Integer integer2 = new Integer(4);
      homePieceOfFurniture2.setColor(integer2);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setMovable(true);
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(class0, "", true);
      resourceURLContent1.getJAREntryName();
      catalogPieceOfFurniture0.getCategory();
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.move((-1559.971F), 1.0F);
      homePieceOfFurniture0.setDepth(1.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture1.setVisible(false);
      homePieceOfFurniture1.getColor();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("p)\"'YNc.I}bh0", resourceURLContent0, resourceURLContent0, 3.4028235E38F, 584.0F, 3.4028235E38F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      int int0 = 0;
      Integer integer0 = new Integer((-2004));
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setAngle((-2004));
      homePieceOfFurniture0.setName("");
      homePieceOfFurniture0.setModelMirrored(true);
      Float float0 = new Float(3.4028235E38F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopLeftPointAt((-288.19F), 3.4028235E38F, 1.0F);
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("NAME_Y_OFFSET", resourceURLContent0, resourceURLContent0, 1.0F, 1409.1594F, 1408.1594F, false, false);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1409.1594F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer((-791));
      assertEquals((-791), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-791));
      assertEquals((-791), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Float float0 = new Float(1408.1594F);
      assertEquals(1408.1594F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer2 = new Integer(7);
      assertEquals(7, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      homePieceOfFurniture0.setColor(integer2);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(7, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1409.1594F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("NAME_Y_OFFSET");
      assertEquals("NAME_Y_OFFSET", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNotNull(furnitureCategory0);
      
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("NAME_Y_OFFSET", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      boolean boolean0 = homePieceOfFurniture0.containsPoint((-2691.64F), 1054.0F, (-791));
      assertFalse(boolean0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(7, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1409.1594F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("g<:m?:@X=", propertyChangeListener0);
      assertEquals("g<:m?:@X=", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.LightSource", propertyChangeListenerProxy0);
      assertEquals("g<:m?:@X=", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.LightSource", propertyChangeListenerProxy0);
      assertEquals("g<:m?:@X=", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", propertyChangeListenerProxy2.getPropertyName());
      assertNotNull(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", "com.eteks.sweethome3d.model.LightSource", "X", resourceURLContent0, resourceURLContent0, 1.0F, 7, (-791), (-791), true, false, (float[][]) null, "sivXeBqHA5w7svau+", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertEquals((-791.0F), catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("X", catalogPieceOfFurniture1.getDescription());
      assertEquals(1.0F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture1.getId());
      assertEquals(7.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals((-791.0F), catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogPieceOfFurniture1.getName());
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertEquals("sivXeBqHA5w7svau+", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertNotNull(catalogPieceOfFurniture1);
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(propertyChangeListenerProxy0, "sivXeBqHA5w7svau+", catalogPieceOfFurniture1, integer0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertEquals((-791.0F), catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("X", catalogPieceOfFurniture1.getDescription());
      assertEquals(1.0F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture1.getId());
      assertEquals(7.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals((-791.0F), catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogPieceOfFurniture1.getName());
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertEquals("sivXeBqHA5w7svau+", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals("sivXeBqHA5w7svau+", propertyChangeEvent0.getPropertyName());
      assertEquals("g<:m?:@X=", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      
      propertyChangeListenerProxy2.propertyChange(propertyChangeEvent0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertEquals((-791.0F), catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("X", catalogPieceOfFurniture1.getDescription());
      assertEquals(1.0F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture1.getId());
      assertEquals(7.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals((-791.0F), catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogPieceOfFurniture1.getName());
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertEquals("sivXeBqHA5w7svau+", catalogPieceOfFurniture1.getCreator());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals("sivXeBqHA5w7svau+", propertyChangeEvent0.getPropertyName());
      assertEquals("g<:m?:@X=", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", propertyChangeListenerProxy2.getPropertyName());
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy0);
      
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy2);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(7, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1409.1594F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("g<:m?:@X=", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", propertyChangeListenerProxy2.getPropertyName());
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy0);
      
      homePieceOfFurniture0.setModelMirrored(false);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(7, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1409.1594F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      
      homePieceOfFurniture0.setDepth(2268.667F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(7, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2268.667F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      
      String string0 = homePieceOfFurniture0.getName();
      assertEquals("NAME_Y_OFFSET", string0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(7, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2268.667F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNotNull(string0);
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      
      boolean boolean1 = homePieceOfFurniture0.isDeformable();
      assertTrue(boolean1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(7, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2268.667F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      
      BigDecimal bigDecimal1 = homePieceOfFurniture0.getValueAddedTax();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1408.1594F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1409.1594F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("NAME_Y_OFFSET", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(704.5797F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(7, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2268.667F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1408.1594F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(bigDecimal1);
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, (-2407.33F), 1.0F, (-2407.33F), true, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2407.33F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1203.665F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2407.33F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2407.33F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1203.665F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2407.33F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-2407.33F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals((-1203.665F), homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-2407.33F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals("", homePieceOfFurniture1.getName());
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      boolean boolean1 = homePieceOfFurniture1.isBottomRightPointAt(1.0F, 1.0F, 1.0F);
      assertFalse(boolean1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2407.33F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1203.665F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2407.33F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-2407.33F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals((-1203.665F), homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-2407.33F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      float float0 = homePieceOfFurniture1.getY();
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2407.33F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1203.665F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2407.33F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-2407.33F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals((-1203.665F), homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-2407.33F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      String string0 = homePieceOfFurniture0.getCatalogId();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2407.33F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2407.33F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1203.665F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2407.33F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(string0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger("", 0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      homePieceOfFurniture0.setColor(integer1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      
      Float float0 = new Float((-2241.3967F));
      assertEquals((-2241.3967F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      homePieceOfFurniture0.setColor(integer3);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      
      boolean boolean0 = homePieceOfFurniture0.containsPoint(1491.6199F, 0, 0);
      assertFalse(boolean0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      URL uRL0 = resourceURLContent0.getJAREntryURL();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      boolean boolean1 = homePieceOfFurniture0.isBottomRightPointAt(0.27420127F, 1.0F, 5.278159F);
      assertFalse(boolean1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(boolean1 == boolean0);
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      homePieceOfFurniture0.setDepth((-2241.3967F));
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2241.3967F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      homePieceOfFurniture0.setHeight(5.278159F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(5.278159F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2241.3967F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNotNull(catalogPieceOfFurniture0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      homePieceOfFurniture0.setColor(integer0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      URL uRL0 = resourceURLContent0.getJAREntryURL();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      homePieceOfFurniture0.setMovable(true);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      
      Integer integer3 = new Integer(3);
      assertEquals(3, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      homePieceOfFurniture0.setColor(integer3);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Piece isn't texturable", (PropertyChangeListener) null);
      assertEquals("Piece isn't texturable", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      homePieceOfFurniture0.addPropertyChangeListener((PropertyChangeListener) null);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      
      homePieceOfFurniture0.setModelMirrored(false);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      
      homePieceOfFurniture0.setDepth(0.5F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.5F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      
      homePieceOfFurniture0.move(1.0F, 3);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.5F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3, (int)homePieceOfFurniture0.getColor());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(3.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      
      homePieceOfFurniture0.setDepth(1.0F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3, (int)homePieceOfFurniture0.getColor());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(3.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      
      HomeTexture homeTexture0 = homePieceOfFurniture0.getTexture();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3, (int)homePieceOfFurniture0.getColor());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(3.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 3.4028235E38F, 3.4028235E38F, 1.0F, false, false);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      homePieceOfFurniture0.setColor(integer0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(2, (int)homePieceOfFurniture1.getColor());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      homePieceOfFurniture1.setColor(integer0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(2, (int)homePieceOfFurniture1.getColor());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", (PropertyChangeListener) null);
      assertEquals("V@`|c]utw", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertEquals("V@`|c]utw", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("V@`|c]utw", (PropertyChangeListener) null);
      assertEquals("V@`|c]utw", propertyChangeListenerProxy2.getPropertyName());
      assertNotNull(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy3 = new PropertyChangeListenerProxy("r'gYsSpP65", (PropertyChangeListener) null);
      assertEquals("r'gYsSpP65", propertyChangeListenerProxy3.getPropertyName());
      assertNotNull(propertyChangeListenerProxy3);
      assertFalse(propertyChangeListenerProxy3.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy3.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy3.equals((Object)propertyChangeListenerProxy1));
      
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(2, (int)homePieceOfFurniture1.getColor());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("V@`|c]utw", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy3));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy3);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      
      homePieceOfFurniture0.setModelMirrored(false);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setDepth(0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(2, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      String string0 = homePieceOfFurniture1.getName();
      assertEquals("", string0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(2, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNotNull(string0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = homePieceOfFurniture1.containsPoint(1.0F, 1.0F, 2268.667F);
      assertTrue(boolean0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListener0);
      assertEquals("V@`|c]utw", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("V@`|c]utw", propertyChangeListenerProxy0);
      assertEquals("V@`|c]utw", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("V@`|c]utw", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("V@`|c]utw", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture0.setDepth(145.891F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(145.891F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      String string0 = homePieceOfFurniture1.getName();
      assertEquals("", string0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(145.891F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNotNull(string0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      boolean boolean1 = homePieceOfFurniture1.isDeformable();
      assertTrue(boolean1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(145.891F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      BigDecimal bigDecimal0 = homePieceOfFurniture1.getValueAddedTax();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(145.891F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(bigDecimal0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("V@`|c]utw", resourceURLContent0, 1.0F, 145.891F, true);
      assertNull(catalogTexture0.getCreator());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getId());
      assertEquals("V@`|c]utw", catalogTexture0.getName());
      assertEquals(145.891F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNull(catalogTexture0.getCreator());
      assertTrue(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getId());
      assertEquals("V@`|c]utw", catalogTexture0.getName());
      assertEquals(145.891F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(1.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals(145.891F, homeTexture0.getHeight(), 0.01F);
      assertEquals("V@`|c]utw", homeTexture0.getName());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(homeTexture0);
      
      homePieceOfFurniture0.setX(145.891F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(145.891F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(145.891F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNotNull(homePieceOfFurniture0);
      
      Level level0 = new Level("", 0.0F, 0.0F, 0.0F);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      boolean boolean1 = homePieceOfFurniture0.isAtLevel(level0);
      assertFalse(boolean1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(level0, level1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      homePieceOfFurniture0.setColor(integer0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      FurnitureCategory furnitureCategory0 = catalogPieceOfFurniture0.getCategory();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(furnitureCategory0);
      
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      
      homePieceOfFurniture1.setAngle(1.0F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 1.0F);
      assertFalse(boolean0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setDepth(578.0991F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(578.0991F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      String string0 = homePieceOfFurniture1.getName();
      assertEquals("", string0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(578.0991F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNotNull(string0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      boolean boolean1 = homePieceOfFurniture1.isDeformable();
      assertTrue(boolean1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(578.0991F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      TextStyle textStyle0 = new TextStyle(0.0F, true, false);
      assertFalse(textStyle0.isItalic());
      assertEquals(0.0F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = homePieceOfFurniture1.getNameStyle();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(578.0991F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(textStyle1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setNameStyle((TextStyle) null);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(578.0991F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setElevation(3874.7263F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(3874.7263F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(3874.7263F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 27.0F, 27.0F, 27.0F, true, true);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(27.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(27.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(27.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(27.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(27.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(27.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(27.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(27.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(27.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2));
      assertEquals((-2), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      homePieceOfFurniture0.setColor(integer0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(27.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(27.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(27.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(27.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(27.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2), (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(27.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(integer0.equals((Object)integer1));
      
      homePieceOfFurniture0.setColor(integer0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(27.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(27.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(27.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(27.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(27.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2), (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(27.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(integer0.equals((Object)integer1));
      
      String string0 = homePieceOfFurniture0.getStaircaseCutOutShape();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(27.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(27.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(27.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(27.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(27.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2), (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(27.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(string0);
      
      boolean boolean1 = homePieceOfFurniture0.isTopRightPointAt(27.0F, 27.0F, (-5145.0F));
      assertFalse(boolean1);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(27.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(27.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(27.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(27.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(27.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2), (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(27.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(13.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.5230077F, 0.0F, true, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.5230077F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("^A[F9q#", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNotNull(catalogPieceOfFurniture0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.5230077F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("^A[F9q#", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.26150385F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("^A[F9q#", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.5230077F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      homePieceOfFurniture0.move(0.5230077F, 0.0F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.5230077F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("^A[F9q#", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.26150385F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("^A[F9q#", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.5230077F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.5230077F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      
      homePieceOfFurniture0.setDepth(1537.1077F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.5230077F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("^A[F9q#", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.26150385F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("^A[F9q#", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.5230077F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(1537.1077F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      
      HomeTexture homeTexture0 = homePieceOfFurniture0.getTexture();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.5230077F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("^A[F9q#", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.26150385F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("^A[F9q#", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.5230077F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(1537.1077F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homeTexture0);
      
      boolean boolean1 = homePieceOfFurniture0.isTopRightPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.5230077F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("^A[F9q#", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.26150385F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("^A[F9q#", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.5230077F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(1537.1077F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(boolean1 == boolean0);
      
      Level level0 = new Level("+5(O4EtGGV5*J:,(", (-0.7384962F), (-2321.3F), 0.5230077F);
      assertEquals((-0.7384962F), level0.getElevation(), 0.01F);
      assertEquals("+5(O4EtGGV5*J:,(", level0.getName());
      assertEquals(0.5230077F, level0.getHeight(), 0.01F);
      assertEquals((-2321.3F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals((-0.7384962F), level0.getElevation(), 0.01F);
      assertEquals("+5(O4EtGGV5*J:,(", level0.getName());
      assertEquals(0.5230077F, level0.getHeight(), 0.01F);
      assertEquals((-2321.3F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("+5(O4EtGGV5*J:,(", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-0.7384962F), level1.getElevation(), 0.01F);
      assertEquals((-2321.3F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.5230077F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      boolean boolean2 = homePieceOfFurniture0.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.5230077F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("^A[F9q#", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.26150385F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("^A[F9q#", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.5230077F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(1537.1077F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      homePieceOfFurniture0.setColor(integer0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(1.0F, (-2275.0F));
      assertEquals(1.0F, float1, 0.01F);
      
      homePieceOfFurniture0.setShininess(float0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      assertNull(furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNotNull(furnitureCategory0);
      
      BigDecimal bigDecimal0 = homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(bigDecimal0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      homePieceOfFurniture1.setModelMirrored(true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setDepth(0.0F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      boolean boolean0 = homePieceOfFurniture1.isPointAt((-1.0F), 1.0F, 1.0F);
      assertTrue(boolean0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      Level level0 = homePieceOfFurniture0.getLevel();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(level0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setLevel((Level) null);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setWidth(1.0F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNotNull(homePieceOfFurniture0);
      
      String string0 = homePieceOfFurniture0.getCatalogId();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(string0);
      
      float float0 = homePieceOfFurniture0.getNameAngle();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      homePieceOfFurniture0.setColor(integer0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      homePieceOfFurniture0.setAngle(0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      String string0 = resourceURLContent0.getJAREntryName();
      assertEquals("com/eteks/sweethome3d/model/", string0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(string0);
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      Integer integer1 = new Integer(1909);
      assertEquals(1909, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      homePieceOfFurniture0.setColor((Integer) null);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertEquals("", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setAngle(1909);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertEquals("", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(5.194852F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setModelMirrored(false);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      boolean boolean1 = homePieceOfFurniture0.isPointAt(538.718F, 5.8336167F, 538.718F);
      assertTrue(boolean1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture0.setWidth(0.0F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture1.setY(0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertEquals("", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(5.194852F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      float float1 = homePieceOfFurniture1.getY();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertEquals("", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(5.194852F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture1.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture2.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture2.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture2.isDoorOrWindow());
      assertNull(homePieceOfFurniture2.getDescription());
      assertTrue(homePieceOfFurniture2.isResizable());
      assertTrue(homePieceOfFurniture2.isMovable());
      assertEquals(0.0F, homePieceOfFurniture2.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getX(), 0.01F);
      assertEquals(5.194852F, homePieceOfFurniture2.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture2.getShininess());
      assertTrue(homePieceOfFurniture2.isVisible());
      assertEquals(0.0F, homePieceOfFurniture2.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture2.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture2.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture2.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture2.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture2.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture2.getColor());
      assertFalse(homePieceOfFurniture2.isBackFaceShown());
      assertTrue(homePieceOfFurniture2.isModelMirrored());
      assertEquals("", homePieceOfFurniture2.getName());
      assertFalse(homePieceOfFurniture2.isNameVisible());
      assertNull(homePieceOfFurniture2.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isModelMirrored());
      assertEquals("", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(5.194852F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNotNull(homePieceOfFurniture2);
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNotNull(homePieceOfFurniture0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      URL uRL0 = resourceURLContent0.getJAREntryURL();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      homePieceOfFurniture0.setColor(integer0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(1.0F, (-2275.0137F));
      assertEquals(1.0F, float1, 0.01F);
      
      homePieceOfFurniture0.setShininess(float0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNull(furnitureCategory0.getName());
      assertNotNull(furnitureCategory0);
      
      BigDecimal bigDecimal0 = homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(bigDecimal0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNull(furnitureCategory0.getName());
      
      homePieceOfFurniture1.setDepth(0.0F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      float[][] floatArray0 = homePieceOfFurniture1.getPoints();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0, (int)homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture1.setColor((Integer) null);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      homePieceOfFurniture0.setDepth(0.0F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      BigDecimal bigDecimal1 = homePieceOfFurniture1.getPrice();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(bigDecimal1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      ResourceURLContent resourceURLContent1 = (ResourceURLContent)homePieceOfFurniture1.getModel();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0, (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertTrue(resourceURLContent1.isJAREntry());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNotNull(resourceURLContent1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")t/1v3*(cU");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertNotNull(resourceURLContent1);
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent1, resourceURLContent0, (-1.0F), 0.0F, 1.0F, false, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNotNull(homePieceOfFurniture0);
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-0.5F), homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      boolean boolean1 = homePieceOfFurniture1.isBottomLeftPointAt((-1.0F), (-648.6375F), (-648.6375F));
      assertFalse(boolean1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-0.5F), homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      boolean boolean2 = homePieceOfFurniture1.isBottomLeftPointAt((-1.0F), 2268.667F, 1.0F);
      assertFalse(boolean2);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-0.5F), homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setMovable(true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      float float0 = homePieceOfFurniture1.getY();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-0.5F), homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      
      homePieceOfFurniture0.setNameVisible(true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNotSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      
      float float1 = homePieceOfFurniture0.getDepth();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(resourceURLContent0.equals((Object)resourceURLContent1));
      assertFalse(resourceURLContent1.equals((Object)resourceURLContent0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(resourceURLContent0, resourceURLContent1);
      assertNotSame(resourceURLContent1, resourceURLContent0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      homePieceOfFurniture0.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((float) 0);
      Float.max(1.0F, (-2275.0137F));
      homePieceOfFurniture0.setShininess(float0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture1.setDepth(0.0F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.setColor((Integer) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setDepth(0.0F);
      homePieceOfFurniture0.isPointAt(1.0F, 584.5F, 1.0F);
      homePieceOfFurniture1.getLevel();
      homePieceOfFurniture1.setLevel((Level) null);
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth(0.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setHeight(2.0F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, 584.0F, 3.4028235E38F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.remainderUnsigned(0, 2076);
      homePieceOfFurniture0.setColor((Integer) null);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homePieceOfFurniture1.isBottomLeftPointAt(1.0F, 584.0F, 2076);
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      homePieceOfFurniture2.move(3.4028235E38F, (-2580.31F));
      homePieceOfFurniture2.setDepth(4);
      homePieceOfFurniture1.getTexture();
      HomePieceOfFurniture homePieceOfFurniture3 = new HomePieceOfFurniture(homePieceOfFurniture1);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup((List<HomePieceOfFurniture>) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("^A[F9q#", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(557);
      Integer integer1 = new Integer((-715827882));
      Integer integer2 = new Integer(0);
      homePieceOfFurniture0.setColor(integer2);
      Float float0 = new Float((-359.39636F));
      Integer integer3 = new Integer(0);
      homePieceOfFurniture0.setColor(integer3);
      homePieceOfFurniture0.containsPoint((-1006.9F), 0.5230077F, 0);
      homePieceOfFurniture0.isBottomRightPointAt(1.0F, (-2241.3967F), (-2870.765F));
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(1491.6199F);
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }
}
