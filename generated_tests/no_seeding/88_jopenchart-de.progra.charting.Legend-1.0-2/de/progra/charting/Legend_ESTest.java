/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:05:55 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.Legend;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.model.EditableChartDataModel;
import de.progra.charting.model.EditableDataSet;
import de.progra.charting.model.ObjectChartDataModel;
import de.progra.charting.render.RowColorModel;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFormattedTextField;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Legend_ESTest extends Legend_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[][] intArray0 = new int[2][2];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ukN@2@+kQWQkfR";
      stringArray0[1] = "uv";
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(intArray0, intArray0, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      // Undeclared exception!
      try { 
        legend0.render((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.render.AbstractRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(defaultChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      legend0.paintDefault(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Legend legend0 = new Legend();
      RowColorModel rowColorModel0 = legend0.getRowColorModel();
      assertNull(rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      RowColorModel rowColorModel0 = new RowColorModel(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      RowColorModel rowColorModel1 = legend0.getRowColorModel();
      assertEquals(0, rowColorModel1.getRowCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      RowColorModel rowColorModel0 = RowColorModel.getInstance(defaultChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals((-2147483603), dimension0.width);
      assertEquals(5, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Export Image file ...";
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(intArray0, intArray0, stringArray0);
      RowColorModel rowColorModel0 = new RowColorModel(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals(179, dimension0.width);
      assertEquals(26, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Export Image file ...";
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(intArray0, intArray0, stringArray0);
      RowColorModel rowColorModel0 = new RowColorModel(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Object object0 = new Object();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) null, object0);
      EtchedBorder etchedBorder0 = new EtchedBorder();
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) jFormattedTextField0, (Border) etchedBorder0, 405, (-1419), 1, Integer.MIN_VALUE);
      legend0.colorbox = rectangle0;
      Dimension dimension0 = legend0.getPreferredSize();
      assertEquals((-2147483642), dimension0.height);
      assertEquals(151, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Legend legend0 = new Legend();
      legend0.font = null;
      Font font0 = legend0.getFont();
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Legend legend0 = new Legend();
      HashMap<AttributedCharacterIterator.Attribute, RenderingHints.Key> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, RenderingHints.Key>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      AffineTransform affineTransform0 = AffineTransform.getScaleInstance((-1.0), (-3135.69088619));
      Font font1 = font0.deriveFont(affineTransform0);
      legend0.font = font1;
      Font font2 = legend0.getFont();
      assertEquals("Default", font2.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      String[] stringArray0 = new String[2];
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(intArray0, intArray0, stringArray0);
      RowColorModel rowColorModel0 = new RowColorModel(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      Font font0 = Font.decode("pMmbZ@Rj");
      HashMap<AttributedCharacterIterator.Attribute, Integer> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Integer>();
      Font font1 = font0.deriveFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      Font font2 = font1.deriveFont(11);
      legend0.setFont(font2);
      Font font3 = legend0.getFont();
      assertEquals(12.0F, font3.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Legend legend0 = new Legend();
      Font font0 = new Font("", (byte)0, (byte)0);
      legend0.setFont(font0);
      Font font1 = legend0.getFont();
      assertEquals("", font1.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Legend legend0 = new Legend((RowColorModel) null);
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont(".|", 15, (-988));
      legend0.setFont(font0);
      Font font1 = legend0.getFont();
      assertEquals(".|", font1.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Legend legend0 = new Legend((RowColorModel) null);
      legend0.colorbox = null;
      Rectangle rectangle0 = legend0.getColorBox();
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Legend legend0 = new Legend((RowColorModel) null);
      Rectangle rectangle0 = new Rectangle();
      legend0.setColorBox(rectangle0);
      rectangle0.setBounds(7, (-2), (-2), 7);
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals(7, rectangle1.height);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Legend legend0 = new Legend((RowColorModel) null);
      Rectangle rectangle0 = new Rectangle();
      legend0.setColorBox(rectangle0);
      rectangle0.setBounds(15, 4, 4, 15);
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals(15, rectangle1.x);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Legend legend0 = new Legend((RowColorModel) null);
      Rectangle rectangle0 = new Rectangle();
      legend0.setColorBox(rectangle0);
      Rectangle rectangle1 = legend0.getColorBox();
      assertEquals(0, rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Legend legend0 = new Legend();
      // Undeclared exception!
      try { 
        legend0.paintDefault((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Legend", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(6, 6, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      EditableDataSet[] editableDataSetArray0 = new EditableDataSet[4];
      EditableDataSet editableDataSet0 = new EditableDataSet(6);
      editableDataSetArray0[0] = editableDataSet0;
      editableDataSetArray0[1] = editableDataSet0;
      editableDataSetArray0[2] = editableDataSetArray0[0];
      editableDataSetArray0[3] = editableDataSetArray0[2];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(editableDataSetArray0);
      RowColorModel rowColorModel0 = new RowColorModel(editableChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      // Undeclared exception!
      try { 
        legend0.paintDefault(graphics2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length string passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Legend legend0 = new Legend((RowColorModel) null);
      // Undeclared exception!
      try { 
        legend0.getPreferredSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Legend", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      String[] stringArray0 = new String[2];
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(intArray0, stringArray0, stringArray0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      // Undeclared exception!
      try { 
        legend0.getPreferredSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null string passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[][] intArray0 = new int[1][2];
      String[] stringArray0 = new String[2];
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel(intArray0, intArray0, stringArray0);
      RowColorModel rowColorModel0 = new RowColorModel(objectChartDataModel0);
      Legend legend0 = new Legend(rowColorModel0);
      RowColorModel rowColorModel1 = legend0.getRowColorModel();
      assertSame(rowColorModel1, rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Legend legend0 = new Legend((RowColorModel) null);
      legend0.setRowColorModel((RowColorModel) null);
  }
}
