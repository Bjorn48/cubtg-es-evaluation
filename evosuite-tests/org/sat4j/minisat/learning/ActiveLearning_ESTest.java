/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:32:18 GMT 2019
 */

package org.sat4j.minisat.learning;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActiveLearning_ESTest extends ActiveLearning_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      Constr constr0 = Constr.TAUTOLOGY;
      boolean boolean0 = activeLearning0.learningCondition(constr0);
      assertFalse(boolean0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      activeLearning0.setLimit(599);
      int int0 = activeLearning0.getLimit();
      assertEquals(599, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(1.0);
      activeLearning0.setActivityPercent(0.0);
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      double double0 = activeLearning0.getActivityPercent();
      assertEquals(0.95, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      // Undeclared exception!
      try { 
        activeLearning0.setSolver((Solver<MixedDataStructureSingleWL>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(2502);
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      activeLearning0.setOrder(levelBasedVarOrderHeap0);
      // Undeclared exception!
      try { 
        activeLearning0.learningCondition(unitClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1251
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      activeLearning0.setActivityPercent((-1355.292));
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      activeLearning0.setOrder(naturalStaticOrder0);
      boolean boolean0 = activeLearning0.learningCondition(unitClause0);
      assertEquals((-1355.292), activeLearning0.getActivityPercent(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnitClause unitClause0 = new UnitClause(0);
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      activeLearning0.setOrder(naturalStaticOrder0);
      boolean boolean0 = activeLearning0.learningCondition(unitClause0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      int int0 = activeLearning0.getLimit();
      assertEquals(0, int0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      activeLearning0.setLimit((-1808));
      int int0 = activeLearning0.getLimit();
      assertEquals((-1808), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      String string0 = activeLearning0.toString();
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      activeLearning0.setSolver(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-2034.52));
      double double0 = activeLearning0.getActivityPercent();
      assertEquals((-2034.52), double0, 0.01);
  }
}
