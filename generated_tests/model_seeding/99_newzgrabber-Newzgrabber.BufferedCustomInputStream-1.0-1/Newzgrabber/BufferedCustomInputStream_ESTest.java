/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 15:58:30 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.BufferedCustomInputStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BufferedCustomInputStream_ESTest extends BufferedCustomInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BufferedCustomInputStream.main(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[0];
      sequenceInputStream0.read(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(sequenceInputStream0, true);
      bufferedCustomInputStream0.setTempfile("J.r=Fz^y%L9xtv");
      bufferedCustomInputStream0.setTempfile("ZXo5+} tHt>r0");
      bufferedCustomInputStream0.setRemoveCarriages(false);
      bufferedCustomInputStream0.readByteLine();
      bufferedCustomInputStream0.closeTemp();
      BufferedCustomInputStream.main(stringArray0);
      bufferedCustomInputStream0.readLine();
      bufferedCustomInputStream0.close();
      bufferedCustomInputStream0.readLine();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gdvY";
      stringArray0[1] = "";
      stringArray0[2] = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, 201);
      bufferedCustomInputStream0.readByteLine();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$E";
      stringArray0[1] = "";
      stringArray0[2] = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)1);
      bufferedCustomInputStream0.readByteLine();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$~E";
      stringArray0[1] = "";
      stringArray0[2] = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, 1);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)16);
      bufferedCustomInputStream0.readLine();
      bufferedCustomInputStream0.readLine();
      bufferedCustomInputStream0.ready();
      bufferedCustomInputStream0.readLine();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$~E";
      stringArray0[1] = "";
      stringArray0[2] = "";
      BufferedCustomInputStream.main(stringArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      sequenceInputStream0.read(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(bufferedInputStream0, false);
      bufferedCustomInputStream0.setTempfile("J.r=Fz^y%L9xtv");
      bufferedCustomInputStream0.setTempfile("K.");
      bufferedCustomInputStream0.setRemoveCarriages(false);
      bufferedCustomInputStream0.readByteLine();
      bufferedCustomInputStream0.closeTemp();
      BufferedCustomInputStream.main(stringArray0);
      bufferedCustomInputStream0.readLine();
      // Undeclared exception!
      try { 
        bufferedCustomInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) null, 255);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedCustomInputStream0, bufferedCustomInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(dataInputStream0, 255, false);
      bufferedCustomInputStream1.closeTemp();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "p3";
      stringArray0[3] = "^KYK>r~DK$`\"`";
      stringArray0[4] = "K*u@jl|/AE(NRD#";
      stringArray0[5] = "n32VMV";
      BufferedCustomInputStream.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1216);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1216);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(bufferedInputStream0);
      bufferedCustomInputStream0.close();
      bufferedCustomInputStream0.ready();
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(pipedInputStream0);
      bufferedCustomInputStream1.close();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[0];
      BufferedCustomInputStream.main(stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1451, (-2687));
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, (byte)16);
      bufferedCustomInputStream0.readLine();
      bufferedCustomInputStream0.readLine();
      bufferedCustomInputStream0.ready();
  }
}
