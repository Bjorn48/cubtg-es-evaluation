/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:38:46 GMT 2019
 */

package edu.mscd.cs.jclo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.mscd.cs.jclo.JCLO;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JCLO_ESTest extends JCLO_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JCLO jCLO0 = new JCLO("value----vI-", "value----vI-");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        jCLO0.parse(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such option: \"\"
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      JCLO jCLO0 = new JCLO(object0);
      String string0 = jCLO0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JCLO jCLO0 = new JCLO("vlue");
      short[] shortArray0 = jCLO0.getShorts("vlue");
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Long long0 = Long.valueOf(0L);
      JCLO jCLO0 = new JCLO("", long0);
      long long1 = jCLO0.getLong("MAX_VALUE");
      assertEquals(9223372036854775807L, long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float(146.0F);
      JCLO jCLO0 = new JCLO("serialVersionUID", float0, (String[][]) null);
      JCLO jCLO1 = new JCLO("", jCLO0);
      long long0 = jCLO1.getLong("serialVersionUID");
      assertEquals((-7929121319146674484L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[][] stringArray0 = new String[0][8];
      JCLO jCLO0 = new JCLO((Object) "hash", stringArray0);
      int int0 = jCLO0.getInt("hash");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JCLO jCLO0 = new JCLO("rIA~>mHP", "rIA~>mHP");
      double[] doubleArray0 = jCLO0.getDoubles("rIA~>mHP");
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JCLO jCLO0 = new JCLO("MAX_LOW_SURROGATElF@=Rv", "MAX_LOW_SURROGATElF@=Rv");
      char[] charArray0 = jCLO0.getChars("MAX_LOW_SURROGATElF@=Rv");
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[][] stringArray0 = new String[4][0];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "-";
      JCLO jCLO0 = new JCLO("char", "char", stringArray0);
      // Undeclared exception!
      try { 
        jCLO0.parse(stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long(1L);
      JCLO jCLO0 = new JCLO(long0);
      // Undeclared exception!
      try { 
        jCLO0.getStrings("MIN_VALUE");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to [Ljava.lang.String;
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JCLO jCLO0 = new JCLO("<");
      // Undeclared exception!
      try { 
        jCLO0.getString("serialVersionUID");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JCLO jCLO0 = new JCLO("", "");
      // Undeclared exception!
      try { 
        jCLO0.getShort("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JCLO jCLO0 = new JCLO("l");
      // Undeclared exception!
      try { 
        jCLO0.getLongs("serialVersionUID");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to [J
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Short short0 = new Short((short)1759);
      JCLO jCLO0 = new JCLO(short0);
      // Undeclared exception!
      try { 
        jCLO0.getLong("TYPE");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Long
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(83L);
      JCLO jCLO0 = new JCLO("", long0);
      // Undeclared exception!
      try { 
        jCLO0.getInts("BYTES");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to [I
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(0.0);
      JCLO jCLO0 = new JCLO(double0);
      // Undeclared exception!
      try { 
        jCLO0.getInt("TYPE");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.Integer
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JCLO jCLO0 = new JCLO("g");
      // Undeclared exception!
      try { 
        jCLO0.getFloat("serialVersionUID");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.Float
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JCLO jCLO0 = new JCLO("-");
      // Undeclared exception!
      try { 
        jCLO0.getDouble("-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JCLO jCLO0 = new JCLO("Uf", "Uf");
      // Undeclared exception!
      try { 
        jCLO0.getChar("Uf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double(0.0);
      JCLO jCLO0 = new JCLO(double0);
      // Undeclared exception!
      try { 
        jCLO0.getBytes("serialVersionUID");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to [B
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JCLO jCLO0 = new JCLO("vlue");
      // Undeclared exception!
      try { 
        jCLO0.getByte("vlue");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JCLO jCLO0 = new JCLO("value----vI---");
      // Undeclared exception!
      try { 
        jCLO0.getByte("value----vI---");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [C cannot be cast to java.lang.Byte
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JCLO jCLO0 = null;
      try {
        jCLO0 = new JCLO((String) null, (Object) null, (String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JCLO jCLO0 = null;
      try {
        jCLO0 = new JCLO((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JCLO jCLO0 = null;
      try {
        jCLO0 = new JCLO((Object) null, (String[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JCLO jCLO0 = null;
      try {
        jCLO0 = new JCLO((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MAX_VALUE";
      JCLO jCLO0 = new JCLO("MAX_VALUE");
      jCLO0.parse(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JCLO jCLO0 = new JCLO("value----vI-");
      Object object0 = jCLO0.getValue("value----vI-");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JCLO jCLO0 = new JCLO("hash");
      Object object0 = jCLO0.getValue("hash");
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JCLO jCLO0 = new JCLO("*eN", "*eN");
      String string0 = jCLO0.getString("*eN");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--version";
      JCLO.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MAX_VALUE";
      JCLO.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JCLO.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JCLO.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JCLO jCLO0 = new JCLO("MAX_VALUE");
      String[] stringArray0 = new String[0];
      jCLO0.parse(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JCLO jCLO0 = new JCLO("value----vI---c", "value----vI---c");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        jCLO0.parse(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such option: \"\"
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      String[][] stringArray0 = new String[2][1];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "-";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      stringArray2[0] = "";
      stringArray0[1] = stringArray2;
      JCLO jCLO0 = new JCLO("~%bOe.0", object0, stringArray0);
      // Undeclared exception!
      try { 
        jCLO0.parse(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such option: \"null\"
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer((-1093593050));
      JCLO jCLO0 = new JCLO(integer0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-{*GWlf=G1Qdx";
      // Undeclared exception!
      try { 
        jCLO0.parse(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such option: \"*GWlf\"
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JCLO jCLO0 = new JCLO("additional", "additional");
      String string0 = jCLO0.usage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JCLO jCLO0 = new JCLO("MAX_VALUE");
      String string0 = jCLO0.usage();
      assertEquals("-hash int\n", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JCLO jCLO0 = new JCLO("MAX_LOW_SURROGATElF@=Rv", "MAX_LOW_SURROGATElF@=Rv");
      // Undeclared exception!
      try { 
        jCLO0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [C cannot be cast to [Ljava.lang.Object;
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JCLO jCLO0 = new JCLO(boolean0);
      String string0 = jCLO0.toString();
      assertEquals("boolean: value----vI--- = false\nlong: serialVersionUID = -3665804199014368530\nBoolean: FALSE = false\nBoolean: TRUE = true\nClass: TYPE = boolean", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Float float0 = new Float(146.0F);
      JCLO jCLO0 = new JCLO("serialVersionUID", float0, (String[][]) null);
      JCLO jCLO1 = new JCLO("", jCLO0);
      String string0 = jCLO1.usage();
      assertEquals("-aliases String;...\n-doubleDashes\n-fields Field...\n-hasEquals\n-object Object\n-prefix String\n", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JCLO jCLO0 = new JCLO("v;(");
      byte[] byteArray0 = jCLO0.getBytes("v;(");
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JCLO jCLO0 = new JCLO("-");
      long[] longArray0 = jCLO0.getLongs("-");
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer((-1093593050));
      JCLO jCLO0 = new JCLO(integer0);
      // Undeclared exception!
      try { 
        jCLO0.getShort("SIZE");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Short
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JCLO jCLO0 = new JCLO("value----vI-");
      float[] floatArray0 = jCLO0.getFloats("value----vI-");
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JCLO jCLO0 = new JCLO("MAX_VALUE");
      String[] stringArray0 = jCLO0.getStrings("MAX_VALUE");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JCLO jCLO0 = new JCLO("--hash int\n", "--hash int\n");
      // Undeclared exception!
      try { 
        jCLO0.getFloat("--hash int\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JCLO jCLO0 = new JCLO("", "hash");
      // Undeclared exception!
      try { 
        jCLO0.getDouble("hash");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.Double
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Double double0 = new Double((-801.172606));
      String[][] stringArray0 = new String[0][2];
      JCLO jCLO0 = new JCLO(double0, stringArray0);
      // Undeclared exception!
      try { 
        jCLO0.getDoubles("NaN");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to [D
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JCLO jCLO0 = new JCLO("value----vI-");
      // Undeclared exception!
      try { 
        jCLO0.getBoolean("value----vI-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Double double0 = new Double(0.0);
      JCLO jCLO0 = new JCLO(double0);
      // Undeclared exception!
      try { 
        jCLO0.getChars("MAX_VALUE");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to [C
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      JCLO jCLO0 = new JCLO(byte0);
      byte byte1 = jCLO0.getByte("value----vI---");
      assertEquals((byte)120, byte1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Double double0 = new Double((-3433.2781561199));
      JCLO jCLO0 = new JCLO(double0);
      // Undeclared exception!
      try { 
        jCLO0.getShorts("BYTES");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to [S
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JCLO jCLO0 = new JCLO("hash");
      // Undeclared exception!
      try { 
        jCLO0.getInt("m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JCLO jCLO0 = new JCLO("value----vI---");
      // Undeclared exception!
      try { 
        jCLO0.getChar("value----vI---");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [C cannot be cast to java.lang.Character
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JCLO jCLO0 = new JCLO("");
      int[] intArray0 = jCLO0.getInts("");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Float float0 = new Float(146.0F);
      JCLO jCLO0 = new JCLO("serialVersionUID", float0, (String[][]) null);
      // Undeclared exception!
      try { 
        jCLO0.getLong("serialVersionUID");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.mscd.cs.jclo.JCLO", e);
      }
  }
}
