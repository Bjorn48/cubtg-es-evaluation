/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:22:23 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Glucose2LCDS_ESTest extends Glucose2LCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn(4.286489302536548, 995.685198).when(constr0).getActivity();
      doReturn((-2144479569)).when(constr0).size();
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, subsetVarOrder0, lubyRestarts0);
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver0, (ConflictTimer) null);
      glucose2LCDS0.onPropagation(constr0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      int[] intArray0 = new int[4];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, naturalStaticOrder0, lubyRestarts0);
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver0, lubyRestarts0);
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, subsetVarOrder0, (RestartStrategy) null);
      VecInt vecInt0 = (VecInt)solver1.decisions;
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onPropagation(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(constr0).get(anyInt());
      doReturn(4.286489302536548).when(constr0).getActivity();
      doReturn(7).when(constr0).size();
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, subsetVarOrder0, lubyRestarts0);
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver0, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onPropagation(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solver<MixedDataStructureDanielHT> solver0 = (Solver<MixedDataStructureDanielHT>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, (ConflictTimer) null);
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn(2130.1309, (-1360.66146)).when(constr0).getActivity();
      doReturn((-157)).when(constr0).size();
      glucose2LCDS0.onPropagation(constr0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solver<MixedDataStructureDanielWL> solver0 = (Solver<MixedDataStructureDanielWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver0, (ConflictTimer) null);
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 4.0).when(constr0).getActivity();
      doReturn((-991)).when(constr0).size();
      // Undeclared exception!
      try { 
        glucose2LCDS0.onPropagation(constr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Glucose2LCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solver<MixedDataStructureDanielWL> solver0 = (Solver<MixedDataStructureDanielWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver0, (ConflictTimer) null);
      Constr constr0 = mock(Constr.class, new ViolatedAssumptionAnswer());
      doReturn(1.0).when(constr0).getActivity();
      glucose2LCDS0.onPropagation(constr0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solver<MixedDataStructureDanielWL> solver0 = (Solver<MixedDataStructureDanielWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver0, (ConflictTimer) null);
      String string0 = glucose2LCDS0.toString();
      assertEquals("Glucose 2 learned constraints deletion strategy (LBD updated on propagation) with timer null", string0);
  }
}
