/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 07:50:29 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.LearntHTClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HTClause_ESTest extends HTClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-1208);
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("");
      // Undeclared exception!
      try { 
        originalHTClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1208
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = 1352;
      int int0 = originalHTClause0.getAssertionLevel(iVecInt0, (-1266));
      assertEquals((-1), int0);
      assertEquals(4, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 3182;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = 32;
      boolean boolean0 = originalHTClause0.isSatisfied();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(4, originalHTClause0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReasonOnTheFly((-1), iVecInt0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 3182;
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      originalHTClause0.hashCode();
      assertEquals(3, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1208);
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.hashCode();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      vecInt0.insertFirst((-1178));
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.hashCode();
      assertEquals(5, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 638;
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      int[] intArray1 = originalHTClause0.getLits();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertArrayEquals(new int[] {638, 0, 0}, intArray1);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = 1;
      lits0.satisfies(1);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 63;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.rescaleBy(0.0);
      assertEquals(3, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push(360);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      int int0 = originalHTClause0.get(0);
      assertEquals(6, originalHTClause0.size());
      assertEquals(0, int0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.get((-1339));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1340
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1208);
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1208
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = (-1208);
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1208
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = vecInt0.push(2364);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(unitPropagationListener0, iLits0, iVecInt0);
      boolean boolean0 = originalHTClause0.propagate((UnitPropagationListener) null, 1);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(4, originalHTClause0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = 1;
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 3182;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1208);
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(iLits0).isFalsified(anyInt());
      IVecInt iVecInt0 = vecInt0.push(2364);
      OriginalHTClause originalHTClause0 = OriginalHTClause.brandNewClause(unitPropagationListener0, iLits0, iVecInt0);
      originalHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      originalHTClause0.calcReason(2068, vecInt0);
      assertEquals(1, iVecInt0.size());
      assertEquals(2365, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[1] = 3182;
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReasonOnTheFly((-1208), vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3182
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      lits0.satisfies(1);
      originalHTClause0.tail = (-1854);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReason(1690, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1854
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      Constr constr0 = learntHTClause0.toConstraint();
      assertEquals(4, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      originalHTClause0.getVocabulary();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      lits0.getFromPool((-1208));
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.getVocabulary();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      vecInt0.insertFirst((-1178));
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      vecInt0.push((-1178));
      int int0 = originalHTClause0.getAssertionLevel(vecInt0, 0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(5, originalHTClause0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      learntHTClause0.activity = 2287.240131;
      double double0 = learntHTClause0.getActivity();
      assertEquals(2287.240131, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.activity = (-1138.0);
      double double0 = originalHTClause0.getActivity();
      assertEquals((-1138.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[5] = 3182;
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      int int0 = originalHTClause0.get(5);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3182, int0);
      assertEquals(6, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push(397);
      Lits lits0 = new Lits();
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("");
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        learntHTClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 397
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = (-1336);
      // Undeclared exception!
      try { 
        originalHTClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1335
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, 1567);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.tail = 1708;
      // Undeclared exception!
      try { 
        originalHTClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.getAssertionLevel((IVecInt) null, (-2515));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.shrinkTo(1110);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.getAssertionLevel(iVecInt0, (-1266));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalHTClause0.calcReason(1253, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.tail = 65535;
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      vecInt0.insertFirst((-1003));
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1003
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.calcReason(1703, vecInt0);
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, (ILits) null);
      int int0 = originalHTClause0.size();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("f!D*UMcP-h-J");
      String string0 = learntHTClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals(0.0, learntHTClause0.getActivity(), 0.01);
      assertEquals("0[?] 0[?] 0[?] 0[?]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      int int0 = originalHTClause0.getAssertionLevel(iVecInt0, (-1266));
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(3, int0);
      assertEquals(4, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      vecInt0.push(740);
      int int0 = originalHTClause0.getAssertionLevel(vecInt0, (-2194));
      assertEquals(4, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = 1;
      lits0.satisfies(1);
      boolean boolean0 = originalHTClause0.isSatisfied();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.equals(originalHTClause0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertTrue(boolean0);
      assertEquals(4, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.equals((Object) null);
      assertEquals(4, originalHTClause0.size());
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.equals(vecInt0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(4, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, subsetVarOrder0, miniSATRestarts0);
      solver0.assume(1);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, subsetVarOrder0, miniSATRestarts0);
      originalHTClause0.assertConstraint(solver0);
      assertEquals(5, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      lits0.satisfies(1);
      // Undeclared exception!
      try { 
        originalHTClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalHTClause0.get(1818);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1817
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      String string0 = originalHTClause0.toString();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals("0[?] 0[?] 0[?] 0[?]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.locked();
      assertFalse(boolean0);
      assertEquals(4, originalHTClause0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = 1;
      lits0.satisfies(1);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = 1;
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      lits0.satisfies(1);
      // Undeclared exception!
      try { 
        originalHTClause0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.simplify();
      assertEquals(9, originalHTClause0.size());
      assertFalse(boolean0);
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.head = 1;
      lits0.satisfies(1);
      boolean boolean0 = originalHTClause0.simplify();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      lits0.satisfies(1);
      originalHTClause0.calcReason(1690, vecInt0);
      OriginalHTClause originalHTClause1 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause1.equals(originalHTClause0);
      assertArrayEquals(new int[] {1, 1, 1, 0}, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = null;
      try {
        originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        OriginalHTClause.brandNewClause(unitPropagationListener0, lits0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.calcReasonOnTheFly(945, vecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      ILits iLits0 = originalHTClause0.getVocabulary();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertNotNull(iLits0);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      int int0 = originalHTClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertEquals(1, int0);
      assertEquals(3, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.canBeSatisfiedByCountingLiterals();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertTrue(boolean0);
      assertEquals(4, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-4570));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        originalHTClause0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.HTClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      Constr constr0 = originalHTClause0.toConstraint();
      assertEquals(5, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      boolean boolean0 = originalHTClause0.canBePropagatedMultipleTimes();
      assertEquals(0.0, originalHTClause0.getActivity(), 0.01);
      assertFalse(boolean0);
      assertEquals(4, originalHTClause0.size());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      LearntHTClause learntHTClause0 = new LearntHTClause(vecInt0, lits0);
      double double0 = learntHTClause0.getActivity();
      assertEquals(4, learntHTClause0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Lits lits0 = new Lits();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      originalHTClause0.rescaleBy((-1096.5));
      assertEquals(-0.0, originalHTClause0.getActivity(), 0.01);
  }
}
