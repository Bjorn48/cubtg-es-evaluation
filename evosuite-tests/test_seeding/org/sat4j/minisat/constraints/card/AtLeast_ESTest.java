/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:06:21 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Undoable;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.Propagatable;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.SolutionCounter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtLeast_ESTest extends AtLeast_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(820, 820, 820, 820, (-1580)).when(iLits0).getLevel(anyInt());
      doReturn(false, true, true, false, true).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).get(anyInt());
      doReturn(0, 508, 0, 0, 508).when(iVecInt0).size();
      AtLeast atLeast0 = (AtLeast)AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-29));
      assertNotNull(atLeast0);
      assertFalse(vec0.isEmpty());
      assertEquals(506, vec0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals((-29), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(508, atLeast0.size());
      
      atLeast0.maxUnsatisfied = 508;
      assertFalse(vec0.isEmpty());
      assertEquals(506, vec0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(508, atLeast0.size());
      
      boolean boolean0 = atLeast0.propagate((UnitPropagationListener) null, (-75));
      assertTrue(boolean0);
      assertFalse(vec0.isEmpty());
      assertEquals(507, vec0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(508, atLeast0.size());
      
      boolean boolean1 = atLeast0.propagatePI((MandatoryLiteralListener) null, 504);
      assertTrue(boolean1);
      assertFalse(vec0.isEmpty());
      assertEquals(508, vec0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(508, atLeast0.size());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(820, 820, 820, 820, (-1580)).when(iLits0).getLevel(anyInt());
      doReturn(true, true, true, true, true).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).get(anyInt());
      doReturn(0, 508, 0, 0, 508).when(iVecInt0).size();
      AtLeast atLeast0 = (AtLeast)AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-29));
      assertNotNull(atLeast0);
      assertEquals(508, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.isSatisfied());
      assertEquals(508, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.learnt());
      assertEquals((-29), atLeast0.requiredNumberOfSatisfiedLiterals());
      
      atLeast0.maxUnsatisfied = 508;
      assertEquals(508, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.isSatisfied());
      assertEquals(508, atLeast0.size());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.learnt());
      
      boolean boolean0 = atLeast0.propagatePI((MandatoryLiteralListener) null, 11);
      assertTrue(boolean0);
      assertEquals(509, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.isSatisfied());
      assertEquals(508, atLeast0.size());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.learnt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-3));
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertEquals((-3), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(4, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      atLeast0.calcReasonOnTheFly((-3), vecInt0, vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertEquals((-3), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(4, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      doReturn(true, false, true, true, true).when(iLits0).isUnassigned(anyInt());
      doReturn((IVec) null).when(iLits0).undos(anyInt());
      VecInt vecInt0 = new VecInt(508, 489);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(489, vecInt0.last());
      assertEquals(508, vecInt0.size());
      
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, vecInt0, (-7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(508, 0);
      assertNotNull(vecInt0);
      assertEquals(508, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(0, 0);
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      IVecInt iVecInt0 = vecInt1.push(0);
      assertNotNull(iVecInt0);
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 465);
      assertNotNull(atLeast0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals(1, atLeast0.size());
      assertEquals(465, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      
      atLeast0.calcReason(508, vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(509, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals(1, atLeast0.size());
      assertEquals(465, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(508, 0);
      assertNotNull(vecInt0);
      assertEquals(508, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 465);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(465, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(508, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      atLeast0.calcReason((-2952), vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(465, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(508, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(820, 820, 820, 820, (-1580)).when(iLits0).getLevel(anyInt());
      doReturn(true, true, true, true, true).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).get(anyInt());
      doReturn(0, 820, 0, 0, 820).when(iVecInt0).size();
      AtLeast atLeast0 = (AtLeast)AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-29));
      assertNotNull(atLeast0);
      assertFalse(vec0.isEmpty());
      assertEquals(820, vec0.size());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.locked());
      assertEquals((-29), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(820, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      atLeast0.maxUnsatisfied = (-29);
      assertFalse(vec0.isEmpty());
      assertEquals(820, vec0.size());
      assertTrue(atLeast0.locked());
      assertEquals(820, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(849, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      boolean boolean0 = atLeast0.propagate((UnitPropagationListener) null, (-79));
      assertTrue(boolean0);
      assertFalse(vec0.isEmpty());
      assertEquals(821, vec0.size());
      assertTrue(atLeast0.locked());
      assertEquals(820, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(849, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(508, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(508, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, vecInt0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-2250));
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals((-2250), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertEquals(5, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      
      DotSearchTracing<AtLeast> dotSearchTracing0 = new DotSearchTracing<AtLeast>("High Level Explanation (MUS) enabled solver");
      assertNotNull(dotSearchTracing0);
      
      String string0 = atLeast0.toString((VarMapper) dotSearchTracing0);
      assertEquals(" + 0[?]   + 0[?]   + 0[?]   + 0[?]   + 0[?]  >= -2250", string0);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals((-2250), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertEquals(5, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      assertNotNull(fullClauseSelectorSolver0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      assertNotNull(iVecInt0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 3);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(atLeast0.locked());
      assertEquals(3, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      int int0 = atLeast0.size();
      assertEquals(0, int0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(atLeast0.locked());
      assertEquals(3, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, false);
      assertNotNull(fullClauseSelectorSolver0);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      assertNotNull(iVecInt0);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 0);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
      
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, int0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, false);
      assertNotNull(fullClauseSelectorSolver0);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      assertNotNull(iVecInt0);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, (-1));
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.size());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-1), int0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.size());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = AtLeast.niceParameters((UnitPropagationListener) null, lits0, vecInt0, 0);
      assertEquals(0, int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = AtLeast.niceParameters((UnitPropagationListener) null, lits0, vecInt0, (-600));
      assertEquals((-600), int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-3));
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals((-3), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(4, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      
      int int0 = atLeast0.getAssertionLevel(vecInt0, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals((-3), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(4, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 15);
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals(15, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertEquals(7, atLeast0.size());
      
      int int0 = atLeast0.get(0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals(15, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertEquals(7, atLeast0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 451;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {451, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 15);
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {451, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.simplify());
      assertEquals(15, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(7, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      int int0 = atLeast0.get(0);
      assertEquals(451, int0);
      assertArrayEquals(new int[] {451, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.simplify());
      assertEquals(15, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(7, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      VecInt vecInt0 = new VecInt(663, 663);
      assertNotNull(vecInt0);
      assertEquals(663, vecInt0.size());
      assertEquals(663, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(663, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      DotSearchTracing<AtLeast> dotSearchTracing0 = new DotSearchTracing<AtLeast>("High Level Explanation (MUS) enabled solver");
      assertNotNull(dotSearchTracing0);
      
      // Undeclared exception!
      try { 
        atLeast0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 663
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 0);
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(4, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      VecInt vecInt0 = new VecInt(17, 663);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(663, vecInt0.last());
      assertEquals(17, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3310);
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(17, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(3310, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 663
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0).when(iLits0).watches(anyInt());
      VecInt vecInt0 = new VecInt(508, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(508, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 473);
      assertNotNull(atLeast0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(473, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(508, atLeast0.size());
      
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vec<Propagatable> vec0 = new Vec<Propagatable>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ReadOnlyVec<Propagatable> readOnlyVec0 = new ReadOnlyVec<Propagatable>(vec0);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(readOnlyVec0).when(iLits0).watches(anyInt());
      VecInt vecInt0 = new VecInt(508, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(508, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 441);
      assertNotNull(atLeast0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.simplify());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(441, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt(2617, 2617);
      assertNotNull(vecInt0);
      assertEquals(2617, vecInt0.size());
      assertEquals(2617, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 3305);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertEquals(2617, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertEquals(3305, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2616
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>(447);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ReadOnlyVec<Undoable> readOnlyVec0 = new ReadOnlyVec<Undoable>(vec0);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      doReturn(readOnlyVec0).when(iLits0).undos(anyInt());
      VecInt vecInt0 = new VecInt(508, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(508, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 438);
      assertNotNull(atLeast0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(438, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      VecInt vecInt0 = new VecInt(361, 65535);
      assertNotNull(vecInt0);
      assertEquals(65535, vecInt0.last());
      assertEquals(361, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-461));
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals((-461), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(361, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65534
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-1));
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(0, atLeast0.size());
      
      // Undeclared exception!
      try { 
        atLeast0.propagatePI((MandatoryLiteralListener) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-363));
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals((-363), atLeast0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.propagatePI((MandatoryLiteralListener) null, 504);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 504
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-1));
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0, atLeast0.size());
      
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      doReturn(false).when(iLits0).isUnassigned(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(22).when(iVecInt0).delete(anyInt());
      doReturn(22, (-1), (-4678)).when(iVecInt0).get(anyInt());
      doReturn(38, 38, 0, 0, 22).when(iVecInt0).size();
      // Undeclared exception!
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, iLits0, iVecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(3, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 0);
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals(3, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(1015);
      assertNotNull(iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1015, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1015, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1015);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, atLeast0.size());
      assertEquals(1015, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = new VecInt(249, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(249, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotNull(iVecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(249, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(249, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, (-363));
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.last());
      assertEquals(249, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(249, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals((-363), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      
      // Undeclared exception!
      atLeast0.calcReasonOnTheFly(1788, vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 508).when(iVecInt0).size();
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((IteratorInt) null).when(iVecInt1).iterator();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 836);
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(1344, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(508, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        atLeast0.calcReasonOnTheFly(508, iVecInt1, iVecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt(0, 0);
      assertNotNull(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      vecInt0.shrinkTo(471);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(471, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt1, 0);
      assertNotNull(atLeast0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      // Undeclared exception!
      try { 
        atLeast0.calcReasonOnTheFly(0, vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 0);
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(4, atLeast0.size());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      
      // Undeclared exception!
      try { 
        atLeast0.calcReason(1971, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      VecInt vecInt0 = new VecInt(507, 507);
      assertNotNull(vecInt0);
      assertEquals(507, vecInt0.size());
      assertEquals(507, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-2516));
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertEquals((-2516), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(507, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        atLeast0.calcReason((-1), vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 507
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isSatisfied(anyInt());
      doReturn(false, false, false, false, false).when(iLits0).isUnassigned(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(15, 0, 0, 0, 0).when(iVecInt0).delete(anyInt());
      doReturn(15, (-1), (-4701), 0, 0).when(iVecInt0).get(anyInt());
      doReturn(34, 34, 7, 7, 15).when(iVecInt0).size();
      // Undeclared exception!
      AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, 7);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush((-845));
      assertEquals((-845), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, lits0, vecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.insertFirst((-3264));
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-3264), vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3264
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast((ILits) null, (IVecInt) null, 475);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, vecInt0, 357);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.shrink((-699));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(703, vecInt0.size());
      
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast((ILits) null, vecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      doReturn((IVec) null).when(iLits0).undos(anyInt());
      VecInt vecInt0 = new VecInt(508, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(508, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 449);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.locked());
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertEquals(449, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(508, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(508, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 449);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(449, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      
      atLeast0.register();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(449, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(820, 820, 820, 820, 820).when(iLits0).getLevel(anyInt());
      doReturn(false, true, true, false, true).when(iLits0).isFalsified(anyInt());
      doReturn(true, false, false, false, false).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).get(anyInt());
      doReturn(0, 508, 0, 0, 508).when(iVecInt0).size();
      AtLeast atLeast0 = (AtLeast)AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-29));
      assertNotNull(atLeast0);
      assertFalse(vec0.isEmpty());
      assertEquals(506, vec0.size());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.isSatisfied());
      assertEquals((-29), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      
      atLeast0.maxUnsatisfied = 508;
      assertFalse(vec0.isEmpty());
      assertEquals(506, vec0.size());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      
      boolean boolean0 = atLeast0.propagate((UnitPropagationListener) null, 820);
      assertTrue(boolean0);
      assertEquals(507, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      
      boolean boolean1 = atLeast0.propagate((UnitPropagationListener) null, 102);
      assertTrue(boolean1);
      assertEquals(508, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(508, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(7, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 0);
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertEquals(7, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      int int0 = atLeast0.size();
      assertEquals(7, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertEquals(7, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink((-1));
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-1));
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertEquals(1, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      //  // Unstable assertion: assertNotNull(vec0);
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iLits0).getLevel(anyInt());
      doReturn(false, false, true, false, false).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      doReturn(false).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).delete(anyInt());
      doReturn(1, 0).when(iVecInt0).get(anyInt());
      doReturn(0, 493, 0, 0, 493).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, 0);
      //  // Unstable assertion: assertNotNull(constr0);
      //  // Unstable assertion: assertFalse(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(1, vec0.size());
      //  // Unstable assertion: assertFalse(constr0.isSatisfied());
      //  // Unstable assertion: assertFalse(constr0.learnt());
      //  // Unstable assertion: assertEquals((-1), constr0.requiredNumberOfSatisfiedLiterals());
      //  // Unstable assertion: assertFalse(constr0.simplify());
      //  // Unstable assertion: assertTrue(constr0.locked());
      //  // Unstable assertion: assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      //  // Unstable assertion: assertFalse(constr0.canBePropagatedMultipleTimes());
      //  // Unstable assertion: assertEquals(0.0, constr0.getActivity(), 0.01);
      //  // Unstable assertion: assertEquals(493, constr0.size());
      
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1, 493, 0, 1).when(iVecInt1).get(anyInt());
      doReturn(2945, 497, 1091, 1091, (-594)).when(iVecInt1).size();
      int int0 = constr0.getAssertionLevel(iVecInt1, 0);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertFalse(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(1, vec0.size());
      //  // Unstable assertion: assertFalse(constr0.isSatisfied());
      //  // Unstable assertion: assertFalse(constr0.learnt());
      //  // Unstable assertion: assertEquals((-1), constr0.requiredNumberOfSatisfiedLiterals());
      //  // Unstable assertion: assertFalse(constr0.simplify());
      //  // Unstable assertion: assertTrue(constr0.locked());
      //  // Unstable assertion: assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      //  // Unstable assertion: assertFalse(constr0.canBePropagatedMultipleTimes());
      //  // Unstable assertion: assertEquals(0.0, constr0.getActivity(), 0.01);
      //  // Unstable assertion: assertEquals(493, constr0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(820, 820, 820, 820, 820).when(iLits0).getLevel(anyInt());
      doReturn(false, true, true, false, true).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).get(anyInt());
      doReturn(0, 508, 0, 0, 508).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-29));
      assertNotNull(constr0);
      assertFalse(vec0.isEmpty());
      assertEquals(506, vec0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(508, constr0.size());
      assertTrue(constr0.locked());
      assertTrue(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertEquals((-29), constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.learnt());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      
      // Undeclared exception!
      try { 
        constr0.getAssertionLevel((IVecInt) null, 180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, true, true).when(iLits0).isSatisfied(anyInt());
      VecInt vecInt0 = new VecInt(508, 901);
      assertNotNull(vecInt0);
      assertEquals(901, vecInt0.last());
      assertEquals(508, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 465);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(465, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.isSatisfied());
      assertEquals(508, atLeast0.size());
      
      boolean boolean0 = atLeast0.isSatisfied();
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(465, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.isSatisfied());
      assertEquals(508, atLeast0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(19);
      assertNotNull(iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(19, vecInt0.last());
      assertEquals(19, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 475);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals(475, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, atLeast0.size());
      
      boolean boolean0 = atLeast0.isSatisfied();
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals(475, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, atLeast0.size());
      assertSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      //  // Unstable assertion: assertNotNull(vec0);
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec0.size());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(820, 820, 820, 820, 820).when(iLits0).getLevel(anyInt());
      doReturn(false, true, true, false, true).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).get(anyInt());
      doReturn(0, 508, 0, 0, 508).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-29));
      //  // Unstable assertion: assertNotNull(constr0);
      //  // Unstable assertion: assertEquals(506, vec0.size());
      //  // Unstable assertion: assertFalse(vec0.isEmpty());
      //  // Unstable assertion: assertFalse(constr0.simplify());
      //  // Unstable assertion: assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      //  // Unstable assertion: assertTrue(constr0.locked());
      //  // Unstable assertion: assertEquals(508, constr0.size());
      //  // Unstable assertion: assertEquals(0.0, constr0.getActivity(), 0.01);
      //  // Unstable assertion: assertFalse(constr0.canBePropagatedMultipleTimes());
      //  // Unstable assertion: assertFalse(constr0.learnt());
      //  // Unstable assertion: assertFalse(constr0.isSatisfied());
      //  // Unstable assertion: assertEquals((-29), constr0.requiredNumberOfSatisfiedLiterals());
      
      boolean boolean0 = constr0.isSatisfied();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(506, vec0.size());
      //  // Unstable assertion: assertFalse(vec0.isEmpty());
      //  // Unstable assertion: assertFalse(constr0.simplify());
      //  // Unstable assertion: assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      //  // Unstable assertion: assertTrue(constr0.locked());
      //  // Unstable assertion: assertEquals(508, constr0.size());
      //  // Unstable assertion: assertEquals(0.0, constr0.getActivity(), 0.01);
      //  // Unstable assertion: assertFalse(constr0.canBePropagatedMultipleTimes());
      //  // Unstable assertion: assertFalse(constr0.learnt());
      //  // Unstable assertion: assertFalse(constr0.isSatisfied());
      //  // Unstable assertion: assertEquals((-29), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((-580), (-580), (-580), (-580), (-580)).when(iLits0).getLevel(anyInt());
      doReturn(true, true, true, true, false).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).get(anyInt());
      doReturn(0, 493, 0, 0, 493).when(iVecInt0).size();
      AtLeast atLeast0 = (AtLeast)AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-52));
      assertNotNull(atLeast0);
      assertEquals(4, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(493, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.simplify());
      assertEquals((-52), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      
      boolean boolean0 = atLeast0.propagatePI((MandatoryLiteralListener) null, 0);
      assertTrue(boolean0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(493, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.simplify());
      assertEquals((-52), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 39);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(39, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      
      IVecInt iVecInt0 = vecInt0.push(39);
      assertNotNull(iVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(39, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(39, iVecInt0.last());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      atLeast0.calcReasonOnTheFly(39, iVecInt0, iVecInt0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(1, vecInt0.size());
      assertEquals(39, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(39, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(39, iVecInt0.last());
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-1));
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      
      atLeast0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(820, 820, 820, 820, 820).when(iLits0).getLevel(anyInt());
      doReturn(false, true, true, false, true).when(iLits0).isFalsified(anyInt());
      doReturn(true, false, false, true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).get(anyInt());
      doReturn(0, 508, 0, 0, 508).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-29));
      // Undeclared exception!
      try { 
        constr0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((-580), (-580), (-580), (-580), (-580)).when(iLits0).getLevel(anyInt());
      doReturn(false, true, true, false, true).when(iLits0).isFalsified(anyInt());
      doReturn(true, false, false, false, false).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).get(anyInt());
      doReturn(0, 508, 0, 0, 508).when(iVecInt0).size();
      Constr constr0 = AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-52));
      constr0.assertConstraint((UnitPropagationListener) null);
      assertFalse(vec0.isEmpty());
      assertEquals((-52), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(508, 901);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 465);
      atLeast0.calcReason(508, vecInt0);
      //  // Unstable assertion: assertFalse(vecInt0.isEmpty());
      //  // Unstable assertion: assertEquals(900, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(iLits0).isSatisfied(anyInt());
      doReturn(true, false, true, false, false).when(iLits0).isUnassigned(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iVecInt0).delete(anyInt());
      doReturn(820, 0, 0, 0, 0).when(iVecInt0).get(anyInt());
      doReturn(820, 490, 820, 820, 490).when(iVecInt0).size();
      // Undeclared exception!
      AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-29));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((-580), (-580), (-580), (-580), (-580)).when(iLits0).getLevel(anyInt());
      doReturn(true, true, true, true, true).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isUnassigned(anyInt());
      doReturn(vec0, vec0, vec0, vec0, vec0).when(iLits0).undos(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(iVecInt0).get(anyInt());
      doReturn(0, 508, 0, 0, 508).when(iVecInt0).size();
      AtLeast atLeast0 = (AtLeast)AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-52));
      atLeast0.maxUnsatisfied = 508;
      boolean boolean0 = atLeast0.propagate((UnitPropagationListener) null, 1896);
      assertEquals(508, vec0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((IVec) null).when(iLits0).watches(anyInt());
      VecInt vecInt0 = new VecInt(508, 0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 449);
      // Undeclared exception!
      try { 
        atLeast0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 14);
      atLeast0.remove((UnitPropagationListener) null);
      assertEquals(14, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      doReturn(false).when(iLits0).isUnassigned(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(15).when(iVecInt0).delete(anyInt());
      doReturn(15, (-1)).when(iVecInt0).get(anyInt());
      doReturn(38, 38, 0, 0, 15).when(iVecInt0).size();
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, 38);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iLits0).isSatisfied(anyInt());
      doReturn(false).when(iLits0).isUnassigned(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-4)).when(iVecInt0).delete(anyInt());
      doReturn((-4), (-1)).when(iVecInt0).get(anyInt());
      doReturn(38, 38, (-1), (-1), (-4)).when(iVecInt0).size();
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      try { 
        AtLeast.niceParameters((UnitPropagationListener) null, lits0, vecInt0, 11);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, vecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      atLeast0.setActivity(0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 3);
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 5);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 0);
      boolean boolean0 = atLeast0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-363));
      double double0 = atLeast0.getActivity();
      assertEquals((-363), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-646));
      Constr constr0 = atLeast0.toConstraint();
      assertEquals((-646), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        atLeast0.rescaleBy(1.0E-100);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 15);
      atLeast0.forwardActivity(1.0);
      assertEquals(15, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-1983));
      boolean boolean0 = atLeast0.locked();
      assertEquals((-1983), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-1));
      atLeast0.undo(467);
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 20);
      // Undeclared exception!
      try { 
        atLeast0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Constr constr0 = mixedDataStructureDanielWL0.createCardinalityConstraint(vecInt0, (-1));
      boolean boolean0 = constr0.simplify();
      assertFalse(boolean0);
      assertEquals((-1), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-5837));
      // Undeclared exception!
      try { 
        atLeast0.get(478);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 478
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>((SolutionCounter) null, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 0);
      atLeast0.incActivity(0.0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 20);
      boolean boolean0 = atLeast0.learnt();
      assertEquals(20, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 39);
      boolean boolean0 = atLeast0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(39, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iLits0).getLevel(anyInt());
      doReturn(false, false, false, false, false).when(iLits0).isFalsified(anyInt());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      doReturn(false).when(iLits0).isUnassigned(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).delete(anyInt());
      doReturn(1, 0).when(iVecInt0).get(anyInt());
      doReturn(0, 493, 0, 0, 493).when(iVecInt0).size();
      AtLeast atLeast0 = (AtLeast)AtLeast.atLeastNew((UnitPropagationListener) null, iLits0, iVecInt0, 0);
      atLeast0.toString();
      //  // Unstable assertion: assertEquals(1, vec0.size());
      //  // Unstable assertion: assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
  }
}
