/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:27:12 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4InclusionModel_ESTest extends Minimal4InclusionModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      iSolver0.isSatisfiable();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      int[] intArray0 = minimal4InclusionModel0.modelWithInternalVariables();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, checkMUSSolutionListener0);
      iSolver0.isSatisfiable();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIteratorToSATAdapter0, iVecInt0);
      int[] intArray0 = minimal4InclusionModel0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      VecInt vecInt0 = new VecInt(1785, (-1737));
      minimal4InclusionModel0.addParity(vecInt0, true);
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, iVecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, readOnlyVecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      VecInt vecInt0 = new VecInt(282, (-6727));
      // Undeclared exception!
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      iSolver0.isSatisfiable();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      minimal4InclusionModel0.setKeepSolverHot(true);
      VecInt vecInt0 = new VecInt(1785, (-1737));
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1737
         //
         verifyException("org.sat4j.minisat.orders.RSATPhaseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, (IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GroupClauseSelectorSolver<SingleSolutionDetector> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<SingleSolutionDetector>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, (-523)).when(groupClauseSelectorSolver0).nVars();
      NegationDecorator<GroupClauseSelectorSolver<SingleSolutionDetector>> negationDecorator0 = new NegationDecorator<GroupClauseSelectorSolver<SingleSolutionDetector>>(groupClauseSelectorSolver0);
      negationDecorator0.nVars();
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(negationDecorator0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
      VecInt vecInt0 = new VecInt(1785, (-1737));
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      minimal4InclusionModel0.model();
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      iSolver0.isSatisfiable();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      int[] intArray0 = minimal4InclusionModel0.model();
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
      VecInt vecInt0 = new VecInt(1785, (-1737));
      minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      minimal4InclusionModel0.modelWithInternalVariables();
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      VecInt vecInt0 = new VecInt(1, 1);
      minimal4InclusionModel0.setTimeoutMs((-152L));
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }
}
