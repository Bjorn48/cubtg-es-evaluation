/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:32:18 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ExtendedDimacsArrayReader;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtendedDimacsArrayReader_ESTest extends ExtendedDimacsArrayReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[8];
      extendedDimacsArrayReader0.handleConstr(4, 0, intArray0);
      assertEquals(9, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(6, (-149), intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[0];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(2, 6, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsOutputSolver0);
      int[] intArray0 = new int[8];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(8, 8, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (-2550);
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = 13;
      intArray0[5] = 15;
      intArray0[6] = 6;
      extendedDimacsArrayReader0.handleConstr(6, 6, intArray0);
      assertEquals(6, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[0];
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      extendedDimacsArrayReader0.handleConstr(1, 8, intArray0);
      try { 
        extendedDimacsArrayReader0.handleConstr(2, 8, intArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[9];
      intArray0[0] = 14;
      intArray0[1] = 11;
      intArray0[2] = 13;
      intArray0[3] = 12;
      intArray0[4] = 10;
      intArray0[5] = 13;
      intArray0[6] = 15;
      intArray0[7] = 10;
      intArray0[8] = 601;
      // Undeclared exception!
      extendedDimacsArrayReader0.handleConstr(11, (-2103), intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[0];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, true);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, 12, solutionFoundListener0);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(8, 11, intArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(12, 9, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(3, Integer.MIN_VALUE, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(12, 8, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[3];
      extendedDimacsArrayReader0.handleConstr(12, 7, intArray0);
      assertEquals(6, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(3, (-1622), intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[1];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(3, 11, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(2, 6, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(1, 1, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr((-1424), 2, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type -1424 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(12, 12, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[0];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(11, 274, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(10, 8, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 10 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(9, 9, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 9 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(7, 4, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 7 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(5, 2, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 5 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(dimacsStringSolver0);
      int[] intArray0 = new int[0];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(1, 2, intArray0);
      assertTrue(boolean0);
  }
}
