/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 16:25:04 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.KernelType;
import jigl.image.types.MagnitudeImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)89, 742);
      binaryImage0.max();
      binaryImage0.Y();
      // Undeclared exception!
      binaryImage0.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      BinaryImage binaryImage2 = new BinaryImage(2, 0);
      BinaryImage binaryImage3 = binaryImage2.shift(2, (-1));
      binaryImage3.min();
      binaryImage1.X();
      binaryImage2.min();
      binaryImage2.count();
      BinaryImage binaryImage4 = null;
      try {
        binaryImage4 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-3);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-3);
      byteArray3[1] = (byte) (-3);
      byteArray3[2] = (byte) (-3);
      byteArray3[3] = (byte) (-3);
      byteArray3[4] = (byte)75;
      byteArray0[2] = byteArray3;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)0;
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage(1, 282, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 282
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      BinaryImage binaryImage0 = new BinaryImage(grayImage1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-3168);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1247, (-3168), byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)78;
      ROI rOI0 = new ROI();
      BinaryImage binaryImage0 = new BinaryImage(744, (byte)78);
      binaryImage0.copy(rOI0);
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      int int0 = 0;
      int int1 = 1472;
      BinaryImage binaryImage1 = binaryImage0.shift(0, 1472);
      Byte byte0 = new Byte((byte) (-22));
      Byte.compare((byte)118, (byte)118);
      Byte byte1 = new Byte((byte) (-22));
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage1.set((-1), (-157), byte1, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      BinaryImage binaryImage0 = new BinaryImage((byte)0, (byte)1);
      binaryImage0.toString();
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      binaryImage0.shift((byte)0, 255);
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-709), (-709));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2849, 2);
      Byte byte0 = new Byte((byte)3);
      // Undeclared exception!
      try { 
        binaryImage0.set((-1192), 2849, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2849
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      int int0 = 290;
      BinaryImage binaryImage1 = new BinaryImage(290, 290);
      // Undeclared exception!
      binaryImage1.shift(290, 290);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      int int0 = 290;
      BinaryImage binaryImage1 = new BinaryImage(290, 308);
      int int1 = 12;
      // Undeclared exception!
      binaryImage1.shift(int0, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.set(979, 979, (Byte) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getData();
      binaryImage0.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      BinaryImage binaryImage0 = new BinaryImage(realGrayImage0);
      int int0 = 0;
      byte byte0 = (byte)57;
      Byte byte1 = Byte.valueOf((byte)57);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 0, byte1, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-67);
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      int int0 = 366;
      try { 
        Byte.valueOf((String) null, (int) (byte)0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2849, 2);
      binaryImage0.X();
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1498, 1498);
      binaryImage0.X();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-115);
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(0, (-336), byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getData();
      binaryImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte) (-68));
      // Undeclared exception!
      try { 
        binaryImage0.set(1315, 1315, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2849, 2);
      binaryImage0.count();
      // Undeclared exception!
      try { 
        binaryImage0.intersection((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
      byte[][] byteArray0 = new byte[0][1];
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      binaryImage1.intersection((BinaryImage) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      byte[][] byteArray0 = new byte[3][2];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-112);
      byte byte0 = (byte)6;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)52;
      byteArray1[5] = (byte) (-45);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-112);
      byteArray2[1] = (byte) (-112);
      byteArray2[2] = (byte)6;
      byteArray2[3] = (byte) (-76);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)52;
      byteArray3[1] = (byte) (-45);
      byteArray0[2] = byteArray3;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(652, 541);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      ROI rOI0 = new ROI();
      rOI0.setROI(541, 541, (-920), (-529));
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -529
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2849, 2);
      binaryImage0.X();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.getJavaImage();
      int int0 = 1;
      int int1 = 1;
      binaryImage1.get(int0, int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte) (-2));
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.set((-40), 1389, byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.difference((BinaryImage) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.toString();
      binaryImage0.count();
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      BinaryImage binaryImage0 = new BinaryImage(3456, 2001);
      ROI rOI0 = new ROI((-2134), 295, 295, 693);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      int int0 = 2793;
      int int1 = 12;
      ROI rOI0 = new ROI(2793, 2793, 12, (-1578));
      // Undeclared exception!
      try { 
        imageKernel0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1578
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)89, (byte)89);
      binaryImage0.max();
      binaryImage0.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((byte) (-116), (byte) (-46), byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(4, 2804);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte byte0 = (byte)11;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)11;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte)8, (byte)8, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.toString();
      binaryImage0.count();
      binaryImage0.getData();
      Byte byte0 = new Byte((byte) (-1));
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 0, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2849, 2);
      binaryImage0.min();
      binaryImage0.X();
      binaryImage0.min();
      binaryImage0.count();
      binaryImage0.max();
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.union(binaryImage1);
      BinaryImage binaryImage2 = binaryImage0.compliment();
      int int0 = 1578;
      // Undeclared exception!
      try { 
        binaryImage2.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-30);
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)114;
      BinaryImage binaryImage0 = new BinaryImage((byte)0, (byte)0);
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 2849;
      BinaryImage binaryImage0 = new BinaryImage(2849, 2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2849, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2, binaryImage0.Y());
      assertEquals(2849, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(5698, binaryImage1.count());
      assertEquals(2, binaryImage1.Y());
      assertEquals(2849, binaryImage1.X());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(4, 2799);
      assertEquals(2799, grayImage0.Y());
      assertEquals(4, grayImage0.X());
      assertNotNull(grayImage0);
      
      BinaryImage binaryImage0 = new BinaryImage(2799, 4);
      assertEquals(2799, binaryImage0.X());
      assertEquals(4, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[][] byteArray0 = new byte[9][9];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte)87;
      byteArray1[3] = (byte)22;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)2;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[4];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)22;
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte)87;
      byteArray2[3] = (byte) (-9);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[2];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)112;
      byteArray3[1] = (byte) (-1);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[9];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      
      byteArray4[0] = (byte) (-9);
      byteArray4[1] = (byte)87;
      byteArray4[2] = (byte)5;
      byteArray4[3] = (byte) (-1);
      byteArray4[4] = (byte)112;
      byteArray4[5] = (byte)118;
      byteArray4[6] = (byte)87;
      byteArray4[7] = (byte) (-9);
      byteArray4[8] = (byte)2;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[2];
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      
      byteArray5[0] = (byte)2;
      byteArray5[1] = (byte)0;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray4));
      
      byteArray6[0] = (byte)112;
      byteArray6[1] = (byte) (-1);
      byteArray6[2] = (byte)112;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[6];
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray1));
      assertFalse(byteArray7.equals((Object)byteArray2));
      
      byteArray7[0] = (byte)0;
      byteArray7[1] = (byte)112;
      byteArray7[2] = (byte)87;
      byteArray7[3] = (byte)87;
      byteArray7[4] = (byte)112;
      byteArray7[5] = (byte)0;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[5];
      assertFalse(byteArray8.equals((Object)byteArray1));
      assertFalse(byteArray8.equals((Object)byteArray2));
      assertFalse(byteArray8.equals((Object)byteArray7));
      assertFalse(byteArray8.equals((Object)byteArray3));
      assertFalse(byteArray8.equals((Object)byteArray5));
      assertFalse(byteArray8.equals((Object)byteArray6));
      assertFalse(byteArray8.equals((Object)byteArray4));
      
      byteArray8[0] = (byte) (-1);
      byteArray8[1] = (byte) (-9);
      byteArray8[2] = (byte) (-1);
      byteArray8[3] = (byte)2;
      byteArray8[4] = (byte) (-48);
      byteArray0[7] = byteArray8;
      byte[] byteArray9 = new byte[7];
      assertFalse(byteArray9.equals((Object)byteArray2));
      assertFalse(byteArray9.equals((Object)byteArray4));
      assertFalse(byteArray9.equals((Object)byteArray7));
      assertFalse(byteArray9.equals((Object)byteArray6));
      assertFalse(byteArray9.equals((Object)byteArray3));
      assertFalse(byteArray9.equals((Object)byteArray5));
      assertFalse(byteArray9.equals((Object)byteArray1));
      assertFalse(byteArray9.equals((Object)byteArray8));
      
      byteArray9[0] = (byte)118;
      byteArray9[1] = (byte) (-48);
      byteArray9[2] = (byte)22;
      byteArray9[3] = (byte)112;
      byteArray9[4] = (byte)87;
      byteArray9[5] = (byte)22;
      byteArray9[6] = (byte)2;
      byteArray0[8] = byteArray9;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(3674, 16);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.Y());
      assertEquals(3674, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.Y());
      assertEquals(3674, binaryImage0.X());
      assertEquals(16, binaryImage1.Y());
      assertEquals(3674, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      binaryImage1.union(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage((byte)0, 727);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(727, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      Byte byte0 = binaryImage0.max();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(727, binaryImage0.Y());
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(727, binaryImage0.Y());
      assertNotNull(imageProducer0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(727, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(727, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      try { 
        binaryImage0.get(312, 727);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertNotNull(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      String string0 = binaryImage0.toString();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(string0);
      
      int int0 = binaryImage0.count();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, int0);
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.shift(0, (-3374));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(imageProducer0);
      
      BinaryImage binaryImage3 = binaryImage0.compliment();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      assertNotNull(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[][] byteArray0 = new byte[4][1];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)8;
      byte byte0 = (byte) (-30);
      byteArray1[5] = (byte) (-30);
      byteArray1[6] = (byte) (-116);
      byteArray1[7] = (byte)16;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-116);
      byteArray2[1] = (byte)16;
      byteArray2[2] = (byte)8;
      byteArray2[3] = (byte)8;
      byteArray2[4] = (byte) (-54);
      byteArray2[5] = (byte)84;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)68;
      byteArray3[1] = (byte)16;
      byteArray3[2] = (byte) (-54);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray4[0] = (byte) (-30);
      byteArray4[1] = (byte) (-1);
      byteArray4[2] = (byte)84;
      byteArray4[3] = (byte)68;
      byteArray4[4] = (byte)68;
      byteArray4[5] = (byte) (-1);
      byteArray4[6] = (byte) (-1);
      byteArray0[3] = byteArray4;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(3684, 16);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.Y());
      assertEquals(3684, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-87), (byte)78, (byte)0, (byte)8, (byte) (-49), (byte) (-46), (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(9, byteArray0.length);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-87), (byte)78, (byte)0, (byte)8, (byte) (-49), (byte) (-46), (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(binaryImage1);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, magnitudeImage0.sqrSum(), 0.01);
      assertEquals(0.0F, magnitudeImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), magnitudeImage0.max(), 0.01F);
      assertEquals(32767.0F, magnitudeImage0.min(), 0.01F);
      assertEquals(0, magnitudeImage0.Y());
      assertEquals(0.0F, magnitudeImage0.absSum(), 0.01F);
      assertEquals(0, magnitudeImage0.X());
      assertNotNull(magnitudeImage0);
      
      BinaryImage binaryImage0 = new BinaryImage(magnitudeImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, magnitudeImage0.sqrSum(), 0.01);
      assertEquals(0.0F, magnitudeImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), magnitudeImage0.max(), 0.01F);
      assertEquals(32767.0F, magnitudeImage0.min(), 0.01F);
      assertEquals(0, magnitudeImage0.Y());
      assertEquals(0.0F, magnitudeImage0.absSum(), 0.01F);
      assertEquals(0, magnitudeImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      Byte byte0 = binaryImage0.max();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, magnitudeImage0.sqrSum(), 0.01);
      assertEquals(0.0F, magnitudeImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), magnitudeImage0.max(), 0.01F);
      assertEquals(32767.0F, magnitudeImage0.min(), 0.01F);
      assertEquals(0, magnitudeImage0.Y());
      assertEquals(0.0F, magnitudeImage0.absSum(), 0.01F);
      assertEquals(0, magnitudeImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(3674, 16);
      assertEquals(3674, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage1.union(binaryImage0);
      assertEquals(3674, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotNull(binaryImage2);
      
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      assertEquals(0, byteArray0.length);
      
      byte byte0 = (byte)126;
      Byte byte1 = new Byte((byte)126);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)126, (byte)byte1);
      
      byte byte2 = (byte) (-15);
      int int0 = Byte.toUnsignedInt((byte) (-15));
      assertEquals(241, int0);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(3674, 16);
      assertEquals(16, binaryImage0.Y());
      assertEquals(3674, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(3674, 3674);
      assertEquals(3674, binaryImage1.X());
      assertEquals(3674, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      Image image0 = binaryImage1.copy();
      assertEquals(3674, binaryImage1.X());
      assertEquals(3674, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3674, image0.Y());
      assertEquals(3674, image0.X());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotNull(image0);
      
      // Undeclared exception!
      binaryImage1.union(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(570, 575, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2849, 2);
      assertEquals(2849, binaryImage0.X());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.count();
      assertEquals(2849, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, int0);
      
      BinaryImage binaryImage1 = binaryImage0.intersection(binaryImage0);
      assertEquals(2849, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(2, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2849, binaryImage1.X());
      assertEquals(2, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
  }
}
