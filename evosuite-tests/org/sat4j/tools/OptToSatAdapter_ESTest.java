/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:41:03 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptToSatAdapter_ESTest extends OptToSatAdapter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(singleSolutionDetector0).modelWithInternalVariables();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.setKeepSolverHot(true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-5));
      iVecInt0.moveTo2(vecInt0);
      vecInt0.iterator();
      vecInt0.push((-5));
      IVecInt iVecInt1 = vecInt0.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt0);
      optToSatAdapter0.findModel();
      optToSatAdapter0.isSatisfiable(iVecInt1);
      optToSatAdapter0.modelWithInternalVariables();
      optToSatAdapter0.isOptimal();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 665;
      intArray0[3] = (-417);
      intArray0[4] = 0;
      intArray0[5] = 2018;
      intArray0[6] = 0;
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IVecInt) null).when(singleSolutionDetector0).createBlockingClauseForCurrentModel();
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, true, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(singleSolutionDetector0).isVerbose();
      doReturn((Object) intArray0, (Object) null, (Object) null).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nVars();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.iterator();
      IVecInt iVecInt1 = vecInt0.push(0);
      iVecInt1.last();
      vecInt0.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt0);
      optToSatAdapter0.isSatisfiable(false);
      System.setCurrentTimeMillis(0);
      optToSatAdapter0.modelWithInternalVariables();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.toString("Issue when assigning simplifier: disabling simplification");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, false);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      lexicoDecorator0.clearDecorated();
      VecInt vecInt0 = new VecInt(37);
      VecInt vecInt1 = new VecInt(37);
      IVecInt iVecInt0 = vecInt0.pop();
      maxSatDecorator0.getPrevfullmodel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(37);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(maxSatDecorator0).discardCurrentModel();
      doReturn((String) null).when(maxSatDecorator0).getLogPrefix();
      doReturn(0L).when(maxSatDecorator0).getTimeoutMs();
      doReturn(0).when(maxSatDecorator0).nVars();
      doReturn((int[]) null).when(maxSatDecorator0).primeImplicant();
      doReturn((String) null).when(maxSatDecorator0).toString(anyString());
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      lexicoDecorator0.primeImplicant();
      lexicoDecorator0.getTimeoutMs();
      lexicoDecorator0.discardCurrentModel();
      IVec<IVecInt> iVec0 = (IVec<IVecInt>) mock(IVec.class, new ViolatedAssumptionAnswer());
      lexicoDecorator0.addAllClauses(iVec0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      lexicoDecorator0.nVars();
      optToSatAdapter0.toString("Current objective function value: ");
      lexicoDecorator0.getLogPrefix();
      // Undeclared exception!
      try { 
        optToSatAdapter0.model(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      GateTranslator gateTranslator0 = new GateTranslator(singleSolutionDetector0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, false);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.isSatisfiable(false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, arminRestarts0);
      SolverStats solverStats0 = solver0.getStats();
      Map<String, Number> map0 = solverStats0.toMap();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(map0).when(singleSolutionDetector0).getStat();
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incRootSimplifications();
      solverStats0.incDecisions();
      solverStats0.incConflicts();
      solverStats0.toMap();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1792;
      intArray0[4] = 47;
      intArray0[5] = 0;
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IVecInt) null).when(singleSolutionDetector0).createBlockingClauseForCurrentModel();
      doReturn(true, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(singleSolutionDetector0).isVerbose();
      doReturn(false).when(singleSolutionDetector0).model(anyInt());
      doReturn((Object) intArray0, (Object) null).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(47, 605, 1, 50, 0).when(singleSolutionDetector0).nVars();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      maxSatDecorator0.getObjectiveValue();
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-1024));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      optToSatAdapter0.model();
      optToSatAdapter0.findModel();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null, false);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.modelWithInternalVariables();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      // Undeclared exception!
      try { 
        eMARestarts0.shouldRestart();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.restarts.EMARestarts", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incRootSimplifications();
      solverStats0.incDecisions();
      solverStats0.incConflicts();
      solverStats0.toMap();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((int[]) null).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(0, 0, 0, 0).when(singleSolutionDetector0).nVars();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      maxSatDecorator0.setTimeoutMs((-1L));
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, checkMUSSolutionListener0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(maxSatDecorator0);
      fullClauseSelectorSolver0.toString();
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable(iVecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.sort();
      iVecInt0.size();
      vecInt0.moveTo(0, 0);
      int[] intArray0 = new int[0];
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Constr constr0 = mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint(vecInt0, (-2778));
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(constr0, constr0, constr0, constr0, constr0).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(iVecInt0, readOnlyVecInt0, vecInt0, iVecInt0, vecInt0).when(singleSolutionDetector0).createBlockingClauseForCurrentModel();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(singleSolutionDetector0).getLogPrefix();
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, true, true, true, true).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(true, true, true, false, true).when(singleSolutionDetector0).isVerbose();
      doReturn(false).when(singleSolutionDetector0).model(anyInt());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(0, 0, 1, 1, 0).when(singleSolutionDetector0).nVars();
      doReturn(false, false, false, false, false).when(singleSolutionDetector0).removeSubsumedConstr(any(org.sat4j.specs.IConstr.class));
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt1 = vecInt1.push(0);
      vecInt1.iterator();
      vecInt1.last();
      vecInt1.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt1);
      boolean boolean0 = false;
      // Undeclared exception!
      optToSatAdapter0.isSatisfiable(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, false);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, false);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      lexicoDecorator0.clearDecorated();
      boolean boolean0 = false;
      VecInt vecInt0 = new VecInt(37);
      IVecInt iVecInt0 = vecInt0.push((-566));
      iVecInt0.last();
      IVecInt iVecInt1 = vecInt0.pop();
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel(iVecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incRootSimplifications();
      solverStats0.incDecisions();
      solverStats0.incConflicts();
      solverStats0.toMap();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 1;
      intArray0[4] = 47;
      intArray0[5] = 0;
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      maxSatDecorator0.getObjectiveValue();
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-1024));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      optToSatAdapter0.model();
      optToSatAdapter0.findModel();
      boolean boolean0 = optToSatAdapter0.isSatisfiable();
      assertTrue(maxSatDecorator0.isSolutionOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>((MaxSatDecorator) null);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      optToSatAdapter0.isOptimal();
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(16);
      dimacsStringSolver0.setDBSimplificationAllowed(false);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.sort();
      iVecInt0.size();
      vecInt0.moveTo(0, 0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0, iVecInt0);
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(modelIterator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      OptToSatAdapter optToSatAdapter1 = new OptToSatAdapter(minOneDecorator0);
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LearningStrategy<MixedDataStructureDanielWLConciseBinary> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielWLConciseBinary>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(1.0E20, 1.0E20, 1.0E20, 2607);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(aSolverFactory0, stringArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, true);
      maxSatDecorator0.getObjectiveValue();
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams1 = new SearchParams(1);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, solutionFoundListener0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        optToSatAdapter0.isSatisfiable(iVecInt0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, false);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      int[] intArray0 = optToSatAdapter0.modelWithInternalVariables();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.sort();
      iVecInt0.size();
      vecInt0.moveTo(0, 0);
      int[] intArray0 = new int[0];
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt1 = vecInt1.push(0);
      vecInt1.iterator();
      vecInt1.last();
      vecInt1.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt1);
      boolean boolean0 = false;
      optToSatAdapter0.isSatisfiable(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.model(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.setKeepSolverHot(true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-5));
      iVecInt0.moveTo2(vecInt0);
      vecInt0.iterator();
      vecInt0.push((-5));
      IVecInt iVecInt1 = vecInt0.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt0);
      optToSatAdapter0.findModel();
      boolean boolean0 = optToSatAdapter0.isSatisfiable(iVecInt1);
      assertTrue(optToSatAdapter0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incRootSimplifications();
      solverStats0.incDecisions();
      solverStats0.incConflicts();
      solverStats0.toMap();
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1792;
      intArray0[4] = 47;
      intArray0[5] = 0;
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IVecInt) null).when(singleSolutionDetector0).createBlockingClauseForCurrentModel();
      doReturn(true, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(singleSolutionDetector0).isVerbose();
      doReturn(false).when(singleSolutionDetector0).model(anyInt());
      doReturn((Object) intArray0, (Object) null).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(47, 605, 1, 50, 0).when(singleSolutionDetector0).nVars();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      maxSatDecorator0.getObjectiveValue();
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-1024));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      optToSatAdapter0.model();
      optToSatAdapter0.findModel();
      assertTrue(maxSatDecorator0.isOptimal());
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(3289);
      boolean boolean0 = false;
      dimacsStringSolver0.setDBSimplificationAllowed(false);
      dimacsStringSolver0.toString("g@[@ZPe6NneD)@JF");
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.sort();
      iVecInt0.size();
      vecInt0.moveTo(0, 0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0, iVecInt0);
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(modelIterator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      optToSatAdapter0.toString("");
      try { 
        optToSatAdapter0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(optToSatAdapter0, false);
      VecInt vecInt0 = new VecInt(37);
      VecInt vecInt1 = new VecInt(37);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        optToSatAdapter0.findModel(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, (SolutionFoundListener) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 781;
      intArray0[1] = (-1212);
      intArray0[2] = 2863;
      intArray0[3] = 113;
      intArray0[4] = 1952;
      intArray0[5] = 1;
      intArray0[6] = 30;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.contains(1);
      vecInt0.remove(0);
      IVecInt iVecInt0 = vecInt0.pop();
      iVecInt0.isEmpty();
      vecInt0.last();
      vecInt0.isEmpty();
      vecInt0.size();
      iVecInt0.copyTo((IVecInt) vecInt0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable(iVecInt0, false);
      assertTrue(optToSatAdapter0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isOptimal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.OptToSatAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      maxSatDecorator0.setTimeoutMs((-1L));
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, checkMUSSolutionListener0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable(true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-5));
      iVecInt0.moveTo2(vecInt0);
      vecInt0.iterator();
      vecInt0.push((-5));
      vecInt0.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt0);
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.iterator();
      IVecInt iVecInt1 = vecInt0.push(0);
      iVecInt1.last();
      vecInt0.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt0);
      boolean boolean0 = optToSatAdapter0.isSatisfiable(false);
      assertTrue(optToSatAdapter0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GateTranslator gateTranslator0 = new GateTranslator((ISolver) null);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(gateTranslator0, false);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1695);
      intArray0[1] = (-2968);
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map<String, Number>) null).when(singleSolutionDetector0).getStat();
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      maxSatDecorator0.setTimeoutMs((-1L));
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.isSatisfiable(true);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.sort();
      iVecInt0.size();
      vecInt0.moveTo(0, 0);
      int[] intArray0 = new int[0];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      statisticsSolver0.addClause(iVecInt0);
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(iVecInt0).when(singleSolutionDetector0).createBlockingClauseForCurrentModel();
      doReturn((String) null).when(singleSolutionDetector0).getLogPrefix();
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, true, true).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(true).when(singleSolutionDetector0).isVerbose();
      doReturn((Object) intArray0, (Object) intArray0).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(0, 0, (-1848)).when(singleSolutionDetector0).nVars();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt1 = vecInt1.push(0);
      vecInt1.iterator();
      vecInt1.last();
      vecInt1.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt1);
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable(false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.AbstractSelectorVariablesDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, solutionFoundListener0);
      optToSatAdapter0.decorated();
      AbstractMinimalModel abstractMinimalModel0 = null;
      try {
        abstractMinimalModel0 = new AbstractMinimalModel((ISolver) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, (SolutionFoundListener) null);
      int[] intArray0 = new int[8];
      intArray0[0] = 781;
      intArray0[1] = (-1212);
      intArray0[2] = 2863;
      intArray0[3] = 113;
      intArray0[4] = 1952;
      intArray0[5] = 1;
      intArray0[6] = 30;
      intArray0[7] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.contains(1);
      vecInt0.remove(0);
      IVecInt iVecInt0 = vecInt0.pop();
      optToSatAdapter0.isSatisfiable(true);
      optToSatAdapter0.isSatisfiable(iVecInt0, true);
      optToSatAdapter0.findModel();
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 665;
      intArray0[3] = (-417);
      intArray0[4] = 0;
      intArray0[5] = 2018;
      intArray0[6] = 0;
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IVecInt) null).when(singleSolutionDetector0).createBlockingClauseForCurrentModel();
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, true, false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(singleSolutionDetector0).isVerbose();
      doReturn((Object) intArray0, (Object) null).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nVars();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      SingleSolutionDetector singleSolutionDetector1 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector1, true);
      SingleSolutionDetector singleSolutionDetector2 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector2).getStat();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver2 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector2, true);
      fullClauseSelectorSolver2.getStat();
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(fullClauseSelectorSolver2);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel();
      VecInt vecInt0 = new VecInt();
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.findModel();
      assertTrue(maxSatDecorator0.isSolutionOptimal());
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map<String, Number>) null).when(singleSolutionDetector0).getStat();
      doReturn(false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      maxSatDecorator0.setTimeoutMs((-1L));
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, checkMUSSolutionListener0);
      optToSatAdapter0.isSatisfiable(true);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 665;
      intArray0[4] = 0;
      intArray0[2] = 2018;
      intArray0[6] = 0;
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IVecInt) null).when(singleSolutionDetector0).createBlockingClauseForCurrentModel();
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, true, false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false).when(singleSolutionDetector0).isVerbose();
      doReturn((Object) intArray0, (Object) null).when(singleSolutionDetector0).modelWithInternalVariables();
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nVars();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      SingleSolutionDetector singleSolutionDetector1 = new SingleSolutionDetector(fullClauseSelectorSolver0);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector1, true);
      SingleSolutionDetector singleSolutionDetector2 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map<String, Number>) null).when(singleSolutionDetector2).getStat();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver2 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector2, true);
      fullClauseSelectorSolver2.getStat();
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(fullClauseSelectorSolver2);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel();
      VecInt vecInt0 = new VecInt();
      optToSatAdapter0.findModel((IVecInt) vecInt0);
      optToSatAdapter0.findModel();
      assertTrue(maxSatDecorator0.isSolutionOptimal());
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 102;
      intArray0[2] = 1;
      intArray0[3] = (-2676);
      intArray0[4] = (-598);
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(singleSolutionDetector0).getStat();
      doReturn(false, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(intArray0).when(singleSolutionDetector0).modelWithInternalVariables();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      fullClauseSelectorSolver0.getStat();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver0);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      vecInt0.iterator();
      IVecInt iVecInt1 = vecInt0.push(0);
      iVecInt1.last();
      vecInt0.pop();
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.findModel(iVecInt0);
      optToSatAdapter0.isSatisfiable(false);
      optToSatAdapter0.modelWithInternalVariables();
      assertTrue(maxSatDecorator0.isSolutionOptimal());
      assertTrue(optToSatAdapter0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LearningStrategy<MixedDataStructureDanielWLConciseBinary> learningStrategy0 = (LearningStrategy<MixedDataStructureDanielWLConciseBinary>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(1.0E20, 1.0E20, 1.0E20, 2607);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(aSolverFactory0, stringArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, true);
      maxSatDecorator0.getObjectiveValue();
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      try { 
        optToSatAdapter0.isSatisfiable(false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "2uOlb)56)n*m";
      String string0 = "";
      stringArray0[1] = "";
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[3];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null).when(minOneDecorator0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IVecInt) null).when(minOneDecorator0).createBlockingClauseForCurrentModel();
      doReturn(false, false).when(minOneDecorator0).isSatisfiable();
      doReturn(0, 0, 0, 0, 0).when(minOneDecorator0).nConstraints();
      doReturn(0, 0).when(minOneDecorator0).nVars();
      doReturn((String) null, (String) null, (String) null).when(minOneDecorator0).toString(anyString());
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(false, stringArray0, minOneDecoratorArray0);
      manyCore0.nConstraints();
      manyCore0.nConstraints();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(manyCore0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(manyCore0, iVecInt0, (SolutionFoundListener) null);
      abstractMinimalModel0.nConstraints();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(abstractMinimalModel0, (SolutionFoundListener) null);
      modelIteratorToSATAdapter0.nConstraints();
      minOneDecorator0.isSatisfiable();
      minOneDecorator0.isSatisfiable();
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(modelIteratorToSATAdapter0);
      modelIteratorToSATAdapter0.nConstraints();
      minOneDecorator1.createBlockingClauseForCurrentModel();
      minOneDecorator1.addExactly((IVecInt) null, 30);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator1);
      optToSatAdapter0.toString("");
      optToSatAdapter0.model();
      // Undeclared exception!
      try { 
        optToSatAdapter0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
