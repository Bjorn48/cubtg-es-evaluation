/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:29:46 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.xplain.InsertionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InsertionStrategy_ESTest extends InsertionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt((byte)12, (byte)12);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((byte)63);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      int[] intArray0 = new int[1];
      vecInt0.shrink((byte)63);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(lexicoDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(1000, 1000);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      OptToSatAdapter optToSatAdapter1 = new OptToSatAdapter(lexicoDecorator0, checkMUSSolutionListener0);
      vecInt0.sortUnique();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      insertionStrategy0.explain(optToSatAdapter1, hashMap0, readOnlyVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(1000, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(1012, 1012);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      VecInt vecInt1 = new VecInt();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      Integer integer0 = new Integer(1012);
      hashMap0.put(integer0, insertionStrategy0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(991, 991);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn("Replay (Insertion-based) minimization strategy").when(optToSatAdapter0).getLogPrefix();
      doReturn(true).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      vecInt0.pushAll(vecInt0);
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      VecInt vecInt0 = new VecInt(0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(statisticsSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      HashMap<Integer, ClausalDataStructureWL> hashMap0 = new HashMap<Integer, ClausalDataStructureWL>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(iSolver0, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(lexicoDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      ASolverFactory<OptToSatAdapter> aSolverFactory0 = (ASolverFactory<OptToSatAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(aSolverFactory0, stringArray0);
      ModelIterator modelIterator0 = new ModelIterator(manyCore0);
      HashMap<Integer, OptToSatAdapter> hashMap0 = new HashMap<Integer, OptToSatAdapter>();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(modelIterator0, hashMap0, iVecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(993, 993);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true).when(optToSatAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(lexicoDecorator0);
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(minOneDecorator0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(1028, 1028);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(optToSatAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("Replay (Insertion-based) minimization strategy").when(optToSatAdapter0).getLogPrefix();
      doReturn(true).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(990, 990);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, true, false).when(optToSatAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false, false).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0, vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      IVecInt iVecInt0 = insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(lexicoDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt((byte)6, (byte)6);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn("Replay (Insertion-based) minimization strategy").when(optToSatAdapter0).getLogPrefix();
      doReturn(true).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((byte)63);
      int[] intArray0 = new int[1];
      vecInt0.push((-1697));
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      SearchParams searchParams0 = new SearchParams((-1697));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(lexicoDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(1000, 1000);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(optToSatAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("Replay (Insertion-based) minimization strategy").when(optToSatAdapter0).getLogPrefix();
      doReturn(true, false).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      insertionStrategy0.toString();
      insertionStrategy0.cancelExplanationComputation();
      VecInt vecInt0 = new VecInt(1000, 1000);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(optToSatAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("Replay (Insertion-based) minimization strategy").when(optToSatAdapter0).getLogPrefix();
      doReturn(true, false).when(optToSatAdapter0).isVerbose();
      doReturn(vecInt0).when(optToSatAdapter0).unsatExplanation();
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      insertionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertEquals("Replay (Insertion-based) minimization strategy", insertionStrategy0.toString());
  }
}
